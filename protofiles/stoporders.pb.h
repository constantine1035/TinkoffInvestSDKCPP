// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stoporders.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stoporders_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stoporders_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/api/field_behavior.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stoporders_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stoporders_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stoporders_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class CancelStopOrderRequest;
struct CancelStopOrderRequestDefaultTypeInternal;
extern CancelStopOrderRequestDefaultTypeInternal _CancelStopOrderRequest_default_instance_;
class CancelStopOrderResponse;
struct CancelStopOrderResponseDefaultTypeInternal;
extern CancelStopOrderResponseDefaultTypeInternal _CancelStopOrderResponse_default_instance_;
class GetStopOrdersRequest;
struct GetStopOrdersRequestDefaultTypeInternal;
extern GetStopOrdersRequestDefaultTypeInternal _GetStopOrdersRequest_default_instance_;
class GetStopOrdersResponse;
struct GetStopOrdersResponseDefaultTypeInternal;
extern GetStopOrdersResponseDefaultTypeInternal _GetStopOrdersResponse_default_instance_;
class PostStopOrderRequest;
struct PostStopOrderRequestDefaultTypeInternal;
extern PostStopOrderRequestDefaultTypeInternal _PostStopOrderRequest_default_instance_;
class PostStopOrderRequest_TrailingData;
struct PostStopOrderRequest_TrailingDataDefaultTypeInternal;
extern PostStopOrderRequest_TrailingDataDefaultTypeInternal _PostStopOrderRequest_TrailingData_default_instance_;
class PostStopOrderResponse;
struct PostStopOrderResponseDefaultTypeInternal;
extern PostStopOrderResponseDefaultTypeInternal _PostStopOrderResponse_default_instance_;
class StopOrder;
struct StopOrderDefaultTypeInternal;
extern StopOrderDefaultTypeInternal _StopOrder_default_instance_;
class StopOrder_TrailingData;
struct StopOrder_TrailingDataDefaultTypeInternal;
extern StopOrder_TrailingDataDefaultTypeInternal _StopOrder_TrailingData_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::StopOrder* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::StopOrder>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

enum StopOrderDirection : int {
  STOP_ORDER_DIRECTION_UNSPECIFIED = 0,
  STOP_ORDER_DIRECTION_BUY = 1,
  STOP_ORDER_DIRECTION_SELL = 2,
  StopOrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StopOrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StopOrderDirection_IsValid(int value);
constexpr StopOrderDirection StopOrderDirection_MIN = STOP_ORDER_DIRECTION_UNSPECIFIED;
constexpr StopOrderDirection StopOrderDirection_MAX = STOP_ORDER_DIRECTION_SELL;
constexpr int StopOrderDirection_ARRAYSIZE = StopOrderDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderDirection_descriptor();
template<typename T>
inline const std::string& StopOrderDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopOrderDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopOrderDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopOrderDirection_descriptor(), enum_t_value);
}
inline bool StopOrderDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StopOrderDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopOrderDirection>(
    StopOrderDirection_descriptor(), name, value);
}
enum StopOrderExpirationType : int {
  STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED = 0,
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL = 1,
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE = 2,
  StopOrderExpirationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StopOrderExpirationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StopOrderExpirationType_IsValid(int value);
constexpr StopOrderExpirationType StopOrderExpirationType_MIN = STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED;
constexpr StopOrderExpirationType StopOrderExpirationType_MAX = STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE;
constexpr int StopOrderExpirationType_ARRAYSIZE = StopOrderExpirationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderExpirationType_descriptor();
template<typename T>
inline const std::string& StopOrderExpirationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopOrderExpirationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopOrderExpirationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopOrderExpirationType_descriptor(), enum_t_value);
}
inline bool StopOrderExpirationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StopOrderExpirationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopOrderExpirationType>(
    StopOrderExpirationType_descriptor(), name, value);
}
enum StopOrderType : int {
  STOP_ORDER_TYPE_UNSPECIFIED = 0,
  STOP_ORDER_TYPE_TAKE_PROFIT = 1,
  STOP_ORDER_TYPE_STOP_LOSS = 2,
  STOP_ORDER_TYPE_STOP_LIMIT = 3,
  StopOrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StopOrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StopOrderType_IsValid(int value);
constexpr StopOrderType StopOrderType_MIN = STOP_ORDER_TYPE_UNSPECIFIED;
constexpr StopOrderType StopOrderType_MAX = STOP_ORDER_TYPE_STOP_LIMIT;
constexpr int StopOrderType_ARRAYSIZE = StopOrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderType_descriptor();
template<typename T>
inline const std::string& StopOrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopOrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopOrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopOrderType_descriptor(), enum_t_value);
}
inline bool StopOrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StopOrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopOrderType>(
    StopOrderType_descriptor(), name, value);
}
enum StopOrderStatusOption : int {
  STOP_ORDER_STATUS_UNSPECIFIED = 0,
  STOP_ORDER_STATUS_ALL = 1,
  STOP_ORDER_STATUS_ACTIVE = 2,
  STOP_ORDER_STATUS_EXECUTED = 3,
  STOP_ORDER_STATUS_CANCELED = 4,
  STOP_ORDER_STATUS_EXPIRED = 5,
  StopOrderStatusOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StopOrderStatusOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StopOrderStatusOption_IsValid(int value);
constexpr StopOrderStatusOption StopOrderStatusOption_MIN = STOP_ORDER_STATUS_UNSPECIFIED;
constexpr StopOrderStatusOption StopOrderStatusOption_MAX = STOP_ORDER_STATUS_EXPIRED;
constexpr int StopOrderStatusOption_ARRAYSIZE = StopOrderStatusOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderStatusOption_descriptor();
template<typename T>
inline const std::string& StopOrderStatusOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopOrderStatusOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopOrderStatusOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopOrderStatusOption_descriptor(), enum_t_value);
}
inline bool StopOrderStatusOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StopOrderStatusOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopOrderStatusOption>(
    StopOrderStatusOption_descriptor(), name, value);
}
enum ExchangeOrderType : int {
  EXCHANGE_ORDER_TYPE_UNSPECIFIED = 0,
  EXCHANGE_ORDER_TYPE_MARKET = 1,
  EXCHANGE_ORDER_TYPE_LIMIT = 2,
  ExchangeOrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ExchangeOrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ExchangeOrderType_IsValid(int value);
constexpr ExchangeOrderType ExchangeOrderType_MIN = EXCHANGE_ORDER_TYPE_UNSPECIFIED;
constexpr ExchangeOrderType ExchangeOrderType_MAX = EXCHANGE_ORDER_TYPE_LIMIT;
constexpr int ExchangeOrderType_ARRAYSIZE = ExchangeOrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExchangeOrderType_descriptor();
template<typename T>
inline const std::string& ExchangeOrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExchangeOrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExchangeOrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExchangeOrderType_descriptor(), enum_t_value);
}
inline bool ExchangeOrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExchangeOrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExchangeOrderType>(
    ExchangeOrderType_descriptor(), name, value);
}
enum TakeProfitType : int {
  TAKE_PROFIT_TYPE_UNSPECIFIED = 0,
  TAKE_PROFIT_TYPE_REGULAR = 1,
  TAKE_PROFIT_TYPE_TRAILING = 2,
  TakeProfitType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TakeProfitType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TakeProfitType_IsValid(int value);
constexpr TakeProfitType TakeProfitType_MIN = TAKE_PROFIT_TYPE_UNSPECIFIED;
constexpr TakeProfitType TakeProfitType_MAX = TAKE_PROFIT_TYPE_TRAILING;
constexpr int TakeProfitType_ARRAYSIZE = TakeProfitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TakeProfitType_descriptor();
template<typename T>
inline const std::string& TakeProfitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TakeProfitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TakeProfitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TakeProfitType_descriptor(), enum_t_value);
}
inline bool TakeProfitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TakeProfitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TakeProfitType>(
    TakeProfitType_descriptor(), name, value);
}
enum TrailingValueType : int {
  TRAILING_VALUE_UNSPECIFIED = 0,
  TRAILING_VALUE_ABSOLUTE = 1,
  TRAILING_VALUE_RELATIVE = 2,
  TrailingValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TrailingValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TrailingValueType_IsValid(int value);
constexpr TrailingValueType TrailingValueType_MIN = TRAILING_VALUE_UNSPECIFIED;
constexpr TrailingValueType TrailingValueType_MAX = TRAILING_VALUE_RELATIVE;
constexpr int TrailingValueType_ARRAYSIZE = TrailingValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrailingValueType_descriptor();
template<typename T>
inline const std::string& TrailingValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrailingValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrailingValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrailingValueType_descriptor(), enum_t_value);
}
inline bool TrailingValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrailingValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrailingValueType>(
    TrailingValueType_descriptor(), name, value);
}
enum TrailingStopStatus : int {
  TRAILING_STOP_UNSPECIFIED = 0,
  TRAILING_STOP_ACTIVE = 1,
  TRAILING_STOP_ACTIVATED = 2,
  TrailingStopStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TrailingStopStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TrailingStopStatus_IsValid(int value);
constexpr TrailingStopStatus TrailingStopStatus_MIN = TRAILING_STOP_UNSPECIFIED;
constexpr TrailingStopStatus TrailingStopStatus_MAX = TRAILING_STOP_ACTIVATED;
constexpr int TrailingStopStatus_ARRAYSIZE = TrailingStopStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrailingStopStatus_descriptor();
template<typename T>
inline const std::string& TrailingStopStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrailingStopStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrailingStopStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrailingStopStatus_descriptor(), enum_t_value);
}
inline bool TrailingStopStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrailingStopStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrailingStopStatus>(
    TrailingStopStatus_descriptor(), name, value);
}
// ===================================================================

class PostStopOrderRequest_TrailingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData) */ {
 public:
  inline PostStopOrderRequest_TrailingData() : PostStopOrderRequest_TrailingData(nullptr) {}
  ~PostStopOrderRequest_TrailingData() override;
  explicit PROTOBUF_CONSTEXPR PostStopOrderRequest_TrailingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostStopOrderRequest_TrailingData(const PostStopOrderRequest_TrailingData& from);
  PostStopOrderRequest_TrailingData(PostStopOrderRequest_TrailingData&& from) noexcept
    : PostStopOrderRequest_TrailingData() {
    *this = ::std::move(from);
  }

  inline PostStopOrderRequest_TrailingData& operator=(const PostStopOrderRequest_TrailingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostStopOrderRequest_TrailingData& operator=(PostStopOrderRequest_TrailingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostStopOrderRequest_TrailingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostStopOrderRequest_TrailingData* internal_default_instance() {
    return reinterpret_cast<const PostStopOrderRequest_TrailingData*>(
               &_PostStopOrderRequest_TrailingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PostStopOrderRequest_TrailingData& a, PostStopOrderRequest_TrailingData& b) {
    a.Swap(&b);
  }
  inline void Swap(PostStopOrderRequest_TrailingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostStopOrderRequest_TrailingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostStopOrderRequest_TrailingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostStopOrderRequest_TrailingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostStopOrderRequest_TrailingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostStopOrderRequest_TrailingData& from) {
    PostStopOrderRequest_TrailingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostStopOrderRequest_TrailingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData";
  }
  protected:
  explicit PostStopOrderRequest_TrailingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndentFieldNumber = 1,
    kSpreadFieldNumber = 3,
    kIndentTypeFieldNumber = 2,
    kSpreadTypeFieldNumber = 4,
  };
  // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
  bool has_indent() const;
  private:
  bool _internal_has_indent() const;
  public:
  void clear_indent();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& indent() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_indent();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_indent();
  void set_allocated_indent(::tinkoff::public_::invest::api::contract::v1::Quotation* indent);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_indent() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_indent();
  public:
  void unsafe_arena_set_allocated_indent(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* indent);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_indent();

  // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
  bool has_spread() const;
  private:
  bool _internal_has_spread() const;
  public:
  void clear_spread();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& spread() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_spread();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_spread();
  void set_allocated_spread(::tinkoff::public_::invest::api::contract::v1::Quotation* spread);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_spread() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_spread();
  public:
  void unsafe_arena_set_allocated_spread(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* spread);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_spread();

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
  void clear_indent_type();
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType indent_type() const;
  void set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType _internal_indent_type() const;
  void _internal_set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
  void clear_spread_type();
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType spread_type() const;
  void set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType _internal_spread_type() const;
  void _internal_set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::Quotation* indent_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* spread_;
    int indent_type_;
    int spread_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class PostStopOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest) */ {
 public:
  inline PostStopOrderRequest() : PostStopOrderRequest(nullptr) {}
  ~PostStopOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR PostStopOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostStopOrderRequest(const PostStopOrderRequest& from);
  PostStopOrderRequest(PostStopOrderRequest&& from) noexcept
    : PostStopOrderRequest() {
    *this = ::std::move(from);
  }

  inline PostStopOrderRequest& operator=(const PostStopOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostStopOrderRequest& operator=(PostStopOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostStopOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostStopOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PostStopOrderRequest*>(
               &_PostStopOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PostStopOrderRequest& a, PostStopOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostStopOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostStopOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostStopOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostStopOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostStopOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostStopOrderRequest& from) {
    PostStopOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostStopOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest";
  }
  protected:
  explicit PostStopOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PostStopOrderRequest_TrailingData TrailingData;

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kAccountIdFieldNumber = 6,
    kInstrumentIdFieldNumber = 10,
    kOrderIdFieldNumber = 15,
    kPriceFieldNumber = 3,
    kStopPriceFieldNumber = 4,
    kExpireDateFieldNumber = 9,
    kTrailingDataFieldNumber = 13,
    kQuantityFieldNumber = 2,
    kDirectionFieldNumber = 5,
    kExpirationTypeFieldNumber = 7,
    kStopOrderTypeFieldNumber = 8,
    kExchangeOrderTypeFieldNumber = 11,
    kTakeProfitTypeFieldNumber = 12,
    kPriceTypeFieldNumber = 14,
  };
  // optional string figi = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_figi() const;
  private:
  bool _internal_has_figi() const;
  public:
  PROTOBUF_DEPRECATED void clear_figi();
  PROTOBUF_DEPRECATED const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_figi(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_figi();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_figi();
  PROTOBUF_DEPRECATED void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string account_id = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string instrument_id = 10 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string order_id = 15 [(.google.api.field_behavior) = REQUIRED];
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation stop_price = 4;
  bool has_stop_price() const;
  private:
  bool _internal_has_stop_price() const;
  public:
  void clear_stop_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& stop_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_stop_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_stop_price();
  void set_allocated_stop_price(::tinkoff::public_::invest::api::contract::v1::Quotation* stop_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_stop_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_stop_price();
  public:
  void unsafe_arena_set_allocated_stop_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* stop_price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_stop_price();

  // optional .google.protobuf.Timestamp expire_date = 9;
  bool has_expire_date() const;
  private:
  bool _internal_has_expire_date() const;
  public:
  void clear_expire_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_date();
  void set_allocated_expire_date(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_date();
  public:
  void unsafe_arena_set_allocated_expire_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_date();

  // .tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData trailing_data = 13;
  bool has_trailing_data() const;
  private:
  bool _internal_has_trailing_data() const;
  public:
  void clear_trailing_data();
  const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData& trailing_data() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* release_trailing_data();
  ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* mutable_trailing_data();
  void set_allocated_trailing_data(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* trailing_data);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData& _internal_trailing_data() const;
  ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* _internal_mutable_trailing_data();
  public:
  void unsafe_arena_set_allocated_trailing_data(
      ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* trailing_data);
  ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* unsafe_arena_release_trailing_data();

  // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_direction();
  ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.StopOrderExpirationType expiration_type = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_expiration_type();
  ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType expiration_type() const;
  void set_expiration_type(::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType _internal_expiration_type() const;
  void _internal_set_expiration_type(::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.StopOrderType stop_order_type = 8 [(.google.api.field_behavior) = REQUIRED];
  void clear_stop_order_type();
  ::tinkoff::public_::invest::api::contract::v1::StopOrderType stop_order_type() const;
  void set_stop_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::StopOrderType _internal_stop_order_type() const;
  void _internal_set_stop_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.ExchangeOrderType exchange_order_type = 11;
  void clear_exchange_order_type();
  ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType exchange_order_type() const;
  void set_exchange_order_type(::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType _internal_exchange_order_type() const;
  void _internal_set_exchange_order_type(::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 12;
  void clear_take_profit_type();
  ::tinkoff::public_::invest::api::contract::v1::TakeProfitType take_profit_type() const;
  void set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TakeProfitType _internal_take_profit_type() const;
  void _internal_set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 14;
  void clear_price_type();
  ::tinkoff::public_::invest::api::contract::v1::PriceType price_type() const;
  void set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::PriceType _internal_price_type() const;
  void _internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* stop_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date_;
    ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* trailing_data_;
    int64_t quantity_;
    int direction_;
    int expiration_type_;
    int stop_order_type_;
    int exchange_order_type_;
    int take_profit_type_;
    int price_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class PostStopOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse) */ {
 public:
  inline PostStopOrderResponse() : PostStopOrderResponse(nullptr) {}
  ~PostStopOrderResponse() override;
  explicit PROTOBUF_CONSTEXPR PostStopOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostStopOrderResponse(const PostStopOrderResponse& from);
  PostStopOrderResponse(PostStopOrderResponse&& from) noexcept
    : PostStopOrderResponse() {
    *this = ::std::move(from);
  }

  inline PostStopOrderResponse& operator=(const PostStopOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostStopOrderResponse& operator=(PostStopOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostStopOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostStopOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PostStopOrderResponse*>(
               &_PostStopOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PostStopOrderResponse& a, PostStopOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostStopOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostStopOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostStopOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostStopOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostStopOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostStopOrderResponse& from) {
    PostStopOrderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostStopOrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse";
  }
  protected:
  explicit PostStopOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopOrderIdFieldNumber = 1,
    kOrderRequestIdFieldNumber = 2,
    kResponseMetadataFieldNumber = 254,
  };
  // string stop_order_id = 1;
  void clear_stop_order_id();
  const std::string& stop_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_order_id();
  PROTOBUF_NODISCARD std::string* release_stop_order_id();
  void set_allocated_stop_order_id(std::string* stop_order_id);
  private:
  const std::string& _internal_stop_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_order_id(const std::string& value);
  std::string* _internal_mutable_stop_order_id();
  public:

  // string order_request_id = 2;
  void clear_order_request_id();
  const std::string& order_request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_request_id();
  PROTOBUF_NODISCARD std::string* release_order_request_id();
  void set_allocated_order_request_id(std::string* order_request_id);
  private:
  const std::string& _internal_order_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_request_id(const std::string& value);
  std::string* _internal_mutable_order_request_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  bool has_response_metadata() const;
  private:
  bool _internal_has_response_metadata() const;
  public:
  void clear_response_metadata();
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& response_metadata() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* release_response_metadata();
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* mutable_response_metadata();
  void set_allocated_response_metadata(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& _internal_response_metadata() const;
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* _internal_mutable_response_metadata();
  public:
  void unsafe_arena_set_allocated_response_metadata(
      ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata);
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* unsafe_arena_release_response_metadata();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_request_id_;
    ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class GetStopOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest) */ {
 public:
  inline GetStopOrdersRequest() : GetStopOrdersRequest(nullptr) {}
  ~GetStopOrdersRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStopOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStopOrdersRequest(const GetStopOrdersRequest& from);
  GetStopOrdersRequest(GetStopOrdersRequest&& from) noexcept
    : GetStopOrdersRequest() {
    *this = ::std::move(from);
  }

  inline GetStopOrdersRequest& operator=(const GetStopOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStopOrdersRequest& operator=(GetStopOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStopOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStopOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const GetStopOrdersRequest*>(
               &_GetStopOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStopOrdersRequest& a, GetStopOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStopOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStopOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStopOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStopOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStopOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStopOrdersRequest& from) {
    GetStopOrdersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStopOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest";
  }
  protected:
  explicit GetStopOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kStatusFieldNumber = 2,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .google.protobuf.Timestamp from = 3;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& from() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_from();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from();
  void set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_from();

  // .google.protobuf.Timestamp to = 4;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& to() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_to();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_to();
  void set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_to() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_to();

  // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 2;
  void clear_status();
  ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption status() const;
  void set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption _internal_status() const;
  void _internal_set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class GetStopOrdersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse) */ {
 public:
  inline GetStopOrdersResponse() : GetStopOrdersResponse(nullptr) {}
  ~GetStopOrdersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStopOrdersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStopOrdersResponse(const GetStopOrdersResponse& from);
  GetStopOrdersResponse(GetStopOrdersResponse&& from) noexcept
    : GetStopOrdersResponse() {
    *this = ::std::move(from);
  }

  inline GetStopOrdersResponse& operator=(const GetStopOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStopOrdersResponse& operator=(GetStopOrdersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStopOrdersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStopOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const GetStopOrdersResponse*>(
               &_GetStopOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetStopOrdersResponse& a, GetStopOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStopOrdersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStopOrdersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStopOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStopOrdersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStopOrdersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStopOrdersResponse& from) {
    GetStopOrdersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStopOrdersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse";
  }
  protected:
  explicit GetStopOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopOrdersFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.StopOrder stop_orders = 1;
  int stop_orders_size() const;
  private:
  int _internal_stop_orders_size() const;
  public:
  void clear_stop_orders();
  ::tinkoff::public_::invest::api::contract::v1::StopOrder* mutable_stop_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::StopOrder >*
      mutable_stop_orders();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::StopOrder& _internal_stop_orders(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::StopOrder* _internal_add_stop_orders();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::StopOrder& stop_orders(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::StopOrder* add_stop_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::StopOrder >&
      stop_orders() const;

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::StopOrder > stop_orders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class CancelStopOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest) */ {
 public:
  inline CancelStopOrderRequest() : CancelStopOrderRequest(nullptr) {}
  ~CancelStopOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR CancelStopOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelStopOrderRequest(const CancelStopOrderRequest& from);
  CancelStopOrderRequest(CancelStopOrderRequest&& from) noexcept
    : CancelStopOrderRequest() {
    *this = ::std::move(from);
  }

  inline CancelStopOrderRequest& operator=(const CancelStopOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelStopOrderRequest& operator=(CancelStopOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelStopOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelStopOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CancelStopOrderRequest*>(
               &_CancelStopOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CancelStopOrderRequest& a, CancelStopOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelStopOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelStopOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelStopOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelStopOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelStopOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelStopOrderRequest& from) {
    CancelStopOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelStopOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest";
  }
  protected:
  explicit CancelStopOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kStopOrderIdFieldNumber = 2,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string stop_order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_stop_order_id();
  const std::string& stop_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_order_id();
  PROTOBUF_NODISCARD std::string* release_stop_order_id();
  void set_allocated_stop_order_id(std::string* stop_order_id);
  private:
  const std::string& _internal_stop_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_order_id(const std::string& value);
  std::string* _internal_mutable_stop_order_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class CancelStopOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse) */ {
 public:
  inline CancelStopOrderResponse() : CancelStopOrderResponse(nullptr) {}
  ~CancelStopOrderResponse() override;
  explicit PROTOBUF_CONSTEXPR CancelStopOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelStopOrderResponse(const CancelStopOrderResponse& from);
  CancelStopOrderResponse(CancelStopOrderResponse&& from) noexcept
    : CancelStopOrderResponse() {
    *this = ::std::move(from);
  }

  inline CancelStopOrderResponse& operator=(const CancelStopOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelStopOrderResponse& operator=(CancelStopOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelStopOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelStopOrderResponse* internal_default_instance() {
    return reinterpret_cast<const CancelStopOrderResponse*>(
               &_CancelStopOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CancelStopOrderResponse& a, CancelStopOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelStopOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelStopOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelStopOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelStopOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelStopOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelStopOrderResponse& from) {
    CancelStopOrderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelStopOrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse";
  }
  protected:
  explicit CancelStopOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class StopOrder_TrailingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData) */ {
 public:
  inline StopOrder_TrailingData() : StopOrder_TrailingData(nullptr) {}
  ~StopOrder_TrailingData() override;
  explicit PROTOBUF_CONSTEXPR StopOrder_TrailingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopOrder_TrailingData(const StopOrder_TrailingData& from);
  StopOrder_TrailingData(StopOrder_TrailingData&& from) noexcept
    : StopOrder_TrailingData() {
    *this = ::std::move(from);
  }

  inline StopOrder_TrailingData& operator=(const StopOrder_TrailingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopOrder_TrailingData& operator=(StopOrder_TrailingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopOrder_TrailingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopOrder_TrailingData* internal_default_instance() {
    return reinterpret_cast<const StopOrder_TrailingData*>(
               &_StopOrder_TrailingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StopOrder_TrailingData& a, StopOrder_TrailingData& b) {
    a.Swap(&b);
  }
  inline void Swap(StopOrder_TrailingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopOrder_TrailingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopOrder_TrailingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopOrder_TrailingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopOrder_TrailingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopOrder_TrailingData& from) {
    StopOrder_TrailingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopOrder_TrailingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData";
  }
  protected:
  explicit StopOrder_TrailingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndentFieldNumber = 1,
    kSpreadFieldNumber = 3,
    kPriceFieldNumber = 7,
    kExtrFieldNumber = 8,
    kIndentTypeFieldNumber = 2,
    kSpreadTypeFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
  bool has_indent() const;
  private:
  bool _internal_has_indent() const;
  public:
  void clear_indent();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& indent() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_indent();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_indent();
  void set_allocated_indent(::tinkoff::public_::invest::api::contract::v1::Quotation* indent);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_indent() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_indent();
  public:
  void unsafe_arena_set_allocated_indent(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* indent);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_indent();

  // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
  bool has_spread() const;
  private:
  bool _internal_has_spread() const;
  public:
  void clear_spread();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& spread() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_spread();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_spread();
  void set_allocated_spread(::tinkoff::public_::invest::api::contract::v1::Quotation* spread);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_spread() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_spread();
  public:
  void unsafe_arena_set_allocated_spread(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* spread);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_spread();

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 7;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  // .tinkoff.public_.invest.api.contract.v1.Quotation extr = 8;
  bool has_extr() const;
  private:
  bool _internal_has_extr() const;
  public:
  void clear_extr();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& extr() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_extr();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_extr();
  void set_allocated_extr(::tinkoff::public_::invest::api::contract::v1::Quotation* extr);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_extr() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_extr();
  public:
  void unsafe_arena_set_allocated_extr(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* extr);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_extr();

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
  void clear_indent_type();
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType indent_type() const;
  void set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType _internal_indent_type() const;
  void _internal_set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
  void clear_spread_type();
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType spread_type() const;
  void set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TrailingValueType _internal_spread_type() const;
  void _internal_set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.TrailingStopStatus status = 5;
  void clear_status();
  ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus status() const;
  void set_status(::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus _internal_status() const;
  void _internal_set_status(::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::Quotation* indent_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* spread_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* extr_;
    int indent_type_;
    int spread_type_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// -------------------------------------------------------------------

class StopOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.StopOrder) */ {
 public:
  inline StopOrder() : StopOrder(nullptr) {}
  ~StopOrder() override;
  explicit PROTOBUF_CONSTEXPR StopOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopOrder(const StopOrder& from);
  StopOrder(StopOrder&& from) noexcept
    : StopOrder() {
    *this = ::std::move(from);
  }

  inline StopOrder& operator=(const StopOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopOrder& operator=(StopOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopOrder* internal_default_instance() {
    return reinterpret_cast<const StopOrder*>(
               &_StopOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StopOrder& a, StopOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(StopOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopOrder& from) {
    StopOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.StopOrder";
  }
  protected:
  explicit StopOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StopOrder_TrailingData TrailingData;

  // accessors -------------------------------------------------------

  enum : int {
    kStopOrderIdFieldNumber = 1,
    kFigiFieldNumber = 3,
    kCurrencyFieldNumber = 5,
    kInstrumentUidFieldNumber = 12,
    kCreateDateFieldNumber = 7,
    kActivationDateTimeFieldNumber = 8,
    kExpirationTimeFieldNumber = 9,
    kPriceFieldNumber = 10,
    kStopPriceFieldNumber = 11,
    kTrailingDataFieldNumber = 14,
    kLotsRequestedFieldNumber = 2,
    kDirectionFieldNumber = 4,
    kOrderTypeFieldNumber = 6,
    kTakeProfitTypeFieldNumber = 13,
    kStatusFieldNumber = 15,
  };
  // string stop_order_id = 1;
  void clear_stop_order_id();
  const std::string& stop_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_order_id();
  PROTOBUF_NODISCARD std::string* release_stop_order_id();
  void set_allocated_stop_order_id(std::string* stop_order_id);
  private:
  const std::string& _internal_stop_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_order_id(const std::string& value);
  std::string* _internal_mutable_stop_order_id();
  public:

  // string figi = 3;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string currency = 5;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string instrument_uid = 12;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // .google.protobuf.Timestamp create_date = 7;
  bool has_create_date() const;
  private:
  bool _internal_has_create_date() const;
  public:
  void clear_create_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_date();
  void set_allocated_create_date(::PROTOBUF_NAMESPACE_ID::Timestamp* create_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_date();
  public:
  void unsafe_arena_set_allocated_create_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_date();

  // .google.protobuf.Timestamp activation_date_time = 8;
  bool has_activation_date_time() const;
  private:
  bool _internal_has_activation_date_time() const;
  public:
  void clear_activation_date_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& activation_date_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_activation_date_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_activation_date_time();
  void set_allocated_activation_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_activation_date_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_activation_date_time();
  public:
  void unsafe_arena_set_allocated_activation_date_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_activation_date_time();

  // .google.protobuf.Timestamp expiration_time = 9;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_time();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 10;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue stop_price = 11;
  bool has_stop_price() const;
  private:
  bool _internal_has_stop_price() const;
  public:
  void clear_stop_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& stop_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_stop_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_stop_price();
  void set_allocated_stop_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* stop_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_stop_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_stop_price();
  public:
  void unsafe_arena_set_allocated_stop_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* stop_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_stop_price();

  // .tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData trailing_data = 14;
  bool has_trailing_data() const;
  private:
  bool _internal_has_trailing_data() const;
  public:
  void clear_trailing_data();
  const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData& trailing_data() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* release_trailing_data();
  ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* mutable_trailing_data();
  void set_allocated_trailing_data(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* trailing_data);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData& _internal_trailing_data() const;
  ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* _internal_mutable_trailing_data();
  public:
  void unsafe_arena_set_allocated_trailing_data(
      ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* trailing_data);
  ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* unsafe_arena_release_trailing_data();

  // int64 lots_requested = 2;
  void clear_lots_requested();
  int64_t lots_requested() const;
  void set_lots_requested(int64_t value);
  private:
  int64_t _internal_lots_requested() const;
  void _internal_set_lots_requested(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 4;
  void clear_direction();
  ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.StopOrderType order_type = 6;
  void clear_order_type();
  ::tinkoff::public_::invest::api::contract::v1::StopOrderType order_type() const;
  void set_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::StopOrderType _internal_order_type() const;
  void _internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 13;
  void clear_take_profit_type();
  ::tinkoff::public_::invest::api::contract::v1::TakeProfitType take_profit_type() const;
  void set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TakeProfitType _internal_take_profit_type() const;
  void _internal_set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 15;
  void clear_status();
  ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption status() const;
  void set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption _internal_status() const;
  void _internal_set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.StopOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* stop_price_;
    ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* trailing_data_;
    int64_t lots_requested_;
    int direction_;
    int order_type_;
    int take_profit_type_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stoporders_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PostStopOrderRequest_TrailingData

// .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
inline bool PostStopOrderRequest_TrailingData::_internal_has_indent() const {
  return this != internal_default_instance() && _impl_.indent_ != nullptr;
}
inline bool PostStopOrderRequest_TrailingData::has_indent() const {
  return _internal_has_indent();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest_TrailingData::_internal_indent() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.indent_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest_TrailingData::indent() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent)
  return _internal_indent();
}
inline void PostStopOrderRequest_TrailingData::unsafe_arena_set_allocated_indent(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* indent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indent_);
  }
  _impl_.indent_ = indent;
  if (indent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::release_indent() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.indent_;
  _impl_.indent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::unsafe_arena_release_indent() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.indent_;
  _impl_.indent_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::_internal_mutable_indent() {
  
  if (_impl_.indent_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.indent_ = p;
  }
  return _impl_.indent_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::mutable_indent() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_indent();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent)
  return _msg;
}
inline void PostStopOrderRequest_TrailingData::set_allocated_indent(::tinkoff::public_::invest::api::contract::v1::Quotation* indent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indent_);
  }
  if (indent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indent));
    if (message_arena != submessage_arena) {
      indent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.indent_ = indent;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent)
}

// .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
inline void PostStopOrderRequest_TrailingData::clear_indent_type() {
  _impl_.indent_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType PostStopOrderRequest_TrailingData::_internal_indent_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TrailingValueType >(_impl_.indent_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType PostStopOrderRequest_TrailingData::indent_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent_type)
  return _internal_indent_type();
}
inline void PostStopOrderRequest_TrailingData::_internal_set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  
  _impl_.indent_type_ = value;
}
inline void PostStopOrderRequest_TrailingData::set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  _internal_set_indent_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent_type)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
inline bool PostStopOrderRequest_TrailingData::_internal_has_spread() const {
  return this != internal_default_instance() && _impl_.spread_ != nullptr;
}
inline bool PostStopOrderRequest_TrailingData::has_spread() const {
  return _internal_has_spread();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest_TrailingData::_internal_spread() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.spread_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest_TrailingData::spread() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread)
  return _internal_spread();
}
inline void PostStopOrderRequest_TrailingData::unsafe_arena_set_allocated_spread(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* spread) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spread_);
  }
  _impl_.spread_ = spread;
  if (spread) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::release_spread() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.spread_;
  _impl_.spread_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::unsafe_arena_release_spread() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.spread_;
  _impl_.spread_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::_internal_mutable_spread() {
  
  if (_impl_.spread_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.spread_ = p;
  }
  return _impl_.spread_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest_TrailingData::mutable_spread() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_spread();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread)
  return _msg;
}
inline void PostStopOrderRequest_TrailingData::set_allocated_spread(::tinkoff::public_::invest::api::contract::v1::Quotation* spread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spread_);
  }
  if (spread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spread));
    if (message_arena != submessage_arena) {
      spread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spread, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spread_ = spread;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread)
}

// .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
inline void PostStopOrderRequest_TrailingData::clear_spread_type() {
  _impl_.spread_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType PostStopOrderRequest_TrailingData::_internal_spread_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TrailingValueType >(_impl_.spread_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType PostStopOrderRequest_TrailingData::spread_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread_type)
  return _internal_spread_type();
}
inline void PostStopOrderRequest_TrailingData::_internal_set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  
  _impl_.spread_type_ = value;
}
inline void PostStopOrderRequest_TrailingData::set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  _internal_set_spread_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread_type)
}

// -------------------------------------------------------------------

// PostStopOrderRequest

// optional string figi = 1 [deprecated = true];
inline bool PostStopOrderRequest::_internal_has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PostStopOrderRequest::has_figi() const {
  return _internal_has_figi();
}
inline void PostStopOrderRequest::clear_figi() {
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PostStopOrderRequest::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostStopOrderRequest::set_figi(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.figi)
}
inline std::string* PostStopOrderRequest::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.figi)
  return _s;
}
inline const std::string& PostStopOrderRequest::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void PostStopOrderRequest::_internal_set_figi(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::_internal_mutable_figi() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.figi)
  if (!_internal_has_figi()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.figi_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PostStopOrderRequest::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.figi)
}

// int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
inline void PostStopOrderRequest::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t PostStopOrderRequest::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t PostStopOrderRequest::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.quantity)
  return _internal_quantity();
}
inline void PostStopOrderRequest::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void PostStopOrderRequest::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.quantity)
}

// optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
inline bool PostStopOrderRequest::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline bool PostStopOrderRequest::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.price)
  return _internal_price();
}
inline void PostStopOrderRequest::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::release_price() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.price)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::_internal_mutable_price() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.price)
  return _msg;
}
inline void PostStopOrderRequest::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.price)
}

// optional .tinkoff.public_.invest.api.contract.v1.Quotation stop_price = 4;
inline bool PostStopOrderRequest::_internal_has_stop_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_price_ != nullptr);
  return value;
}
inline bool PostStopOrderRequest::has_stop_price() const {
  return _internal_has_stop_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest::_internal_stop_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostStopOrderRequest::stop_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.stop_price)
  return _internal_stop_price();
}
inline void PostStopOrderRequest::unsafe_arena_set_allocated_stop_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  _impl_.stop_price_ = stop_price;
  if (stop_price) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.stop_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::release_stop_price() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::unsafe_arena_release_stop_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.stop_price)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::_internal_mutable_stop_price() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.stop_price_ = p;
  }
  return _impl_.stop_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostStopOrderRequest::mutable_stop_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_stop_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.stop_price)
  return _msg;
}
inline void PostStopOrderRequest::set_allocated_stop_price(::tinkoff::public_::invest::api::contract::v1::Quotation* stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  if (stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_price));
    if (message_arena != submessage_arena) {
      stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.stop_price_ = stop_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.stop_price)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 5 [(.google.api.field_behavior) = REQUIRED];
inline void PostStopOrderRequest::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection PostStopOrderRequest::_internal_direction() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection >(_impl_.direction_);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection PostStopOrderRequest::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.direction)
  return _internal_direction();
}
inline void PostStopOrderRequest::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value) {
  
  _impl_.direction_ = value;
}
inline void PostStopOrderRequest::set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.direction)
}

// string account_id = 6 [(.google.api.field_behavior) = REQUIRED];
inline void PostStopOrderRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PostStopOrderRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostStopOrderRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.account_id)
}
inline std::string* PostStopOrderRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.account_id)
  return _s;
}
inline const std::string& PostStopOrderRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void PostStopOrderRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void PostStopOrderRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrderExpirationType expiration_type = 7 [(.google.api.field_behavior) = REQUIRED];
inline void PostStopOrderRequest::clear_expiration_type() {
  _impl_.expiration_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType PostStopOrderRequest::_internal_expiration_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType >(_impl_.expiration_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType PostStopOrderRequest::expiration_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.expiration_type)
  return _internal_expiration_type();
}
inline void PostStopOrderRequest::_internal_set_expiration_type(::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType value) {
  
  _impl_.expiration_type_ = value;
}
inline void PostStopOrderRequest::set_expiration_type(::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType value) {
  _internal_set_expiration_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.expiration_type)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrderType stop_order_type = 8 [(.google.api.field_behavior) = REQUIRED];
inline void PostStopOrderRequest::clear_stop_order_type() {
  _impl_.stop_order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderType PostStopOrderRequest::_internal_stop_order_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::StopOrderType >(_impl_.stop_order_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderType PostStopOrderRequest::stop_order_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.stop_order_type)
  return _internal_stop_order_type();
}
inline void PostStopOrderRequest::_internal_set_stop_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value) {
  
  _impl_.stop_order_type_ = value;
}
inline void PostStopOrderRequest::set_stop_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value) {
  _internal_set_stop_order_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.stop_order_type)
}

// optional .google.protobuf.Timestamp expire_date = 9;
inline bool PostStopOrderRequest::_internal_has_expire_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expire_date_ != nullptr);
  return value;
}
inline bool PostStopOrderRequest::has_expire_date() const {
  return _internal_has_expire_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PostStopOrderRequest::_internal_expire_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PostStopOrderRequest::expire_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.expire_date)
  return _internal_expire_date();
}
inline void PostStopOrderRequest::unsafe_arena_set_allocated_expire_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_date_);
  }
  _impl_.expire_date_ = expire_date;
  if (expire_date) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.expire_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PostStopOrderRequest::release_expire_date() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_date_;
  _impl_.expire_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PostStopOrderRequest::unsafe_arena_release_expire_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.expire_date)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_date_;
  _impl_.expire_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PostStopOrderRequest::_internal_mutable_expire_date() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.expire_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_date_ = p;
  }
  return _impl_.expire_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PostStopOrderRequest::mutable_expire_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.expire_date)
  return _msg;
}
inline void PostStopOrderRequest::set_allocated_expire_date(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_date_);
  }
  if (expire_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_date));
    if (message_arena != submessage_arena) {
      expire_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_date, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.expire_date_ = expire_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.expire_date)
}

// string instrument_id = 10 [(.google.api.field_behavior) = REQUIRED];
inline void PostStopOrderRequest::clear_instrument_id() {
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& PostStopOrderRequest::instrument_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostStopOrderRequest::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.instrument_id)
}
inline std::string* PostStopOrderRequest::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.instrument_id)
  return _s;
}
inline const std::string& PostStopOrderRequest::_internal_instrument_id() const {
  return _impl_.instrument_id_.Get();
}
inline void PostStopOrderRequest::_internal_set_instrument_id(const std::string& value) {
  
  _impl_.instrument_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::_internal_mutable_instrument_id() {
  
  return _impl_.instrument_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::release_instrument_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void PostStopOrderRequest::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_id_.SetAllocated(instrument_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.instrument_id)
}

// .tinkoff.public_.invest.api.contract.v1.ExchangeOrderType exchange_order_type = 11;
inline void PostStopOrderRequest::clear_exchange_order_type() {
  _impl_.exchange_order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType PostStopOrderRequest::_internal_exchange_order_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType >(_impl_.exchange_order_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType PostStopOrderRequest::exchange_order_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.exchange_order_type)
  return _internal_exchange_order_type();
}
inline void PostStopOrderRequest::_internal_set_exchange_order_type(::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType value) {
  
  _impl_.exchange_order_type_ = value;
}
inline void PostStopOrderRequest::set_exchange_order_type(::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType value) {
  _internal_set_exchange_order_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.exchange_order_type)
}

// .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 12;
inline void PostStopOrderRequest::clear_take_profit_type() {
  _impl_.take_profit_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TakeProfitType PostStopOrderRequest::_internal_take_profit_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TakeProfitType >(_impl_.take_profit_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TakeProfitType PostStopOrderRequest::take_profit_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.take_profit_type)
  return _internal_take_profit_type();
}
inline void PostStopOrderRequest::_internal_set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value) {
  
  _impl_.take_profit_type_ = value;
}
inline void PostStopOrderRequest::set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value) {
  _internal_set_take_profit_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.take_profit_type)
}

// .tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData trailing_data = 13;
inline bool PostStopOrderRequest::_internal_has_trailing_data() const {
  return this != internal_default_instance() && _impl_.trailing_data_ != nullptr;
}
inline bool PostStopOrderRequest::has_trailing_data() const {
  return _internal_has_trailing_data();
}
inline void PostStopOrderRequest::clear_trailing_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.trailing_data_ != nullptr) {
    delete _impl_.trailing_data_;
  }
  _impl_.trailing_data_ = nullptr;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData& PostStopOrderRequest::_internal_trailing_data() const {
  const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* p = _impl_.trailing_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData&>(
      ::tinkoff::public_::invest::api::contract::v1::_PostStopOrderRequest_TrailingData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData& PostStopOrderRequest::trailing_data() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.trailing_data)
  return _internal_trailing_data();
}
inline void PostStopOrderRequest::unsafe_arena_set_allocated_trailing_data(
    ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* trailing_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trailing_data_);
  }
  _impl_.trailing_data_ = trailing_data;
  if (trailing_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.trailing_data)
}
inline ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* PostStopOrderRequest::release_trailing_data() {
  
  ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* temp = _impl_.trailing_data_;
  _impl_.trailing_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* PostStopOrderRequest::unsafe_arena_release_trailing_data() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.trailing_data)
  
  ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* temp = _impl_.trailing_data_;
  _impl_.trailing_data_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* PostStopOrderRequest::_internal_mutable_trailing_data() {
  
  if (_impl_.trailing_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData>(GetArenaForAllocation());
    _impl_.trailing_data_ = p;
  }
  return _impl_.trailing_data_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* PostStopOrderRequest::mutable_trailing_data() {
  ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* _msg = _internal_mutable_trailing_data();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.trailing_data)
  return _msg;
}
inline void PostStopOrderRequest::set_allocated_trailing_data(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData* trailing_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trailing_data_;
  }
  if (trailing_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trailing_data);
    if (message_arena != submessage_arena) {
      trailing_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trailing_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trailing_data_ = trailing_data;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.trailing_data)
}

// .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 14;
inline void PostStopOrderRequest::clear_price_type() {
  _impl_.price_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType PostStopOrderRequest::_internal_price_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::PriceType >(_impl_.price_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType PostStopOrderRequest::price_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.price_type)
  return _internal_price_type();
}
inline void PostStopOrderRequest::_internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  
  _impl_.price_type_ = value;
}
inline void PostStopOrderRequest::set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.price_type)
}

// string order_id = 15 [(.google.api.field_behavior) = REQUIRED];
inline void PostStopOrderRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& PostStopOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostStopOrderRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.order_id)
}
inline std::string* PostStopOrderRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.order_id)
  return _s;
}
inline const std::string& PostStopOrderRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void PostStopOrderRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostStopOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void PostStopOrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.order_id)
}

// -------------------------------------------------------------------

// PostStopOrderResponse

// string stop_order_id = 1;
inline void PostStopOrderResponse::clear_stop_order_id() {
  _impl_.stop_order_id_.ClearToEmpty();
}
inline const std::string& PostStopOrderResponse::stop_order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.stop_order_id)
  return _internal_stop_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostStopOrderResponse::set_stop_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stop_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.stop_order_id)
}
inline std::string* PostStopOrderResponse::mutable_stop_order_id() {
  std::string* _s = _internal_mutable_stop_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.stop_order_id)
  return _s;
}
inline const std::string& PostStopOrderResponse::_internal_stop_order_id() const {
  return _impl_.stop_order_id_.Get();
}
inline void PostStopOrderResponse::_internal_set_stop_order_id(const std::string& value) {
  
  _impl_.stop_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostStopOrderResponse::_internal_mutable_stop_order_id() {
  
  return _impl_.stop_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostStopOrderResponse::release_stop_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.stop_order_id)
  return _impl_.stop_order_id_.Release();
}
inline void PostStopOrderResponse::set_allocated_stop_order_id(std::string* stop_order_id) {
  if (stop_order_id != nullptr) {
    
  } else {
    
  }
  _impl_.stop_order_id_.SetAllocated(stop_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_order_id_.IsDefault()) {
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.stop_order_id)
}

// string order_request_id = 2;
inline void PostStopOrderResponse::clear_order_request_id() {
  _impl_.order_request_id_.ClearToEmpty();
}
inline const std::string& PostStopOrderResponse::order_request_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.order_request_id)
  return _internal_order_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostStopOrderResponse::set_order_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.order_request_id)
}
inline std::string* PostStopOrderResponse::mutable_order_request_id() {
  std::string* _s = _internal_mutable_order_request_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.order_request_id)
  return _s;
}
inline const std::string& PostStopOrderResponse::_internal_order_request_id() const {
  return _impl_.order_request_id_.Get();
}
inline void PostStopOrderResponse::_internal_set_order_request_id(const std::string& value) {
  
  _impl_.order_request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostStopOrderResponse::_internal_mutable_order_request_id() {
  
  return _impl_.order_request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostStopOrderResponse::release_order_request_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.order_request_id)
  return _impl_.order_request_id_.Release();
}
inline void PostStopOrderResponse::set_allocated_order_request_id(std::string* order_request_id) {
  if (order_request_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_request_id_.SetAllocated(order_request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_request_id_.IsDefault()) {
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.order_request_id)
}

// .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
inline bool PostStopOrderResponse::_internal_has_response_metadata() const {
  return this != internal_default_instance() && _impl_.response_metadata_ != nullptr;
}
inline bool PostStopOrderResponse::has_response_metadata() const {
  return _internal_has_response_metadata();
}
inline const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& PostStopOrderResponse::_internal_response_metadata() const {
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* p = _impl_.response_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata&>(
      ::tinkoff::public_::invest::api::contract::v1::_ResponseMetadata_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& PostStopOrderResponse::response_metadata() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.response_metadata)
  return _internal_response_metadata();
}
inline void PostStopOrderResponse::unsafe_arena_set_allocated_response_metadata(
    ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_metadata_);
  }
  _impl_.response_metadata_ = response_metadata;
  if (response_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.response_metadata)
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostStopOrderResponse::release_response_metadata() {
  
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* temp = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostStopOrderResponse::unsafe_arena_release_response_metadata() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.response_metadata)
  
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* temp = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostStopOrderResponse::_internal_mutable_response_metadata() {
  
  if (_impl_.response_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::ResponseMetadata>(GetArenaForAllocation());
    _impl_.response_metadata_ = p;
  }
  return _impl_.response_metadata_;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostStopOrderResponse::mutable_response_metadata() {
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* _msg = _internal_mutable_response_metadata();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.response_metadata)
  return _msg;
}
inline void PostStopOrderResponse::set_allocated_response_metadata(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_metadata_);
  }
  if (response_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_metadata));
    if (message_arena != submessage_arena) {
      response_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_metadata_ = response_metadata;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.response_metadata)
}

// -------------------------------------------------------------------

// GetStopOrdersRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetStopOrdersRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetStopOrdersRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStopOrdersRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.account_id)
}
inline std::string* GetStopOrdersRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.account_id)
  return _s;
}
inline const std::string& GetStopOrdersRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GetStopOrdersRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStopOrdersRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStopOrdersRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GetStopOrdersRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 2;
inline void GetStopOrdersRequest::clear_status() {
  _impl_.status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption GetStopOrdersRequest::_internal_status() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption >(_impl_.status_);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption GetStopOrdersRequest::status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.status)
  return _internal_status();
}
inline void GetStopOrdersRequest::_internal_set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value) {
  
  _impl_.status_ = value;
}
inline void GetStopOrdersRequest::set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.status)
}

// .google.protobuf.Timestamp from = 3;
inline bool GetStopOrdersRequest::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool GetStopOrdersRequest::has_from() const {
  return _internal_has_from();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetStopOrdersRequest::_internal_from() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetStopOrdersRequest::from() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.from)
  return _internal_from();
}
inline void GetStopOrdersRequest::unsafe_arena_set_allocated_from(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.from)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::release_from() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.from)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::mutable_from() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.from)
  return _msg;
}
inline void GetStopOrdersRequest::set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.from)
}

// .google.protobuf.Timestamp to = 4;
inline bool GetStopOrdersRequest::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool GetStopOrdersRequest::has_to() const {
  return _internal_has_to();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetStopOrdersRequest::_internal_to() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetStopOrdersRequest::to() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.to)
  return _internal_to();
}
inline void GetStopOrdersRequest::unsafe_arena_set_allocated_to(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.to)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::release_to() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.to)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetStopOrdersRequest::mutable_to() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.to)
  return _msg;
}
inline void GetStopOrdersRequest::set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.to)
}

// -------------------------------------------------------------------

// GetStopOrdersResponse

// repeated .tinkoff.public_.invest.api.contract.v1.StopOrder stop_orders = 1;
inline int GetStopOrdersResponse::_internal_stop_orders_size() const {
  return _impl_.stop_orders_.size();
}
inline int GetStopOrdersResponse::stop_orders_size() const {
  return _internal_stop_orders_size();
}
inline void GetStopOrdersResponse::clear_stop_orders() {
  _impl_.stop_orders_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrder* GetStopOrdersResponse::mutable_stop_orders(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse.stop_orders)
  return _impl_.stop_orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::StopOrder >*
GetStopOrdersResponse::mutable_stop_orders() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse.stop_orders)
  return &_impl_.stop_orders_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::StopOrder& GetStopOrdersResponse::_internal_stop_orders(int index) const {
  return _impl_.stop_orders_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::StopOrder& GetStopOrdersResponse::stop_orders(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse.stop_orders)
  return _internal_stop_orders(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrder* GetStopOrdersResponse::_internal_add_stop_orders() {
  return _impl_.stop_orders_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrder* GetStopOrdersResponse::add_stop_orders() {
  ::tinkoff::public_::invest::api::contract::v1::StopOrder* _add = _internal_add_stop_orders();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse.stop_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::StopOrder >&
GetStopOrdersResponse::stop_orders() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse.stop_orders)
  return _impl_.stop_orders_;
}

// -------------------------------------------------------------------

// CancelStopOrderRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CancelStopOrderRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& CancelStopOrderRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelStopOrderRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.account_id)
}
inline std::string* CancelStopOrderRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.account_id)
  return _s;
}
inline const std::string& CancelStopOrderRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void CancelStopOrderRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelStopOrderRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CancelStopOrderRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void CancelStopOrderRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.account_id)
}

// string stop_order_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CancelStopOrderRequest::clear_stop_order_id() {
  _impl_.stop_order_id_.ClearToEmpty();
}
inline const std::string& CancelStopOrderRequest::stop_order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.stop_order_id)
  return _internal_stop_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelStopOrderRequest::set_stop_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stop_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.stop_order_id)
}
inline std::string* CancelStopOrderRequest::mutable_stop_order_id() {
  std::string* _s = _internal_mutable_stop_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.stop_order_id)
  return _s;
}
inline const std::string& CancelStopOrderRequest::_internal_stop_order_id() const {
  return _impl_.stop_order_id_.Get();
}
inline void CancelStopOrderRequest::_internal_set_stop_order_id(const std::string& value) {
  
  _impl_.stop_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelStopOrderRequest::_internal_mutable_stop_order_id() {
  
  return _impl_.stop_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CancelStopOrderRequest::release_stop_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.stop_order_id)
  return _impl_.stop_order_id_.Release();
}
inline void CancelStopOrderRequest::set_allocated_stop_order_id(std::string* stop_order_id) {
  if (stop_order_id != nullptr) {
    
  } else {
    
  }
  _impl_.stop_order_id_.SetAllocated(stop_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_order_id_.IsDefault()) {
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.stop_order_id)
}

// -------------------------------------------------------------------

// CancelStopOrderResponse

// .google.protobuf.Timestamp time = 1;
inline bool CancelStopOrderResponse::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool CancelStopOrderResponse::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CancelStopOrderResponse::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CancelStopOrderResponse::time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse.time)
  return _internal_time();
}
inline void CancelStopOrderResponse::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelStopOrderResponse::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelStopOrderResponse::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelStopOrderResponse::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelStopOrderResponse::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse.time)
  return _msg;
}
inline void CancelStopOrderResponse::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse.time)
}

// -------------------------------------------------------------------

// StopOrder_TrailingData

// .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
inline bool StopOrder_TrailingData::_internal_has_indent() const {
  return this != internal_default_instance() && _impl_.indent_ != nullptr;
}
inline bool StopOrder_TrailingData::has_indent() const {
  return _internal_has_indent();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::_internal_indent() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.indent_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::indent() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.indent)
  return _internal_indent();
}
inline void StopOrder_TrailingData::unsafe_arena_set_allocated_indent(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* indent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indent_);
  }
  _impl_.indent_ = indent;
  if (indent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.indent)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::release_indent() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.indent_;
  _impl_.indent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::unsafe_arena_release_indent() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.indent)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.indent_;
  _impl_.indent_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::_internal_mutable_indent() {
  
  if (_impl_.indent_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.indent_ = p;
  }
  return _impl_.indent_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::mutable_indent() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_indent();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.indent)
  return _msg;
}
inline void StopOrder_TrailingData::set_allocated_indent(::tinkoff::public_::invest::api::contract::v1::Quotation* indent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indent_);
  }
  if (indent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indent));
    if (message_arena != submessage_arena) {
      indent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.indent_ = indent;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.indent)
}

// .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
inline void StopOrder_TrailingData::clear_indent_type() {
  _impl_.indent_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType StopOrder_TrailingData::_internal_indent_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TrailingValueType >(_impl_.indent_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType StopOrder_TrailingData::indent_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.indent_type)
  return _internal_indent_type();
}
inline void StopOrder_TrailingData::_internal_set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  
  _impl_.indent_type_ = value;
}
inline void StopOrder_TrailingData::set_indent_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  _internal_set_indent_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.indent_type)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
inline bool StopOrder_TrailingData::_internal_has_spread() const {
  return this != internal_default_instance() && _impl_.spread_ != nullptr;
}
inline bool StopOrder_TrailingData::has_spread() const {
  return _internal_has_spread();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::_internal_spread() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.spread_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::spread() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.spread)
  return _internal_spread();
}
inline void StopOrder_TrailingData::unsafe_arena_set_allocated_spread(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* spread) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spread_);
  }
  _impl_.spread_ = spread;
  if (spread) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.spread)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::release_spread() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.spread_;
  _impl_.spread_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::unsafe_arena_release_spread() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.spread)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.spread_;
  _impl_.spread_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::_internal_mutable_spread() {
  
  if (_impl_.spread_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.spread_ = p;
  }
  return _impl_.spread_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::mutable_spread() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_spread();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.spread)
  return _msg;
}
inline void StopOrder_TrailingData::set_allocated_spread(::tinkoff::public_::invest::api::contract::v1::Quotation* spread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spread_);
  }
  if (spread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spread));
    if (message_arena != submessage_arena) {
      spread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spread, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spread_ = spread;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.spread)
}

// .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
inline void StopOrder_TrailingData::clear_spread_type() {
  _impl_.spread_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType StopOrder_TrailingData::_internal_spread_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TrailingValueType >(_impl_.spread_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingValueType StopOrder_TrailingData::spread_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.spread_type)
  return _internal_spread_type();
}
inline void StopOrder_TrailingData::_internal_set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  
  _impl_.spread_type_ = value;
}
inline void StopOrder_TrailingData::set_spread_type(::tinkoff::public_::invest::api::contract::v1::TrailingValueType value) {
  _internal_set_spread_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.spread_type)
}

// .tinkoff.public_.invest.api.contract.v1.TrailingStopStatus status = 5;
inline void StopOrder_TrailingData::clear_status() {
  _impl_.status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus StopOrder_TrailingData::_internal_status() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus >(_impl_.status_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus StopOrder_TrailingData::status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.status)
  return _internal_status();
}
inline void StopOrder_TrailingData::_internal_set_status(::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus value) {
  
  _impl_.status_ = value;
}
inline void StopOrder_TrailingData::set_status(::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.status)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation price = 7;
inline bool StopOrder_TrailingData::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool StopOrder_TrailingData::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.price)
  return _internal_price();
}
inline void StopOrder_TrailingData::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.price)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.price)
  return _msg;
}
inline void StopOrder_TrailingData::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation extr = 8;
inline bool StopOrder_TrailingData::_internal_has_extr() const {
  return this != internal_default_instance() && _impl_.extr_ != nullptr;
}
inline bool StopOrder_TrailingData::has_extr() const {
  return _internal_has_extr();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::_internal_extr() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.extr_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& StopOrder_TrailingData::extr() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.extr)
  return _internal_extr();
}
inline void StopOrder_TrailingData::unsafe_arena_set_allocated_extr(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* extr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extr_);
  }
  _impl_.extr_ = extr;
  if (extr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.extr)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::release_extr() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.extr_;
  _impl_.extr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::unsafe_arena_release_extr() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.extr)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.extr_;
  _impl_.extr_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::_internal_mutable_extr() {
  
  if (_impl_.extr_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.extr_ = p;
  }
  return _impl_.extr_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* StopOrder_TrailingData::mutable_extr() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_extr();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.extr)
  return _msg;
}
inline void StopOrder_TrailingData::set_allocated_extr(::tinkoff::public_::invest::api::contract::v1::Quotation* extr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extr_);
  }
  if (extr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extr));
    if (message_arena != submessage_arena) {
      extr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extr_ = extr;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData.extr)
}

// -------------------------------------------------------------------

// StopOrder

// string stop_order_id = 1;
inline void StopOrder::clear_stop_order_id() {
  _impl_.stop_order_id_.ClearToEmpty();
}
inline const std::string& StopOrder::stop_order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_order_id)
  return _internal_stop_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopOrder::set_stop_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stop_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_order_id)
}
inline std::string* StopOrder::mutable_stop_order_id() {
  std::string* _s = _internal_mutable_stop_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_order_id)
  return _s;
}
inline const std::string& StopOrder::_internal_stop_order_id() const {
  return _impl_.stop_order_id_.Get();
}
inline void StopOrder::_internal_set_stop_order_id(const std::string& value) {
  
  _impl_.stop_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StopOrder::_internal_mutable_stop_order_id() {
  
  return _impl_.stop_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StopOrder::release_stop_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_order_id)
  return _impl_.stop_order_id_.Release();
}
inline void StopOrder::set_allocated_stop_order_id(std::string* stop_order_id) {
  if (stop_order_id != nullptr) {
    
  } else {
    
  }
  _impl_.stop_order_id_.SetAllocated(stop_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_order_id_.IsDefault()) {
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_order_id)
}

// int64 lots_requested = 2;
inline void StopOrder::clear_lots_requested() {
  _impl_.lots_requested_ = int64_t{0};
}
inline int64_t StopOrder::_internal_lots_requested() const {
  return _impl_.lots_requested_;
}
inline int64_t StopOrder::lots_requested() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.lots_requested)
  return _internal_lots_requested();
}
inline void StopOrder::_internal_set_lots_requested(int64_t value) {
  
  _impl_.lots_requested_ = value;
}
inline void StopOrder::set_lots_requested(int64_t value) {
  _internal_set_lots_requested(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.lots_requested)
}

// string figi = 3;
inline void StopOrder::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& StopOrder::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopOrder::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.figi)
}
inline std::string* StopOrder::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.figi)
  return _s;
}
inline const std::string& StopOrder::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void StopOrder::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* StopOrder::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* StopOrder::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.figi)
  return _impl_.figi_.Release();
}
inline void StopOrder::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.figi)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 4;
inline void StopOrder::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection StopOrder::_internal_direction() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection >(_impl_.direction_);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection StopOrder::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.direction)
  return _internal_direction();
}
inline void StopOrder::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value) {
  
  _impl_.direction_ = value;
}
inline void StopOrder::set_direction(::tinkoff::public_::invest::api::contract::v1::StopOrderDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.direction)
}

// string currency = 5;
inline void StopOrder::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& StopOrder::currency() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopOrder::set_currency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.currency)
}
inline std::string* StopOrder::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.currency)
  return _s;
}
inline const std::string& StopOrder::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void StopOrder::_internal_set_currency(const std::string& value) {
  
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* StopOrder::_internal_mutable_currency() {
  
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* StopOrder::release_currency() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.currency)
  return _impl_.currency_.Release();
}
inline void StopOrder::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.currency)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrderType order_type = 6;
inline void StopOrder::clear_order_type() {
  _impl_.order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderType StopOrder::_internal_order_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::StopOrderType >(_impl_.order_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderType StopOrder::order_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.order_type)
  return _internal_order_type();
}
inline void StopOrder::_internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value) {
  
  _impl_.order_type_ = value;
}
inline void StopOrder::set_order_type(::tinkoff::public_::invest::api::contract::v1::StopOrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.order_type)
}

// .google.protobuf.Timestamp create_date = 7;
inline bool StopOrder::_internal_has_create_date() const {
  return this != internal_default_instance() && _impl_.create_date_ != nullptr;
}
inline bool StopOrder::has_create_date() const {
  return _internal_has_create_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StopOrder::_internal_create_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StopOrder::create_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.create_date)
  return _internal_create_date();
}
inline void StopOrder::unsafe_arena_set_allocated_create_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_date_);
  }
  _impl_.create_date_ = create_date;
  if (create_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.create_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::release_create_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_date_;
  _impl_.create_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::unsafe_arena_release_create_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.create_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_date_;
  _impl_.create_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::_internal_mutable_create_date() {
  
  if (_impl_.create_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_date_ = p;
  }
  return _impl_.create_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::mutable_create_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.create_date)
  return _msg;
}
inline void StopOrder::set_allocated_create_date(::PROTOBUF_NAMESPACE_ID::Timestamp* create_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_date_);
  }
  if (create_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_date));
    if (message_arena != submessage_arena) {
      create_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_date_ = create_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.create_date)
}

// .google.protobuf.Timestamp activation_date_time = 8;
inline bool StopOrder::_internal_has_activation_date_time() const {
  return this != internal_default_instance() && _impl_.activation_date_time_ != nullptr;
}
inline bool StopOrder::has_activation_date_time() const {
  return _internal_has_activation_date_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StopOrder::_internal_activation_date_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.activation_date_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StopOrder::activation_date_time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.activation_date_time)
  return _internal_activation_date_time();
}
inline void StopOrder::unsafe_arena_set_allocated_activation_date_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_date_time_);
  }
  _impl_.activation_date_time_ = activation_date_time;
  if (activation_date_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.activation_date_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::release_activation_date_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.activation_date_time_;
  _impl_.activation_date_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::unsafe_arena_release_activation_date_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.activation_date_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.activation_date_time_;
  _impl_.activation_date_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::_internal_mutable_activation_date_time() {
  
  if (_impl_.activation_date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.activation_date_time_ = p;
  }
  return _impl_.activation_date_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::mutable_activation_date_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_activation_date_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.activation_date_time)
  return _msg;
}
inline void StopOrder::set_allocated_activation_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_date_time_);
  }
  if (activation_date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activation_date_time));
    if (message_arena != submessage_arena) {
      activation_date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_date_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activation_date_time_ = activation_date_time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.activation_date_time)
}

// .google.protobuf.Timestamp expiration_time = 9;
inline bool StopOrder::_internal_has_expiration_time() const {
  return this != internal_default_instance() && _impl_.expiration_time_ != nullptr;
}
inline bool StopOrder::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StopOrder::_internal_expiration_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StopOrder::expiration_time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.expiration_time)
  return _internal_expiration_time();
}
inline void StopOrder::unsafe_arena_set_allocated_expiration_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.expiration_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::release_expiration_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.expiration_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::_internal_mutable_expiration_time() {
  
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_time_ = p;
  }
  return _impl_.expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StopOrder::mutable_expiration_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.expiration_time)
  return _msg;
}
inline void StopOrder::set_allocated_expiration_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time));
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.expiration_time)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 10;
inline bool StopOrder::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool StopOrder::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& StopOrder::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& StopOrder::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.price)
  return _internal_price();
}
inline void StopOrder::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.price)
  return _msg;
}
inline void StopOrder::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue stop_price = 11;
inline bool StopOrder::_internal_has_stop_price() const {
  return this != internal_default_instance() && _impl_.stop_price_ != nullptr;
}
inline bool StopOrder::has_stop_price() const {
  return _internal_has_stop_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& StopOrder::_internal_stop_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& StopOrder::stop_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_price)
  return _internal_stop_price();
}
inline void StopOrder::unsafe_arena_set_allocated_stop_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  _impl_.stop_price_ = stop_price;
  if (stop_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::release_stop_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::unsafe_arena_release_stop_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::_internal_mutable_stop_price() {
  
  if (_impl_.stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.stop_price_ = p;
  }
  return _impl_.stop_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* StopOrder::mutable_stop_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_stop_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_price)
  return _msg;
}
inline void StopOrder::set_allocated_stop_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  if (stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_price));
    if (message_arena != submessage_arena) {
      stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stop_price_ = stop_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.stop_price)
}

// string instrument_uid = 12;
inline void StopOrder::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& StopOrder::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopOrder::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.instrument_uid)
}
inline std::string* StopOrder::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.instrument_uid)
  return _s;
}
inline const std::string& StopOrder::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void StopOrder::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* StopOrder::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* StopOrder::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void StopOrder::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.instrument_uid)
}

// .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 13;
inline void StopOrder::clear_take_profit_type() {
  _impl_.take_profit_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TakeProfitType StopOrder::_internal_take_profit_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TakeProfitType >(_impl_.take_profit_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TakeProfitType StopOrder::take_profit_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.take_profit_type)
  return _internal_take_profit_type();
}
inline void StopOrder::_internal_set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value) {
  
  _impl_.take_profit_type_ = value;
}
inline void StopOrder::set_take_profit_type(::tinkoff::public_::invest::api::contract::v1::TakeProfitType value) {
  _internal_set_take_profit_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.take_profit_type)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData trailing_data = 14;
inline bool StopOrder::_internal_has_trailing_data() const {
  return this != internal_default_instance() && _impl_.trailing_data_ != nullptr;
}
inline bool StopOrder::has_trailing_data() const {
  return _internal_has_trailing_data();
}
inline void StopOrder::clear_trailing_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.trailing_data_ != nullptr) {
    delete _impl_.trailing_data_;
  }
  _impl_.trailing_data_ = nullptr;
}
inline const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData& StopOrder::_internal_trailing_data() const {
  const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* p = _impl_.trailing_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData&>(
      ::tinkoff::public_::invest::api::contract::v1::_StopOrder_TrailingData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData& StopOrder::trailing_data() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.trailing_data)
  return _internal_trailing_data();
}
inline void StopOrder::unsafe_arena_set_allocated_trailing_data(
    ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* trailing_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trailing_data_);
  }
  _impl_.trailing_data_ = trailing_data;
  if (trailing_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.trailing_data)
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* StopOrder::release_trailing_data() {
  
  ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* temp = _impl_.trailing_data_;
  _impl_.trailing_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* StopOrder::unsafe_arena_release_trailing_data() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.StopOrder.trailing_data)
  
  ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* temp = _impl_.trailing_data_;
  _impl_.trailing_data_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* StopOrder::_internal_mutable_trailing_data() {
  
  if (_impl_.trailing_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData>(GetArenaForAllocation());
    _impl_.trailing_data_ = p;
  }
  return _impl_.trailing_data_;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* StopOrder::mutable_trailing_data() {
  ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* _msg = _internal_mutable_trailing_data();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.StopOrder.trailing_data)
  return _msg;
}
inline void StopOrder::set_allocated_trailing_data(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData* trailing_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trailing_data_;
  }
  if (trailing_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trailing_data);
    if (message_arena != submessage_arena) {
      trailing_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trailing_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trailing_data_ = trailing_data;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.StopOrder.trailing_data)
}

// .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 15;
inline void StopOrder::clear_status() {
  _impl_.status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption StopOrder::_internal_status() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption >(_impl_.status_);
}
inline ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption StopOrder::status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.StopOrder.status)
  return _internal_status();
}
inline void StopOrder::_internal_set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value) {
  
  _impl_.status_ = value;
}
inline void StopOrder::set_status(::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.StopOrder.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection>() {
  return ::tinkoff::public_::invest::api::contract::v1::StopOrderDirection_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType>() {
  return ::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::StopOrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::StopOrderType>() {
  return ::tinkoff::public_::invest::api::contract::v1::StopOrderType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption>() {
  return ::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType>() {
  return ::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::TakeProfitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::TakeProfitType>() {
  return ::tinkoff::public_::invest::api::contract::v1::TakeProfitType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::TrailingValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::TrailingValueType>() {
  return ::tinkoff::public_::invest::api::contract::v1::TrailingValueType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus>() {
  return ::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stoporders_2eproto
