// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: marketdata.proto

#include "marketdata.pb.h"
#include "marketdata.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

static const char* MarketDataService_method_names[] = {
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetCandles",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetLastPrices",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetOrderBook",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetTradingStatus",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetTradingStatuses",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetLastTrades",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetClosePrices",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataService/GetTechAnalysis",
};

std::unique_ptr< MarketDataService::Stub> MarketDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MarketDataService::Stub> stub(new MarketDataService::Stub(channel, options));
  return stub;
}

MarketDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCandles_(MarketDataService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastPrices_(MarketDataService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrderBook_(MarketDataService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTradingStatus_(MarketDataService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTradingStatuses_(MarketDataService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastTrades_(MarketDataService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClosePrices_(MarketDataService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTechAnalysis_(MarketDataService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MarketDataService::Stub::GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCandles_, context, request, response);
}

void MarketDataService::Stub::async::GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCandles_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCandles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* MarketDataService::Stub::PrepareAsyncGetCandlesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCandles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* MarketDataService::Stub::AsyncGetCandlesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCandlesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketDataService::Stub::GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLastPrices_, context, request, response);
}

void MarketDataService::Stub::async::GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastPrices_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastPrices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* MarketDataService::Stub::PrepareAsyncGetLastPricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLastPrices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* MarketDataService::Stub::AsyncGetLastPricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastPricesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketDataService::Stub::GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrderBook_, context, request, response);
}

void MarketDataService::Stub::async::GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderBook_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* MarketDataService::Stub::PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrderBook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* MarketDataService::Stub::AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrderBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketDataService::Stub::GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTradingStatus_, context, request, response);
}

void MarketDataService::Stub::async::GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTradingStatus_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTradingStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* MarketDataService::Stub::PrepareAsyncGetTradingStatusRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTradingStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* MarketDataService::Stub::AsyncGetTradingStatusRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTradingStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketDataService::Stub::GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTradingStatuses_, context, request, response);
}

void MarketDataService::Stub::async::GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTradingStatuses_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTradingStatuses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* MarketDataService::Stub::PrepareAsyncGetTradingStatusesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTradingStatuses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* MarketDataService::Stub::AsyncGetTradingStatusesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTradingStatusesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketDataService::Stub::GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLastTrades_, context, request, response);
}

void MarketDataService::Stub::async::GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastTrades_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastTrades_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* MarketDataService::Stub::PrepareAsyncGetLastTradesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLastTrades_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* MarketDataService::Stub::AsyncGetLastTradesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastTradesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketDataService::Stub::GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClosePrices_, context, request, response);
}

void MarketDataService::Stub::async::GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClosePrices_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClosePrices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* MarketDataService::Stub::PrepareAsyncGetClosePricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClosePrices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* MarketDataService::Stub::AsyncGetClosePricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClosePricesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketDataService::Stub::GetTechAnalysis(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTechAnalysis_, context, request, response);
}

void MarketDataService::Stub::async::GetTechAnalysis(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTechAnalysis_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetTechAnalysis(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTechAnalysis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse>* MarketDataService::Stub::PrepareAsyncGetTechAnalysisRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTechAnalysis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse>* MarketDataService::Stub::AsyncGetTechAnalysisRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTechAnalysisRaw(context, request, cq);
  result->StartCall();
  return result;
}

MarketDataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* resp) {
               return service->GetCandles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* resp) {
               return service->GetLastPrices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* resp) {
               return service->GetOrderBook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* resp) {
               return service->GetTradingStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* resp) {
               return service->GetTradingStatuses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* resp) {
               return service->GetLastTrades(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* resp) {
               return service->GetClosePrices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse* resp) {
               return service->GetTechAnalysis(ctx, req, resp);
             }, this)));
}

MarketDataService::Service::~Service() {
}

::grpc::Status MarketDataService::Service::GetCandles(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::GetLastPrices(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::GetOrderBook(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::GetTradingStatus(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::GetTradingStatuses(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::GetLastTrades(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::GetClosePrices(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::GetTechAnalysis(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MarketDataStreamService_method_names[] = {
  "/tinkoff.public_.invest.api.contract.v1.MarketDataStreamService/MarketDataStream",
  "/tinkoff.public_.invest.api.contract.v1.MarketDataStreamService/MarketDataServerSideStream",
};

std::unique_ptr< MarketDataStreamService::Stub> MarketDataStreamService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MarketDataStreamService::Stub> stub(new MarketDataStreamService::Stub(channel, options));
  return stub;
}

MarketDataStreamService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MarketDataStream_(MarketDataStreamService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_MarketDataServerSideStream_(MarketDataStreamService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamService::Stub::MarketDataStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(channel_.get(), rpcmethod_MarketDataStream_, context);
}

void MarketDataStreamService::Stub::async::MarketDataStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest,::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest,::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketDataStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamService::Stub::AsyncMarketDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(channel_.get(), cq, rpcmethod_MarketDataStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamService::Stub::PrepareAsyncMarketDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(channel_.get(), cq, rpcmethod_MarketDataStream_, context, false, nullptr);
}

::grpc::ClientReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamService::Stub::MarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(channel_.get(), rpcmethod_MarketDataServerSideStream_, context, request);
}

void MarketDataStreamService::Stub::async::MarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* request, ::grpc::ClientReadReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketDataServerSideStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamService::Stub::AsyncMarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(channel_.get(), cq, rpcmethod_MarketDataServerSideStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamService::Stub::PrepareAsyncMarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>::Create(channel_.get(), cq, rpcmethod_MarketDataServerSideStream_, context, request, false, nullptr);
}

MarketDataStreamService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataStreamService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< MarketDataStreamService::Service, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>(
          [](MarketDataStreamService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::tinkoff::public_::invest::api::contract::v1::MarketDataResponse,
             ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* stream) {
               return service->MarketDataStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataStreamService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MarketDataStreamService::Service, ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>(
          [](MarketDataStreamService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* req,
             ::grpc::ServerWriter<::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* writer) {
               return service->MarketDataServerSideStream(ctx, req, writer);
             }, this)));
}

MarketDataStreamService::Service::~Service() {
}

::grpc::Status MarketDataStreamService::Service::MarketDataStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataStreamService::Service::MarketDataServerSideStream(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* request, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinkoff
}  // namespace public_
}  // namespace invest
}  // namespace api
}  // namespace contract
}  // namespace v1

