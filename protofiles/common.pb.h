// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class BrandData;
struct BrandDataDefaultTypeInternal;
extern BrandDataDefaultTypeInternal _BrandData_default_instance_;
class MoneyValue;
struct MoneyValueDefaultTypeInternal;
extern MoneyValueDefaultTypeInternal _MoneyValue_default_instance_;
class Page;
struct PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class PageResponse;
struct PageResponseDefaultTypeInternal;
extern PageResponseDefaultTypeInternal _PageResponse_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Quotation;
struct QuotationDefaultTypeInternal;
extern QuotationDefaultTypeInternal _Quotation_default_instance_;
class ResponseMetadata;
struct ResponseMetadataDefaultTypeInternal;
extern ResponseMetadataDefaultTypeInternal _ResponseMetadata_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> ::tinkoff::public_::invest::api::contract::v1::BrandData* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::Page* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Page>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PageResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PageResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::Ping* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Ping>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::Quotation* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::ResponseMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

enum InstrumentType : int {
  INSTRUMENT_TYPE_UNSPECIFIED = 0,
  INSTRUMENT_TYPE_BOND = 1,
  INSTRUMENT_TYPE_SHARE = 2,
  INSTRUMENT_TYPE_CURRENCY = 3,
  INSTRUMENT_TYPE_ETF = 4,
  INSTRUMENT_TYPE_FUTURES = 5,
  INSTRUMENT_TYPE_SP = 6,
  INSTRUMENT_TYPE_OPTION = 7,
  INSTRUMENT_TYPE_CLEARING_CERTIFICATE = 8,
  INSTRUMENT_TYPE_INDEX = 9,
  INSTRUMENT_TYPE_COMMODITY = 10,
  InstrumentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InstrumentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InstrumentType_IsValid(int value);
constexpr InstrumentType InstrumentType_MIN = INSTRUMENT_TYPE_UNSPECIFIED;
constexpr InstrumentType InstrumentType_MAX = INSTRUMENT_TYPE_COMMODITY;
constexpr int InstrumentType_ARRAYSIZE = InstrumentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstrumentType_descriptor();
template<typename T>
inline const std::string& InstrumentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InstrumentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InstrumentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InstrumentType_descriptor(), enum_t_value);
}
inline bool InstrumentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InstrumentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InstrumentType>(
    InstrumentType_descriptor(), name, value);
}
enum SecurityTradingStatus : int {
  SECURITY_TRADING_STATUS_UNSPECIFIED = 0,
  SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING = 1,
  SECURITY_TRADING_STATUS_OPENING_PERIOD = 2,
  SECURITY_TRADING_STATUS_CLOSING_PERIOD = 3,
  SECURITY_TRADING_STATUS_BREAK_IN_TRADING = 4,
  SECURITY_TRADING_STATUS_NORMAL_TRADING = 5,
  SECURITY_TRADING_STATUS_CLOSING_AUCTION = 6,
  SECURITY_TRADING_STATUS_DARK_POOL_AUCTION = 7,
  SECURITY_TRADING_STATUS_DISCRETE_AUCTION = 8,
  SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD = 9,
  SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE = 10,
  SECURITY_TRADING_STATUS_SESSION_ASSIGNED = 11,
  SECURITY_TRADING_STATUS_SESSION_CLOSE = 12,
  SECURITY_TRADING_STATUS_SESSION_OPEN = 13,
  SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING = 14,
  SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING = 15,
  SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING = 16,
  SecurityTradingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SecurityTradingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SecurityTradingStatus_IsValid(int value);
constexpr SecurityTradingStatus SecurityTradingStatus_MIN = SECURITY_TRADING_STATUS_UNSPECIFIED;
constexpr SecurityTradingStatus SecurityTradingStatus_MAX = SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING;
constexpr int SecurityTradingStatus_ARRAYSIZE = SecurityTradingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityTradingStatus_descriptor();
template<typename T>
inline const std::string& SecurityTradingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityTradingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityTradingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityTradingStatus_descriptor(), enum_t_value);
}
inline bool SecurityTradingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityTradingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityTradingStatus>(
    SecurityTradingStatus_descriptor(), name, value);
}
enum PriceType : int {
  PRICE_TYPE_UNSPECIFIED = 0,
  PRICE_TYPE_POINT = 1,
  PRICE_TYPE_CURRENCY = 2,
  PriceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PriceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PriceType_IsValid(int value);
constexpr PriceType PriceType_MIN = PRICE_TYPE_UNSPECIFIED;
constexpr PriceType PriceType_MAX = PRICE_TYPE_CURRENCY;
constexpr int PriceType_ARRAYSIZE = PriceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriceType_descriptor();
template<typename T>
inline const std::string& PriceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PriceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PriceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PriceType_descriptor(), enum_t_value);
}
inline bool PriceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PriceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PriceType>(
    PriceType_descriptor(), name, value);
}
// ===================================================================

class MoneyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.MoneyValue) */ {
 public:
  inline MoneyValue() : MoneyValue(nullptr) {}
  ~MoneyValue() override;
  explicit PROTOBUF_CONSTEXPR MoneyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoneyValue(const MoneyValue& from);
  MoneyValue(MoneyValue&& from) noexcept
    : MoneyValue() {
    *this = ::std::move(from);
  }

  inline MoneyValue& operator=(const MoneyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoneyValue& operator=(MoneyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoneyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoneyValue* internal_default_instance() {
    return reinterpret_cast<const MoneyValue*>(
               &_MoneyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MoneyValue& a, MoneyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MoneyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoneyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoneyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoneyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoneyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoneyValue& from) {
    MoneyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoneyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.MoneyValue";
  }
  protected:
  explicit MoneyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kUnitsFieldNumber = 2,
    kNanoFieldNumber = 3,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // int64 units = 2;
  void clear_units();
  int64_t units() const;
  void set_units(int64_t value);
  private:
  int64_t _internal_units() const;
  void _internal_set_units(int64_t value);
  public:

  // int32 nano = 3;
  void clear_nano();
  int32_t nano() const;
  void set_nano(int32_t value);
  private:
  int32_t _internal_nano() const;
  void _internal_set_nano(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.MoneyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    int64_t units_;
    int32_t nano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Quotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Quotation) */ {
 public:
  inline Quotation() : Quotation(nullptr) {}
  ~Quotation() override;
  explicit PROTOBUF_CONSTEXPR Quotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quotation(const Quotation& from);
  Quotation(Quotation&& from) noexcept
    : Quotation() {
    *this = ::std::move(from);
  }

  inline Quotation& operator=(const Quotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quotation& operator=(Quotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quotation* internal_default_instance() {
    return reinterpret_cast<const Quotation*>(
               &_Quotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Quotation& a, Quotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Quotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quotation& from) {
    Quotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Quotation";
  }
  protected:
  explicit Quotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
    kNanoFieldNumber = 2,
  };
  // int64 units = 1;
  void clear_units();
  int64_t units() const;
  void set_units(int64_t value);
  private:
  int64_t _internal_units() const;
  void _internal_set_units(int64_t value);
  public:

  // int32 nano = 2;
  void clear_nano();
  int32_t nano() const;
  void set_nano(int32_t value);
  private:
  int32_t _internal_nano() const;
  void _internal_set_nano(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Quotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t units_;
    int32_t nano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  ~Ping() override;
  explicit PROTOBUF_CONSTEXPR Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ping& from) {
    Ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // string stream_id = 2;
  void clear_stream_id();
  const std::string& stream_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stream_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Page final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Page) */ {
 public:
  inline Page() : Page(nullptr) {}
  ~Page() override;
  explicit PROTOBUF_CONSTEXPR Page(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Page(const Page& from);
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  inline Page& operator=(Page&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Page& default_instance() {
    return *internal_default_instance();
  }
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }
  inline void Swap(Page* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Page* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Page* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Page& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Page& from) {
    Page::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Page";
  }
  protected:
  explicit Page(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kPageNumberFieldNumber = 2,
  };
  // int32 limit = 1;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 page_number = 2;
  void clear_page_number();
  int32_t page_number() const;
  void set_page_number(int32_t value);
  private:
  int32_t _internal_page_number() const;
  void _internal_set_page_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Page)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t limit_;
    int32_t page_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PageResponse) */ {
 public:
  inline PageResponse() : PageResponse(nullptr) {}
  ~PageResponse() override;
  explicit PROTOBUF_CONSTEXPR PageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageResponse(const PageResponse& from);
  PageResponse(PageResponse&& from) noexcept
    : PageResponse() {
    *this = ::std::move(from);
  }

  inline PageResponse& operator=(const PageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageResponse& operator=(PageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageResponse* internal_default_instance() {
    return reinterpret_cast<const PageResponse*>(
               &_PageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PageResponse& a, PageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageResponse& from) {
    PageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PageResponse";
  }
  protected:
  explicit PageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kTotalCountFieldNumber = 3,
  };
  // int32 limit = 1;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 page_number = 2;
  void clear_page_number();
  int32_t page_number() const;
  void set_page_number(int32_t value);
  private:
  int32_t _internal_page_number() const;
  void _internal_set_page_number(int32_t value);
  public:

  // int32 total_count = 3;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t limit_;
    int32_t page_number_;
    int32_t total_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ResponseMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.ResponseMetadata) */ {
 public:
  inline ResponseMetadata() : ResponseMetadata(nullptr) {}
  ~ResponseMetadata() override;
  explicit PROTOBUF_CONSTEXPR ResponseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMetadata(const ResponseMetadata& from);
  ResponseMetadata(ResponseMetadata&& from) noexcept
    : ResponseMetadata() {
    *this = ::std::move(from);
  }

  inline ResponseMetadata& operator=(const ResponseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMetadata& operator=(ResponseMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMetadata* internal_default_instance() {
    return reinterpret_cast<const ResponseMetadata*>(
               &_ResponseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseMetadata& a, ResponseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseMetadata& from) {
    ResponseMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.ResponseMetadata";
  }
  protected:
  explicit ResponseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingIdFieldNumber = 42,
    kServerTimeFieldNumber = 43,
  };
  // string tracking_id = 42;
  void clear_tracking_id();
  const std::string& tracking_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tracking_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tracking_id();
  PROTOBUF_NODISCARD std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* tracking_id);
  private:
  const std::string& _internal_tracking_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracking_id(const std::string& value);
  std::string* _internal_mutable_tracking_id();
  public:

  // .google.protobuf.Timestamp server_time = 43;
  bool has_server_time() const;
  private:
  bool _internal_has_server_time() const;
  public:
  void clear_server_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& server_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_server_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_server_time();
  void set_allocated_server_time(::PROTOBUF_NAMESPACE_ID::Timestamp* server_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_server_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_server_time();
  public:
  void unsafe_arena_set_allocated_server_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* server_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_server_time();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracking_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* server_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BrandData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.BrandData) */ {
 public:
  inline BrandData() : BrandData(nullptr) {}
  ~BrandData() override;
  explicit PROTOBUF_CONSTEXPR BrandData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrandData(const BrandData& from);
  BrandData(BrandData&& from) noexcept
    : BrandData() {
    *this = ::std::move(from);
  }

  inline BrandData& operator=(const BrandData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrandData& operator=(BrandData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrandData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrandData* internal_default_instance() {
    return reinterpret_cast<const BrandData*>(
               &_BrandData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BrandData& a, BrandData& b) {
    a.Swap(&b);
  }
  inline void Swap(BrandData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrandData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrandData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrandData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrandData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrandData& from) {
    BrandData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrandData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.BrandData";
  }
  protected:
  explicit BrandData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogoNameFieldNumber = 1,
    kLogoBaseColorFieldNumber = 2,
    kTextColorFieldNumber = 3,
  };
  // string logo_name = 1;
  void clear_logo_name();
  const std::string& logo_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo_name();
  PROTOBUF_NODISCARD std::string* release_logo_name();
  void set_allocated_logo_name(std::string* logo_name);
  private:
  const std::string& _internal_logo_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo_name(const std::string& value);
  std::string* _internal_mutable_logo_name();
  public:

  // string logo_base_color = 2;
  void clear_logo_base_color();
  const std::string& logo_base_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo_base_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo_base_color();
  PROTOBUF_NODISCARD std::string* release_logo_base_color();
  void set_allocated_logo_base_color(std::string* logo_base_color);
  private:
  const std::string& _internal_logo_base_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo_base_color(const std::string& value);
  std::string* _internal_mutable_logo_base_color();
  public:

  // string text_color = 3;
  void clear_text_color();
  const std::string& text_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_color();
  PROTOBUF_NODISCARD std::string* release_text_color();
  void set_allocated_text_color(std::string* text_color);
  private:
  const std::string& _internal_text_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_color(const std::string& value);
  std::string* _internal_mutable_text_color();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.BrandData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_base_color_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoneyValue

// string currency = 1;
inline void MoneyValue::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& MoneyValue::currency() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.MoneyValue.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoneyValue::set_currency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.MoneyValue.currency)
}
inline std::string* MoneyValue::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.MoneyValue.currency)
  return _s;
}
inline const std::string& MoneyValue::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void MoneyValue::_internal_set_currency(const std::string& value) {
  
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* MoneyValue::_internal_mutable_currency() {
  
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* MoneyValue::release_currency() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.MoneyValue.currency)
  return _impl_.currency_.Release();
}
inline void MoneyValue::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MoneyValue.currency)
}

// int64 units = 2;
inline void MoneyValue::clear_units() {
  _impl_.units_ = int64_t{0};
}
inline int64_t MoneyValue::_internal_units() const {
  return _impl_.units_;
}
inline int64_t MoneyValue::units() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.MoneyValue.units)
  return _internal_units();
}
inline void MoneyValue::_internal_set_units(int64_t value) {
  
  _impl_.units_ = value;
}
inline void MoneyValue::set_units(int64_t value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.MoneyValue.units)
}

// int32 nano = 3;
inline void MoneyValue::clear_nano() {
  _impl_.nano_ = 0;
}
inline int32_t MoneyValue::_internal_nano() const {
  return _impl_.nano_;
}
inline int32_t MoneyValue::nano() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.MoneyValue.nano)
  return _internal_nano();
}
inline void MoneyValue::_internal_set_nano(int32_t value) {
  
  _impl_.nano_ = value;
}
inline void MoneyValue::set_nano(int32_t value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.MoneyValue.nano)
}

// -------------------------------------------------------------------

// Quotation

// int64 units = 1;
inline void Quotation::clear_units() {
  _impl_.units_ = int64_t{0};
}
inline int64_t Quotation::_internal_units() const {
  return _impl_.units_;
}
inline int64_t Quotation::units() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Quotation.units)
  return _internal_units();
}
inline void Quotation::_internal_set_units(int64_t value) {
  
  _impl_.units_ = value;
}
inline void Quotation::set_units(int64_t value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Quotation.units)
}

// int32 nano = 2;
inline void Quotation::clear_nano() {
  _impl_.nano_ = 0;
}
inline int32_t Quotation::_internal_nano() const {
  return _impl_.nano_;
}
inline int32_t Quotation::nano() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Quotation.nano)
  return _internal_nano();
}
inline void Quotation::_internal_set_nano(int32_t value) {
  
  _impl_.nano_ = value;
}
inline void Quotation::set_nano(int32_t value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Quotation.nano)
}

// -------------------------------------------------------------------

// Ping

// .google.protobuf.Timestamp time = 1;
inline bool Ping::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool Ping::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Ping::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Ping::time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Ping.time)
  return _internal_time();
}
inline void Ping::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Ping.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ping::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ping::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Ping.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ping::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ping::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Ping.time)
  return _msg;
}
inline void Ping::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Ping.time)
}

// string stream_id = 2;
inline void Ping::clear_stream_id() {
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& Ping::stream_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Ping.stream_id)
  return _internal_stream_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ping::set_stream_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stream_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Ping.stream_id)
}
inline std::string* Ping::mutable_stream_id() {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Ping.stream_id)
  return _s;
}
inline const std::string& Ping::_internal_stream_id() const {
  return _impl_.stream_id_.Get();
}
inline void Ping::_internal_set_stream_id(const std::string& value) {
  
  _impl_.stream_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Ping::_internal_mutable_stream_id() {
  
  return _impl_.stream_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Ping::release_stream_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Ping.stream_id)
  return _impl_.stream_id_.Release();
}
inline void Ping::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    
  } else {
    
  }
  _impl_.stream_id_.SetAllocated(stream_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Ping.stream_id)
}

// -------------------------------------------------------------------

// Page

// int32 limit = 1;
inline void Page::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t Page::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t Page::limit() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Page.limit)
  return _internal_limit();
}
inline void Page::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void Page::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Page.limit)
}

// int32 page_number = 2;
inline void Page::clear_page_number() {
  _impl_.page_number_ = 0;
}
inline int32_t Page::_internal_page_number() const {
  return _impl_.page_number_;
}
inline int32_t Page::page_number() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Page.page_number)
  return _internal_page_number();
}
inline void Page::_internal_set_page_number(int32_t value) {
  
  _impl_.page_number_ = value;
}
inline void Page::set_page_number(int32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Page.page_number)
}

// -------------------------------------------------------------------

// PageResponse

// int32 limit = 1;
inline void PageResponse::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t PageResponse::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t PageResponse::limit() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PageResponse.limit)
  return _internal_limit();
}
inline void PageResponse::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void PageResponse::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PageResponse.limit)
}

// int32 page_number = 2;
inline void PageResponse::clear_page_number() {
  _impl_.page_number_ = 0;
}
inline int32_t PageResponse::_internal_page_number() const {
  return _impl_.page_number_;
}
inline int32_t PageResponse::page_number() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PageResponse.page_number)
  return _internal_page_number();
}
inline void PageResponse::_internal_set_page_number(int32_t value) {
  
  _impl_.page_number_ = value;
}
inline void PageResponse::set_page_number(int32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PageResponse.page_number)
}

// int32 total_count = 3;
inline void PageResponse::clear_total_count() {
  _impl_.total_count_ = 0;
}
inline int32_t PageResponse::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t PageResponse::total_count() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PageResponse.total_count)
  return _internal_total_count();
}
inline void PageResponse::_internal_set_total_count(int32_t value) {
  
  _impl_.total_count_ = value;
}
inline void PageResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PageResponse.total_count)
}

// -------------------------------------------------------------------

// ResponseMetadata

// string tracking_id = 42;
inline void ResponseMetadata::clear_tracking_id() {
  _impl_.tracking_id_.ClearToEmpty();
}
inline const std::string& ResponseMetadata::tracking_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.tracking_id)
  return _internal_tracking_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMetadata::set_tracking_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tracking_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.tracking_id)
}
inline std::string* ResponseMetadata::mutable_tracking_id() {
  std::string* _s = _internal_mutable_tracking_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.tracking_id)
  return _s;
}
inline const std::string& ResponseMetadata::_internal_tracking_id() const {
  return _impl_.tracking_id_.Get();
}
inline void ResponseMetadata::_internal_set_tracking_id(const std::string& value) {
  
  _impl_.tracking_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseMetadata::_internal_mutable_tracking_id() {
  
  return _impl_.tracking_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseMetadata::release_tracking_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.tracking_id)
  return _impl_.tracking_id_.Release();
}
inline void ResponseMetadata::set_allocated_tracking_id(std::string* tracking_id) {
  if (tracking_id != nullptr) {
    
  } else {
    
  }
  _impl_.tracking_id_.SetAllocated(tracking_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tracking_id_.IsDefault()) {
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.tracking_id)
}

// .google.protobuf.Timestamp server_time = 43;
inline bool ResponseMetadata::_internal_has_server_time() const {
  return this != internal_default_instance() && _impl_.server_time_ != nullptr;
}
inline bool ResponseMetadata::has_server_time() const {
  return _internal_has_server_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ResponseMetadata::_internal_server_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.server_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ResponseMetadata::server_time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.server_time)
  return _internal_server_time();
}
inline void ResponseMetadata::unsafe_arena_set_allocated_server_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* server_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_time_);
  }
  _impl_.server_time_ = server_time;
  if (server_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.server_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResponseMetadata::release_server_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.server_time_;
  _impl_.server_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResponseMetadata::unsafe_arena_release_server_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.server_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.server_time_;
  _impl_.server_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResponseMetadata::_internal_mutable_server_time() {
  
  if (_impl_.server_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.server_time_ = p;
  }
  return _impl_.server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResponseMetadata::mutable_server_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_server_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.server_time)
  return _msg;
}
inline void ResponseMetadata::set_allocated_server_time(::PROTOBUF_NAMESPACE_ID::Timestamp* server_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_time_);
  }
  if (server_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_time));
    if (message_arena != submessage_arena) {
      server_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_time_ = server_time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.ResponseMetadata.server_time)
}

// -------------------------------------------------------------------

// BrandData

// string logo_name = 1;
inline void BrandData::clear_logo_name() {
  _impl_.logo_name_.ClearToEmpty();
}
inline const std::string& BrandData::logo_name() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrandData.logo_name)
  return _internal_logo_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrandData::set_logo_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logo_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrandData.logo_name)
}
inline std::string* BrandData::mutable_logo_name() {
  std::string* _s = _internal_mutable_logo_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrandData.logo_name)
  return _s;
}
inline const std::string& BrandData::_internal_logo_name() const {
  return _impl_.logo_name_.Get();
}
inline void BrandData::_internal_set_logo_name(const std::string& value) {
  
  _impl_.logo_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BrandData::_internal_mutable_logo_name() {
  
  return _impl_.logo_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BrandData::release_logo_name() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrandData.logo_name)
  return _impl_.logo_name_.Release();
}
inline void BrandData::set_allocated_logo_name(std::string* logo_name) {
  if (logo_name != nullptr) {
    
  } else {
    
  }
  _impl_.logo_name_.SetAllocated(logo_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logo_name_.IsDefault()) {
    _impl_.logo_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrandData.logo_name)
}

// string logo_base_color = 2;
inline void BrandData::clear_logo_base_color() {
  _impl_.logo_base_color_.ClearToEmpty();
}
inline const std::string& BrandData::logo_base_color() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrandData.logo_base_color)
  return _internal_logo_base_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrandData::set_logo_base_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logo_base_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrandData.logo_base_color)
}
inline std::string* BrandData::mutable_logo_base_color() {
  std::string* _s = _internal_mutable_logo_base_color();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrandData.logo_base_color)
  return _s;
}
inline const std::string& BrandData::_internal_logo_base_color() const {
  return _impl_.logo_base_color_.Get();
}
inline void BrandData::_internal_set_logo_base_color(const std::string& value) {
  
  _impl_.logo_base_color_.Set(value, GetArenaForAllocation());
}
inline std::string* BrandData::_internal_mutable_logo_base_color() {
  
  return _impl_.logo_base_color_.Mutable(GetArenaForAllocation());
}
inline std::string* BrandData::release_logo_base_color() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrandData.logo_base_color)
  return _impl_.logo_base_color_.Release();
}
inline void BrandData::set_allocated_logo_base_color(std::string* logo_base_color) {
  if (logo_base_color != nullptr) {
    
  } else {
    
  }
  _impl_.logo_base_color_.SetAllocated(logo_base_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logo_base_color_.IsDefault()) {
    _impl_.logo_base_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrandData.logo_base_color)
}

// string text_color = 3;
inline void BrandData::clear_text_color() {
  _impl_.text_color_.ClearToEmpty();
}
inline const std::string& BrandData::text_color() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrandData.text_color)
  return _internal_text_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrandData::set_text_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrandData.text_color)
}
inline std::string* BrandData::mutable_text_color() {
  std::string* _s = _internal_mutable_text_color();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrandData.text_color)
  return _s;
}
inline const std::string& BrandData::_internal_text_color() const {
  return _impl_.text_color_.Get();
}
inline void BrandData::_internal_set_text_color(const std::string& value) {
  
  _impl_.text_color_.Set(value, GetArenaForAllocation());
}
inline std::string* BrandData::_internal_mutable_text_color() {
  
  return _impl_.text_color_.Mutable(GetArenaForAllocation());
}
inline std::string* BrandData::release_text_color() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrandData.text_color)
  return _impl_.text_color_.Release();
}
inline void BrandData::set_allocated_text_color(std::string* text_color) {
  if (text_color != nullptr) {
    
  } else {
    
  }
  _impl_.text_color_.SetAllocated(text_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_color_.IsDefault()) {
    _impl_.text_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrandData.text_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::InstrumentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::InstrumentType>() {
  return ::tinkoff::public_::invest::api::contract::v1::InstrumentType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>() {
  return ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::PriceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::PriceType>() {
  return ::tinkoff::public_::invest::api::contract::v1::PriceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
