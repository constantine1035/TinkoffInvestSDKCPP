// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2eproto;
namespace tinkoff {
namespace public {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class MoneyValue;
struct MoneyValueDefaultTypeInternal;
extern MoneyValueDefaultTypeInternal _MoneyValue_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Quotation;
struct QuotationDefaultTypeInternal;
extern QuotationDefaultTypeInternal _Quotation_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tinkoff {
namespace public {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
enum InstrumentType : int {
  INSTRUMENT_TYPE_UNSPECIFIED = 0,
  INSTRUMENT_TYPE_BOND = 1,
  INSTRUMENT_TYPE_SHARE = 2,
  INSTRUMENT_TYPE_CURRENCY = 3,
  INSTRUMENT_TYPE_ETF = 4,
  INSTRUMENT_TYPE_FUTURES = 5,
  INSTRUMENT_TYPE_SP = 6,
  INSTRUMENT_TYPE_OPTION = 7,
  INSTRUMENT_TYPE_CLEARING_CERTIFICATE = 8,
  InstrumentType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InstrumentType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InstrumentType_IsValid(int value);
extern const uint32_t InstrumentType_internal_data_[];
constexpr InstrumentType InstrumentType_MIN = static_cast<InstrumentType>(0);
constexpr InstrumentType InstrumentType_MAX = static_cast<InstrumentType>(8);
constexpr int InstrumentType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
InstrumentType_descriptor();
template <typename T>
const std::string& InstrumentType_Name(T value) {
  static_assert(std::is_same<T, InstrumentType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InstrumentType_Name().");
  return InstrumentType_Name(static_cast<InstrumentType>(value));
}
template <>
inline const std::string& InstrumentType_Name(InstrumentType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<InstrumentType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool InstrumentType_Parse(absl::string_view name, InstrumentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstrumentType>(
      InstrumentType_descriptor(), name, value);
}
enum SecurityTradingStatus : int {
  SECURITY_TRADING_STATUS_UNSPECIFIED = 0,
  SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING = 1,
  SECURITY_TRADING_STATUS_OPENING_PERIOD = 2,
  SECURITY_TRADING_STATUS_CLOSING_PERIOD = 3,
  SECURITY_TRADING_STATUS_BREAK_IN_TRADING = 4,
  SECURITY_TRADING_STATUS_NORMAL_TRADING = 5,
  SECURITY_TRADING_STATUS_CLOSING_AUCTION = 6,
  SECURITY_TRADING_STATUS_DARK_POOL_AUCTION = 7,
  SECURITY_TRADING_STATUS_DISCRETE_AUCTION = 8,
  SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD = 9,
  SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE = 10,
  SECURITY_TRADING_STATUS_SESSION_ASSIGNED = 11,
  SECURITY_TRADING_STATUS_SESSION_CLOSE = 12,
  SECURITY_TRADING_STATUS_SESSION_OPEN = 13,
  SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING = 14,
  SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING = 15,
  SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING = 16,
  SecurityTradingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SecurityTradingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SecurityTradingStatus_IsValid(int value);
extern const uint32_t SecurityTradingStatus_internal_data_[];
constexpr SecurityTradingStatus SecurityTradingStatus_MIN = static_cast<SecurityTradingStatus>(0);
constexpr SecurityTradingStatus SecurityTradingStatus_MAX = static_cast<SecurityTradingStatus>(16);
constexpr int SecurityTradingStatus_ARRAYSIZE = 16 + 1;
const ::google::protobuf::EnumDescriptor*
SecurityTradingStatus_descriptor();
template <typename T>
const std::string& SecurityTradingStatus_Name(T value) {
  static_assert(std::is_same<T, SecurityTradingStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SecurityTradingStatus_Name().");
  return SecurityTradingStatus_Name(static_cast<SecurityTradingStatus>(value));
}
template <>
inline const std::string& SecurityTradingStatus_Name(SecurityTradingStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SecurityTradingStatus_descriptor,
                                                 0, 16>(
      static_cast<int>(value));
}
inline bool SecurityTradingStatus_Parse(absl::string_view name, SecurityTradingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityTradingStatus>(
      SecurityTradingStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Quotation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.Quotation) */ {
 public:
  inline Quotation() : Quotation(nullptr) {}
  ~Quotation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Quotation(::google::protobuf::internal::ConstantInitialized);

  inline Quotation(const Quotation& from)
      : Quotation(nullptr, from) {}
  Quotation(Quotation&& from) noexcept
    : Quotation() {
    *this = ::std::move(from);
  }

  inline Quotation& operator=(const Quotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quotation& operator=(Quotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quotation* internal_default_instance() {
    return reinterpret_cast<const Quotation*>(
               &_Quotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Quotation& a, Quotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Quotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quotation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quotation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quotation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Quotation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Quotation& from) {
    Quotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Quotation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public.invest.api.contract.v1.Quotation";
  }
  protected:
  explicit Quotation(::google::protobuf::Arena* arena);
  Quotation(::google::protobuf::Arena* arena, const Quotation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
    kNanoFieldNumber = 2,
  };
  // int64 units = 1;
  void clear_units() ;
  ::int64_t units() const;
  void set_units(::int64_t value);

  private:
  ::int64_t _internal_units() const;
  void _internal_set_units(::int64_t value);

  public:
  // int32 nano = 2;
  void clear_nano() ;
  ::int32_t nano() const;
  void set_nano(::int32_t value);

  private:
  ::int32_t _internal_nano() const;
  void _internal_set_nano(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.Quotation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t units_;
    ::int32_t nano_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class MoneyValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.MoneyValue) */ {
 public:
  inline MoneyValue() : MoneyValue(nullptr) {}
  ~MoneyValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoneyValue(::google::protobuf::internal::ConstantInitialized);

  inline MoneyValue(const MoneyValue& from)
      : MoneyValue(nullptr, from) {}
  MoneyValue(MoneyValue&& from) noexcept
    : MoneyValue() {
    *this = ::std::move(from);
  }

  inline MoneyValue& operator=(const MoneyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoneyValue& operator=(MoneyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoneyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoneyValue* internal_default_instance() {
    return reinterpret_cast<const MoneyValue*>(
               &_MoneyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MoneyValue& a, MoneyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MoneyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoneyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoneyValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoneyValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoneyValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoneyValue& from) {
    MoneyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MoneyValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public.invest.api.contract.v1.MoneyValue";
  }
  protected:
  explicit MoneyValue(::google::protobuf::Arena* arena);
  MoneyValue(::google::protobuf::Arena* arena, const MoneyValue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kUnitsFieldNumber = 2,
    kNanoFieldNumber = 3,
  };
  // string currency = 1;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // int64 units = 2;
  void clear_units() ;
  ::int64_t units() const;
  void set_units(::int64_t value);

  private:
  ::int64_t _internal_units() const;
  void _internal_set_units(::int64_t value);

  public:
  // int32 nano = 3;
  void clear_nano() ;
  ::int32_t nano() const;
  void set_nano(::int32_t value);

  private:
  ::int32_t _internal_nano() const;
  void _internal_set_nano(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.MoneyValue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::int64_t units_;
    ::int32_t nano_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class Ping final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  ~Ping() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ping(::google::protobuf::internal::ConstantInitialized);

  inline Ping(const Ping& from)
      : Ping(nullptr, from) {}
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ping& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Ping& from) {
    Ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Ping* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public.invest.api.contract.v1.Ping";
  }
  protected:
  explicit Ping(::google::protobuf::Arena* arena);
  Ping(::google::protobuf::Arena* arena, const Ping& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.Ping)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MoneyValue

// string currency = 1;
inline void MoneyValue::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& MoneyValue::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.MoneyValue.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MoneyValue::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.MoneyValue.currency)
}
inline std::string* MoneyValue::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.MoneyValue.currency)
  return _s;
}
inline const std::string& MoneyValue::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void MoneyValue::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* MoneyValue::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* MoneyValue::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.MoneyValue.currency)
  return _impl_.currency_.Release();
}
inline void MoneyValue::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.MoneyValue.currency)
}

// int64 units = 2;
inline void MoneyValue::clear_units() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.units_ = ::int64_t{0};
}
inline ::int64_t MoneyValue::units() const {
  // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.MoneyValue.units)
  return _internal_units();
}
inline void MoneyValue::set_units(::int64_t value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.MoneyValue.units)
}
inline ::int64_t MoneyValue::_internal_units() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.units_;
}
inline void MoneyValue::_internal_set_units(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.units_ = value;
}

// int32 nano = 3;
inline void MoneyValue::clear_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nano_ = 0;
}
inline ::int32_t MoneyValue::nano() const {
  // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.MoneyValue.nano)
  return _internal_nano();
}
inline void MoneyValue::set_nano(::int32_t value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.MoneyValue.nano)
}
inline ::int32_t MoneyValue::_internal_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nano_;
}
inline void MoneyValue::_internal_set_nano(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nano_ = value;
}

// -------------------------------------------------------------------

// Quotation

// int64 units = 1;
inline void Quotation::clear_units() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.units_ = ::int64_t{0};
}
inline ::int64_t Quotation::units() const {
  // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Quotation.units)
  return _internal_units();
}
inline void Quotation::set_units(::int64_t value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Quotation.units)
}
inline ::int64_t Quotation::_internal_units() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.units_;
}
inline void Quotation::_internal_set_units(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.units_ = value;
}

// int32 nano = 2;
inline void Quotation::clear_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nano_ = 0;
}
inline ::int32_t Quotation::nano() const {
  // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Quotation.nano)
  return _internal_nano();
}
inline void Quotation::set_nano(::int32_t value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Quotation.nano)
}
inline ::int32_t Quotation::_internal_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nano_;
}
inline void Quotation::_internal_set_nano(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nano_ = value;
}

// -------------------------------------------------------------------

// Ping

// .google.protobuf.Timestamp time = 1;
inline bool Ping::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Ping::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Ping::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Ping.time)
  return _internal_time();
}
inline void Ping::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.Ping.time)
}
inline ::google::protobuf::Timestamp* Ping::release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Ping::unsafe_arena_release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Ping.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Ping::_internal_mutable_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* Ping::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Ping.time)
  return _msg;
}
inline void Ping::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Ping.time)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public
}  // namespace tinkoff


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tinkoff::public::invest::api::contract::v1::InstrumentType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public::invest::api::contract::v1::InstrumentType>() {
  return ::tinkoff::public::invest::api::contract::v1::InstrumentType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public::invest::api::contract::v1::SecurityTradingStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public::invest::api::contract::v1::SecurityTradingStatus>() {
  return ::tinkoff::public::invest::api::contract::v1::SecurityTradingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_2eproto_2epb_2eh
