// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sandbox.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sandbox_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sandbox_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "orders.pb.h"
#include "operations.pb.h"
#include "users.pb.h"
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sandbox_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sandbox_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sandbox_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class CloseSandboxAccountRequest;
struct CloseSandboxAccountRequestDefaultTypeInternal;
extern CloseSandboxAccountRequestDefaultTypeInternal _CloseSandboxAccountRequest_default_instance_;
class CloseSandboxAccountResponse;
struct CloseSandboxAccountResponseDefaultTypeInternal;
extern CloseSandboxAccountResponseDefaultTypeInternal _CloseSandboxAccountResponse_default_instance_;
class OpenSandboxAccountRequest;
struct OpenSandboxAccountRequestDefaultTypeInternal;
extern OpenSandboxAccountRequestDefaultTypeInternal _OpenSandboxAccountRequest_default_instance_;
class OpenSandboxAccountResponse;
struct OpenSandboxAccountResponseDefaultTypeInternal;
extern OpenSandboxAccountResponseDefaultTypeInternal _OpenSandboxAccountResponse_default_instance_;
class SandboxPayInRequest;
struct SandboxPayInRequestDefaultTypeInternal;
extern SandboxPayInRequestDefaultTypeInternal _SandboxPayInRequest_default_instance_;
class SandboxPayInResponse;
struct SandboxPayInResponseDefaultTypeInternal;
extern SandboxPayInResponseDefaultTypeInternal _SandboxPayInResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

// ===================================================================

class OpenSandboxAccountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest) */ {
 public:
  inline OpenSandboxAccountRequest() : OpenSandboxAccountRequest(nullptr) {}
  ~OpenSandboxAccountRequest() override;
  explicit PROTOBUF_CONSTEXPR OpenSandboxAccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenSandboxAccountRequest(const OpenSandboxAccountRequest& from);
  OpenSandboxAccountRequest(OpenSandboxAccountRequest&& from) noexcept
    : OpenSandboxAccountRequest() {
    *this = ::std::move(from);
  }

  inline OpenSandboxAccountRequest& operator=(const OpenSandboxAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSandboxAccountRequest& operator=(OpenSandboxAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenSandboxAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenSandboxAccountRequest* internal_default_instance() {
    return reinterpret_cast<const OpenSandboxAccountRequest*>(
               &_OpenSandboxAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenSandboxAccountRequest& a, OpenSandboxAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSandboxAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenSandboxAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenSandboxAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenSandboxAccountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenSandboxAccountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpenSandboxAccountRequest& from) {
    OpenSandboxAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSandboxAccountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest";
  }
  protected:
  explicit OpenSandboxAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};
// -------------------------------------------------------------------

class OpenSandboxAccountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse) */ {
 public:
  inline OpenSandboxAccountResponse() : OpenSandboxAccountResponse(nullptr) {}
  ~OpenSandboxAccountResponse() override;
  explicit PROTOBUF_CONSTEXPR OpenSandboxAccountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenSandboxAccountResponse(const OpenSandboxAccountResponse& from);
  OpenSandboxAccountResponse(OpenSandboxAccountResponse&& from) noexcept
    : OpenSandboxAccountResponse() {
    *this = ::std::move(from);
  }

  inline OpenSandboxAccountResponse& operator=(const OpenSandboxAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSandboxAccountResponse& operator=(OpenSandboxAccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenSandboxAccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenSandboxAccountResponse* internal_default_instance() {
    return reinterpret_cast<const OpenSandboxAccountResponse*>(
               &_OpenSandboxAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpenSandboxAccountResponse& a, OpenSandboxAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSandboxAccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenSandboxAccountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenSandboxAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenSandboxAccountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenSandboxAccountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpenSandboxAccountResponse& from) {
    OpenSandboxAccountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSandboxAccountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse";
  }
  protected:
  explicit OpenSandboxAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};
// -------------------------------------------------------------------

class CloseSandboxAccountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest) */ {
 public:
  inline CloseSandboxAccountRequest() : CloseSandboxAccountRequest(nullptr) {}
  ~CloseSandboxAccountRequest() override;
  explicit PROTOBUF_CONSTEXPR CloseSandboxAccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseSandboxAccountRequest(const CloseSandboxAccountRequest& from);
  CloseSandboxAccountRequest(CloseSandboxAccountRequest&& from) noexcept
    : CloseSandboxAccountRequest() {
    *this = ::std::move(from);
  }

  inline CloseSandboxAccountRequest& operator=(const CloseSandboxAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSandboxAccountRequest& operator=(CloseSandboxAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSandboxAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSandboxAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CloseSandboxAccountRequest*>(
               &_CloseSandboxAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseSandboxAccountRequest& a, CloseSandboxAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSandboxAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSandboxAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseSandboxAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseSandboxAccountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseSandboxAccountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseSandboxAccountRequest& from) {
    CloseSandboxAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseSandboxAccountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest";
  }
  protected:
  explicit CloseSandboxAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};
// -------------------------------------------------------------------

class CloseSandboxAccountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse) */ {
 public:
  inline CloseSandboxAccountResponse() : CloseSandboxAccountResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CloseSandboxAccountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseSandboxAccountResponse(const CloseSandboxAccountResponse& from);
  CloseSandboxAccountResponse(CloseSandboxAccountResponse&& from) noexcept
    : CloseSandboxAccountResponse() {
    *this = ::std::move(from);
  }

  inline CloseSandboxAccountResponse& operator=(const CloseSandboxAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSandboxAccountResponse& operator=(CloseSandboxAccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSandboxAccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSandboxAccountResponse* internal_default_instance() {
    return reinterpret_cast<const CloseSandboxAccountResponse*>(
               &_CloseSandboxAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseSandboxAccountResponse& a, CloseSandboxAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSandboxAccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSandboxAccountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseSandboxAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseSandboxAccountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseSandboxAccountResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseSandboxAccountResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse";
  }
  protected:
  explicit CloseSandboxAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_sandbox_2eproto;
};
// -------------------------------------------------------------------

class SandboxPayInRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest) */ {
 public:
  inline SandboxPayInRequest() : SandboxPayInRequest(nullptr) {}
  ~SandboxPayInRequest() override;
  explicit PROTOBUF_CONSTEXPR SandboxPayInRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SandboxPayInRequest(const SandboxPayInRequest& from);
  SandboxPayInRequest(SandboxPayInRequest&& from) noexcept
    : SandboxPayInRequest() {
    *this = ::std::move(from);
  }

  inline SandboxPayInRequest& operator=(const SandboxPayInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SandboxPayInRequest& operator=(SandboxPayInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SandboxPayInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SandboxPayInRequest* internal_default_instance() {
    return reinterpret_cast<const SandboxPayInRequest*>(
               &_SandboxPayInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SandboxPayInRequest& a, SandboxPayInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SandboxPayInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SandboxPayInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SandboxPayInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SandboxPayInRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SandboxPayInRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SandboxPayInRequest& from) {
    SandboxPayInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SandboxPayInRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest";
  }
  protected:
  explicit SandboxPayInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_amount();
  void set_allocated_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* amount);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};
// -------------------------------------------------------------------

class SandboxPayInResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse) */ {
 public:
  inline SandboxPayInResponse() : SandboxPayInResponse(nullptr) {}
  ~SandboxPayInResponse() override;
  explicit PROTOBUF_CONSTEXPR SandboxPayInResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SandboxPayInResponse(const SandboxPayInResponse& from);
  SandboxPayInResponse(SandboxPayInResponse&& from) noexcept
    : SandboxPayInResponse() {
    *this = ::std::move(from);
  }

  inline SandboxPayInResponse& operator=(const SandboxPayInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SandboxPayInResponse& operator=(SandboxPayInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SandboxPayInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SandboxPayInResponse* internal_default_instance() {
    return reinterpret_cast<const SandboxPayInResponse*>(
               &_SandboxPayInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SandboxPayInResponse& a, SandboxPayInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SandboxPayInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SandboxPayInResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SandboxPayInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SandboxPayInResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SandboxPayInResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SandboxPayInResponse& from) {
    SandboxPayInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SandboxPayInResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse";
  }
  protected:
  explicit SandboxPayInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue balance = 1;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& balance() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_balance();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_balance();
  void set_allocated_balance(::tinkoff::public_::invest::api::contract::v1::MoneyValue* balance);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_balance() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_balance();
  public:
  void unsafe_arena_set_allocated_balance(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* balance);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_balance();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* balance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenSandboxAccountRequest

// optional string name = 1;
inline bool OpenSandboxAccountRequest::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpenSandboxAccountRequest::has_name() const {
  return _internal_has_name();
}
inline void OpenSandboxAccountRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpenSandboxAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenSandboxAccountRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest.name)
}
inline std::string* OpenSandboxAccountRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest.name)
  return _s;
}
inline const std::string& OpenSandboxAccountRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void OpenSandboxAccountRequest::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* OpenSandboxAccountRequest::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* OpenSandboxAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OpenSandboxAccountRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest.name)
}

// -------------------------------------------------------------------

// OpenSandboxAccountResponse

// string account_id = 1;
inline void OpenSandboxAccountResponse::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OpenSandboxAccountResponse::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenSandboxAccountResponse::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
}
inline std::string* OpenSandboxAccountResponse::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
  return _s;
}
inline const std::string& OpenSandboxAccountResponse::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OpenSandboxAccountResponse::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OpenSandboxAccountResponse::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OpenSandboxAccountResponse::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
  return _impl_.account_id_.Release();
}
inline void OpenSandboxAccountResponse::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
}

// -------------------------------------------------------------------

// CloseSandboxAccountRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CloseSandboxAccountRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& CloseSandboxAccountRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseSandboxAccountRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
}
inline std::string* CloseSandboxAccountRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
  return _s;
}
inline const std::string& CloseSandboxAccountRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void CloseSandboxAccountRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseSandboxAccountRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseSandboxAccountRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void CloseSandboxAccountRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
}

// -------------------------------------------------------------------

// CloseSandboxAccountResponse

// -------------------------------------------------------------------

// SandboxPayInRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void SandboxPayInRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& SandboxPayInRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SandboxPayInRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
}
inline std::string* SandboxPayInRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
  return _s;
}
inline const std::string& SandboxPayInRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void SandboxPayInRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SandboxPayInRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SandboxPayInRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void SandboxPayInRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue amount = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool SandboxPayInRequest::_internal_has_amount() const {
  return this != internal_default_instance() && _impl_.amount_ != nullptr;
}
inline bool SandboxPayInRequest::has_amount() const {
  return _internal_has_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInRequest::_internal_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInRequest::amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
  return _internal_amount();
}
inline void SandboxPayInRequest::unsafe_arena_set_allocated_amount(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::release_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::_internal_mutable_amount() {
  
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::mutable_amount() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
  return _msg;
}
inline void SandboxPayInRequest::set_allocated_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
}

// -------------------------------------------------------------------

// SandboxPayInResponse

// .tinkoff.public_.invest.api.contract.v1.MoneyValue balance = 1;
inline bool SandboxPayInResponse::_internal_has_balance() const {
  return this != internal_default_instance() && _impl_.balance_ != nullptr;
}
inline bool SandboxPayInResponse::has_balance() const {
  return _internal_has_balance();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInResponse::_internal_balance() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.balance_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInResponse::balance() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
  return _internal_balance();
}
inline void SandboxPayInResponse::unsafe_arena_set_allocated_balance(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* balance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  _impl_.balance_ = balance;
  if (balance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::release_balance() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::unsafe_arena_release_balance() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::_internal_mutable_balance() {
  
  if (_impl_.balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.balance_ = p;
  }
  return _impl_.balance_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::mutable_balance() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_balance();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
  return _msg;
}
inline void SandboxPayInResponse::set_allocated_balance(::tinkoff::public_::invest::api::contract::v1::MoneyValue* balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  if (balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(balance));
    if (message_arena != submessage_arena) {
      balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.balance_ = balance;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sandbox_2eproto
