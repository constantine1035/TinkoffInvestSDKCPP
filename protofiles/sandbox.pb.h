// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sandbox.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_sandbox_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sandbox_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
#include "orders.pb.h"
#include "operations.pb.h"
#include "users.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sandbox_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sandbox_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sandbox_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class CloseSandboxAccountRequest;
struct CloseSandboxAccountRequestDefaultTypeInternal;
extern CloseSandboxAccountRequestDefaultTypeInternal _CloseSandboxAccountRequest_default_instance_;
class CloseSandboxAccountResponse;
struct CloseSandboxAccountResponseDefaultTypeInternal;
extern CloseSandboxAccountResponseDefaultTypeInternal _CloseSandboxAccountResponse_default_instance_;
class OpenSandboxAccountRequest;
struct OpenSandboxAccountRequestDefaultTypeInternal;
extern OpenSandboxAccountRequestDefaultTypeInternal _OpenSandboxAccountRequest_default_instance_;
class OpenSandboxAccountResponse;
struct OpenSandboxAccountResponseDefaultTypeInternal;
extern OpenSandboxAccountResponseDefaultTypeInternal _OpenSandboxAccountResponse_default_instance_;
class SandboxPayInRequest;
struct SandboxPayInRequestDefaultTypeInternal;
extern SandboxPayInRequestDefaultTypeInternal _SandboxPayInRequest_default_instance_;
class SandboxPayInResponse;
struct SandboxPayInResponseDefaultTypeInternal;
extern SandboxPayInResponseDefaultTypeInternal _SandboxPayInResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class OpenSandboxAccountResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse) */ {
 public:
  inline OpenSandboxAccountResponse() : OpenSandboxAccountResponse(nullptr) {}
  ~OpenSandboxAccountResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OpenSandboxAccountResponse(::google::protobuf::internal::ConstantInitialized);

  inline OpenSandboxAccountResponse(const OpenSandboxAccountResponse& from)
      : OpenSandboxAccountResponse(nullptr, from) {}
  OpenSandboxAccountResponse(OpenSandboxAccountResponse&& from) noexcept
    : OpenSandboxAccountResponse() {
    *this = ::std::move(from);
  }

  inline OpenSandboxAccountResponse& operator=(const OpenSandboxAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSandboxAccountResponse& operator=(OpenSandboxAccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenSandboxAccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenSandboxAccountResponse* internal_default_instance() {
    return reinterpret_cast<const OpenSandboxAccountResponse*>(
               &_OpenSandboxAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpenSandboxAccountResponse& a, OpenSandboxAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSandboxAccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenSandboxAccountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenSandboxAccountResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenSandboxAccountResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpenSandboxAccountResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OpenSandboxAccountResponse& from) {
    OpenSandboxAccountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpenSandboxAccountResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse";
  }
  protected:
  explicit OpenSandboxAccountResponse(::google::protobuf::Arena* arena);
  OpenSandboxAccountResponse(::google::protobuf::Arena* arena, const OpenSandboxAccountResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* value);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};// -------------------------------------------------------------------

class OpenSandboxAccountRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest) */ {
 public:
  inline OpenSandboxAccountRequest() : OpenSandboxAccountRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OpenSandboxAccountRequest(::google::protobuf::internal::ConstantInitialized);

  inline OpenSandboxAccountRequest(const OpenSandboxAccountRequest& from)
      : OpenSandboxAccountRequest(nullptr, from) {}
  OpenSandboxAccountRequest(OpenSandboxAccountRequest&& from) noexcept
    : OpenSandboxAccountRequest() {
    *this = ::std::move(from);
  }

  inline OpenSandboxAccountRequest& operator=(const OpenSandboxAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSandboxAccountRequest& operator=(OpenSandboxAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenSandboxAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenSandboxAccountRequest* internal_default_instance() {
    return reinterpret_cast<const OpenSandboxAccountRequest*>(
               &_OpenSandboxAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenSandboxAccountRequest& a, OpenSandboxAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSandboxAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenSandboxAccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenSandboxAccountRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenSandboxAccountRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OpenSandboxAccountRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OpenSandboxAccountRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest";
  }
  protected:
  explicit OpenSandboxAccountRequest(::google::protobuf::Arena* arena);
  OpenSandboxAccountRequest(::google::protobuf::Arena* arena, const OpenSandboxAccountRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_sandbox_2eproto;
};// -------------------------------------------------------------------

class CloseSandboxAccountResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse) */ {
 public:
  inline CloseSandboxAccountResponse() : CloseSandboxAccountResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CloseSandboxAccountResponse(::google::protobuf::internal::ConstantInitialized);

  inline CloseSandboxAccountResponse(const CloseSandboxAccountResponse& from)
      : CloseSandboxAccountResponse(nullptr, from) {}
  CloseSandboxAccountResponse(CloseSandboxAccountResponse&& from) noexcept
    : CloseSandboxAccountResponse() {
    *this = ::std::move(from);
  }

  inline CloseSandboxAccountResponse& operator=(const CloseSandboxAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSandboxAccountResponse& operator=(CloseSandboxAccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSandboxAccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSandboxAccountResponse* internal_default_instance() {
    return reinterpret_cast<const CloseSandboxAccountResponse*>(
               &_CloseSandboxAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseSandboxAccountResponse& a, CloseSandboxAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSandboxAccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSandboxAccountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseSandboxAccountResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseSandboxAccountResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseSandboxAccountResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseSandboxAccountResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse";
  }
  protected:
  explicit CloseSandboxAccountResponse(::google::protobuf::Arena* arena);
  CloseSandboxAccountResponse(::google::protobuf::Arena* arena, const CloseSandboxAccountResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_sandbox_2eproto;
};// -------------------------------------------------------------------

class CloseSandboxAccountRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest) */ {
 public:
  inline CloseSandboxAccountRequest() : CloseSandboxAccountRequest(nullptr) {}
  ~CloseSandboxAccountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CloseSandboxAccountRequest(::google::protobuf::internal::ConstantInitialized);

  inline CloseSandboxAccountRequest(const CloseSandboxAccountRequest& from)
      : CloseSandboxAccountRequest(nullptr, from) {}
  CloseSandboxAccountRequest(CloseSandboxAccountRequest&& from) noexcept
    : CloseSandboxAccountRequest() {
    *this = ::std::move(from);
  }

  inline CloseSandboxAccountRequest& operator=(const CloseSandboxAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSandboxAccountRequest& operator=(CloseSandboxAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSandboxAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSandboxAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CloseSandboxAccountRequest*>(
               &_CloseSandboxAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseSandboxAccountRequest& a, CloseSandboxAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSandboxAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSandboxAccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseSandboxAccountRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseSandboxAccountRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CloseSandboxAccountRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CloseSandboxAccountRequest& from) {
    CloseSandboxAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CloseSandboxAccountRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest";
  }
  protected:
  explicit CloseSandboxAccountRequest(::google::protobuf::Arena* arena);
  CloseSandboxAccountRequest(::google::protobuf::Arena* arena, const CloseSandboxAccountRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* value);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};// -------------------------------------------------------------------

class SandboxPayInResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse) */ {
 public:
  inline SandboxPayInResponse() : SandboxPayInResponse(nullptr) {}
  ~SandboxPayInResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SandboxPayInResponse(::google::protobuf::internal::ConstantInitialized);

  inline SandboxPayInResponse(const SandboxPayInResponse& from)
      : SandboxPayInResponse(nullptr, from) {}
  SandboxPayInResponse(SandboxPayInResponse&& from) noexcept
    : SandboxPayInResponse() {
    *this = ::std::move(from);
  }

  inline SandboxPayInResponse& operator=(const SandboxPayInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SandboxPayInResponse& operator=(SandboxPayInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SandboxPayInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SandboxPayInResponse* internal_default_instance() {
    return reinterpret_cast<const SandboxPayInResponse*>(
               &_SandboxPayInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SandboxPayInResponse& a, SandboxPayInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SandboxPayInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SandboxPayInResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SandboxPayInResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SandboxPayInResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SandboxPayInResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SandboxPayInResponse& from) {
    SandboxPayInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SandboxPayInResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse";
  }
  protected:
  explicit SandboxPayInResponse(::google::protobuf::Arena* arena);
  SandboxPayInResponse(::google::protobuf::Arena* arena, const SandboxPayInResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue balance = 1;
  bool has_balance() const;
  void clear_balance() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& balance() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_balance();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_balance();
  void set_allocated_balance(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_balance(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_balance();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_balance() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_balance();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* balance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};// -------------------------------------------------------------------

class SandboxPayInRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest) */ {
 public:
  inline SandboxPayInRequest() : SandboxPayInRequest(nullptr) {}
  ~SandboxPayInRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SandboxPayInRequest(::google::protobuf::internal::ConstantInitialized);

  inline SandboxPayInRequest(const SandboxPayInRequest& from)
      : SandboxPayInRequest(nullptr, from) {}
  SandboxPayInRequest(SandboxPayInRequest&& from) noexcept
    : SandboxPayInRequest() {
    *this = ::std::move(from);
  }

  inline SandboxPayInRequest& operator=(const SandboxPayInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SandboxPayInRequest& operator=(SandboxPayInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SandboxPayInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SandboxPayInRequest* internal_default_instance() {
    return reinterpret_cast<const SandboxPayInRequest*>(
               &_SandboxPayInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SandboxPayInRequest& a, SandboxPayInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SandboxPayInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SandboxPayInRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SandboxPayInRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SandboxPayInRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SandboxPayInRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SandboxPayInRequest& from) {
    SandboxPayInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SandboxPayInRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest";
  }
  protected:
  explicit SandboxPayInRequest(::google::protobuf::Arena* arena);
  SandboxPayInRequest(::google::protobuf::Arena* arena, const SandboxPayInRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* value);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount = 2;
  bool has_amount() const;
  void clear_amount() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_amount();
  void set_allocated_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_amount();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* amount_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sandbox_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OpenSandboxAccountRequest

// -------------------------------------------------------------------

// OpenSandboxAccountResponse

// string account_id = 1;
inline void OpenSandboxAccountResponse::clear_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OpenSandboxAccountResponse::account_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenSandboxAccountResponse::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
}
inline std::string* OpenSandboxAccountResponse::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
  return _s;
}
inline const std::string& OpenSandboxAccountResponse::_internal_account_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_id_.Get();
}
inline void OpenSandboxAccountResponse::_internal_set_account_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(value, GetArena());
}
inline std::string* OpenSandboxAccountResponse::_internal_mutable_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* OpenSandboxAccountResponse::release_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
  return _impl_.account_id_.Release();
}
inline void OpenSandboxAccountResponse::set_allocated_account_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id)
}

// -------------------------------------------------------------------

// CloseSandboxAccountRequest

// string account_id = 1;
inline void CloseSandboxAccountRequest::clear_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& CloseSandboxAccountRequest::account_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloseSandboxAccountRequest::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
}
inline std::string* CloseSandboxAccountRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
  return _s;
}
inline const std::string& CloseSandboxAccountRequest::_internal_account_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_id_.Get();
}
inline void CloseSandboxAccountRequest::_internal_set_account_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(value, GetArena());
}
inline std::string* CloseSandboxAccountRequest::_internal_mutable_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* CloseSandboxAccountRequest::release_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void CloseSandboxAccountRequest::set_allocated_account_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id)
}

// -------------------------------------------------------------------

// CloseSandboxAccountResponse

// -------------------------------------------------------------------

// SandboxPayInRequest

// string account_id = 1;
inline void SandboxPayInRequest::clear_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& SandboxPayInRequest::account_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SandboxPayInRequest::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
}
inline std::string* SandboxPayInRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
  return _s;
}
inline const std::string& SandboxPayInRequest::_internal_account_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_id_.Get();
}
inline void SandboxPayInRequest::_internal_set_account_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(value, GetArena());
}
inline std::string* SandboxPayInRequest::_internal_mutable_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* SandboxPayInRequest::release_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void SandboxPayInRequest::set_allocated_account_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue amount = 2;
inline bool SandboxPayInRequest::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInRequest::_internal_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInRequest::amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
  return _internal_amount();
}
inline void SandboxPayInRequest::unsafe_arena_set_allocated_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::release_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::unsafe_arena_release_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::_internal_mutable_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInRequest::mutable_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
  return _msg;
}
inline void SandboxPayInRequest::set_allocated_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.amount_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.amount)
}

// -------------------------------------------------------------------

// SandboxPayInResponse

// .tinkoff.public_.invest.api.contract.v1.MoneyValue balance = 1;
inline bool SandboxPayInResponse::has_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.balance_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInResponse::_internal_balance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.balance_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& SandboxPayInResponse::balance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
  return _internal_balance();
}
inline void SandboxPayInResponse::unsafe_arena_set_allocated_balance(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.balance_);
  }
  _impl_.balance_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::release_balance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.balance_;
  _impl_.balance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::unsafe_arena_release_balance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::_internal_mutable_balance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.balance_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.balance_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* SandboxPayInResponse::mutable_balance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_balance();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
  return _msg;
}
inline void SandboxPayInResponse::set_allocated_balance(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.balance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.balance_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse.balance)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sandbox_2eproto_2epb_2eh
