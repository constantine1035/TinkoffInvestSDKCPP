// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sandbox.proto

#include "sandbox.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR OpenSandboxAccountRequest::OpenSandboxAccountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct OpenSandboxAccountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpenSandboxAccountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpenSandboxAccountRequestDefaultTypeInternal() {}
  union {
    OpenSandboxAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpenSandboxAccountRequestDefaultTypeInternal _OpenSandboxAccountRequest_default_instance_;
PROTOBUF_CONSTEXPR OpenSandboxAccountResponse::OpenSandboxAccountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpenSandboxAccountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpenSandboxAccountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpenSandboxAccountResponseDefaultTypeInternal() {}
  union {
    OpenSandboxAccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpenSandboxAccountResponseDefaultTypeInternal _OpenSandboxAccountResponse_default_instance_;
PROTOBUF_CONSTEXPR CloseSandboxAccountRequest::CloseSandboxAccountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloseSandboxAccountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseSandboxAccountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseSandboxAccountRequestDefaultTypeInternal() {}
  union {
    CloseSandboxAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseSandboxAccountRequestDefaultTypeInternal _CloseSandboxAccountRequest_default_instance_;
PROTOBUF_CONSTEXPR CloseSandboxAccountResponse::CloseSandboxAccountResponse(
    ::_pbi::ConstantInitialized) {}
struct CloseSandboxAccountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseSandboxAccountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseSandboxAccountResponseDefaultTypeInternal() {}
  union {
    CloseSandboxAccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseSandboxAccountResponseDefaultTypeInternal _CloseSandboxAccountResponse_default_instance_;
PROTOBUF_CONSTEXPR SandboxPayInRequest::SandboxPayInRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SandboxPayInRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SandboxPayInRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SandboxPayInRequestDefaultTypeInternal() {}
  union {
    SandboxPayInRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SandboxPayInRequestDefaultTypeInternal _SandboxPayInRequest_default_instance_;
PROTOBUF_CONSTEXPR SandboxPayInResponse::SandboxPayInResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.balance_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SandboxPayInResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SandboxPayInResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SandboxPayInResponseDefaultTypeInternal() {}
  union {
    SandboxPayInResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SandboxPayInResponseDefaultTypeInternal _SandboxPayInResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_sandbox_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sandbox_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sandbox_2eproto = nullptr;

const uint32_t TableStruct_sandbox_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest, _impl_.name_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse, _impl_.balance_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest)},
  { 8, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse)},
  { 15, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest)},
  { 22, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountResponse)},
  { 28, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest)},
  { 36, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_OpenSandboxAccountRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OpenSandboxAccountResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CloseSandboxAccountRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CloseSandboxAccountResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SandboxPayInRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SandboxPayInResponse_default_instance_._instance,
};

const char descriptor_table_protodef_sandbox_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsandbox.proto\022&tinkoff.public_.invest."
  "api.contract.v1\032\014common.proto\032\014orders.pr"
  "oto\032\020operations.proto\032\013users.proto\032\037goog"
  "le/api/field_behavior.proto\"7\n\031OpenSandb"
  "oxAccountRequest\022\021\n\004name\030\001 \001(\tH\000\210\001\001B\007\n\005_"
  "name\"0\n\032OpenSandboxAccountResponse\022\022\n\nac"
  "count_id\030\001 \001(\t\"5\n\032CloseSandboxAccountReq"
  "uest\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\"\035\n\033CloseSa"
  "ndboxAccountResponse\"w\n\023SandboxPayInRequ"
  "est\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\022G\n\006amount\030\002"
  " \001(\01322.tinkoff.public_.invest.api.contra"
  "ct.v1.MoneyValueB\003\340A\002\"[\n\024SandboxPayInRes"
  "ponse\022C\n\007balance\030\001 \001(\01322.tinkoff.public_"
  ".invest.api.contract.v1.MoneyValue2\236\020\n\016S"
  "andboxService\022\233\001\n\022OpenSandboxAccount\022A.t"
  "inkoff.public_.invest.api.contract.v1.Op"
  "enSandboxAccountRequest\032B.tinkoff.public"
  "_.invest.api.contract.v1.OpenSandboxAcco"
  "untResponse\022\215\001\n\022GetSandboxAccounts\022:.tin"
  "koff.public_.invest.api.contract.v1.GetA"
  "ccountsRequest\032;.tinkoff.public_.invest."
  "api.contract.v1.GetAccountsResponse\022\236\001\n\023"
  "CloseSandboxAccount\022B.tinkoff.public_.in"
  "vest.api.contract.v1.CloseSandboxAccount"
  "Request\032C.tinkoff.public_.invest.api.con"
  "tract.v1.CloseSandboxAccountResponse\022\207\001\n"
  "\020PostSandboxOrder\0228.tinkoff.public_.inve"
  "st.api.contract.v1.PostOrderRequest\0329.ti"
  "nkoff.public_.invest.api.contract.v1.Pos"
  "tOrderResponse\022\215\001\n\023ReplaceSandboxOrder\022;"
  ".tinkoff.public_.invest.api.contract.v1."
  "ReplaceOrderRequest\0329.tinkoff.public_.in"
  "vest.api.contract.v1.PostOrderResponse\022\207"
  "\001\n\020GetSandboxOrders\0228.tinkoff.public_.in"
  "vest.api.contract.v1.GetOrdersRequest\0329."
  "tinkoff.public_.invest.api.contract.v1.G"
  "etOrdersResponse\022\215\001\n\022CancelSandboxOrder\022"
  ":.tinkoff.public_.invest.api.contract.v1"
  ".CancelOrderRequest\032;.tinkoff.public_.in"
  "vest.api.contract.v1.CancelOrderResponse"
  "\022\210\001\n\024GetSandboxOrderState\022<.tinkoff.publ"
  "ic_.invest.api.contract.v1.GetOrderState"
  "Request\0322.tinkoff.public_.invest.api.con"
  "tract.v1.OrderState\022\212\001\n\023GetSandboxPositi"
  "ons\0228.tinkoff.public_.invest.api.contrac"
  "t.v1.PositionsRequest\0329.tinkoff.public_."
  "invest.api.contract.v1.PositionsResponse"
  "\022\215\001\n\024GetSandboxOperations\0229.tinkoff.publ"
  "ic_.invest.api.contract.v1.OperationsReq"
  "uest\032:.tinkoff.public_.invest.api.contra"
  "ct.v1.OperationsResponse\022\253\001\n\034GetSandboxO"
  "perationsByCursor\022D.tinkoff.public_.inve"
  "st.api.contract.v1.GetOperationsByCursor"
  "Request\032E.tinkoff.public_.invest.api.con"
  "tract.v1.GetOperationsByCursorResponse\022\212"
  "\001\n\023GetSandboxPortfolio\0228.tinkoff.public_"
  ".invest.api.contract.v1.PortfolioRequest"
  "\0329.tinkoff.public_.invest.api.contract.v"
  "1.PortfolioResponse\022\211\001\n\014SandboxPayIn\022;.t"
  "inkoff.public_.invest.api.contract.v1.Sa"
  "ndboxPayInRequest\032<.tinkoff.public_.inve"
  "st.api.contract.v1.SandboxPayInResponse\022"
  "\231\001\n\030GetSandboxWithdrawLimits\022=.tinkoff.p"
  "ublic_.invest.api.contract.v1.WithdrawLi"
  "mitsRequest\032>.tinkoff.public_.invest.api"
  ".contract.v1.WithdrawLimitsResponseBa\n\034r"
  "u.tinkoff.piapi.contract.v1P\001Z\014./;invest"
  "api\242\002\005TIAPI\252\002\024Tinkoff.InvestApi.V1\312\002\021Tin"
  "koff\\Invest\\V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sandbox_2eproto_deps[5] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_operations_2eproto,
  &::descriptor_table_orders_2eproto,
  &::descriptor_table_users_2eproto,
};
static ::_pbi::once_flag descriptor_table_sandbox_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sandbox_2eproto = {
    false, false, 2742, descriptor_table_protodef_sandbox_2eproto,
    "sandbox.proto",
    &descriptor_table_sandbox_2eproto_once, descriptor_table_sandbox_2eproto_deps, 5, 6,
    schemas, file_default_instances, TableStruct_sandbox_2eproto::offsets,
    file_level_metadata_sandbox_2eproto, file_level_enum_descriptors_sandbox_2eproto,
    file_level_service_descriptors_sandbox_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sandbox_2eproto_getter() {
  return &descriptor_table_sandbox_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sandbox_2eproto(&descriptor_table_sandbox_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

// ===================================================================

class OpenSandboxAccountRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSandboxAccountRequest>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OpenSandboxAccountRequest::OpenSandboxAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
}
OpenSandboxAccountRequest::OpenSandboxAccountRequest(const OpenSandboxAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpenSandboxAccountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
}

inline void OpenSandboxAccountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpenSandboxAccountRequest::~OpenSandboxAccountRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpenSandboxAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void OpenSandboxAccountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpenSandboxAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSandboxAccountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenSandboxAccountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
  return target;
}

size_t OpenSandboxAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSandboxAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpenSandboxAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSandboxAccountRequest::GetClassData() const { return &_class_data_; }


void OpenSandboxAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpenSandboxAccountRequest*>(&to_msg);
  auto& from = static_cast<const OpenSandboxAccountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSandboxAccountRequest::CopyFrom(const OpenSandboxAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSandboxAccountRequest::IsInitialized() const {
  return true;
}

void OpenSandboxAccountRequest::InternalSwap(OpenSandboxAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSandboxAccountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sandbox_2eproto_getter, &descriptor_table_sandbox_2eproto_once,
      file_level_metadata_sandbox_2eproto[0]);
}

// ===================================================================

class OpenSandboxAccountResponse::_Internal {
 public:
};

OpenSandboxAccountResponse::OpenSandboxAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
}
OpenSandboxAccountResponse::OpenSandboxAccountResponse(const OpenSandboxAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpenSandboxAccountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
}

inline void OpenSandboxAccountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpenSandboxAccountResponse::~OpenSandboxAccountResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpenSandboxAccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void OpenSandboxAccountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpenSandboxAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSandboxAccountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenSandboxAccountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
  return target;
}

size_t OpenSandboxAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSandboxAccountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpenSandboxAccountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSandboxAccountResponse::GetClassData() const { return &_class_data_; }


void OpenSandboxAccountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpenSandboxAccountResponse*>(&to_msg);
  auto& from = static_cast<const OpenSandboxAccountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSandboxAccountResponse::CopyFrom(const OpenSandboxAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OpenSandboxAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSandboxAccountResponse::IsInitialized() const {
  return true;
}

void OpenSandboxAccountResponse::InternalSwap(OpenSandboxAccountResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSandboxAccountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sandbox_2eproto_getter, &descriptor_table_sandbox_2eproto_once,
      file_level_metadata_sandbox_2eproto[1]);
}

// ===================================================================

class CloseSandboxAccountRequest::_Internal {
 public:
};

CloseSandboxAccountRequest::CloseSandboxAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
}
CloseSandboxAccountRequest::CloseSandboxAccountRequest(const CloseSandboxAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloseSandboxAccountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
}

inline void CloseSandboxAccountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseSandboxAccountRequest::~CloseSandboxAccountRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseSandboxAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void CloseSandboxAccountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseSandboxAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseSandboxAccountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseSandboxAccountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
  return target;
}

size_t CloseSandboxAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseSandboxAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloseSandboxAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseSandboxAccountRequest::GetClassData() const { return &_class_data_; }


void CloseSandboxAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloseSandboxAccountRequest*>(&to_msg);
  auto& from = static_cast<const CloseSandboxAccountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseSandboxAccountRequest::CopyFrom(const CloseSandboxAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSandboxAccountRequest::IsInitialized() const {
  return true;
}

void CloseSandboxAccountRequest::InternalSwap(CloseSandboxAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseSandboxAccountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sandbox_2eproto_getter, &descriptor_table_sandbox_2eproto_once,
      file_level_metadata_sandbox_2eproto[2]);
}

// ===================================================================

class CloseSandboxAccountResponse::_Internal {
 public:
};

CloseSandboxAccountResponse::CloseSandboxAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse)
}
CloseSandboxAccountResponse::CloseSandboxAccountResponse(const CloseSandboxAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CloseSandboxAccountResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CloseSandboxAccountResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseSandboxAccountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseSandboxAccountResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CloseSandboxAccountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sandbox_2eproto_getter, &descriptor_table_sandbox_2eproto_once,
      file_level_metadata_sandbox_2eproto[3]);
}

// ===================================================================

class SandboxPayInRequest::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& amount(const SandboxPayInRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
SandboxPayInRequest::_Internal::amount(const SandboxPayInRequest* msg) {
  return *msg->_impl_.amount_;
}
void SandboxPayInRequest::clear_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.amount_ != nullptr) {
    delete _impl_.amount_;
  }
  _impl_.amount_ = nullptr;
}
SandboxPayInRequest::SandboxPayInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
}
SandboxPayInRequest::SandboxPayInRequest(const SandboxPayInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SandboxPayInRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.amount_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_amount()) {
    _this->_impl_.amount_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
}

inline void SandboxPayInRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.amount_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SandboxPayInRequest::~SandboxPayInRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SandboxPayInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void SandboxPayInRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SandboxPayInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.amount_ != nullptr) {
    delete _impl_.amount_;
  }
  _impl_.amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SandboxPayInRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SandboxPayInRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
  return target;
}

size_t SandboxPayInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SandboxPayInRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SandboxPayInRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SandboxPayInRequest::GetClassData() const { return &_class_data_; }


void SandboxPayInRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SandboxPayInRequest*>(&to_msg);
  auto& from = static_cast<const SandboxPayInRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_amount()) {
    _this->_internal_mutable_amount()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SandboxPayInRequest::CopyFrom(const SandboxPayInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SandboxPayInRequest::IsInitialized() const {
  return true;
}

void SandboxPayInRequest::InternalSwap(SandboxPayInRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SandboxPayInRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sandbox_2eproto_getter, &descriptor_table_sandbox_2eproto_once,
      file_level_metadata_sandbox_2eproto[4]);
}

// ===================================================================

class SandboxPayInResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& balance(const SandboxPayInResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
SandboxPayInResponse::_Internal::balance(const SandboxPayInResponse* msg) {
  return *msg->_impl_.balance_;
}
void SandboxPayInResponse::clear_balance() {
  if (GetArenaForAllocation() == nullptr && _impl_.balance_ != nullptr) {
    delete _impl_.balance_;
  }
  _impl_.balance_ = nullptr;
}
SandboxPayInResponse::SandboxPayInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
}
SandboxPayInResponse::SandboxPayInResponse(const SandboxPayInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SandboxPayInResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.balance_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_balance()) {
    _this->_impl_.balance_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.balance_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
}

inline void SandboxPayInResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.balance_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SandboxPayInResponse::~SandboxPayInResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SandboxPayInResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.balance_;
}

void SandboxPayInResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SandboxPayInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.balance_ != nullptr) {
    delete _impl_.balance_;
  }
  _impl_.balance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SandboxPayInResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_balance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SandboxPayInResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue balance = 1;
  if (this->_internal_has_balance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::balance(this),
        _Internal::balance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
  return target;
}

size_t SandboxPayInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue balance = 1;
  if (this->_internal_has_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.balance_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SandboxPayInResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SandboxPayInResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SandboxPayInResponse::GetClassData() const { return &_class_data_; }


void SandboxPayInResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SandboxPayInResponse*>(&to_msg);
  auto& from = static_cast<const SandboxPayInResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_balance()) {
    _this->_internal_mutable_balance()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SandboxPayInResponse::CopyFrom(const SandboxPayInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SandboxPayInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SandboxPayInResponse::IsInitialized() const {
  return true;
}

void SandboxPayInResponse::InternalSwap(SandboxPayInResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.balance_, other->_impl_.balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SandboxPayInResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sandbox_2eproto_getter, &descriptor_table_sandbox_2eproto_once,
      file_level_metadata_sandbox_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OpenSandboxAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CloseSandboxAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SandboxPayInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SandboxPayInResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
