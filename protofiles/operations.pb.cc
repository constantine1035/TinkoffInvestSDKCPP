// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations.proto

#include "operations.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR OperationsRequest::OperationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.state_)*/0} {}
struct OperationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationsRequestDefaultTypeInternal() {}
  union {
    OperationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationsRequestDefaultTypeInternal _OperationsRequest_default_instance_;
PROTOBUF_CONSTEXPR OperationsResponse::OperationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationsResponseDefaultTypeInternal() {}
  union {
    OperationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationsResponseDefaultTypeInternal _OperationsResponse_default_instance_;
PROTOBUF_CONSTEXPR Operation::Operation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trades_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_operation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payment_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_.quantity_rest_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.operation_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationDefaultTypeInternal _Operation_default_instance_;
PROTOBUF_CONSTEXPR OperationTrade::OperationTrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_time_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationTradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationTradeDefaultTypeInternal() {}
  union {
    OperationTrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationTradeDefaultTypeInternal _OperationTrade_default_instance_;
PROTOBUF_CONSTEXPR PortfolioRequest::PortfolioRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/0} {}
struct PortfolioRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfolioRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfolioRequestDefaultTypeInternal() {}
  union {
    PortfolioRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfolioRequestDefaultTypeInternal _PortfolioRequest_default_instance_;
PROTOBUF_CONSTEXPR PortfolioResponse::PortfolioResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.positions_)*/{}
  , /*decltype(_impl_.virtual_positions_)*/{}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_amount_shares_)*/nullptr
  , /*decltype(_impl_.total_amount_bonds_)*/nullptr
  , /*decltype(_impl_.total_amount_etf_)*/nullptr
  , /*decltype(_impl_.total_amount_currencies_)*/nullptr
  , /*decltype(_impl_.total_amount_futures_)*/nullptr
  , /*decltype(_impl_.expected_yield_)*/nullptr
  , /*decltype(_impl_.total_amount_options_)*/nullptr
  , /*decltype(_impl_.total_amount_sp_)*/nullptr
  , /*decltype(_impl_.total_amount_portfolio_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortfolioResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfolioResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfolioResponseDefaultTypeInternal() {}
  union {
    PortfolioResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfolioResponseDefaultTypeInternal _PortfolioResponse_default_instance_;
PROTOBUF_CONSTEXPR PositionsRequest::PositionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsRequestDefaultTypeInternal() {}
  union {
    PositionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsRequestDefaultTypeInternal _PositionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PositionsResponse::PositionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.money_)*/{}
  , /*decltype(_impl_.blocked_)*/{}
  , /*decltype(_impl_.securities_)*/{}
  , /*decltype(_impl_.futures_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.limits_loading_in_progress_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsResponseDefaultTypeInternal() {}
  union {
    PositionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsResponseDefaultTypeInternal _PositionsResponse_default_instance_;
PROTOBUF_CONSTEXPR WithdrawLimitsRequest::WithdrawLimitsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WithdrawLimitsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WithdrawLimitsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WithdrawLimitsRequestDefaultTypeInternal() {}
  union {
    WithdrawLimitsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WithdrawLimitsRequestDefaultTypeInternal _WithdrawLimitsRequest_default_instance_;
PROTOBUF_CONSTEXPR WithdrawLimitsResponse::WithdrawLimitsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.money_)*/{}
  , /*decltype(_impl_.blocked_)*/{}
  , /*decltype(_impl_.blocked_guarantee_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WithdrawLimitsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WithdrawLimitsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WithdrawLimitsResponseDefaultTypeInternal() {}
  union {
    WithdrawLimitsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WithdrawLimitsResponseDefaultTypeInternal _WithdrawLimitsResponse_default_instance_;
PROTOBUF_CONSTEXPR PortfolioPosition::PortfolioPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quantity_)*/nullptr
  , /*decltype(_impl_.average_position_price_)*/nullptr
  , /*decltype(_impl_.expected_yield_)*/nullptr
  , /*decltype(_impl_.current_nkd_)*/nullptr
  , /*decltype(_impl_.average_position_price_pt_)*/nullptr
  , /*decltype(_impl_.current_price_)*/nullptr
  , /*decltype(_impl_.average_position_price_fifo_)*/nullptr
  , /*decltype(_impl_.quantity_lots_)*/nullptr
  , /*decltype(_impl_.blocked_lots_)*/nullptr
  , /*decltype(_impl_.var_margin_)*/nullptr
  , /*decltype(_impl_.expected_yield_fifo_)*/nullptr
  , /*decltype(_impl_.blocked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortfolioPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfolioPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfolioPositionDefaultTypeInternal() {}
  union {
    PortfolioPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfolioPositionDefaultTypeInternal _PortfolioPosition_default_instance_;
PROTOBUF_CONSTEXPR VirtualPortfolioPosition::VirtualPortfolioPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quantity_)*/nullptr
  , /*decltype(_impl_.average_position_price_)*/nullptr
  , /*decltype(_impl_.expected_yield_)*/nullptr
  , /*decltype(_impl_.expected_yield_fifo_)*/nullptr
  , /*decltype(_impl_.expire_date_)*/nullptr
  , /*decltype(_impl_.current_price_)*/nullptr
  , /*decltype(_impl_.average_position_price_fifo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VirtualPortfolioPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualPortfolioPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualPortfolioPositionDefaultTypeInternal() {}
  union {
    VirtualPortfolioPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualPortfolioPositionDefaultTypeInternal _VirtualPortfolioPosition_default_instance_;
PROTOBUF_CONSTEXPR PositionsSecurities::PositionsSecurities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blocked_)*/int64_t{0}
  , /*decltype(_impl_.balance_)*/int64_t{0}
  , /*decltype(_impl_.exchange_blocked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsSecuritiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsSecuritiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsSecuritiesDefaultTypeInternal() {}
  union {
    PositionsSecurities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsSecuritiesDefaultTypeInternal _PositionsSecurities_default_instance_;
PROTOBUF_CONSTEXPR PositionsFutures::PositionsFutures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blocked_)*/int64_t{0}
  , /*decltype(_impl_.balance_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsFuturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsFuturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsFuturesDefaultTypeInternal() {}
  union {
    PositionsFutures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsFuturesDefaultTypeInternal _PositionsFutures_default_instance_;
PROTOBUF_CONSTEXPR PositionsOptions::PositionsOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blocked_)*/int64_t{0}
  , /*decltype(_impl_.balance_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsOptionsDefaultTypeInternal() {}
  union {
    PositionsOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsOptionsDefaultTypeInternal _PositionsOptions_default_instance_;
PROTOBUF_CONSTEXPR BrokerReportRequest::BrokerReportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BrokerReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrokerReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrokerReportRequestDefaultTypeInternal() {}
  union {
    BrokerReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrokerReportRequestDefaultTypeInternal _BrokerReportRequest_default_instance_;
PROTOBUF_CONSTEXPR BrokerReportResponse::BrokerReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BrokerReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrokerReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrokerReportResponseDefaultTypeInternal() {}
  union {
    BrokerReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrokerReportResponseDefaultTypeInternal _BrokerReportResponse_default_instance_;
PROTOBUF_CONSTEXPR GenerateBrokerReportRequest::GenerateBrokerReportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateBrokerReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateBrokerReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateBrokerReportRequestDefaultTypeInternal() {}
  union {
    GenerateBrokerReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateBrokerReportRequestDefaultTypeInternal _GenerateBrokerReportRequest_default_instance_;
PROTOBUF_CONSTEXPR GenerateBrokerReportResponse::GenerateBrokerReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateBrokerReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateBrokerReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateBrokerReportResponseDefaultTypeInternal() {}
  union {
    GenerateBrokerReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateBrokerReportResponseDefaultTypeInternal _GenerateBrokerReportResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBrokerReportRequest::GetBrokerReportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_)*/0} {}
struct GetBrokerReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrokerReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrokerReportRequestDefaultTypeInternal() {}
  union {
    GetBrokerReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrokerReportRequestDefaultTypeInternal _GetBrokerReportRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBrokerReportResponse::GetBrokerReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.broker_report_)*/{}
  , /*decltype(_impl_.itemscount_)*/0
  , /*decltype(_impl_.pagescount_)*/0
  , /*decltype(_impl_.page_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBrokerReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrokerReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrokerReportResponseDefaultTypeInternal() {}
  union {
    GetBrokerReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrokerReportResponseDefaultTypeInternal _GetBrokerReportResponse_default_instance_;
PROTOBUF_CONSTEXPR BrokerReport::BrokerReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execute_sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.direction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.party_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broker_status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.separate_agreement_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.separate_agreement_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.separate_agreement_date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.delivery_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trade_datetime_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.order_amount_)*/nullptr
  , /*decltype(_impl_.aci_value_)*/nullptr
  , /*decltype(_impl_.total_order_amount_)*/nullptr
  , /*decltype(_impl_.broker_commission_)*/nullptr
  , /*decltype(_impl_.exchange_commission_)*/nullptr
  , /*decltype(_impl_.exchange_clearing_commission_)*/nullptr
  , /*decltype(_impl_.repo_rate_)*/nullptr
  , /*decltype(_impl_.clear_value_date_)*/nullptr
  , /*decltype(_impl_.sec_value_date_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BrokerReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrokerReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrokerReportDefaultTypeInternal() {}
  union {
    BrokerReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrokerReportDefaultTypeInternal _BrokerReport_default_instance_;
PROTOBUF_CONSTEXPR GetDividendsForeignIssuerRequest::GetDividendsForeignIssuerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetDividendsForeignIssuerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsForeignIssuerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsForeignIssuerRequestDefaultTypeInternal() {}
  union {
    GetDividendsForeignIssuerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsForeignIssuerRequestDefaultTypeInternal _GetDividendsForeignIssuerRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDividendsForeignIssuerResponse::GetDividendsForeignIssuerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetDividendsForeignIssuerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsForeignIssuerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsForeignIssuerResponseDefaultTypeInternal() {}
  union {
    GetDividendsForeignIssuerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsForeignIssuerResponseDefaultTypeInternal _GetDividendsForeignIssuerResponse_default_instance_;
PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportRequest::GenerateDividendsForeignIssuerReportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal() {}
  union {
    GenerateDividendsForeignIssuerReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal _GenerateDividendsForeignIssuerReportRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportRequest::GetDividendsForeignIssuerReportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_)*/0} {}
struct GetDividendsForeignIssuerReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsForeignIssuerReportRequestDefaultTypeInternal() {}
  union {
    GetDividendsForeignIssuerReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsForeignIssuerReportRequestDefaultTypeInternal _GetDividendsForeignIssuerReportRequest_default_instance_;
PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportResponse::GenerateDividendsForeignIssuerReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal() {}
  union {
    GenerateDividendsForeignIssuerReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal _GenerateDividendsForeignIssuerReportResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportResponse::GetDividendsForeignIssuerReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dividends_foreign_issuer_report_)*/{}
  , /*decltype(_impl_.itemscount_)*/0
  , /*decltype(_impl_.pagescount_)*/0
  , /*decltype(_impl_.page_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDividendsForeignIssuerReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsForeignIssuerReportResponseDefaultTypeInternal() {}
  union {
    GetDividendsForeignIssuerReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsForeignIssuerReportResponseDefaultTypeInternal _GetDividendsForeignIssuerReportResponse_default_instance_;
PROTOBUF_CONSTEXPR DividendsForeignIssuerReport::DividendsForeignIssuerReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.security_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuer_country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_date_)*/nullptr
  , /*decltype(_impl_.payment_date_)*/nullptr
  , /*decltype(_impl_.dividend_)*/nullptr
  , /*decltype(_impl_.external_commission_)*/nullptr
  , /*decltype(_impl_.dividend_gross_)*/nullptr
  , /*decltype(_impl_.tax_)*/nullptr
  , /*decltype(_impl_.dividend_amount_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DividendsForeignIssuerReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DividendsForeignIssuerReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DividendsForeignIssuerReportDefaultTypeInternal() {}
  union {
    DividendsForeignIssuerReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DividendsForeignIssuerReportDefaultTypeInternal _DividendsForeignIssuerReport_default_instance_;
PROTOBUF_CONSTEXPR PortfolioStreamRequest::PortfolioStreamRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortfolioStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfolioStreamRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfolioStreamRequestDefaultTypeInternal() {}
  union {
    PortfolioStreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfolioStreamRequestDefaultTypeInternal _PortfolioStreamRequest_default_instance_;
PROTOBUF_CONSTEXPR PortfolioStreamResponse::PortfolioStreamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PortfolioStreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfolioStreamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfolioStreamResponseDefaultTypeInternal() {}
  union {
    PortfolioStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfolioStreamResponseDefaultTypeInternal _PortfolioStreamResponse_default_instance_;
PROTOBUF_CONSTEXPR PortfolioSubscriptionResult::PortfolioSubscriptionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortfolioSubscriptionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfolioSubscriptionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfolioSubscriptionResultDefaultTypeInternal() {}
  union {
    PortfolioSubscriptionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfolioSubscriptionResultDefaultTypeInternal _PortfolioSubscriptionResult_default_instance_;
PROTOBUF_CONSTEXPR AccountSubscriptionStatus::AccountSubscriptionStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountSubscriptionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountSubscriptionStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountSubscriptionStatusDefaultTypeInternal() {}
  union {
    AccountSubscriptionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountSubscriptionStatusDefaultTypeInternal _AccountSubscriptionStatus_default_instance_;
PROTOBUF_CONSTEXPR GetOperationsByCursorRequest::GetOperationsByCursorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_types_)*/{}
  , /*decltype(_impl_._operation_types_cached_byte_size_)*/{0}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.without_commissions_)*/false
  , /*decltype(_impl_.without_trades_)*/false
  , /*decltype(_impl_.without_overnights_)*/false} {}
struct GetOperationsByCursorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOperationsByCursorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOperationsByCursorRequestDefaultTypeInternal() {}
  union {
    GetOperationsByCursorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOperationsByCursorRequestDefaultTypeInternal _GetOperationsByCursorRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOperationsByCursorResponse::GetOperationsByCursorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.has_next_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOperationsByCursorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOperationsByCursorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOperationsByCursorResponseDefaultTypeInternal() {}
  union {
    GetOperationsByCursorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOperationsByCursorResponseDefaultTypeInternal _GetOperationsByCursorResponse_default_instance_;
PROTOBUF_CONSTEXPR OperationItem::OperationItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broker_account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_operation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cancel_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.payment_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.commission_)*/nullptr
  , /*decltype(_impl_.yield_)*/nullptr
  , /*decltype(_impl_.yield_relative_)*/nullptr
  , /*decltype(_impl_.accrued_int_)*/nullptr
  , /*decltype(_impl_.cancel_date_time_)*/nullptr
  , /*decltype(_impl_.trades_info_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_.quantity_rest_)*/int64_t{0}
  , /*decltype(_impl_.quantity_done_)*/int64_t{0}
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationItemDefaultTypeInternal() {}
  union {
    OperationItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationItemDefaultTypeInternal _OperationItem_default_instance_;
PROTOBUF_CONSTEXPR OperationItemTrades::OperationItemTrades(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trades_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationItemTradesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationItemTradesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationItemTradesDefaultTypeInternal() {}
  union {
    OperationItemTrades _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationItemTradesDefaultTypeInternal _OperationItemTrades_default_instance_;
PROTOBUF_CONSTEXPR OperationItemTrade::OperationItemTrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.yield_)*/nullptr
  , /*decltype(_impl_.yield_relative_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationItemTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationItemTradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationItemTradeDefaultTypeInternal() {}
  union {
    OperationItemTrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationItemTradeDefaultTypeInternal _OperationItemTrade_default_instance_;
PROTOBUF_CONSTEXPR PositionsStreamRequest::PositionsStreamRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsStreamRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsStreamRequestDefaultTypeInternal() {}
  union {
    PositionsStreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsStreamRequestDefaultTypeInternal _PositionsStreamRequest_default_instance_;
PROTOBUF_CONSTEXPR PositionsStreamResponse::PositionsStreamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PositionsStreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsStreamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsStreamResponseDefaultTypeInternal() {}
  union {
    PositionsStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsStreamResponseDefaultTypeInternal _PositionsStreamResponse_default_instance_;
PROTOBUF_CONSTEXPR PositionsSubscriptionResult::PositionsSubscriptionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsSubscriptionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsSubscriptionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsSubscriptionResultDefaultTypeInternal() {}
  union {
    PositionsSubscriptionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsSubscriptionResultDefaultTypeInternal _PositionsSubscriptionResult_default_instance_;
PROTOBUF_CONSTEXPR PositionsSubscriptionStatus::PositionsSubscriptionStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsSubscriptionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsSubscriptionStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsSubscriptionStatusDefaultTypeInternal() {}
  union {
    PositionsSubscriptionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsSubscriptionStatusDefaultTypeInternal _PositionsSubscriptionStatus_default_instance_;
PROTOBUF_CONSTEXPR PositionData::PositionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.money_)*/{}
  , /*decltype(_impl_.securities_)*/{}
  , /*decltype(_impl_.futures_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDataDefaultTypeInternal() {}
  union {
    PositionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDataDefaultTypeInternal _PositionData_default_instance_;
PROTOBUF_CONSTEXPR PositionsMoney::PositionsMoney(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.available_value_)*/nullptr
  , /*decltype(_impl_.blocked_value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsMoneyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsMoneyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsMoneyDefaultTypeInternal() {}
  union {
    PositionsMoney _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsMoneyDefaultTypeInternal _PositionsMoney_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_operations_2eproto[44];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_operations_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_operations_2eproto = nullptr;

const uint32_t TableStruct_operations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsRequest, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsRequest, _impl_.figi_),
  ~0u,
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationsResponse, _impl_.operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.parent_operation_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.payment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.quantity_rest_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.operation_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.trades_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Operation, _impl_.instrument_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationTrade, _impl_.trade_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationTrade, _impl_.date_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationTrade, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationTrade, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest, _impl_.currency_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_shares_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_bonds_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_etf_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_currencies_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_futures_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.expected_yield_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.positions_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_options_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_sp_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.total_amount_portfolio_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse, _impl_.virtual_positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsRequest, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsResponse, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsResponse, _impl_.blocked_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsResponse, _impl_.securities_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsResponse, _impl_.limits_loading_in_progress_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsResponse, _impl_.futures_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsResponse, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse, _impl_.blocked_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse, _impl_.blocked_guarantee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.average_position_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.expected_yield_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.current_nkd_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.average_position_price_pt_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.current_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.average_position_price_fifo_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.quantity_lots_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.blocked_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.blocked_lots_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.var_margin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition, _impl_.expected_yield_fifo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.average_position_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.expected_yield_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.expected_yield_fifo_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.expire_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.current_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition, _impl_.average_position_price_fifo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _impl_.blocked_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _impl_.exchange_blocked_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities, _impl_.instrument_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsFutures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsFutures, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsFutures, _impl_.blocked_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsFutures, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsFutures, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsFutures, _impl_.instrument_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsOptions, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsOptions, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsOptions, _impl_.blocked_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsOptions, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest, _impl_.to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest, _impl_.page_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse, _impl_.broker_report_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse, _impl_.itemscount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse, _impl_.pagescount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse, _impl_.page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.trade_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.execute_sign_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.trade_datetime_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.order_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.aci_value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.total_order_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.broker_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.exchange_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.exchange_clearing_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.repo_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.party_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.clear_value_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.sec_value_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.broker_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.separate_agreement_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.separate_agreement_number_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.separate_agreement_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrokerReport, _impl_.delivery_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest, _impl_.page_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse, _impl_.task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse, _impl_.dividends_foreign_issuer_report_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse, _impl_.itemscount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse, _impl_.pagescount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse, _impl_.page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.record_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.payment_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.security_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.issuer_country_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.dividend_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.external_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.dividend_gross_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.tax_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.dividend_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport, _impl_.currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest, _impl_.accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult, _impl_.accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus, _impl_.subscription_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.cursor_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.operation_types_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.without_commissions_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.without_trades_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest, _impl_.without_overnights_),
  ~0u,
  0,
  2,
  3,
  1,
  4,
  ~0u,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse, _impl_.has_next_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse, _impl_.next_cursor_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.cursor_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.broker_account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.parent_operation_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.instrument_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.payment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.yield_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.yield_relative_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.accrued_int_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.quantity_rest_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.quantity_done_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.cancel_date_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.cancel_reason_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.trades_info_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItem, _impl_.asset_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades, _impl_.trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade, _impl_.yield_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade, _impl_.yield_relative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest, _impl_.accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult, _impl_.accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus, _impl_.subscription_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionData, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionData, _impl_.securities_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionData, _impl_.futures_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionData, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionData, _impl_.date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsMoney, _impl_.available_value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PositionsMoney, _impl_.blocked_value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OperationsRequest)},
  { 16, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OperationsResponse)},
  { 23, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Operation)},
  { 46, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OperationTrade)},
  { 56, 64, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest)},
  { 66, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse)},
  { 84, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsRequest)},
  { 91, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsResponse)},
  { 103, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest)},
  { 110, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse)},
  { 119, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PortfolioPosition)},
  { 141, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition)},
  { 158, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsSecurities)},
  { 171, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsFutures)},
  { 182, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsOptions)},
  { 192, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest)},
  { 201, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse)},
  { 210, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest)},
  { 219, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse)},
  { 226, 234, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest)},
  { 236, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse)},
  { 246, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BrokerReport)},
  { 279, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest)},
  { 288, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse)},
  { 297, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest)},
  { 306, 314, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest)},
  { 316, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse)},
  { 323, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse)},
  { 333, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport)},
  { 351, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest)},
  { 358, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse)},
  { 368, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult)},
  { 375, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus)},
  { 383, 400, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest)},
  { 411, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse)},
  { 420, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OperationItem)},
  { 453, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades)},
  { 460, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OperationItemTrade)},
  { 472, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest)},
  { 479, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse)},
  { 489, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult)},
  { 496, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus)},
  { 504, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionData)},
  { 516, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PositionsMoney)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_OperationsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OperationsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Operation_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OperationTrade_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PortfolioRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PortfolioResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_WithdrawLimitsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_WithdrawLimitsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PortfolioPosition_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_VirtualPortfolioPosition_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsSecurities_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsFutures_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsOptions_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_BrokerReportRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_BrokerReportResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GenerateBrokerReportRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GenerateBrokerReportResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBrokerReportRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBrokerReportResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_BrokerReport_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GenerateDividendsForeignIssuerReportRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerReportRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GenerateDividendsForeignIssuerReportResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerReportResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_DividendsForeignIssuerReport_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PortfolioStreamRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PortfolioStreamResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PortfolioSubscriptionResult_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AccountSubscriptionStatus_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOperationsByCursorRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOperationsByCursorResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OperationItem_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OperationItemTrades_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OperationItemTrade_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsStreamRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsStreamResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsSubscriptionResult_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsSubscriptionStatus_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionData_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PositionsMoney_default_instance_._instance,
};

const char descriptor_table_protodef_operations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020operations.proto\022&tinkoff.public_.inve"
  "st.api.contract.v1\032\037google/protobuf/time"
  "stamp.proto\032\014common.proto\032\037google/api/fi"
  "eld_behavior.proto\"\212\002\n\021OperationsRequest"
  "\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\022-\n\004from\030\002 \001(\0132"
  "\032.google.protobuf.TimestampH\000\210\001\001\022+\n\002to\030\003"
  " \001(\0132\032.google.protobuf.TimestampH\001\210\001\001\022J\n"
  "\005state\030\004 \001(\01626.tinkoff.public_.invest.ap"
  "i.contract.v1.OperationStateH\002\210\001\001\022\021\n\004fig"
  "i\030\005 \001(\tH\003\210\001\001B\007\n\005_fromB\005\n\003_toB\010\n\006_stateB\007"
  "\n\005_figi\"[\n\022OperationsResponse\022E\n\noperati"
  "ons\030\001 \003(\01321.tinkoff.public_.invest.api.c"
  "ontract.v1.Operation\"\365\004\n\tOperation\022\n\n\002id"
  "\030\001 \001(\t\022\033\n\023parent_operation_id\030\002 \001(\t\022\020\n\010c"
  "urrency\030\003 \001(\t\022C\n\007payment\030\004 \001(\01322.tinkoff"
  ".public_.invest.api.contract.v1.MoneyVal"
  "ue\022A\n\005price\030\005 \001(\01322.tinkoff.public_.inve"
  "st.api.contract.v1.MoneyValue\022E\n\005state\030\006"
  " \001(\01626.tinkoff.public_.invest.api.contra"
  "ct.v1.OperationState\022\020\n\010quantity\030\007 \001(\003\022\025"
  "\n\rquantity_rest\030\010 \001(\003\022\014\n\004figi\030\t \001(\t\022\027\n\017i"
  "nstrument_type\030\n \001(\t\022(\n\004date\030\013 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022\014\n\004type\030\014 \001(\t\022M\n\016"
  "operation_type\030\r \001(\01625.tinkoff.public_.i"
  "nvest.api.contract.v1.OperationType\022F\n\006t"
  "rades\030\016 \003(\01326.tinkoff.public_.invest.api"
  ".contract.v1.OperationTrade\022\021\n\tasset_uid"
  "\030\020 \001(\t\022\024\n\014position_uid\030\021 \001(\t\022\026\n\016instrume"
  "nt_uid\030\022 \001(\t\"\246\001\n\016OperationTrade\022\020\n\010trade"
  "_id\030\001 \001(\t\022-\n\tdate_time\030\002 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022\020\n\010quantity\030\003 \001(\003\022A\n\005pr"
  "ice\030\004 \001(\01322.tinkoff.public_.invest.api.c"
  "ontract.v1.MoneyValue\"\307\001\n\020PortfolioReque"
  "st\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\022_\n\010currency\030"
  "\002 \001(\0162H.tinkoff.public_.invest.api.contr"
  "act.v1.PortfolioRequest.CurrencyRequestH"
  "\000\210\001\001\",\n\017CurrencyRequest\022\007\n\003RUB\020\000\022\007\n\003USD\020"
  "\001\022\007\n\003EUR\020\002B\013\n\t_currency\"\246\007\n\021PortfolioRes"
  "ponse\022O\n\023total_amount_shares\030\001 \001(\01322.tin"
  "koff.public_.invest.api.contract.v1.Mone"
  "yValue\022N\n\022total_amount_bonds\030\002 \001(\01322.tin"
  "koff.public_.invest.api.contract.v1.Mone"
  "yValue\022L\n\020total_amount_etf\030\003 \001(\01322.tinko"
  "ff.public_.invest.api.contract.v1.MoneyV"
  "alue\022S\n\027total_amount_currencies\030\004 \001(\01322."
  "tinkoff.public_.invest.api.contract.v1.M"
  "oneyValue\022P\n\024total_amount_futures\030\005 \001(\0132"
  "2.tinkoff.public_.invest.api.contract.v1"
  ".MoneyValue\022I\n\016expected_yield\030\006 \001(\01321.ti"
  "nkoff.public_.invest.api.contract.v1.Quo"
  "tation\022L\n\tpositions\030\007 \003(\01329.tinkoff.publ"
  "ic_.invest.api.contract.v1.PortfolioPosi"
  "tion\022\022\n\naccount_id\030\010 \001(\t\022P\n\024total_amount"
  "_options\030\t \001(\01322.tinkoff.public_.invest."
  "api.contract.v1.MoneyValue\022K\n\017total_amou"
  "nt_sp\030\n \001(\01322.tinkoff.public_.invest.api"
  ".contract.v1.MoneyValue\022R\n\026total_amount_"
  "portfolio\030\013 \001(\01322.tinkoff.public_.invest"
  ".api.contract.v1.MoneyValue\022[\n\021virtual_p"
  "ositions\030\014 \003(\0132@.tinkoff.public_.invest."
  "api.contract.v1.VirtualPortfolioPosition"
  "\"+\n\020PositionsRequest\022\027\n\naccount_id\030\001 \001(\t"
  "B\003\340A\002\"\246\003\n\021PositionsResponse\022A\n\005money\030\001 \003"
  "(\01322.tinkoff.public_.invest.api.contract"
  ".v1.MoneyValue\022C\n\007blocked\030\002 \003(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022O\n\nsecurities\030\003 \003(\0132;.tinkoff.public"
  "_.invest.api.contract.v1.PositionsSecuri"
  "ties\022\"\n\032limits_loading_in_progress\030\004 \001(\010"
  "\022I\n\007futures\030\005 \003(\01328.tinkoff.public_.inve"
  "st.api.contract.v1.PositionsFutures\022I\n\007o"
  "ptions\030\006 \003(\01328.tinkoff.public_.invest.ap"
  "i.contract.v1.PositionsOptions\"0\n\025Withdr"
  "awLimitsRequest\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002"
  "\"\357\001\n\026WithdrawLimitsResponse\022A\n\005money\030\001 \003"
  "(\01322.tinkoff.public_.invest.api.contract"
  ".v1.MoneyValue\022C\n\007blocked\030\002 \003(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022M\n\021blocked_guarantee\030\003 \003(\01322.tinkoff"
  ".public_.invest.api.contract.v1.MoneyVal"
  "ue\"\323\007\n\021PortfolioPosition\022\014\n\004figi\030\001 \001(\t\022\027"
  "\n\017instrument_type\030\002 \001(\t\022C\n\010quantity\030\003 \001("
  "\01321.tinkoff.public_.invest.api.contract."
  "v1.Quotation\022R\n\026average_position_price\030\004"
  " \001(\01322.tinkoff.public_.invest.api.contra"
  "ct.v1.MoneyValue\022I\n\016expected_yield\030\005 \001(\013"
  "21.tinkoff.public_.invest.api.contract.v"
  "1.Quotation\022G\n\013current_nkd\030\006 \001(\01322.tinko"
  "ff.public_.invest.api.contract.v1.MoneyV"
  "alue\022X\n\031average_position_price_pt\030\007 \001(\0132"
  "1.tinkoff.public_.invest.api.contract.v1"
  ".QuotationB\002\030\001\022I\n\rcurrent_price\030\010 \001(\01322."
  "tinkoff.public_.invest.api.contract.v1.M"
  "oneyValue\022W\n\033average_position_price_fifo"
  "\030\t \001(\01322.tinkoff.public_.invest.api.cont"
  "ract.v1.MoneyValue\022L\n\rquantity_lots\030\n \001("
  "\01321.tinkoff.public_.invest.api.contract."
  "v1.QuotationB\002\030\001\022\017\n\007blocked\030\025 \001(\010\022G\n\014blo"
  "cked_lots\030\026 \001(\01321.tinkoff.public_.invest"
  ".api.contract.v1.Quotation\022\024\n\014position_u"
  "id\030\030 \001(\t\022\026\n\016instrument_uid\030\031 \001(\t\022F\n\nvar_"
  "margin\030\032 \001(\01322.tinkoff.public_.invest.ap"
  "i.contract.v1.MoneyValue\022N\n\023expected_yie"
  "ld_fifo\030\033 \001(\01321.tinkoff.public_.invest.a"
  "pi.contract.v1.Quotation\"\370\004\n\030VirtualPort"
  "folioPosition\022\024\n\014position_uid\030\001 \001(\t\022\026\n\016i"
  "nstrument_uid\030\002 \001(\t\022\014\n\004figi\030\003 \001(\t\022\027\n\017ins"
  "trument_type\030\004 \001(\t\022C\n\010quantity\030\005 \001(\01321.t"
  "inkoff.public_.invest.api.contract.v1.Qu"
  "otation\022R\n\026average_position_price\030\006 \001(\0132"
  "2.tinkoff.public_.invest.api.contract.v1"
  ".MoneyValue\022I\n\016expected_yield\030\007 \001(\01321.ti"
  "nkoff.public_.invest.api.contract.v1.Quo"
  "tation\022N\n\023expected_yield_fifo\030\010 \001(\01321.ti"
  "nkoff.public_.invest.api.contract.v1.Quo"
  "tation\022/\n\013expire_date\030\t \001(\0132\032.google.pro"
  "tobuf.Timestamp\022I\n\rcurrent_price\030\n \001(\01322"
  ".tinkoff.public_.invest.api.contract.v1."
  "MoneyValue\022W\n\033average_position_price_fif"
  "o\030\013 \001(\01322.tinkoff.public_.invest.api.con"
  "tract.v1.MoneyValue\"\246\001\n\023PositionsSecurit"
  "ies\022\014\n\004figi\030\001 \001(\t\022\017\n\007blocked\030\002 \001(\003\022\017\n\007ba"
  "lance\030\003 \001(\003\022\024\n\014position_uid\030\004 \001(\t\022\026\n\016ins"
  "trument_uid\030\005 \001(\t\022\030\n\020exchange_blocked\030\013 "
  "\001(\010\022\027\n\017instrument_type\030\020 \001(\t\"p\n\020Position"
  "sFutures\022\014\n\004figi\030\001 \001(\t\022\017\n\007blocked\030\002 \001(\003\022"
  "\017\n\007balance\030\003 \001(\003\022\024\n\014position_uid\030\004 \001(\t\022\026"
  "\n\016instrument_uid\030\005 \001(\t\"b\n\020PositionsOptio"
  "ns\022\024\n\014position_uid\030\001 \001(\t\022\026\n\016instrument_u"
  "id\030\002 \001(\t\022\017\n\007blocked\030\013 \001(\003\022\017\n\007balance\030\025 \001"
  "(\003\"\364\001\n\023BrokerReportRequest\022m\n\036generate_b"
  "roker_report_request\030\001 \001(\0132C.tinkoff.pub"
  "lic_.invest.api.contract.v1.GenerateBrok"
  "erReportRequestH\000\022c\n\031get_broker_report_r"
  "equest\030\002 \001(\0132>.tinkoff.public_.invest.ap"
  "i.contract.v1.GetBrokerReportRequestH\000B\t"
  "\n\007payload\"\371\001\n\024BrokerReportResponse\022o\n\037ge"
  "nerate_broker_report_response\030\001 \001(\0132D.ti"
  "nkoff.public_.invest.api.contract.v1.Gen"
  "erateBrokerReportResponseH\000\022e\n\032get_broke"
  "r_report_response\030\002 \001(\0132\?.tinkoff.public"
  "_.invest.api.contract.v1.GetBrokerReport"
  "ResponseH\000B\t\n\007payload\"\222\001\n\033GenerateBroker"
  "ReportRequest\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\022-"
  "\n\004from\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "B\003\340A\002\022+\n\002to\030\003 \001(\0132\032.google.protobuf.Time"
  "stampB\003\340A\002\"/\n\034GenerateBrokerReportRespon"
  "se\022\017\n\007task_id\030\001 \001(\t\"J\n\026GetBrokerReportRe"
  "quest\022\024\n\007task_id\030\001 \001(\tB\003\340A\002\022\021\n\004page\030\002 \001("
  "\005H\000\210\001\001B\007\n\005_page\"\234\001\n\027GetBrokerReportRespo"
  "nse\022K\n\rbroker_report\030\001 \003(\01324.tinkoff.pub"
  "lic_.invest.api.contract.v1.BrokerReport"
  "\022\022\n\nitemsCount\030\002 \001(\005\022\022\n\npagesCount\030\003 \001(\005"
  "\022\014\n\004page\030\004 \001(\005\"\342\010\n\014BrokerReport\022\020\n\010trade"
  "_id\030\001 \001(\t\022\020\n\010order_id\030\002 \001(\t\022\014\n\004figi\030\003 \001("
  "\t\022\024\n\014execute_sign\030\004 \001(\t\0222\n\016trade_datetim"
  "e\030\005 \001(\0132\032.google.protobuf.Timestamp\022\020\n\010e"
  "xchange\030\006 \001(\t\022\022\n\nclass_code\030\007 \001(\t\022\021\n\tdir"
  "ection\030\010 \001(\t\022\014\n\004name\030\t \001(\t\022\016\n\006ticker\030\n \001"
  "(\t\022A\n\005price\030\013 \001(\01322.tinkoff.public_.inve"
  "st.api.contract.v1.MoneyValue\022\020\n\010quantit"
  "y\030\014 \001(\003\022H\n\014order_amount\030\r \001(\01322.tinkoff."
  "public_.invest.api.contract.v1.MoneyValu"
  "e\022D\n\taci_value\030\016 \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.Quotation\022N\n\022total"
  "_order_amount\030\017 \001(\01322.tinkoff.public_.in"
  "vest.api.contract.v1.MoneyValue\022M\n\021broke"
  "r_commission\030\020 \001(\01322.tinkoff.public_.inv"
  "est.api.contract.v1.MoneyValue\022O\n\023exchan"
  "ge_commission\030\021 \001(\01322.tinkoff.public_.in"
  "vest.api.contract.v1.MoneyValue\022X\n\034excha"
  "nge_clearing_commission\030\022 \001(\01322.tinkoff."
  "public_.invest.api.contract.v1.MoneyValu"
  "e\022D\n\trepo_rate\030\023 \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.Quotation\022\r\n\005party"
  "\030\024 \001(\t\0224\n\020clear_value_date\030\025 \001(\0132\032.googl"
  "e.protobuf.Timestamp\0222\n\016sec_value_date\030\026"
  " \001(\0132\032.google.protobuf.Timestamp\022\025\n\rbrok"
  "er_status\030\027 \001(\t\022\037\n\027separate_agreement_ty"
  "pe\030\030 \001(\t\022!\n\031separate_agreement_number\030\031 "
  "\001(\t\022\037\n\027separate_agreement_date\030\032 \001(\t\022\025\n\r"
  "delivery_type\030\033 \001(\t\"\252\002\n GetDividendsFore"
  "ignIssuerRequest\022\201\001\n\"generate_div_foreig"
  "n_issuer_report\030\001 \001(\0132S.tinkoff.public_."
  "invest.api.contract.v1.GenerateDividends"
  "ForeignIssuerReportRequestH\000\022w\n\035get_div_"
  "foreign_issuer_report\030\002 \001(\0132N.tinkoff.pu"
  "blic_.invest.api.contract.v1.GetDividend"
  "sForeignIssuerReportRequestH\000B\t\n\007payload"
  "\"\262\002\n!GetDividendsForeignIssuerResponse\022\213"
  "\001\n+generate_div_foreign_issuer_report_re"
  "sponse\030\001 \001(\0132T.tinkoff.public_.invest.ap"
  "i.contract.v1.GenerateDividendsForeignIs"
  "suerReportResponseH\000\022t\n\031div_foreign_issu"
  "er_report\030\002 \001(\0132O.tinkoff.public_.invest"
  ".api.contract.v1.GetDividendsForeignIssu"
  "erReportResponseH\000B\t\n\007payload\"\242\001\n+Genera"
  "teDividendsForeignIssuerReportRequest\022\027\n"
  "\naccount_id\030\001 \001(\tB\003\340A\002\022-\n\004from\030\002 \001(\0132\032.g"
  "oogle.protobuf.TimestampB\003\340A\002\022+\n\002to\030\003 \001("
  "\0132\032.google.protobuf.TimestampB\003\340A\002\"Z\n&Ge"
  "tDividendsForeignIssuerReportRequest\022\024\n\007"
  "task_id\030\001 \001(\tB\003\340A\002\022\021\n\004page\030\002 \001(\005H\000\210\001\001B\007\n"
  "\005_page\"\?\n,GenerateDividendsForeignIssuer"
  "ReportResponse\022\017\n\007task_id\030\001 \001(\t\"\316\001\n\'GetD"
  "ividendsForeignIssuerReportResponse\022m\n\037d"
  "ividends_foreign_issuer_report\030\001 \003(\0132D.t"
  "inkoff.public_.invest.api.contract.v1.Di"
  "videndsForeignIssuerReport\022\022\n\nitemsCount"
  "\030\002 \001(\005\022\022\n\npagesCount\030\003 \001(\005\022\014\n\004page\030\004 \001(\005"
  "\"\316\004\n\034DividendsForeignIssuerReport\022/\n\013rec"
  "ord_date\030\001 \001(\0132\032.google.protobuf.Timesta"
  "mp\0220\n\014payment_date\030\002 \001(\0132\032.google.protob"
  "uf.Timestamp\022\025\n\rsecurity_name\030\003 \001(\t\022\014\n\004i"
  "sin\030\004 \001(\t\022\026\n\016issuer_country\030\005 \001(\t\022\020\n\010qua"
  "ntity\030\006 \001(\003\022C\n\010dividend\030\007 \001(\01321.tinkoff."
  "public_.invest.api.contract.v1.Quotation"
  "\022N\n\023external_commission\030\010 \001(\01321.tinkoff."
  "public_.invest.api.contract.v1.Quotation"
  "\022I\n\016dividend_gross\030\t \001(\01321.tinkoff.publi"
  "c_.invest.api.contract.v1.Quotation\022>\n\003t"
  "ax\030\n \001(\01321.tinkoff.public_.invest.api.co"
  "ntract.v1.Quotation\022J\n\017dividend_amount\030\013"
  " \001(\01321.tinkoff.public_.invest.api.contra"
  "ct.v1.Quotation\022\020\n\010currency\030\014 \001(\t\"*\n\026Por"
  "tfolioStreamRequest\022\020\n\010accounts\030\001 \003(\t\"\220\002"
  "\n\027PortfolioStreamResponse\022\\\n\rsubscriptio"
  "ns\030\001 \001(\0132C.tinkoff.public_.invest.api.co"
  "ntract.v1.PortfolioSubscriptionResultH\000\022"
  "N\n\tportfolio\030\002 \001(\01329.tinkoff.public_.inv"
  "est.api.contract.v1.PortfolioResponseH\000\022"
  "<\n\004ping\030\003 \001(\0132,.tinkoff.public_.invest.a"
  "pi.contract.v1.PingH\000B\t\n\007payload\"r\n\033Port"
  "folioSubscriptionResult\022S\n\010accounts\030\001 \003("
  "\0132A.tinkoff.public_.invest.api.contract."
  "v1.AccountSubscriptionStatus\"\221\001\n\031Account"
  "SubscriptionStatus\022\022\n\naccount_id\030\001 \001(\t\022`"
  "\n\023subscription_status\030\006 \001(\0162C.tinkoff.pu"
  "blic_.invest.api.contract.v1.PortfolioSu"
  "bscriptionStatus\"\327\004\n\034GetOperationsByCurs"
  "orRequest\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\022\032\n\rin"
  "strument_id\030\002 \001(\tH\000\210\001\001\022-\n\004from\030\006 \001(\0132\032.g"
  "oogle.protobuf.TimestampH\001\210\001\001\022+\n\002to\030\007 \001("
  "\0132\032.google.protobuf.TimestampH\002\210\001\001\022\023\n\006cu"
  "rsor\030\013 \001(\tH\003\210\001\001\022\022\n\005limit\030\014 \001(\005H\004\210\001\001\022N\n\017o"
  "peration_types\030\r \003(\01625.tinkoff.public_.i"
  "nvest.api.contract.v1.OperationType\022J\n\005s"
  "tate\030\016 \001(\01626.tinkoff.public_.invest.api."
  "contract.v1.OperationStateH\005\210\001\001\022 \n\023witho"
  "ut_commissions\030\017 \001(\010H\006\210\001\001\022\033\n\016without_tra"
  "des\030\020 \001(\010H\007\210\001\001\022\037\n\022without_overnights\030\021 \001"
  "(\010H\010\210\001\001B\020\n\016_instrument_idB\007\n\005_fromB\005\n\003_t"
  "oB\t\n\007_cursorB\010\n\006_limitB\010\n\006_stateB\026\n\024_wit"
  "hout_commissionsB\021\n\017_without_tradesB\025\n\023_"
  "without_overnights\"\214\001\n\035GetOperationsByCu"
  "rsorResponse\022\020\n\010has_next\030\001 \001(\010\022\023\n\013next_c"
  "ursor\030\002 \001(\t\022D\n\005items\030\006 \003(\01325.tinkoff.pub"
  "lic_.invest.api.contract.v1.OperationIte"
  "m\"\373\010\n\rOperationItem\022\016\n\006cursor\030\001 \001(\t\022\031\n\021b"
  "roker_account_id\030\006 \001(\t\022\n\n\002id\030\020 \001(\t\022\033\n\023pa"
  "rent_operation_id\030\021 \001(\t\022\014\n\004name\030\022 \001(\t\022(\n"
  "\004date\030\025 \001(\0132\032.google.protobuf.Timestamp\022"
  "C\n\004type\030\026 \001(\01625.tinkoff.public_.invest.a"
  "pi.contract.v1.OperationType\022\023\n\013descript"
  "ion\030\027 \001(\t\022E\n\005state\030\030 \001(\01626.tinkoff.publi"
  "c_.invest.api.contract.v1.OperationState"
  "\022\026\n\016instrument_uid\030\037 \001(\t\022\014\n\004figi\030  \001(\t\022\027"
  "\n\017instrument_type\030! \001(\t\022O\n\017instrument_ki"
  "nd\030\" \001(\01626.tinkoff.public_.invest.api.co"
  "ntract.v1.InstrumentType\022\024\n\014position_uid"
  "\030# \001(\t\022C\n\007payment\030) \001(\01322.tinkoff.public"
  "_.invest.api.contract.v1.MoneyValue\022A\n\005p"
  "rice\030* \001(\01322.tinkoff.public_.invest.api."
  "contract.v1.MoneyValue\022F\n\ncommission\030+ \001"
  "(\01322.tinkoff.public_.invest.api.contract"
  ".v1.MoneyValue\022A\n\005yield\030, \001(\01322.tinkoff."
  "public_.invest.api.contract.v1.MoneyValu"
  "e\022I\n\016yield_relative\030- \001(\01321.tinkoff.publ"
  "ic_.invest.api.contract.v1.Quotation\022G\n\013"
  "accrued_int\030. \001(\01322.tinkoff.public_.inve"
  "st.api.contract.v1.MoneyValue\022\020\n\010quantit"
  "y\0303 \001(\003\022\025\n\rquantity_rest\0304 \001(\003\022\025\n\rquanti"
  "ty_done\0305 \001(\003\0224\n\020cancel_date_time\0308 \001(\0132"
  "\032.google.protobuf.Timestamp\022\025\n\rcancel_re"
  "ason\0309 \001(\t\022P\n\013trades_info\030= \001(\0132;.tinkof"
  "f.public_.invest.api.contract.v1.Operati"
  "onItemTrades\022\021\n\tasset_uid\030@ \001(\t\"a\n\023Opera"
  "tionItemTrades\022J\n\006trades\030\006 \003(\0132:.tinkoff"
  ".public_.invest.api.contract.v1.Operatio"
  "nItemTrade\"\256\002\n\022OperationItemTrade\022\013\n\003num"
  "\030\001 \001(\t\022(\n\004date\030\006 \001(\0132\032.google.protobuf.T"
  "imestamp\022\020\n\010quantity\030\013 \001(\003\022A\n\005price\030\020 \001("
  "\01322.tinkoff.public_.invest.api.contract."
  "v1.MoneyValue\022A\n\005yield\030\025 \001(\01322.tinkoff.p"
  "ublic_.invest.api.contract.v1.MoneyValue"
  "\022I\n\016yield_relative\030\026 \001(\01321.tinkoff.publi"
  "c_.invest.api.contract.v1.Quotation\"*\n\026P"
  "ositionsStreamRequest\022\020\n\010accounts\030\001 \003(\t\""
  "\212\002\n\027PositionsStreamResponse\022\\\n\rsubscript"
  "ions\030\001 \001(\0132C.tinkoff.public_.invest.api."
  "contract.v1.PositionsSubscriptionResultH"
  "\000\022H\n\010position\030\002 \001(\01324.tinkoff.public_.in"
  "vest.api.contract.v1.PositionDataH\000\022<\n\004p"
  "ing\030\003 \001(\0132,.tinkoff.public_.invest.api.c"
  "ontract.v1.PingH\000B\t\n\007payload\"t\n\033Position"
  "sSubscriptionResult\022U\n\010accounts\030\001 \003(\0132C."
  "tinkoff.public_.invest.api.contract.v1.P"
  "ositionsSubscriptionStatus\"\232\001\n\033Positions"
  "SubscriptionStatus\022\022\n\naccount_id\030\001 \001(\t\022g"
  "\n\023subscription_status\030\006 \001(\0162J.tinkoff.pu"
  "blic_.invest.api.contract.v1.PositionsAc"
  "countSubscriptionStatus\"\372\002\n\014PositionData"
  "\022\022\n\naccount_id\030\001 \001(\t\022E\n\005money\030\002 \003(\01326.ti"
  "nkoff.public_.invest.api.contract.v1.Pos"
  "itionsMoney\022O\n\nsecurities\030\003 \003(\0132;.tinkof"
  "f.public_.invest.api.contract.v1.Positio"
  "nsSecurities\022I\n\007futures\030\004 \003(\01328.tinkoff."
  "public_.invest.api.contract.v1.Positions"
  "Futures\022I\n\007options\030\005 \003(\01328.tinkoff.publi"
  "c_.invest.api.contract.v1.PositionsOptio"
  "ns\022(\n\004date\030\006 \001(\0132\032.google.protobuf.Times"
  "tamp\"\250\001\n\016PositionsMoney\022K\n\017available_val"
  "ue\030\001 \001(\01322.tinkoff.public_.invest.api.co"
  "ntract.v1.MoneyValue\022I\n\rblocked_value\030\002 "
  "\001(\01322.tinkoff.public_.invest.api.contrac"
  "t.v1.MoneyValue*\213\001\n\016OperationState\022\037\n\033OP"
  "ERATION_STATE_UNSPECIFIED\020\000\022\034\n\030OPERATION"
  "_STATE_EXECUTED\020\001\022\034\n\030OPERATION_STATE_CAN"
  "CELED\020\002\022\034\n\030OPERATION_STATE_PROGRESS\020\003*\272\020"
  "\n\rOperationType\022\036\n\032OPERATION_TYPE_UNSPEC"
  "IFIED\020\000\022\030\n\024OPERATION_TYPE_INPUT\020\001\022\033\n\027OPE"
  "RATION_TYPE_BOND_TAX\020\002\022$\n OPERATION_TYPE"
  "_OUTPUT_SECURITIES\020\003\022\034\n\030OPERATION_TYPE_O"
  "VERNIGHT\020\004\022\026\n\022OPERATION_TYPE_TAX\020\005\022&\n\"OP"
  "ERATION_TYPE_BOND_REPAYMENT_FULL\020\006\022\034\n\030OP"
  "ERATION_TYPE_SELL_CARD\020\007\022\037\n\033OPERATION_TY"
  "PE_DIVIDEND_TAX\020\010\022\031\n\025OPERATION_TYPE_OUTP"
  "UT\020\t\022!\n\035OPERATION_TYPE_BOND_REPAYMENT\020\n\022"
  "!\n\035OPERATION_TYPE_TAX_CORRECTION\020\013\022\036\n\032OP"
  "ERATION_TYPE_SERVICE_FEE\020\014\022\036\n\032OPERATION_"
  "TYPE_BENEFIT_TAX\020\r\022\035\n\031OPERATION_TYPE_MAR"
  "GIN_FEE\020\016\022\026\n\022OPERATION_TYPE_BUY\020\017\022\033\n\027OPE"
  "RATION_TYPE_BUY_CARD\020\020\022#\n\037OPERATION_TYPE"
  "_INPUT_SECURITIES\020\021\022\036\n\032OPERATION_TYPE_SE"
  "LL_MARGIN\020\022\022\035\n\031OPERATION_TYPE_BROKER_FEE"
  "\020\023\022\035\n\031OPERATION_TYPE_BUY_MARGIN\020\024\022\033\n\027OPE"
  "RATION_TYPE_DIVIDEND\020\025\022\027\n\023OPERATION_TYPE"
  "_SELL\020\026\022\031\n\025OPERATION_TYPE_COUPON\020\027\022\036\n\032OP"
  "ERATION_TYPE_SUCCESS_FEE\020\030\022$\n OPERATION_"
  "TYPE_DIVIDEND_TRANSFER\020\031\022%\n!OPERATION_TY"
  "PE_ACCRUING_VARMARGIN\020\032\022(\n$OPERATION_TYP"
  "E_WRITING_OFF_VARMARGIN\020\033\022\037\n\033OPERATION_T"
  "YPE_DELIVERY_BUY\020\034\022 \n\034OPERATION_TYPE_DEL"
  "IVERY_SELL\020\035\022\035\n\031OPERATION_TYPE_TRACK_MFE"
  "E\020\036\022\035\n\031OPERATION_TYPE_TRACK_PFEE\020\037\022\"\n\036OP"
  "ERATION_TYPE_TAX_PROGRESSIVE\020 \022\'\n#OPERAT"
  "ION_TYPE_BOND_TAX_PROGRESSIVE\020!\022+\n\'OPERA"
  "TION_TYPE_DIVIDEND_TAX_PROGRESSIVE\020\"\022*\n&"
  "OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE\020#"
  "\022-\n)OPERATION_TYPE_TAX_CORRECTION_PROGRE"
  "SSIVE\020$\022\'\n#OPERATION_TYPE_TAX_REPO_PROGR"
  "ESSIVE\020%\022\033\n\027OPERATION_TYPE_TAX_REPO\020&\022 \n"
  "\034OPERATION_TYPE_TAX_REPO_HOLD\020\'\022\"\n\036OPERA"
  "TION_TYPE_TAX_REPO_REFUND\020(\022,\n(OPERATION"
  "_TYPE_TAX_REPO_HOLD_PROGRESSIVE\020)\022.\n*OPE"
  "RATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE\020"
  "*\022\032\n\026OPERATION_TYPE_DIV_EXT\020+\022(\n$OPERATI"
  "ON_TYPE_TAX_CORRECTION_COUPON\020,\022\033\n\027OPERA"
  "TION_TYPE_CASH_FEE\020-\022\032\n\026OPERATION_TYPE_O"
  "UT_FEE\020.\022!\n\035OPERATION_TYPE_OUT_STAMP_DUT"
  "Y\020/\022\037\n\033OPERATION_TYPE_OUTPUT_SWIFT\0202\022\036\n\032"
  "OPERATION_TYPE_INPUT_SWIFT\0203\022#\n\037OPERATIO"
  "N_TYPE_OUTPUT_ACQUIRING\0205\022\"\n\036OPERATION_T"
  "YPE_INPUT_ACQUIRING\0206\022!\n\035OPERATION_TYPE_"
  "OUTPUT_PENALTY\0207\022\035\n\031OPERATION_TYPE_ADVIC"
  "E_FEE\0208\022\037\n\033OPERATION_TYPE_TRANS_IIS_BS\0209"
  "\022\036\n\032OPERATION_TYPE_TRANS_BS_BS\020:\022\034\n\030OPER"
  "ATION_TYPE_OUT_MULTI\020;\022\034\n\030OPERATION_TYPE"
  "_INP_MULTI\020<\022!\n\035OPERATION_TYPE_OVER_PLAC"
  "EMENT\020=\022\033\n\027OPERATION_TYPE_OVER_COM\020>\022\036\n\032"
  "OPERATION_TYPE_OVER_INCOME\020\?\022$\n OPERATIO"
  "N_TYPE_OPTION_EXPIRATION\020@*\336\001\n\033Portfolio"
  "SubscriptionStatus\022-\n)PORTFOLIO_SUBSCRIP"
  "TION_STATUS_UNSPECIFIED\020\000\022)\n%PORTFOLIO_S"
  "UBSCRIPTION_STATUS_SUCCESS\020\001\0223\n/PORTFOLI"
  "O_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND\020"
  "\002\0220\n,PORTFOLIO_SUBSCRIPTION_STATUS_INTER"
  "NAL_ERROR\020\003*\345\001\n\"PositionsAccountSubscrip"
  "tionStatus\022-\n)POSITIONS_SUBSCRIPTION_STA"
  "TUS_UNSPECIFIED\020\000\022)\n%POSITIONS_SUBSCRIPT"
  "ION_STATUS_SUCCESS\020\001\0223\n/POSITIONS_SUBSCR"
  "IPTION_STATUS_ACCOUNT_NOT_FOUND\020\002\0220\n,POS"
  "ITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERRO"
  "R\020\0032\246\010\n\021OperationsService\022\206\001\n\rGetOperati"
  "ons\0229.tinkoff.public_.invest.api.contrac"
  "t.v1.OperationsRequest\032:.tinkoff.public_"
  ".invest.api.contract.v1.OperationsRespon"
  "se\022\203\001\n\014GetPortfolio\0228.tinkoff.public_.in"
  "vest.api.contract.v1.PortfolioRequest\0329."
  "tinkoff.public_.invest.api.contract.v1.P"
  "ortfolioResponse\022\203\001\n\014GetPositions\0228.tink"
  "off.public_.invest.api.contract.v1.Posit"
  "ionsRequest\0329.tinkoff.public_.invest.api"
  ".contract.v1.PositionsResponse\022\222\001\n\021GetWi"
  "thdrawLimits\022=.tinkoff.public_.invest.ap"
  "i.contract.v1.WithdrawLimitsRequest\032>.ti"
  "nkoff.public_.invest.api.contract.v1.Wit"
  "hdrawLimitsResponse\022\214\001\n\017GetBrokerReport\022"
  ";.tinkoff.public_.invest.api.contract.v1"
  ".BrokerReportRequest\032<.tinkoff.public_.i"
  "nvest.api.contract.v1.BrokerReportRespon"
  "se\022\260\001\n\031GetDividendsForeignIssuer\022H.tinko"
  "ff.public_.invest.api.contract.v1.GetDiv"
  "idendsForeignIssuerRequest\032I.tinkoff.pub"
  "lic_.invest.api.contract.v1.GetDividends"
  "ForeignIssuerResponse\022\244\001\n\025GetOperationsB"
  "yCursor\022D.tinkoff.public_.invest.api.con"
  "tract.v1.GetOperationsByCursorRequest\032E."
  "tinkoff.public_.invest.api.contract.v1.G"
  "etOperationsByCursorResponse2\307\002\n\027Operati"
  "onsStreamService\022\224\001\n\017PortfolioStream\022>.t"
  "inkoff.public_.invest.api.contract.v1.Po"
  "rtfolioStreamRequest\032\?.tinkoff.public_.i"
  "nvest.api.contract.v1.PortfolioStreamRes"
  "ponse0\001\022\224\001\n\017PositionsStream\022>.tinkoff.pu"
  "blic_.invest.api.contract.v1.PositionsSt"
  "reamRequest\032\?.tinkoff.public_.invest.api"
  ".contract.v1.PositionsStreamResponse0\001Ba"
  "\n\034ru.tinkoff.piapi.contract.v1P\001Z\014./;inv"
  "estapi\242\002\005TIAPI\252\002\024Tinkoff.InvestApi.V1\312\002\021"
  "Tinkoff\\Invest\\V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_operations_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_operations_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_operations_2eproto = {
    false, false, 17225, descriptor_table_protodef_operations_2eproto,
    "operations.proto",
    &descriptor_table_operations_2eproto_once, descriptor_table_operations_2eproto_deps, 3, 44,
    schemas, file_default_instances, TableStruct_operations_2eproto::offsets,
    file_level_metadata_operations_2eproto, file_level_enum_descriptors_operations_2eproto,
    file_level_service_descriptors_operations_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_operations_2eproto_getter() {
  return &descriptor_table_operations_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_operations_2eproto(&descriptor_table_operations_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortfolioRequest_CurrencyRequest_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_operations_2eproto);
  return file_level_enum_descriptors_operations_2eproto[0];
}
bool PortfolioRequest_CurrencyRequest_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest::RUB;
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest::USD;
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest::EUR;
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest::CurrencyRequest_MIN;
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest::CurrencyRequest_MAX;
constexpr int PortfolioRequest::CurrencyRequest_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_operations_2eproto);
  return file_level_enum_descriptors_operations_2eproto[1];
}
bool OperationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_operations_2eproto);
  return file_level_enum_descriptors_operations_2eproto[2];
}
bool OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 50:
    case 51:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortfolioSubscriptionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_operations_2eproto);
  return file_level_enum_descriptors_operations_2eproto[3];
}
bool PortfolioSubscriptionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionsAccountSubscriptionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_operations_2eproto);
  return file_level_enum_descriptors_operations_2eproto[4];
}
bool PositionsAccountSubscriptionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OperationsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationsRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const OperationsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const OperationsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationsRequest::_Internal::from(const OperationsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationsRequest::_Internal::to(const OperationsRequest* msg) {
  return *msg->_impl_.to_;
}
void OperationsRequest::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OperationsRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
OperationsRequest::OperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
}
OperationsRequest::OperationsRequest(const OperationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
}

inline void OperationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.state_){0}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationsRequest::~OperationsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.figi_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void OperationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationsRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string figi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationsRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationsRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // optional .google.protobuf.Timestamp from = 2;
  if (_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 4;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // optional string figi = 5;
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationsRequest.figi");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_figi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
  return target;
}

size_t OperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string figi = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_figi());
    }

    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationsRequest::GetClassData() const { return &_class_data_; }


void OperationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationsRequest*>(&to_msg);
  auto& from = static_cast<const OperationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_to());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationsRequest::CopyFrom(const OperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationsRequest::IsInitialized() const {
  return true;
}

void OperationsRequest::InternalSwap(OperationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationsRequest, _impl_.state_)
      + sizeof(OperationsRequest::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(OperationsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[0]);
}

// ===================================================================

class OperationsResponse::_Internal {
 public:
};

OperationsResponse::OperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
}
OperationsResponse::OperationsResponse(const OperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){from._impl_.operations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
}

inline void OperationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationsResponse::~OperationsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operations_.~RepeatedPtrField();
}

void OperationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Operation operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Operation operations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operations_size()); i < n; i++) {
    const auto& repfield = this->_internal_operations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
  return target;
}

size_t OperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Operation operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->_impl_.operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationsResponse::GetClassData() const { return &_class_data_; }


void OperationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationsResponse*>(&to_msg);
  auto& from = static_cast<const OperationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operations_.MergeFrom(from._impl_.operations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationsResponse::CopyFrom(const OperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationsResponse::IsInitialized() const {
  return true;
}

void OperationsResponse::InternalSwap(OperationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operations_.InternalSwap(&other->_impl_.operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[1]);
}

// ===================================================================

class Operation::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& payment(const Operation* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price(const Operation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date(const Operation* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Operation::_Internal::payment(const Operation* msg) {
  return *msg->_impl_.payment_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Operation::_Internal::price(const Operation* msg) {
  return *msg->_impl_.price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Operation::_Internal::date(const Operation* msg) {
  return *msg->_impl_.date_;
}
void Operation::clear_payment() {
  if (GetArenaForAllocation() == nullptr && _impl_.payment_ != nullptr) {
    delete _impl_.payment_;
  }
  _impl_.payment_ = nullptr;
}
void Operation::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void Operation::clear_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){from._impl_.trades_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.parent_operation_id_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.payment_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.quantity_rest_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.operation_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parent_operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_operation_id().empty()) {
    _this->_impl_.parent_operation_id_.Set(from._internal_parent_operation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_payment()) {
    _this->_impl_.payment_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.payment_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.price_);
  }
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_);
  }
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_type_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.operation_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Operation)
}

inline void Operation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.parent_operation_id_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.payment_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , decltype(_impl_.quantity_rest_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.operation_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Operation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trades_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.parent_operation_id_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.type_.Destroy();
  _impl_.asset_uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.payment_;
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.date_;
}

void Operation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Operation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trades_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.parent_operation_id_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.payment_ != nullptr) {
    delete _impl_.payment_;
  }
  _impl_.payment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
  ::memset(&_impl_.quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.operation_type_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.operation_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.id"));
        } else
          goto handle_unusual;
        continue;
      // string parent_operation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_parent_operation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.parent_operation_id"));
        } else
          goto handle_unusual;
        continue;
      // string currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OperationState state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity_rest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.quantity_rest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string figi = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OperationType operation_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.OperationTrade trades = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string asset_uid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Operation.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Operation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string parent_operation_id = 2;
  if (!this->_internal_parent_operation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_operation_id().data(), static_cast<int>(this->_internal_parent_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.parent_operation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parent_operation_id(), target);
  }

  // string currency = 3;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.currency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 4;
  if (this->_internal_has_payment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::payment(this),
        _Internal::payment(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 5;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationState state = 6;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // int64 quantity = 7;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_quantity(), target);
  }

  // int64 quantity_rest = 8;
  if (this->_internal_quantity_rest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_quantity_rest(), target);
  }

  // string figi = 9;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.figi");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_figi(), target);
  }

  // string instrument_type = 10;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.instrument_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_instrument_type(), target);
  }

  // .google.protobuf.Timestamp date = 11;
  if (this->_internal_has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // string type = 12;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationType operation_type = 13;
  if (this->_internal_operation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_operation_type(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationTrade trades = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string asset_uid = 16;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.asset_uid");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_asset_uid(), target);
  }

  // string position_uid = 17;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.position_uid");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_position_uid(), target);
  }

  // string instrument_uid = 18;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Operation.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Operation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationTrade trades = 14;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->_impl_.trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string parent_operation_id = 2;
  if (!this->_internal_parent_operation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_operation_id());
  }

  // string currency = 3;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string figi = 9;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_type = 10;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // string type = 12;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string asset_uid = 16;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // string position_uid = 17;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string instrument_uid = 18;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 4;
  if (this->_internal_has_payment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payment_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 5;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .google.protobuf.Timestamp date = 11;
  if (this->_internal_has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  // int64 quantity = 7;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  // int64 quantity_rest = 8;
  if (this->_internal_quantity_rest() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity_rest());
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationState state = 6;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationType operation_type = 13;
  if (this->_internal_operation_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }


void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operation*>(&to_msg);
  auto& from = static_cast<const Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Operation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trades_.MergeFrom(from._impl_.trades_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_parent_operation_id().empty()) {
    _this->_internal_set_parent_operation_id(from._internal_parent_operation_id());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_payment()) {
    _this->_internal_mutable_payment()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_payment());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_date()) {
    _this->_internal_mutable_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_quantity_rest() != 0) {
    _this->_internal_set_quantity_rest(from._internal_quantity_rest());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_operation_type() != 0) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trades_.InternalSwap(&other->_impl_.trades_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_operation_id_, lhs_arena,
      &other->_impl_.parent_operation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, _impl_.operation_type_)
      + sizeof(Operation::_impl_.operation_type_)
      - PROTOBUF_FIELD_OFFSET(Operation, _impl_.payment_)>(
          reinterpret_cast<char*>(&_impl_.payment_),
          reinterpret_cast<char*>(&other->_impl_.payment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[2]);
}

// ===================================================================

class OperationTrade::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_time(const OperationTrade* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price(const OperationTrade* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationTrade::_Internal::date_time(const OperationTrade* msg) {
  return *msg->_impl_.date_time_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationTrade::_Internal::price(const OperationTrade* msg) {
  return *msg->_impl_.price_;
}
void OperationTrade::clear_date_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_time_ != nullptr) {
    delete _impl_.date_time_;
  }
  _impl_.date_time_ = nullptr;
}
void OperationTrade::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
OperationTrade::OperationTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OperationTrade)
}
OperationTrade::OperationTrade(const OperationTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationTrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.date_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    _this->_impl_.trade_id_.Set(from._internal_trade_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_date_time()) {
    _this->_impl_.date_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_time_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.price_);
  }
  _this->_impl_.quantity_ = from._impl_.quantity_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OperationTrade)
}

inline void OperationTrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.date_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationTrade::~OperationTrade() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OperationTrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationTrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trade_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.date_time_;
  if (this != internal_default_instance()) delete _impl_.price_;
}

void OperationTrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OperationTrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trade_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.date_time_ != nullptr) {
    delete _impl_.date_time_;
  }
  _impl_.date_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  _impl_.quantity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationTrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trade_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationTrade.trade_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationTrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OperationTrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trade_id = 1;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationTrade.trade_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trade_id(), target);
  }

  // .google.protobuf.Timestamp date_time = 2;
  if (this->_internal_has_date_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::date_time(this),
        _Internal::date_time(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 3;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_quantity(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 4;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OperationTrade)
  return target;
}

size_t OperationTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OperationTrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_id = 1;
  if (!this->_internal_trade_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // .google.protobuf.Timestamp date_time = 2;
  if (this->_internal_has_date_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 4;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int64 quantity = 3;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationTrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationTrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationTrade::GetClassData() const { return &_class_data_; }


void OperationTrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationTrade*>(&to_msg);
  auto& from = static_cast<const OperationTrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OperationTrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_id().empty()) {
    _this->_internal_set_trade_id(from._internal_trade_id());
  }
  if (from._internal_has_date_time()) {
    _this->_internal_mutable_date_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_time());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationTrade::CopyFrom(const OperationTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OperationTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTrade::IsInitialized() const {
  return true;
}

void OperationTrade::InternalSwap(OperationTrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trade_id_, lhs_arena,
      &other->_impl_.trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationTrade, _impl_.quantity_)
      + sizeof(OperationTrade::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(OperationTrade, _impl_.date_time_)>(
          reinterpret_cast<char*>(&_impl_.date_time_),
          reinterpret_cast<char*>(&other->_impl_.date_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationTrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[3]);
}

// ===================================================================

class PortfolioRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PortfolioRequest>()._impl_._has_bits_);
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PortfolioRequest::PortfolioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
}
PortfolioRequest::PortfolioRequest(const PortfolioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortfolioRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.currency_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.currency_ = from._impl_.currency_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
}

inline void PortfolioRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.currency_){0}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PortfolioRequest::~PortfolioRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortfolioRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void PortfolioRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortfolioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.currency_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PortfolioRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.PortfolioRequest.CurrencyRequest currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_currency(static_cast<::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortfolioRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PortfolioRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.PortfolioRequest.CurrencyRequest currency = 2;
  if (_internal_has_currency()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
  return target;
}

size_t PortfolioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // optional .tinkoff.public_.invest.api.contract.v1.PortfolioRequest.CurrencyRequest currency = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_currency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortfolioRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortfolioRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortfolioRequest::GetClassData() const { return &_class_data_; }


void PortfolioRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortfolioRequest*>(&to_msg);
  auto& from = static_cast<const PortfolioRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_currency()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortfolioRequest::CopyFrom(const PortfolioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioRequest::IsInitialized() const {
  return true;
}

void PortfolioRequest::InternalSwap(PortfolioRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  swap(_impl_.currency_, other->_impl_.currency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[4]);
}

// ===================================================================

class PortfolioResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_shares(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_bonds(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_etf(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_currencies(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_futures(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_options(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_sp(const PortfolioResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_portfolio(const PortfolioResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_shares(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_shares_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_bonds(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_bonds_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_etf(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_etf_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_currencies(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_currencies_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_futures(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_futures_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PortfolioResponse::_Internal::expected_yield(const PortfolioResponse* msg) {
  return *msg->_impl_.expected_yield_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_options(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_options_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_sp(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_sp_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioResponse::_Internal::total_amount_portfolio(const PortfolioResponse* msg) {
  return *msg->_impl_.total_amount_portfolio_;
}
void PortfolioResponse::clear_total_amount_shares() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_shares_ != nullptr) {
    delete _impl_.total_amount_shares_;
  }
  _impl_.total_amount_shares_ = nullptr;
}
void PortfolioResponse::clear_total_amount_bonds() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_bonds_ != nullptr) {
    delete _impl_.total_amount_bonds_;
  }
  _impl_.total_amount_bonds_ = nullptr;
}
void PortfolioResponse::clear_total_amount_etf() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_etf_ != nullptr) {
    delete _impl_.total_amount_etf_;
  }
  _impl_.total_amount_etf_ = nullptr;
}
void PortfolioResponse::clear_total_amount_currencies() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_currencies_ != nullptr) {
    delete _impl_.total_amount_currencies_;
  }
  _impl_.total_amount_currencies_ = nullptr;
}
void PortfolioResponse::clear_total_amount_futures() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_futures_ != nullptr) {
    delete _impl_.total_amount_futures_;
  }
  _impl_.total_amount_futures_ = nullptr;
}
void PortfolioResponse::clear_expected_yield() {
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_ != nullptr) {
    delete _impl_.expected_yield_;
  }
  _impl_.expected_yield_ = nullptr;
}
void PortfolioResponse::clear_total_amount_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_options_ != nullptr) {
    delete _impl_.total_amount_options_;
  }
  _impl_.total_amount_options_ = nullptr;
}
void PortfolioResponse::clear_total_amount_sp() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_sp_ != nullptr) {
    delete _impl_.total_amount_sp_;
  }
  _impl_.total_amount_sp_ = nullptr;
}
void PortfolioResponse::clear_total_amount_portfolio() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_portfolio_ != nullptr) {
    delete _impl_.total_amount_portfolio_;
  }
  _impl_.total_amount_portfolio_ = nullptr;
}
PortfolioResponse::PortfolioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
}
PortfolioResponse::PortfolioResponse(const PortfolioResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortfolioResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.positions_){from._impl_.positions_}
    , decltype(_impl_.virtual_positions_){from._impl_.virtual_positions_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.total_amount_shares_){nullptr}
    , decltype(_impl_.total_amount_bonds_){nullptr}
    , decltype(_impl_.total_amount_etf_){nullptr}
    , decltype(_impl_.total_amount_currencies_){nullptr}
    , decltype(_impl_.total_amount_futures_){nullptr}
    , decltype(_impl_.expected_yield_){nullptr}
    , decltype(_impl_.total_amount_options_){nullptr}
    , decltype(_impl_.total_amount_sp_){nullptr}
    , decltype(_impl_.total_amount_portfolio_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_total_amount_shares()) {
    _this->_impl_.total_amount_shares_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_shares_);
  }
  if (from._internal_has_total_amount_bonds()) {
    _this->_impl_.total_amount_bonds_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_bonds_);
  }
  if (from._internal_has_total_amount_etf()) {
    _this->_impl_.total_amount_etf_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_etf_);
  }
  if (from._internal_has_total_amount_currencies()) {
    _this->_impl_.total_amount_currencies_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_currencies_);
  }
  if (from._internal_has_total_amount_futures()) {
    _this->_impl_.total_amount_futures_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_futures_);
  }
  if (from._internal_has_expected_yield()) {
    _this->_impl_.expected_yield_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.expected_yield_);
  }
  if (from._internal_has_total_amount_options()) {
    _this->_impl_.total_amount_options_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_options_);
  }
  if (from._internal_has_total_amount_sp()) {
    _this->_impl_.total_amount_sp_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_sp_);
  }
  if (from._internal_has_total_amount_portfolio()) {
    _this->_impl_.total_amount_portfolio_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_amount_portfolio_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
}

inline void PortfolioResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.positions_){arena}
    , decltype(_impl_.virtual_positions_){arena}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.total_amount_shares_){nullptr}
    , decltype(_impl_.total_amount_bonds_){nullptr}
    , decltype(_impl_.total_amount_etf_){nullptr}
    , decltype(_impl_.total_amount_currencies_){nullptr}
    , decltype(_impl_.total_amount_futures_){nullptr}
    , decltype(_impl_.expected_yield_){nullptr}
    , decltype(_impl_.total_amount_options_){nullptr}
    , decltype(_impl_.total_amount_sp_){nullptr}
    , decltype(_impl_.total_amount_portfolio_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PortfolioResponse::~PortfolioResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortfolioResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.positions_.~RepeatedPtrField();
  _impl_.virtual_positions_.~RepeatedPtrField();
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.total_amount_shares_;
  if (this != internal_default_instance()) delete _impl_.total_amount_bonds_;
  if (this != internal_default_instance()) delete _impl_.total_amount_etf_;
  if (this != internal_default_instance()) delete _impl_.total_amount_currencies_;
  if (this != internal_default_instance()) delete _impl_.total_amount_futures_;
  if (this != internal_default_instance()) delete _impl_.expected_yield_;
  if (this != internal_default_instance()) delete _impl_.total_amount_options_;
  if (this != internal_default_instance()) delete _impl_.total_amount_sp_;
  if (this != internal_default_instance()) delete _impl_.total_amount_portfolio_;
}

void PortfolioResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortfolioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.positions_.Clear();
  _impl_.virtual_positions_.Clear();
  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_shares_ != nullptr) {
    delete _impl_.total_amount_shares_;
  }
  _impl_.total_amount_shares_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_bonds_ != nullptr) {
    delete _impl_.total_amount_bonds_;
  }
  _impl_.total_amount_bonds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_etf_ != nullptr) {
    delete _impl_.total_amount_etf_;
  }
  _impl_.total_amount_etf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_currencies_ != nullptr) {
    delete _impl_.total_amount_currencies_;
  }
  _impl_.total_amount_currencies_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_futures_ != nullptr) {
    delete _impl_.total_amount_futures_;
  }
  _impl_.total_amount_futures_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_ != nullptr) {
    delete _impl_.expected_yield_;
  }
  _impl_.expected_yield_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_options_ != nullptr) {
    delete _impl_.total_amount_options_;
  }
  _impl_.total_amount_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_sp_ != nullptr) {
    delete _impl_.total_amount_sp_;
  }
  _impl_.total_amount_sp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_amount_portfolio_ != nullptr) {
    delete _impl_.total_amount_portfolio_;
  }
  _impl_.total_amount_portfolio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_shares = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_shares(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_bonds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_bonds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_etf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_etf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_currencies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_currencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_futures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_futures(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_yield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PortfolioPosition positions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string account_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PortfolioResponse.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_sp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_sp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_portfolio = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_amount_portfolio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition virtual_positions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortfolioResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_shares = 1;
  if (this->_internal_has_total_amount_shares()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::total_amount_shares(this),
        _Internal::total_amount_shares(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_bonds = 2;
  if (this->_internal_has_total_amount_bonds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::total_amount_bonds(this),
        _Internal::total_amount_bonds(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_etf = 3;
  if (this->_internal_has_total_amount_etf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::total_amount_etf(this),
        _Internal::total_amount_etf(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_currencies = 4;
  if (this->_internal_has_total_amount_currencies()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::total_amount_currencies(this),
        _Internal::total_amount_currencies(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_futures = 5;
  if (this->_internal_has_total_amount_futures()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::total_amount_futures(this),
        _Internal::total_amount_futures(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 6;
  if (this->_internal_has_expected_yield()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::expected_yield(this),
        _Internal::expected_yield(this).GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PortfolioPosition positions = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string account_id = 8;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PortfolioResponse.account_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_account_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_options = 9;
  if (this->_internal_has_total_amount_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::total_amount_options(this),
        _Internal::total_amount_options(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_sp = 10;
  if (this->_internal_has_total_amount_sp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::total_amount_sp(this),
        _Internal::total_amount_sp(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_portfolio = 11;
  if (this->_internal_has_total_amount_portfolio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::total_amount_portfolio(this),
        _Internal::total_amount_portfolio(this).GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition virtual_positions = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_virtual_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_virtual_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
  return target;
}

size_t PortfolioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.PortfolioPosition positions = 7;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->_impl_.positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition virtual_positions = 12;
  total_size += 1UL * this->_internal_virtual_positions_size();
  for (const auto& msg : this->_impl_.virtual_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string account_id = 8;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_shares = 1;
  if (this->_internal_has_total_amount_shares()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_shares_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_bonds = 2;
  if (this->_internal_has_total_amount_bonds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_bonds_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_etf = 3;
  if (this->_internal_has_total_amount_etf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_etf_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_currencies = 4;
  if (this->_internal_has_total_amount_currencies()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_currencies_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_futures = 5;
  if (this->_internal_has_total_amount_futures()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_futures_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 6;
  if (this->_internal_has_expected_yield()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expected_yield_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_options = 9;
  if (this->_internal_has_total_amount_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_options_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_sp = 10;
  if (this->_internal_has_total_amount_sp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_sp_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_portfolio = 11;
  if (this->_internal_has_total_amount_portfolio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_amount_portfolio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortfolioResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortfolioResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortfolioResponse::GetClassData() const { return &_class_data_; }


void PortfolioResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortfolioResponse*>(&to_msg);
  auto& from = static_cast<const PortfolioResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.positions_.MergeFrom(from._impl_.positions_);
  _this->_impl_.virtual_positions_.MergeFrom(from._impl_.virtual_positions_);
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_total_amount_shares()) {
    _this->_internal_mutable_total_amount_shares()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_shares());
  }
  if (from._internal_has_total_amount_bonds()) {
    _this->_internal_mutable_total_amount_bonds()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_bonds());
  }
  if (from._internal_has_total_amount_etf()) {
    _this->_internal_mutable_total_amount_etf()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_etf());
  }
  if (from._internal_has_total_amount_currencies()) {
    _this->_internal_mutable_total_amount_currencies()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_currencies());
  }
  if (from._internal_has_total_amount_futures()) {
    _this->_internal_mutable_total_amount_futures()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_futures());
  }
  if (from._internal_has_expected_yield()) {
    _this->_internal_mutable_expected_yield()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_expected_yield());
  }
  if (from._internal_has_total_amount_options()) {
    _this->_internal_mutable_total_amount_options()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_options());
  }
  if (from._internal_has_total_amount_sp()) {
    _this->_internal_mutable_total_amount_sp()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_sp());
  }
  if (from._internal_has_total_amount_portfolio()) {
    _this->_internal_mutable_total_amount_portfolio()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_amount_portfolio());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortfolioResponse::CopyFrom(const PortfolioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioResponse::IsInitialized() const {
  return true;
}

void PortfolioResponse::InternalSwap(PortfolioResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.positions_.InternalSwap(&other->_impl_.positions_);
  _impl_.virtual_positions_.InternalSwap(&other->_impl_.virtual_positions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortfolioResponse, _impl_.total_amount_portfolio_)
      + sizeof(PortfolioResponse::_impl_.total_amount_portfolio_)
      - PROTOBUF_FIELD_OFFSET(PortfolioResponse, _impl_.total_amount_shares_)>(
          reinterpret_cast<char*>(&_impl_.total_amount_shares_),
          reinterpret_cast<char*>(&other->_impl_.total_amount_shares_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[5]);
}

// ===================================================================

class PositionsRequest::_Internal {
 public:
};

PositionsRequest::PositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
}
PositionsRequest::PositionsRequest(const PositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
}

inline void PositionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionsRequest::~PositionsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void PositionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
  return target;
}

size_t PositionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsRequest::GetClassData() const { return &_class_data_; }


void PositionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsRequest*>(&to_msg);
  auto& from = static_cast<const PositionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsRequest::CopyFrom(const PositionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsRequest::IsInitialized() const {
  return true;
}

void PositionsRequest::InternalSwap(PositionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[6]);
}

// ===================================================================

class PositionsResponse::_Internal {
 public:
};

void PositionsResponse::clear_money() {
  _impl_.money_.Clear();
}
void PositionsResponse::clear_blocked() {
  _impl_.blocked_.Clear();
}
PositionsResponse::PositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
}
PositionsResponse::PositionsResponse(const PositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){from._impl_.money_}
    , decltype(_impl_.blocked_){from._impl_.blocked_}
    , decltype(_impl_.securities_){from._impl_.securities_}
    , decltype(_impl_.futures_){from._impl_.futures_}
    , decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.limits_loading_in_progress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.limits_loading_in_progress_ = from._impl_.limits_loading_in_progress_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
}

inline void PositionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){arena}
    , decltype(_impl_.blocked_){arena}
    , decltype(_impl_.securities_){arena}
    , decltype(_impl_.futures_){arena}
    , decltype(_impl_.options_){arena}
    , decltype(_impl_.limits_loading_in_progress_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionsResponse::~PositionsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.money_.~RepeatedPtrField();
  _impl_.blocked_.~RepeatedPtrField();
  _impl_.securities_.~RepeatedPtrField();
  _impl_.futures_.~RepeatedPtrField();
  _impl_.options_.~RepeatedPtrField();
}

void PositionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.money_.Clear();
  _impl_.blocked_.Clear();
  _impl_.securities_.Clear();
  _impl_.futures_.Clear();
  _impl_.options_.Clear();
  _impl_.limits_loading_in_progress_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_money(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocked(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_securities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool limits_loading_in_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limits_loading_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_futures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_money_size()); i < n; i++) {
    const auto& repfield = this->_internal_money(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocked_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocked(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_securities_size()); i < n; i++) {
    const auto& repfield = this->_internal_securities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool limits_loading_in_progress = 4;
  if (this->_internal_limits_loading_in_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_limits_loading_in_progress(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_futures_size()); i < n; i++) {
    const auto& repfield = this->_internal_futures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
  return target;
}

size_t PositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
  total_size += 1UL * this->_internal_money_size();
  for (const auto& msg : this->_impl_.money_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
  total_size += 1UL * this->_internal_blocked_size();
  for (const auto& msg : this->_impl_.blocked_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
  total_size += 1UL * this->_internal_securities_size();
  for (const auto& msg : this->_impl_.securities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 5;
  total_size += 1UL * this->_internal_futures_size();
  for (const auto& msg : this->_impl_.futures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 6;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_impl_.options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool limits_loading_in_progress = 4;
  if (this->_internal_limits_loading_in_progress() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsResponse::GetClassData() const { return &_class_data_; }


void PositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsResponse*>(&to_msg);
  auto& from = static_cast<const PositionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.money_.MergeFrom(from._impl_.money_);
  _this->_impl_.blocked_.MergeFrom(from._impl_.blocked_);
  _this->_impl_.securities_.MergeFrom(from._impl_.securities_);
  _this->_impl_.futures_.MergeFrom(from._impl_.futures_);
  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  if (from._internal_limits_loading_in_progress() != 0) {
    _this->_internal_set_limits_loading_in_progress(from._internal_limits_loading_in_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsResponse::CopyFrom(const PositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsResponse::IsInitialized() const {
  return true;
}

void PositionsResponse::InternalSwap(PositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.money_.InternalSwap(&other->_impl_.money_);
  _impl_.blocked_.InternalSwap(&other->_impl_.blocked_);
  _impl_.securities_.InternalSwap(&other->_impl_.securities_);
  _impl_.futures_.InternalSwap(&other->_impl_.futures_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  swap(_impl_.limits_loading_in_progress_, other->_impl_.limits_loading_in_progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[7]);
}

// ===================================================================

class WithdrawLimitsRequest::_Internal {
 public:
};

WithdrawLimitsRequest::WithdrawLimitsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
}
WithdrawLimitsRequest::WithdrawLimitsRequest(const WithdrawLimitsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WithdrawLimitsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
}

inline void WithdrawLimitsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WithdrawLimitsRequest::~WithdrawLimitsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WithdrawLimitsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void WithdrawLimitsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WithdrawLimitsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawLimitsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WithdrawLimitsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
  return target;
}

size_t WithdrawLimitsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WithdrawLimitsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WithdrawLimitsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WithdrawLimitsRequest::GetClassData() const { return &_class_data_; }


void WithdrawLimitsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WithdrawLimitsRequest*>(&to_msg);
  auto& from = static_cast<const WithdrawLimitsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WithdrawLimitsRequest::CopyFrom(const WithdrawLimitsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawLimitsRequest::IsInitialized() const {
  return true;
}

void WithdrawLimitsRequest::InternalSwap(WithdrawLimitsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawLimitsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[8]);
}

// ===================================================================

class WithdrawLimitsResponse::_Internal {
 public:
};

void WithdrawLimitsResponse::clear_money() {
  _impl_.money_.Clear();
}
void WithdrawLimitsResponse::clear_blocked() {
  _impl_.blocked_.Clear();
}
void WithdrawLimitsResponse::clear_blocked_guarantee() {
  _impl_.blocked_guarantee_.Clear();
}
WithdrawLimitsResponse::WithdrawLimitsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
}
WithdrawLimitsResponse::WithdrawLimitsResponse(const WithdrawLimitsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WithdrawLimitsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){from._impl_.money_}
    , decltype(_impl_.blocked_){from._impl_.blocked_}
    , decltype(_impl_.blocked_guarantee_){from._impl_.blocked_guarantee_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
}

inline void WithdrawLimitsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){arena}
    , decltype(_impl_.blocked_){arena}
    , decltype(_impl_.blocked_guarantee_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WithdrawLimitsResponse::~WithdrawLimitsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WithdrawLimitsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.money_.~RepeatedPtrField();
  _impl_.blocked_.~RepeatedPtrField();
  _impl_.blocked_guarantee_.~RepeatedPtrField();
}

void WithdrawLimitsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WithdrawLimitsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.money_.Clear();
  _impl_.blocked_.Clear();
  _impl_.blocked_guarantee_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawLimitsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_money(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocked(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_guarantee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocked_guarantee(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WithdrawLimitsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_money_size()); i < n; i++) {
    const auto& repfield = this->_internal_money(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocked_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocked(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_guarantee = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocked_guarantee_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocked_guarantee(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
  return target;
}

size_t WithdrawLimitsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
  total_size += 1UL * this->_internal_money_size();
  for (const auto& msg : this->_impl_.money_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
  total_size += 1UL * this->_internal_blocked_size();
  for (const auto& msg : this->_impl_.blocked_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_guarantee = 3;
  total_size += 1UL * this->_internal_blocked_guarantee_size();
  for (const auto& msg : this->_impl_.blocked_guarantee_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WithdrawLimitsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WithdrawLimitsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WithdrawLimitsResponse::GetClassData() const { return &_class_data_; }


void WithdrawLimitsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WithdrawLimitsResponse*>(&to_msg);
  auto& from = static_cast<const WithdrawLimitsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.money_.MergeFrom(from._impl_.money_);
  _this->_impl_.blocked_.MergeFrom(from._impl_.blocked_);
  _this->_impl_.blocked_guarantee_.MergeFrom(from._impl_.blocked_guarantee_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WithdrawLimitsResponse::CopyFrom(const WithdrawLimitsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawLimitsResponse::IsInitialized() const {
  return true;
}

void WithdrawLimitsResponse::InternalSwap(WithdrawLimitsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.money_.InternalSwap(&other->_impl_.money_);
  _impl_.blocked_.InternalSwap(&other->_impl_.blocked_);
  _impl_.blocked_guarantee_.InternalSwap(&other->_impl_.blocked_guarantee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawLimitsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[9]);
}

// ===================================================================

class PortfolioPosition::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_nkd(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& average_position_price_pt(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_price(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price_fifo(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity_lots(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& blocked_lots(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& var_margin(const PortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield_fifo(const PortfolioPosition* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PortfolioPosition::_Internal::quantity(const PortfolioPosition* msg) {
  return *msg->_impl_.quantity_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioPosition::_Internal::average_position_price(const PortfolioPosition* msg) {
  return *msg->_impl_.average_position_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PortfolioPosition::_Internal::expected_yield(const PortfolioPosition* msg) {
  return *msg->_impl_.expected_yield_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioPosition::_Internal::current_nkd(const PortfolioPosition* msg) {
  return *msg->_impl_.current_nkd_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PortfolioPosition::_Internal::average_position_price_pt(const PortfolioPosition* msg) {
  return *msg->_impl_.average_position_price_pt_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioPosition::_Internal::current_price(const PortfolioPosition* msg) {
  return *msg->_impl_.current_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioPosition::_Internal::average_position_price_fifo(const PortfolioPosition* msg) {
  return *msg->_impl_.average_position_price_fifo_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PortfolioPosition::_Internal::quantity_lots(const PortfolioPosition* msg) {
  return *msg->_impl_.quantity_lots_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PortfolioPosition::_Internal::blocked_lots(const PortfolioPosition* msg) {
  return *msg->_impl_.blocked_lots_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PortfolioPosition::_Internal::var_margin(const PortfolioPosition* msg) {
  return *msg->_impl_.var_margin_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PortfolioPosition::_Internal::expected_yield_fifo(const PortfolioPosition* msg) {
  return *msg->_impl_.expected_yield_fifo_;
}
void PortfolioPosition::clear_quantity() {
  if (GetArenaForAllocation() == nullptr && _impl_.quantity_ != nullptr) {
    delete _impl_.quantity_;
  }
  _impl_.quantity_ = nullptr;
}
void PortfolioPosition::clear_average_position_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_ != nullptr) {
    delete _impl_.average_position_price_;
  }
  _impl_.average_position_price_ = nullptr;
}
void PortfolioPosition::clear_expected_yield() {
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_ != nullptr) {
    delete _impl_.expected_yield_;
  }
  _impl_.expected_yield_ = nullptr;
}
void PortfolioPosition::clear_current_nkd() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_nkd_ != nullptr) {
    delete _impl_.current_nkd_;
  }
  _impl_.current_nkd_ = nullptr;
}
void PortfolioPosition::clear_average_position_price_pt() {
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_pt_ != nullptr) {
    delete _impl_.average_position_price_pt_;
  }
  _impl_.average_position_price_pt_ = nullptr;
}
void PortfolioPosition::clear_current_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
}
void PortfolioPosition::clear_average_position_price_fifo() {
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_fifo_ != nullptr) {
    delete _impl_.average_position_price_fifo_;
  }
  _impl_.average_position_price_fifo_ = nullptr;
}
void PortfolioPosition::clear_quantity_lots() {
  if (GetArenaForAllocation() == nullptr && _impl_.quantity_lots_ != nullptr) {
    delete _impl_.quantity_lots_;
  }
  _impl_.quantity_lots_ = nullptr;
}
void PortfolioPosition::clear_blocked_lots() {
  if (GetArenaForAllocation() == nullptr && _impl_.blocked_lots_ != nullptr) {
    delete _impl_.blocked_lots_;
  }
  _impl_.blocked_lots_ = nullptr;
}
void PortfolioPosition::clear_var_margin() {
  if (GetArenaForAllocation() == nullptr && _impl_.var_margin_ != nullptr) {
    delete _impl_.var_margin_;
  }
  _impl_.var_margin_ = nullptr;
}
void PortfolioPosition::clear_expected_yield_fifo() {
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_fifo_ != nullptr) {
    delete _impl_.expected_yield_fifo_;
  }
  _impl_.expected_yield_fifo_ = nullptr;
}
PortfolioPosition::PortfolioPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
}
PortfolioPosition::PortfolioPosition(const PortfolioPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortfolioPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.quantity_){nullptr}
    , decltype(_impl_.average_position_price_){nullptr}
    , decltype(_impl_.expected_yield_){nullptr}
    , decltype(_impl_.current_nkd_){nullptr}
    , decltype(_impl_.average_position_price_pt_){nullptr}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.average_position_price_fifo_){nullptr}
    , decltype(_impl_.quantity_lots_){nullptr}
    , decltype(_impl_.blocked_lots_){nullptr}
    , decltype(_impl_.var_margin_){nullptr}
    , decltype(_impl_.expected_yield_fifo_){nullptr}
    , decltype(_impl_.blocked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_quantity()) {
    _this->_impl_.quantity_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.quantity_);
  }
  if (from._internal_has_average_position_price()) {
    _this->_impl_.average_position_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.average_position_price_);
  }
  if (from._internal_has_expected_yield()) {
    _this->_impl_.expected_yield_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.expected_yield_);
  }
  if (from._internal_has_current_nkd()) {
    _this->_impl_.current_nkd_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.current_nkd_);
  }
  if (from._internal_has_average_position_price_pt()) {
    _this->_impl_.average_position_price_pt_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.average_position_price_pt_);
  }
  if (from._internal_has_current_price()) {
    _this->_impl_.current_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.current_price_);
  }
  if (from._internal_has_average_position_price_fifo()) {
    _this->_impl_.average_position_price_fifo_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.average_position_price_fifo_);
  }
  if (from._internal_has_quantity_lots()) {
    _this->_impl_.quantity_lots_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.quantity_lots_);
  }
  if (from._internal_has_blocked_lots()) {
    _this->_impl_.blocked_lots_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.blocked_lots_);
  }
  if (from._internal_has_var_margin()) {
    _this->_impl_.var_margin_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.var_margin_);
  }
  if (from._internal_has_expected_yield_fifo()) {
    _this->_impl_.expected_yield_fifo_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.expected_yield_fifo_);
  }
  _this->_impl_.blocked_ = from._impl_.blocked_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
}

inline void PortfolioPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.quantity_){nullptr}
    , decltype(_impl_.average_position_price_){nullptr}
    , decltype(_impl_.expected_yield_){nullptr}
    , decltype(_impl_.current_nkd_){nullptr}
    , decltype(_impl_.average_position_price_pt_){nullptr}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.average_position_price_fifo_){nullptr}
    , decltype(_impl_.quantity_lots_){nullptr}
    , decltype(_impl_.blocked_lots_){nullptr}
    , decltype(_impl_.var_margin_){nullptr}
    , decltype(_impl_.expected_yield_fifo_){nullptr}
    , decltype(_impl_.blocked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PortfolioPosition::~PortfolioPosition() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortfolioPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quantity_;
  if (this != internal_default_instance()) delete _impl_.average_position_price_;
  if (this != internal_default_instance()) delete _impl_.expected_yield_;
  if (this != internal_default_instance()) delete _impl_.current_nkd_;
  if (this != internal_default_instance()) delete _impl_.average_position_price_pt_;
  if (this != internal_default_instance()) delete _impl_.current_price_;
  if (this != internal_default_instance()) delete _impl_.average_position_price_fifo_;
  if (this != internal_default_instance()) delete _impl_.quantity_lots_;
  if (this != internal_default_instance()) delete _impl_.blocked_lots_;
  if (this != internal_default_instance()) delete _impl_.var_margin_;
  if (this != internal_default_instance()) delete _impl_.expected_yield_fifo_;
}

void PortfolioPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortfolioPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.quantity_ != nullptr) {
    delete _impl_.quantity_;
  }
  _impl_.quantity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_ != nullptr) {
    delete _impl_.average_position_price_;
  }
  _impl_.average_position_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_ != nullptr) {
    delete _impl_.expected_yield_;
  }
  _impl_.expected_yield_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_nkd_ != nullptr) {
    delete _impl_.current_nkd_;
  }
  _impl_.current_nkd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_pt_ != nullptr) {
    delete _impl_.average_position_price_pt_;
  }
  _impl_.average_position_price_pt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_fifo_ != nullptr) {
    delete _impl_.average_position_price_fifo_;
  }
  _impl_.average_position_price_fifo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quantity_lots_ != nullptr) {
    delete _impl_.quantity_lots_;
  }
  _impl_.quantity_lots_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blocked_lots_ != nullptr) {
    delete _impl_.blocked_lots_;
  }
  _impl_.blocked_lots_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.var_margin_ != nullptr) {
    delete _impl_.var_margin_;
  }
  _impl_.var_margin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_fifo_ != nullptr) {
    delete _impl_.expected_yield_fifo_;
  }
  _impl_.expected_yield_fifo_ = nullptr;
  _impl_.blocked_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_position_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_yield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_nkd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_nkd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation average_position_price_pt = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_position_price_pt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_position_price_fifo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation quantity_lots = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantity_lots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation blocked_lots = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_blocked_lots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue var_margin = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_yield_fifo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortfolioPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string instrument_type = 2;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 3;
  if (this->_internal_has_quantity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::quantity(this),
        _Internal::quantity(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 4;
  if (this->_internal_has_average_position_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::average_position_price(this),
        _Internal::average_position_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 5;
  if (this->_internal_has_expected_yield()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::expected_yield(this),
        _Internal::expected_yield(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_nkd = 6;
  if (this->_internal_has_current_nkd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::current_nkd(this),
        _Internal::current_nkd(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation average_position_price_pt = 7 [deprecated = true];
  if (this->_internal_has_average_position_price_pt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::average_position_price_pt(this),
        _Internal::average_position_price_pt(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 8;
  if (this->_internal_has_current_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::current_price(this),
        _Internal::current_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 9;
  if (this->_internal_has_average_position_price_fifo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::average_position_price_fifo(this),
        _Internal::average_position_price_fifo(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity_lots = 10 [deprecated = true];
  if (this->_internal_has_quantity_lots()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::quantity_lots(this),
        _Internal::quantity_lots(this).GetCachedSize(), target, stream);
  }

  // bool blocked = 21;
  if (this->_internal_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_blocked(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation blocked_lots = 22;
  if (this->_internal_has_blocked_lots()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::blocked_lots(this),
        _Internal::blocked_lots(this).GetCachedSize(), target, stream);
  }

  // string position_uid = 24;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.position_uid");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_position_uid(), target);
  }

  // string instrument_uid = 25;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_instrument_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue var_margin = 26;
  if (this->_internal_has_var_margin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::var_margin(this),
        _Internal::var_margin(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 27;
  if (this->_internal_has_expected_yield_fifo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::expected_yield_fifo(this),
        _Internal::expected_yield_fifo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
  return target;
}

size_t PortfolioPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_type = 2;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // string position_uid = 24;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string instrument_uid = 25;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 3;
  if (this->_internal_has_quantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quantity_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 4;
  if (this->_internal_has_average_position_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.average_position_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 5;
  if (this->_internal_has_expected_yield()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expected_yield_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_nkd = 6;
  if (this->_internal_has_current_nkd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_nkd_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation average_position_price_pt = 7 [deprecated = true];
  if (this->_internal_has_average_position_price_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.average_position_price_pt_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 8;
  if (this->_internal_has_current_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 9;
  if (this->_internal_has_average_position_price_fifo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.average_position_price_fifo_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity_lots = 10 [deprecated = true];
  if (this->_internal_has_quantity_lots()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quantity_lots_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation blocked_lots = 22;
  if (this->_internal_has_blocked_lots()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blocked_lots_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue var_margin = 26;
  if (this->_internal_has_var_margin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.var_margin_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 27;
  if (this->_internal_has_expected_yield_fifo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expected_yield_fifo_);
  }

  // bool blocked = 21;
  if (this->_internal_blocked() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortfolioPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortfolioPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortfolioPosition::GetClassData() const { return &_class_data_; }


void PortfolioPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortfolioPosition*>(&to_msg);
  auto& from = static_cast<const PortfolioPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_quantity()) {
    _this->_internal_mutable_quantity()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_quantity());
  }
  if (from._internal_has_average_position_price()) {
    _this->_internal_mutable_average_position_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_average_position_price());
  }
  if (from._internal_has_expected_yield()) {
    _this->_internal_mutable_expected_yield()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_expected_yield());
  }
  if (from._internal_has_current_nkd()) {
    _this->_internal_mutable_current_nkd()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_current_nkd());
  }
  if (from._internal_has_average_position_price_pt()) {
    _this->_internal_mutable_average_position_price_pt()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_average_position_price_pt());
  }
  if (from._internal_has_current_price()) {
    _this->_internal_mutable_current_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_current_price());
  }
  if (from._internal_has_average_position_price_fifo()) {
    _this->_internal_mutable_average_position_price_fifo()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_average_position_price_fifo());
  }
  if (from._internal_has_quantity_lots()) {
    _this->_internal_mutable_quantity_lots()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_quantity_lots());
  }
  if (from._internal_has_blocked_lots()) {
    _this->_internal_mutable_blocked_lots()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_blocked_lots());
  }
  if (from._internal_has_var_margin()) {
    _this->_internal_mutable_var_margin()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_var_margin());
  }
  if (from._internal_has_expected_yield_fifo()) {
    _this->_internal_mutable_expected_yield_fifo()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_expected_yield_fifo());
  }
  if (from._internal_blocked() != 0) {
    _this->_internal_set_blocked(from._internal_blocked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortfolioPosition::CopyFrom(const PortfolioPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioPosition::IsInitialized() const {
  return true;
}

void PortfolioPosition::InternalSwap(PortfolioPosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortfolioPosition, _impl_.blocked_)
      + sizeof(PortfolioPosition::_impl_.blocked_)
      - PROTOBUF_FIELD_OFFSET(PortfolioPosition, _impl_.quantity_)>(
          reinterpret_cast<char*>(&_impl_.quantity_),
          reinterpret_cast<char*>(&other->_impl_.quantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[10]);
}

// ===================================================================

class VirtualPortfolioPosition::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity(const VirtualPortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price(const VirtualPortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield(const VirtualPortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield_fifo(const VirtualPortfolioPosition* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_date(const VirtualPortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_price(const VirtualPortfolioPosition* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price_fifo(const VirtualPortfolioPosition* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
VirtualPortfolioPosition::_Internal::quantity(const VirtualPortfolioPosition* msg) {
  return *msg->_impl_.quantity_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
VirtualPortfolioPosition::_Internal::average_position_price(const VirtualPortfolioPosition* msg) {
  return *msg->_impl_.average_position_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
VirtualPortfolioPosition::_Internal::expected_yield(const VirtualPortfolioPosition* msg) {
  return *msg->_impl_.expected_yield_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
VirtualPortfolioPosition::_Internal::expected_yield_fifo(const VirtualPortfolioPosition* msg) {
  return *msg->_impl_.expected_yield_fifo_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
VirtualPortfolioPosition::_Internal::expire_date(const VirtualPortfolioPosition* msg) {
  return *msg->_impl_.expire_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
VirtualPortfolioPosition::_Internal::current_price(const VirtualPortfolioPosition* msg) {
  return *msg->_impl_.current_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
VirtualPortfolioPosition::_Internal::average_position_price_fifo(const VirtualPortfolioPosition* msg) {
  return *msg->_impl_.average_position_price_fifo_;
}
void VirtualPortfolioPosition::clear_quantity() {
  if (GetArenaForAllocation() == nullptr && _impl_.quantity_ != nullptr) {
    delete _impl_.quantity_;
  }
  _impl_.quantity_ = nullptr;
}
void VirtualPortfolioPosition::clear_average_position_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_ != nullptr) {
    delete _impl_.average_position_price_;
  }
  _impl_.average_position_price_ = nullptr;
}
void VirtualPortfolioPosition::clear_expected_yield() {
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_ != nullptr) {
    delete _impl_.expected_yield_;
  }
  _impl_.expected_yield_ = nullptr;
}
void VirtualPortfolioPosition::clear_expected_yield_fifo() {
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_fifo_ != nullptr) {
    delete _impl_.expected_yield_fifo_;
  }
  _impl_.expected_yield_fifo_ = nullptr;
}
void VirtualPortfolioPosition::clear_expire_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.expire_date_ != nullptr) {
    delete _impl_.expire_date_;
  }
  _impl_.expire_date_ = nullptr;
}
void VirtualPortfolioPosition::clear_current_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
}
void VirtualPortfolioPosition::clear_average_position_price_fifo() {
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_fifo_ != nullptr) {
    delete _impl_.average_position_price_fifo_;
  }
  _impl_.average_position_price_fifo_ = nullptr;
}
VirtualPortfolioPosition::VirtualPortfolioPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
}
VirtualPortfolioPosition::VirtualPortfolioPosition(const VirtualPortfolioPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VirtualPortfolioPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.quantity_){nullptr}
    , decltype(_impl_.average_position_price_){nullptr}
    , decltype(_impl_.expected_yield_){nullptr}
    , decltype(_impl_.expected_yield_fifo_){nullptr}
    , decltype(_impl_.expire_date_){nullptr}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.average_position_price_fifo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_quantity()) {
    _this->_impl_.quantity_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.quantity_);
  }
  if (from._internal_has_average_position_price()) {
    _this->_impl_.average_position_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.average_position_price_);
  }
  if (from._internal_has_expected_yield()) {
    _this->_impl_.expected_yield_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.expected_yield_);
  }
  if (from._internal_has_expected_yield_fifo()) {
    _this->_impl_.expected_yield_fifo_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.expected_yield_fifo_);
  }
  if (from._internal_has_expire_date()) {
    _this->_impl_.expire_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expire_date_);
  }
  if (from._internal_has_current_price()) {
    _this->_impl_.current_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.current_price_);
  }
  if (from._internal_has_average_position_price_fifo()) {
    _this->_impl_.average_position_price_fifo_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.average_position_price_fifo_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
}

inline void VirtualPortfolioPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.quantity_){nullptr}
    , decltype(_impl_.average_position_price_){nullptr}
    , decltype(_impl_.expected_yield_){nullptr}
    , decltype(_impl_.expected_yield_fifo_){nullptr}
    , decltype(_impl_.expire_date_){nullptr}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.average_position_price_fifo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VirtualPortfolioPosition::~VirtualPortfolioPosition() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtualPortfolioPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.position_uid_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.instrument_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quantity_;
  if (this != internal_default_instance()) delete _impl_.average_position_price_;
  if (this != internal_default_instance()) delete _impl_.expected_yield_;
  if (this != internal_default_instance()) delete _impl_.expected_yield_fifo_;
  if (this != internal_default_instance()) delete _impl_.expire_date_;
  if (this != internal_default_instance()) delete _impl_.current_price_;
  if (this != internal_default_instance()) delete _impl_.average_position_price_fifo_;
}

void VirtualPortfolioPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtualPortfolioPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.quantity_ != nullptr) {
    delete _impl_.quantity_;
  }
  _impl_.quantity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_ != nullptr) {
    delete _impl_.average_position_price_;
  }
  _impl_.average_position_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_ != nullptr) {
    delete _impl_.expected_yield_;
  }
  _impl_.expected_yield_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expected_yield_fifo_ != nullptr) {
    delete _impl_.expected_yield_fifo_;
  }
  _impl_.expected_yield_fifo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expire_date_ != nullptr) {
    delete _impl_.expire_date_;
  }
  _impl_.expire_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_fifo_ != nullptr) {
    delete _impl_.average_position_price_fifo_;
  }
  _impl_.average_position_price_fifo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualPortfolioPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string position_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string figi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_position_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_yield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_yield_fifo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expire_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_position_price_fifo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtualPortfolioPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string position_uid = 1;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.position_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_position_uid(), target);
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_uid(), target);
  }

  // string figi = 3;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.figi");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_figi(), target);
  }

  // string instrument_type = 4;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 5;
  if (this->_internal_has_quantity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::quantity(this),
        _Internal::quantity(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 6;
  if (this->_internal_has_average_position_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::average_position_price(this),
        _Internal::average_position_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 7;
  if (this->_internal_has_expected_yield()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::expected_yield(this),
        _Internal::expected_yield(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 8;
  if (this->_internal_has_expected_yield_fifo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::expected_yield_fifo(this),
        _Internal::expected_yield_fifo(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expire_date = 9;
  if (this->_internal_has_expire_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::expire_date(this),
        _Internal::expire_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 10;
  if (this->_internal_has_current_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::current_price(this),
        _Internal::current_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 11;
  if (this->_internal_has_average_position_price_fifo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::average_position_price_fifo(this),
        _Internal::average_position_price_fifo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
  return target;
}

size_t VirtualPortfolioPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string position_uid = 1;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string figi = 3;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_type = 4;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 5;
  if (this->_internal_has_quantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quantity_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 6;
  if (this->_internal_has_average_position_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.average_position_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 7;
  if (this->_internal_has_expected_yield()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expected_yield_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 8;
  if (this->_internal_has_expected_yield_fifo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expected_yield_fifo_);
  }

  // .google.protobuf.Timestamp expire_date = 9;
  if (this->_internal_has_expire_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expire_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 10;
  if (this->_internal_has_current_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 11;
  if (this->_internal_has_average_position_price_fifo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.average_position_price_fifo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualPortfolioPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtualPortfolioPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualPortfolioPosition::GetClassData() const { return &_class_data_; }


void VirtualPortfolioPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtualPortfolioPosition*>(&to_msg);
  auto& from = static_cast<const VirtualPortfolioPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (from._internal_has_quantity()) {
    _this->_internal_mutable_quantity()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_quantity());
  }
  if (from._internal_has_average_position_price()) {
    _this->_internal_mutable_average_position_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_average_position_price());
  }
  if (from._internal_has_expected_yield()) {
    _this->_internal_mutable_expected_yield()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_expected_yield());
  }
  if (from._internal_has_expected_yield_fifo()) {
    _this->_internal_mutable_expected_yield_fifo()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_expected_yield_fifo());
  }
  if (from._internal_has_expire_date()) {
    _this->_internal_mutable_expire_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expire_date());
  }
  if (from._internal_has_current_price()) {
    _this->_internal_mutable_current_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_current_price());
  }
  if (from._internal_has_average_position_price_fifo()) {
    _this->_internal_mutable_average_position_price_fifo()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_average_position_price_fifo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualPortfolioPosition::CopyFrom(const VirtualPortfolioPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualPortfolioPosition::IsInitialized() const {
  return true;
}

void VirtualPortfolioPosition::InternalSwap(VirtualPortfolioPosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualPortfolioPosition, _impl_.average_position_price_fifo_)
      + sizeof(VirtualPortfolioPosition::_impl_.average_position_price_fifo_)
      - PROTOBUF_FIELD_OFFSET(VirtualPortfolioPosition, _impl_.quantity_)>(
          reinterpret_cast<char*>(&_impl_.quantity_),
          reinterpret_cast<char*>(&other->_impl_.quantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualPortfolioPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[11]);
}

// ===================================================================

class PositionsSecurities::_Internal {
 public:
};

PositionsSecurities::PositionsSecurities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
}
PositionsSecurities::PositionsSecurities(const PositionsSecurities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsSecurities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.blocked_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.exchange_blocked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.blocked_, &from._impl_.blocked_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exchange_blocked_) -
    reinterpret_cast<char*>(&_impl_.blocked_)) + sizeof(_impl_.exchange_blocked_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
}

inline void PositionsSecurities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.blocked_){int64_t{0}}
    , decltype(_impl_.balance_){int64_t{0}}
    , decltype(_impl_.exchange_blocked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionsSecurities::~PositionsSecurities() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsSecurities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.instrument_type_.Destroy();
}

void PositionsSecurities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsSecurities::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  ::memset(&_impl_.blocked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exchange_blocked_) -
      reinterpret_cast<char*>(&_impl_.blocked_)) + sizeof(_impl_.exchange_blocked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsSecurities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.figi"));
        } else
          goto handle_unusual;
        continue;
      // int64 blocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool exchange_blocked = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.exchange_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsSecurities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int64 blocked = 2;
  if (this->_internal_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_blocked(), target);
  }

  // int64 balance = 3;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_balance(), target);
  }

  // string position_uid = 4;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.position_uid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_position_uid(), target);
  }

  // string instrument_uid = 5;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_uid(), target);
  }

  // bool exchange_blocked = 11;
  if (this->_internal_exchange_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_exchange_blocked(), target);
  }

  // string instrument_type = 16;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_type");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_instrument_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
  return target;
}

size_t PositionsSecurities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string position_uid = 4;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string instrument_uid = 5;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string instrument_type = 16;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // int64 blocked = 2;
  if (this->_internal_blocked() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_blocked());
  }

  // int64 balance = 3;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_balance());
  }

  // bool exchange_blocked = 11;
  if (this->_internal_exchange_blocked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsSecurities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsSecurities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsSecurities::GetClassData() const { return &_class_data_; }


void PositionsSecurities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsSecurities*>(&to_msg);
  auto& from = static_cast<const PositionsSecurities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (from._internal_blocked() != 0) {
    _this->_internal_set_blocked(from._internal_blocked());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_exchange_blocked() != 0) {
    _this->_internal_set_exchange_blocked(from._internal_exchange_blocked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsSecurities::CopyFrom(const PositionsSecurities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsSecurities::IsInitialized() const {
  return true;
}

void PositionsSecurities::InternalSwap(PositionsSecurities* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionsSecurities, _impl_.exchange_blocked_)
      + sizeof(PositionsSecurities::_impl_.exchange_blocked_)
      - PROTOBUF_FIELD_OFFSET(PositionsSecurities, _impl_.blocked_)>(
          reinterpret_cast<char*>(&_impl_.blocked_),
          reinterpret_cast<char*>(&other->_impl_.blocked_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsSecurities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[12]);
}

// ===================================================================

class PositionsFutures::_Internal {
 public:
};

PositionsFutures::PositionsFutures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
}
PositionsFutures::PositionsFutures(const PositionsFutures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsFutures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.blocked_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.blocked_, &from._impl_.blocked_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.blocked_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
}

inline void PositionsFutures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.blocked_){int64_t{0}}
    , decltype(_impl_.balance_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionsFutures::~PositionsFutures() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsFutures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.instrument_uid_.Destroy();
}

void PositionsFutures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsFutures::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  ::memset(&_impl_.blocked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.balance_) -
      reinterpret_cast<char*>(&_impl_.blocked_)) + sizeof(_impl_.balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsFutures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsFutures.figi"));
        } else
          goto handle_unusual;
        continue;
      // int64 blocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsFutures.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsFutures.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsFutures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsFutures.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int64 blocked = 2;
  if (this->_internal_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_blocked(), target);
  }

  // int64 balance = 3;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_balance(), target);
  }

  // string position_uid = 4;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsFutures.position_uid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_position_uid(), target);
  }

  // string instrument_uid = 5;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsFutures.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
  return target;
}

size_t PositionsFutures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string position_uid = 4;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string instrument_uid = 5;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // int64 blocked = 2;
  if (this->_internal_blocked() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_blocked());
  }

  // int64 balance = 3;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsFutures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsFutures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsFutures::GetClassData() const { return &_class_data_; }


void PositionsFutures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsFutures*>(&to_msg);
  auto& from = static_cast<const PositionsFutures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_blocked() != 0) {
    _this->_internal_set_blocked(from._internal_blocked());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsFutures::CopyFrom(const PositionsFutures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsFutures::IsInitialized() const {
  return true;
}

void PositionsFutures::InternalSwap(PositionsFutures* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionsFutures, _impl_.balance_)
      + sizeof(PositionsFutures::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(PositionsFutures, _impl_.blocked_)>(
          reinterpret_cast<char*>(&_impl_.blocked_),
          reinterpret_cast<char*>(&other->_impl_.blocked_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsFutures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[13]);
}

// ===================================================================

class PositionsOptions::_Internal {
 public:
};

PositionsOptions::PositionsOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
}
PositionsOptions::PositionsOptions(const PositionsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.blocked_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.blocked_, &from._impl_.blocked_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.blocked_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
}

inline void PositionsOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.blocked_){int64_t{0}}
    , decltype(_impl_.balance_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionsOptions::~PositionsOptions() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.position_uid_.Destroy();
  _impl_.instrument_uid_.Destroy();
}

void PositionsOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  ::memset(&_impl_.blocked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.balance_) -
      reinterpret_cast<char*>(&_impl_.blocked_)) + sizeof(_impl_.balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string position_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsOptions.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsOptions.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // int64 blocked = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 balance = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string position_uid = 1;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsOptions.position_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_position_uid(), target);
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsOptions.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_uid(), target);
  }

  // int64 blocked = 11;
  if (this->_internal_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_blocked(), target);
  }

  // int64 balance = 21;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
  return target;
}

size_t PositionsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string position_uid = 1;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // int64 blocked = 11;
  if (this->_internal_blocked() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_blocked());
  }

  // int64 balance = 21;
  if (this->_internal_balance() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsOptions::GetClassData() const { return &_class_data_; }


void PositionsOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsOptions*>(&to_msg);
  auto& from = static_cast<const PositionsOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_blocked() != 0) {
    _this->_internal_set_blocked(from._internal_blocked());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsOptions::CopyFrom(const PositionsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsOptions::IsInitialized() const {
  return true;
}

void PositionsOptions::InternalSwap(PositionsOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionsOptions, _impl_.balance_)
      + sizeof(PositionsOptions::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(PositionsOptions, _impl_.blocked_)>(
          reinterpret_cast<char*>(&_impl_.blocked_),
          reinterpret_cast<char*>(&other->_impl_.blocked_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[14]);
}

// ===================================================================

class BrokerReportRequest::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& generate_broker_report_request(const BrokerReportRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& get_broker_report_request(const BrokerReportRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest&
BrokerReportRequest::_Internal::generate_broker_report_request(const BrokerReportRequest* msg) {
  return *msg->_impl_.payload_.generate_broker_report_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest&
BrokerReportRequest::_Internal::get_broker_report_request(const BrokerReportRequest* msg) {
  return *msg->_impl_.payload_.get_broker_report_request_;
}
void BrokerReportRequest::set_allocated_generate_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* generate_broker_report_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (generate_broker_report_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generate_broker_report_request);
    if (message_arena != submessage_arena) {
      generate_broker_report_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generate_broker_report_request, submessage_arena);
    }
    set_has_generate_broker_report_request();
    _impl_.payload_.generate_broker_report_request_ = generate_broker_report_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
}
void BrokerReportRequest::set_allocated_get_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* get_broker_report_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_broker_report_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_broker_report_request);
    if (message_arena != submessage_arena) {
      get_broker_report_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_broker_report_request, submessage_arena);
    }
    set_has_get_broker_report_request();
    _impl_.payload_.get_broker_report_request_ = get_broker_report_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
}
BrokerReportRequest::BrokerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
}
BrokerReportRequest::BrokerReportRequest(const BrokerReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrokerReportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kGenerateBrokerReportRequest: {
      _this->_internal_mutable_generate_broker_report_request()->::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest::MergeFrom(
          from._internal_generate_broker_report_request());
      break;
    }
    case kGetBrokerReportRequest: {
      _this->_internal_mutable_get_broker_report_request()->::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest::MergeFrom(
          from._internal_get_broker_report_request());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
}

inline void BrokerReportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

BrokerReportRequest::~BrokerReportRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrokerReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void BrokerReportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrokerReportRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  switch (payload_case()) {
    case kGenerateBrokerReportRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.generate_broker_report_request_;
      }
      break;
    }
    case kGetBrokerReportRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.get_broker_report_request_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void BrokerReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest generate_broker_report_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generate_broker_report_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest get_broker_report_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_broker_report_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest generate_broker_report_request = 1;
  if (_internal_has_generate_broker_report_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::generate_broker_report_request(this),
        _Internal::generate_broker_report_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest get_broker_report_request = 2;
  if (_internal_has_get_broker_report_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::get_broker_report_request(this),
        _Internal::get_broker_report_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  return target;
}

size_t BrokerReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest generate_broker_report_request = 1;
    case kGenerateBrokerReportRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.generate_broker_report_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest get_broker_report_request = 2;
    case kGetBrokerReportRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.get_broker_report_request_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrokerReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerReportRequest::GetClassData() const { return &_class_data_; }


void BrokerReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrokerReportRequest*>(&to_msg);
  auto& from = static_cast<const BrokerReportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kGenerateBrokerReportRequest: {
      _this->_internal_mutable_generate_broker_report_request()->::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest::MergeFrom(
          from._internal_generate_broker_report_request());
      break;
    }
    case kGetBrokerReportRequest: {
      _this->_internal_mutable_get_broker_report_request()->::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest::MergeFrom(
          from._internal_get_broker_report_request());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerReportRequest::CopyFrom(const BrokerReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerReportRequest::IsInitialized() const {
  return true;
}

void BrokerReportRequest::InternalSwap(BrokerReportRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[15]);
}

// ===================================================================

class BrokerReportResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& generate_broker_report_response(const BrokerReportResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& get_broker_report_response(const BrokerReportResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse&
BrokerReportResponse::_Internal::generate_broker_report_response(const BrokerReportResponse* msg) {
  return *msg->_impl_.payload_.generate_broker_report_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse&
BrokerReportResponse::_Internal::get_broker_report_response(const BrokerReportResponse* msg) {
  return *msg->_impl_.payload_.get_broker_report_response_;
}
void BrokerReportResponse::set_allocated_generate_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* generate_broker_report_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (generate_broker_report_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generate_broker_report_response);
    if (message_arena != submessage_arena) {
      generate_broker_report_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generate_broker_report_response, submessage_arena);
    }
    set_has_generate_broker_report_response();
    _impl_.payload_.generate_broker_report_response_ = generate_broker_report_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
}
void BrokerReportResponse::set_allocated_get_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* get_broker_report_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_broker_report_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_broker_report_response);
    if (message_arena != submessage_arena) {
      get_broker_report_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_broker_report_response, submessage_arena);
    }
    set_has_get_broker_report_response();
    _impl_.payload_.get_broker_report_response_ = get_broker_report_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
}
BrokerReportResponse::BrokerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
}
BrokerReportResponse::BrokerReportResponse(const BrokerReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrokerReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kGenerateBrokerReportResponse: {
      _this->_internal_mutable_generate_broker_report_response()->::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse::MergeFrom(
          from._internal_generate_broker_report_response());
      break;
    }
    case kGetBrokerReportResponse: {
      _this->_internal_mutable_get_broker_report_response()->::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse::MergeFrom(
          from._internal_get_broker_report_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
}

inline void BrokerReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

BrokerReportResponse::~BrokerReportResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrokerReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void BrokerReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrokerReportResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  switch (payload_case()) {
    case kGenerateBrokerReportResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.generate_broker_report_response_;
      }
      break;
    }
    case kGetBrokerReportResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.get_broker_report_response_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void BrokerReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse generate_broker_report_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generate_broker_report_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse get_broker_report_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_broker_report_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse generate_broker_report_response = 1;
  if (_internal_has_generate_broker_report_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::generate_broker_report_response(this),
        _Internal::generate_broker_report_response(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse get_broker_report_response = 2;
  if (_internal_has_get_broker_report_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::get_broker_report_response(this),
        _Internal::get_broker_report_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  return target;
}

size_t BrokerReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse generate_broker_report_response = 1;
    case kGenerateBrokerReportResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.generate_broker_report_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse get_broker_report_response = 2;
    case kGetBrokerReportResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.get_broker_report_response_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrokerReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerReportResponse::GetClassData() const { return &_class_data_; }


void BrokerReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrokerReportResponse*>(&to_msg);
  auto& from = static_cast<const BrokerReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kGenerateBrokerReportResponse: {
      _this->_internal_mutable_generate_broker_report_response()->::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse::MergeFrom(
          from._internal_generate_broker_report_response());
      break;
    }
    case kGetBrokerReportResponse: {
      _this->_internal_mutable_get_broker_report_response()->::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse::MergeFrom(
          from._internal_get_broker_report_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerReportResponse::CopyFrom(const BrokerReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerReportResponse::IsInitialized() const {
  return true;
}

void BrokerReportResponse::InternalSwap(BrokerReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[16]);
}

// ===================================================================

class GenerateBrokerReportRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GenerateBrokerReportRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GenerateBrokerReportRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GenerateBrokerReportRequest::_Internal::from(const GenerateBrokerReportRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GenerateBrokerReportRequest::_Internal::to(const GenerateBrokerReportRequest* msg) {
  return *msg->_impl_.to_;
}
void GenerateBrokerReportRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void GenerateBrokerReportRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
GenerateBrokerReportRequest::GenerateBrokerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
}
GenerateBrokerReportRequest::GenerateBrokerReportRequest(const GenerateBrokerReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateBrokerReportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
}

inline void GenerateBrokerReportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateBrokerReportRequest::~GenerateBrokerReportRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateBrokerReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GenerateBrokerReportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateBrokerReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateBrokerReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateBrokerReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
  return target;
}

size_t GenerateBrokerReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateBrokerReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateBrokerReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateBrokerReportRequest::GetClassData() const { return &_class_data_; }


void GenerateBrokerReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateBrokerReportRequest*>(&to_msg);
  auto& from = static_cast<const GenerateBrokerReportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateBrokerReportRequest::CopyFrom(const GenerateBrokerReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateBrokerReportRequest::IsInitialized() const {
  return true;
}

void GenerateBrokerReportRequest::InternalSwap(GenerateBrokerReportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateBrokerReportRequest, _impl_.to_)
      + sizeof(GenerateBrokerReportRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GenerateBrokerReportRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateBrokerReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[17]);
}

// ===================================================================

class GenerateBrokerReportResponse::_Internal {
 public:
};

GenerateBrokerReportResponse::GenerateBrokerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
}
GenerateBrokerReportResponse::GenerateBrokerReportResponse(const GenerateBrokerReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateBrokerReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
}

inline void GenerateBrokerReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateBrokerReportResponse::~GenerateBrokerReportResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateBrokerReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void GenerateBrokerReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateBrokerReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateBrokerReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse.task_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateBrokerReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
  return target;
}

size_t GenerateBrokerReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateBrokerReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateBrokerReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateBrokerReportResponse::GetClassData() const { return &_class_data_; }


void GenerateBrokerReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateBrokerReportResponse*>(&to_msg);
  auto& from = static_cast<const GenerateBrokerReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateBrokerReportResponse::CopyFrom(const GenerateBrokerReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateBrokerReportResponse::IsInitialized() const {
  return true;
}

void GenerateBrokerReportResponse::InternalSwap(GenerateBrokerReportResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateBrokerReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[18]);
}

// ===================================================================

class GetBrokerReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBrokerReportRequest>()._impl_._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetBrokerReportRequest::GetBrokerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
}
GetBrokerReportRequest::GetBrokerReportRequest(const GetBrokerReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBrokerReportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.page_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_ = from._impl_.page_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
}

inline void GetBrokerReportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.page_){0}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBrokerReportRequest::~GetBrokerReportRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBrokerReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void GetBrokerReportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBrokerReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.page_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBrokerReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_page(&has_bits);
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBrokerReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // optional int32 page = 2;
  if (_internal_has_page()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
  return target;
}

size_t GetBrokerReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // optional int32 page = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBrokerReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBrokerReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBrokerReportRequest::GetClassData() const { return &_class_data_; }


void GetBrokerReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBrokerReportRequest*>(&to_msg);
  auto& from = static_cast<const GetBrokerReportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_page()) {
    _this->_internal_set_page(from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrokerReportRequest::CopyFrom(const GetBrokerReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrokerReportRequest::IsInitialized() const {
  return true;
}

void GetBrokerReportRequest::InternalSwap(GetBrokerReportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBrokerReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[19]);
}

// ===================================================================

class GetBrokerReportResponse::_Internal {
 public:
};

GetBrokerReportResponse::GetBrokerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
}
GetBrokerReportResponse::GetBrokerReportResponse(const GetBrokerReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBrokerReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.broker_report_){from._impl_.broker_report_}
    , decltype(_impl_.itemscount_){}
    , decltype(_impl_.pagescount_){}
    , decltype(_impl_.page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.itemscount_, &from._impl_.itemscount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_) -
    reinterpret_cast<char*>(&_impl_.itemscount_)) + sizeof(_impl_.page_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
}

inline void GetBrokerReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.broker_report_){arena}
    , decltype(_impl_.itemscount_){0}
    , decltype(_impl_.pagescount_){0}
    , decltype(_impl_.page_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBrokerReportResponse::~GetBrokerReportResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBrokerReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.broker_report_.~RepeatedPtrField();
}

void GetBrokerReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBrokerReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.broker_report_.Clear();
  ::memset(&_impl_.itemscount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_) -
      reinterpret_cast<char*>(&_impl_.itemscount_)) + sizeof(_impl_.page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBrokerReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.BrokerReport broker_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broker_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 itemsCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pagesCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pagescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBrokerReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.BrokerReport broker_report = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_broker_report_size()); i < n; i++) {
    const auto& repfield = this->_internal_broker_report(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 itemsCount = 2;
  if (this->_internal_itemscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_itemscount(), target);
  }

  // int32 pagesCount = 3;
  if (this->_internal_pagescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pagescount(), target);
  }

  // int32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
  return target;
}

size_t GetBrokerReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.BrokerReport broker_report = 1;
  total_size += 1UL * this->_internal_broker_report_size();
  for (const auto& msg : this->_impl_.broker_report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 itemsCount = 2;
  if (this->_internal_itemscount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemscount());
  }

  // int32 pagesCount = 3;
  if (this->_internal_pagescount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pagescount());
  }

  // int32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBrokerReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBrokerReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBrokerReportResponse::GetClassData() const { return &_class_data_; }


void GetBrokerReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBrokerReportResponse*>(&to_msg);
  auto& from = static_cast<const GetBrokerReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.broker_report_.MergeFrom(from._impl_.broker_report_);
  if (from._internal_itemscount() != 0) {
    _this->_internal_set_itemscount(from._internal_itemscount());
  }
  if (from._internal_pagescount() != 0) {
    _this->_internal_set_pagescount(from._internal_pagescount());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrokerReportResponse::CopyFrom(const GetBrokerReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrokerReportResponse::IsInitialized() const {
  return true;
}

void GetBrokerReportResponse::InternalSwap(GetBrokerReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.broker_report_.InternalSwap(&other->_impl_.broker_report_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBrokerReportResponse, _impl_.page_)
      + sizeof(GetBrokerReportResponse::_impl_.page_)
      - PROTOBUF_FIELD_OFFSET(GetBrokerReportResponse, _impl_.itemscount_)>(
          reinterpret_cast<char*>(&_impl_.itemscount_),
          reinterpret_cast<char*>(&other->_impl_.itemscount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBrokerReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[20]);
}

// ===================================================================

class BrokerReport::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& trade_datetime(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& order_amount(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& aci_value(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& broker_commission(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& exchange_commission(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& exchange_clearing_commission(const BrokerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& repo_rate(const BrokerReport* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& clear_value_date(const BrokerReport* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& sec_value_date(const BrokerReport* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BrokerReport::_Internal::trade_datetime(const BrokerReport* msg) {
  return *msg->_impl_.trade_datetime_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
BrokerReport::_Internal::price(const BrokerReport* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
BrokerReport::_Internal::order_amount(const BrokerReport* msg) {
  return *msg->_impl_.order_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
BrokerReport::_Internal::aci_value(const BrokerReport* msg) {
  return *msg->_impl_.aci_value_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
BrokerReport::_Internal::total_order_amount(const BrokerReport* msg) {
  return *msg->_impl_.total_order_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
BrokerReport::_Internal::broker_commission(const BrokerReport* msg) {
  return *msg->_impl_.broker_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
BrokerReport::_Internal::exchange_commission(const BrokerReport* msg) {
  return *msg->_impl_.exchange_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
BrokerReport::_Internal::exchange_clearing_commission(const BrokerReport* msg) {
  return *msg->_impl_.exchange_clearing_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
BrokerReport::_Internal::repo_rate(const BrokerReport* msg) {
  return *msg->_impl_.repo_rate_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BrokerReport::_Internal::clear_value_date(const BrokerReport* msg) {
  return *msg->_impl_.clear_value_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BrokerReport::_Internal::sec_value_date(const BrokerReport* msg) {
  return *msg->_impl_.sec_value_date_;
}
void BrokerReport::clear_trade_datetime() {
  if (GetArenaForAllocation() == nullptr && _impl_.trade_datetime_ != nullptr) {
    delete _impl_.trade_datetime_;
  }
  _impl_.trade_datetime_ = nullptr;
}
void BrokerReport::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void BrokerReport::clear_order_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_amount_ != nullptr) {
    delete _impl_.order_amount_;
  }
  _impl_.order_amount_ = nullptr;
}
void BrokerReport::clear_aci_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
}
void BrokerReport::clear_total_order_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
}
void BrokerReport::clear_broker_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.broker_commission_ != nullptr) {
    delete _impl_.broker_commission_;
  }
  _impl_.broker_commission_ = nullptr;
}
void BrokerReport::clear_exchange_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_commission_ != nullptr) {
    delete _impl_.exchange_commission_;
  }
  _impl_.exchange_commission_ = nullptr;
}
void BrokerReport::clear_exchange_clearing_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_clearing_commission_ != nullptr) {
    delete _impl_.exchange_clearing_commission_;
  }
  _impl_.exchange_clearing_commission_ = nullptr;
}
void BrokerReport::clear_repo_rate() {
  if (GetArenaForAllocation() == nullptr && _impl_.repo_rate_ != nullptr) {
    delete _impl_.repo_rate_;
  }
  _impl_.repo_rate_ = nullptr;
}
void BrokerReport::clear_clear_value_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.clear_value_date_ != nullptr) {
    delete _impl_.clear_value_date_;
  }
  _impl_.clear_value_date_ = nullptr;
}
void BrokerReport::clear_sec_value_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.sec_value_date_ != nullptr) {
    delete _impl_.sec_value_date_;
  }
  _impl_.sec_value_date_ = nullptr;
}
BrokerReport::BrokerReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BrokerReport)
}
BrokerReport::BrokerReport(const BrokerReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrokerReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.execute_sign_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.party_){}
    , decltype(_impl_.broker_status_){}
    , decltype(_impl_.separate_agreement_type_){}
    , decltype(_impl_.separate_agreement_number_){}
    , decltype(_impl_.separate_agreement_date_){}
    , decltype(_impl_.delivery_type_){}
    , decltype(_impl_.trade_datetime_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.order_amount_){nullptr}
    , decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.broker_commission_){nullptr}
    , decltype(_impl_.exchange_commission_){nullptr}
    , decltype(_impl_.exchange_clearing_commission_){nullptr}
    , decltype(_impl_.repo_rate_){nullptr}
    , decltype(_impl_.clear_value_date_){nullptr}
    , decltype(_impl_.sec_value_date_){nullptr}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    _this->_impl_.trade_id_.Set(from._internal_trade_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.execute_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execute_sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execute_sign().empty()) {
    _this->_impl_.execute_sign_.Set(from._internal_execute_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.party_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.party_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_party().empty()) {
    _this->_impl_.party_.Set(from._internal_party(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broker_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broker_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_broker_status().empty()) {
    _this->_impl_.broker_status_.Set(from._internal_broker_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.separate_agreement_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.separate_agreement_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_separate_agreement_type().empty()) {
    _this->_impl_.separate_agreement_type_.Set(from._internal_separate_agreement_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.separate_agreement_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.separate_agreement_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_separate_agreement_number().empty()) {
    _this->_impl_.separate_agreement_number_.Set(from._internal_separate_agreement_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.separate_agreement_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.separate_agreement_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_separate_agreement_date().empty()) {
    _this->_impl_.separate_agreement_date_.Set(from._internal_separate_agreement_date(), 
      _this->GetArenaForAllocation());
  }
  _impl_.delivery_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delivery_type().empty()) {
    _this->_impl_.delivery_type_.Set(from._internal_delivery_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trade_datetime()) {
    _this->_impl_.trade_datetime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.trade_datetime_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.price_);
  }
  if (from._internal_has_order_amount()) {
    _this->_impl_.order_amount_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.order_amount_);
  }
  if (from._internal_has_aci_value()) {
    _this->_impl_.aci_value_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.aci_value_);
  }
  if (from._internal_has_total_order_amount()) {
    _this->_impl_.total_order_amount_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_order_amount_);
  }
  if (from._internal_has_broker_commission()) {
    _this->_impl_.broker_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.broker_commission_);
  }
  if (from._internal_has_exchange_commission()) {
    _this->_impl_.exchange_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.exchange_commission_);
  }
  if (from._internal_has_exchange_clearing_commission()) {
    _this->_impl_.exchange_clearing_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.exchange_clearing_commission_);
  }
  if (from._internal_has_repo_rate()) {
    _this->_impl_.repo_rate_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.repo_rate_);
  }
  if (from._internal_has_clear_value_date()) {
    _this->_impl_.clear_value_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.clear_value_date_);
  }
  if (from._internal_has_sec_value_date()) {
    _this->_impl_.sec_value_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.sec_value_date_);
  }
  _this->_impl_.quantity_ = from._impl_.quantity_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BrokerReport)
}

inline void BrokerReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.execute_sign_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.party_){}
    , decltype(_impl_.broker_status_){}
    , decltype(_impl_.separate_agreement_type_){}
    , decltype(_impl_.separate_agreement_number_){}
    , decltype(_impl_.separate_agreement_date_){}
    , decltype(_impl_.delivery_type_){}
    , decltype(_impl_.trade_datetime_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.order_amount_){nullptr}
    , decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.broker_commission_){nullptr}
    , decltype(_impl_.exchange_commission_){nullptr}
    , decltype(_impl_.exchange_clearing_commission_){nullptr}
    , decltype(_impl_.repo_rate_){nullptr}
    , decltype(_impl_.clear_value_date_){nullptr}
    , decltype(_impl_.sec_value_date_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execute_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execute_sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.party_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.party_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broker_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broker_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.separate_agreement_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.separate_agreement_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.separate_agreement_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.separate_agreement_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.separate_agreement_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.separate_agreement_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delivery_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BrokerReport::~BrokerReport() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BrokerReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrokerReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trade_id_.Destroy();
  _impl_.order_id_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.execute_sign_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.direction_.Destroy();
  _impl_.name_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.party_.Destroy();
  _impl_.broker_status_.Destroy();
  _impl_.separate_agreement_type_.Destroy();
  _impl_.separate_agreement_number_.Destroy();
  _impl_.separate_agreement_date_.Destroy();
  _impl_.delivery_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trade_datetime_;
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.order_amount_;
  if (this != internal_default_instance()) delete _impl_.aci_value_;
  if (this != internal_default_instance()) delete _impl_.total_order_amount_;
  if (this != internal_default_instance()) delete _impl_.broker_commission_;
  if (this != internal_default_instance()) delete _impl_.exchange_commission_;
  if (this != internal_default_instance()) delete _impl_.exchange_clearing_commission_;
  if (this != internal_default_instance()) delete _impl_.repo_rate_;
  if (this != internal_default_instance()) delete _impl_.clear_value_date_;
  if (this != internal_default_instance()) delete _impl_.sec_value_date_;
}

void BrokerReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrokerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BrokerReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trade_id_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.execute_sign_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.party_.ClearToEmpty();
  _impl_.broker_status_.ClearToEmpty();
  _impl_.separate_agreement_type_.ClearToEmpty();
  _impl_.separate_agreement_number_.ClearToEmpty();
  _impl_.separate_agreement_date_.ClearToEmpty();
  _impl_.delivery_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trade_datetime_ != nullptr) {
    delete _impl_.trade_datetime_;
  }
  _impl_.trade_datetime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.order_amount_ != nullptr) {
    delete _impl_.order_amount_;
  }
  _impl_.order_amount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.broker_commission_ != nullptr) {
    delete _impl_.broker_commission_;
  }
  _impl_.broker_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_commission_ != nullptr) {
    delete _impl_.exchange_commission_;
  }
  _impl_.exchange_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_clearing_commission_ != nullptr) {
    delete _impl_.exchange_clearing_commission_;
  }
  _impl_.exchange_clearing_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.repo_rate_ != nullptr) {
    delete _impl_.repo_rate_;
  }
  _impl_.repo_rate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clear_value_date_ != nullptr) {
    delete _impl_.clear_value_date_;
  }
  _impl_.clear_value_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sec_value_date_ != nullptr) {
    delete _impl_.sec_value_date_;
  }
  _impl_.sec_value_date_ = nullptr;
  _impl_.quantity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trade_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.order_id"));
        } else
          goto handle_unusual;
        continue;
      // string figi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.figi"));
        } else
          goto handle_unusual;
        continue;
      // string execute_sign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_execute_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.execute_sign"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp trade_datetime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string exchange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string direction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.direction"));
        } else
          goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.name"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.ticker"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue order_amount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation aci_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_aci_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_order_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue broker_commission = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_broker_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_commission = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_clearing_commission = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_clearing_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation repo_rate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_repo_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string party = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_party();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.party"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp clear_value_date = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_value_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sec_value_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_sec_value_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string broker_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_broker_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_status"));
        } else
          goto handle_unusual;
        continue;
      // string separate_agreement_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_separate_agreement_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_type"));
        } else
          goto handle_unusual;
        continue;
      // string separate_agreement_number = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_separate_agreement_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_number"));
        } else
          goto handle_unusual;
        continue;
      // string separate_agreement_date = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_separate_agreement_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_date"));
        } else
          goto handle_unusual;
        continue;
      // string delivery_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_delivery_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrokerReport.delivery_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BrokerReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trade_id = 1;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trade_id(), target);
  }

  // string order_id = 2;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_id(), target);
  }

  // string figi = 3;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.figi");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_figi(), target);
  }

  // string execute_sign = 4;
  if (!this->_internal_execute_sign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execute_sign().data(), static_cast<int>(this->_internal_execute_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.execute_sign");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_execute_sign(), target);
  }

  // .google.protobuf.Timestamp trade_datetime = 5;
  if (this->_internal_has_trade_datetime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::trade_datetime(this),
        _Internal::trade_datetime(this).GetCachedSize(), target, stream);
  }

  // string exchange = 6;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_exchange(), target);
  }

  // string class_code = 7;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.class_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_class_code(), target);
  }

  // string direction = 8;
  if (!this->_internal_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.direction");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_direction(), target);
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // string ticker = 10;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.ticker");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ticker(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 11;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 12;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_quantity(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue order_amount = 13;
  if (this->_internal_has_order_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::order_amount(this),
        _Internal::order_amount(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation aci_value = 14;
  if (this->_internal_has_aci_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::aci_value(this),
        _Internal::aci_value(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 15;
  if (this->_internal_has_total_order_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::total_order_amount(this),
        _Internal::total_order_amount(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue broker_commission = 16;
  if (this->_internal_has_broker_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::broker_commission(this),
        _Internal::broker_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_commission = 17;
  if (this->_internal_has_exchange_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::exchange_commission(this),
        _Internal::exchange_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_clearing_commission = 18;
  if (this->_internal_has_exchange_clearing_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::exchange_clearing_commission(this),
        _Internal::exchange_clearing_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation repo_rate = 19;
  if (this->_internal_has_repo_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::repo_rate(this),
        _Internal::repo_rate(this).GetCachedSize(), target, stream);
  }

  // string party = 20;
  if (!this->_internal_party().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.party");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_party(), target);
  }

  // .google.protobuf.Timestamp clear_value_date = 21;
  if (this->_internal_has_clear_value_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::clear_value_date(this),
        _Internal::clear_value_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp sec_value_date = 22;
  if (this->_internal_has_sec_value_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::sec_value_date(this),
        _Internal::sec_value_date(this).GetCachedSize(), target, stream);
  }

  // string broker_status = 23;
  if (!this->_internal_broker_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_status().data(), static_cast<int>(this->_internal_broker_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_status");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_broker_status(), target);
  }

  // string separate_agreement_type = 24;
  if (!this->_internal_separate_agreement_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_separate_agreement_type().data(), static_cast<int>(this->_internal_separate_agreement_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_type");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_separate_agreement_type(), target);
  }

  // string separate_agreement_number = 25;
  if (!this->_internal_separate_agreement_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_separate_agreement_number().data(), static_cast<int>(this->_internal_separate_agreement_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_number");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_separate_agreement_number(), target);
  }

  // string separate_agreement_date = 26;
  if (!this->_internal_separate_agreement_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_separate_agreement_date().data(), static_cast<int>(this->_internal_separate_agreement_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_date");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_separate_agreement_date(), target);
  }

  // string delivery_type = 27;
  if (!this->_internal_delivery_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delivery_type().data(), static_cast<int>(this->_internal_delivery_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrokerReport.delivery_type");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_delivery_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BrokerReport)
  return target;
}

size_t BrokerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BrokerReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_id = 1;
  if (!this->_internal_trade_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // string order_id = 2;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string figi = 3;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string execute_sign = 4;
  if (!this->_internal_execute_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execute_sign());
  }

  // string exchange = 6;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string class_code = 7;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string direction = 8;
  if (!this->_internal_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ticker = 10;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string party = 20;
  if (!this->_internal_party().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string broker_status = 23;
  if (!this->_internal_broker_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_status());
  }

  // string separate_agreement_type = 24;
  if (!this->_internal_separate_agreement_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_separate_agreement_type());
  }

  // string separate_agreement_number = 25;
  if (!this->_internal_separate_agreement_number().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_separate_agreement_number());
  }

  // string separate_agreement_date = 26;
  if (!this->_internal_separate_agreement_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_separate_agreement_date());
  }

  // string delivery_type = 27;
  if (!this->_internal_delivery_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery_type());
  }

  // .google.protobuf.Timestamp trade_datetime = 5;
  if (this->_internal_has_trade_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trade_datetime_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 11;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue order_amount = 13;
  if (this->_internal_has_order_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_amount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation aci_value = 14;
  if (this->_internal_has_aci_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aci_value_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 15;
  if (this->_internal_has_total_order_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_order_amount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue broker_commission = 16;
  if (this->_internal_has_broker_commission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.broker_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_commission = 17;
  if (this->_internal_has_exchange_commission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_clearing_commission = 18;
  if (this->_internal_has_exchange_clearing_commission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_clearing_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation repo_rate = 19;
  if (this->_internal_has_repo_rate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.repo_rate_);
  }

  // .google.protobuf.Timestamp clear_value_date = 21;
  if (this->_internal_has_clear_value_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clear_value_date_);
  }

  // .google.protobuf.Timestamp sec_value_date = 22;
  if (this->_internal_has_sec_value_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sec_value_date_);
  }

  // int64 quantity = 12;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrokerReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerReport::GetClassData() const { return &_class_data_; }


void BrokerReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrokerReport*>(&to_msg);
  auto& from = static_cast<const BrokerReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BrokerReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_id().empty()) {
    _this->_internal_set_trade_id(from._internal_trade_id());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_execute_sign().empty()) {
    _this->_internal_set_execute_sign(from._internal_execute_sign());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_party().empty()) {
    _this->_internal_set_party(from._internal_party());
  }
  if (!from._internal_broker_status().empty()) {
    _this->_internal_set_broker_status(from._internal_broker_status());
  }
  if (!from._internal_separate_agreement_type().empty()) {
    _this->_internal_set_separate_agreement_type(from._internal_separate_agreement_type());
  }
  if (!from._internal_separate_agreement_number().empty()) {
    _this->_internal_set_separate_agreement_number(from._internal_separate_agreement_number());
  }
  if (!from._internal_separate_agreement_date().empty()) {
    _this->_internal_set_separate_agreement_date(from._internal_separate_agreement_date());
  }
  if (!from._internal_delivery_type().empty()) {
    _this->_internal_set_delivery_type(from._internal_delivery_type());
  }
  if (from._internal_has_trade_datetime()) {
    _this->_internal_mutable_trade_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_trade_datetime());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_order_amount()) {
    _this->_internal_mutable_order_amount()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_order_amount());
  }
  if (from._internal_has_aci_value()) {
    _this->_internal_mutable_aci_value()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_aci_value());
  }
  if (from._internal_has_total_order_amount()) {
    _this->_internal_mutable_total_order_amount()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_order_amount());
  }
  if (from._internal_has_broker_commission()) {
    _this->_internal_mutable_broker_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_broker_commission());
  }
  if (from._internal_has_exchange_commission()) {
    _this->_internal_mutable_exchange_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_exchange_commission());
  }
  if (from._internal_has_exchange_clearing_commission()) {
    _this->_internal_mutable_exchange_clearing_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_exchange_clearing_commission());
  }
  if (from._internal_has_repo_rate()) {
    _this->_internal_mutable_repo_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_repo_rate());
  }
  if (from._internal_has_clear_value_date()) {
    _this->_internal_mutable_clear_value_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_clear_value_date());
  }
  if (from._internal_has_sec_value_date()) {
    _this->_internal_mutable_sec_value_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_sec_value_date());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerReport::CopyFrom(const BrokerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BrokerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerReport::IsInitialized() const {
  return true;
}

void BrokerReport::InternalSwap(BrokerReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trade_id_, lhs_arena,
      &other->_impl_.trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execute_sign_, lhs_arena,
      &other->_impl_.execute_sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.direction_, lhs_arena,
      &other->_impl_.direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.party_, lhs_arena,
      &other->_impl_.party_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broker_status_, lhs_arena,
      &other->_impl_.broker_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.separate_agreement_type_, lhs_arena,
      &other->_impl_.separate_agreement_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.separate_agreement_number_, lhs_arena,
      &other->_impl_.separate_agreement_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.separate_agreement_date_, lhs_arena,
      &other->_impl_.separate_agreement_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delivery_type_, lhs_arena,
      &other->_impl_.delivery_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerReport, _impl_.quantity_)
      + sizeof(BrokerReport::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(BrokerReport, _impl_.trade_datetime_)>(
          reinterpret_cast<char*>(&_impl_.trade_datetime_),
          reinterpret_cast<char*>(&other->_impl_.trade_datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[21]);
}

// ===================================================================

class GetDividendsForeignIssuerRequest::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& generate_div_foreign_issuer_report(const GetDividendsForeignIssuerRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& get_div_foreign_issuer_report(const GetDividendsForeignIssuerRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest&
GetDividendsForeignIssuerRequest::_Internal::generate_div_foreign_issuer_report(const GetDividendsForeignIssuerRequest* msg) {
  return *msg->_impl_.payload_.generate_div_foreign_issuer_report_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest&
GetDividendsForeignIssuerRequest::_Internal::get_div_foreign_issuer_report(const GetDividendsForeignIssuerRequest* msg) {
  return *msg->_impl_.payload_.get_div_foreign_issuer_report_;
}
void GetDividendsForeignIssuerRequest::set_allocated_generate_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* generate_div_foreign_issuer_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (generate_div_foreign_issuer_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generate_div_foreign_issuer_report);
    if (message_arena != submessage_arena) {
      generate_div_foreign_issuer_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generate_div_foreign_issuer_report, submessage_arena);
    }
    set_has_generate_div_foreign_issuer_report();
    _impl_.payload_.generate_div_foreign_issuer_report_ = generate_div_foreign_issuer_report;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
}
void GetDividendsForeignIssuerRequest::set_allocated_get_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* get_div_foreign_issuer_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_div_foreign_issuer_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_div_foreign_issuer_report);
    if (message_arena != submessage_arena) {
      get_div_foreign_issuer_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_div_foreign_issuer_report, submessage_arena);
    }
    set_has_get_div_foreign_issuer_report();
    _impl_.payload_.get_div_foreign_issuer_report_ = get_div_foreign_issuer_report;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
}
GetDividendsForeignIssuerRequest::GetDividendsForeignIssuerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
}
GetDividendsForeignIssuerRequest::GetDividendsForeignIssuerRequest(const GetDividendsForeignIssuerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDividendsForeignIssuerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kGenerateDivForeignIssuerReport: {
      _this->_internal_mutable_generate_div_foreign_issuer_report()->::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest::MergeFrom(
          from._internal_generate_div_foreign_issuer_report());
      break;
    }
    case kGetDivForeignIssuerReport: {
      _this->_internal_mutable_get_div_foreign_issuer_report()->::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest::MergeFrom(
          from._internal_get_div_foreign_issuer_report());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
}

inline void GetDividendsForeignIssuerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

GetDividendsForeignIssuerRequest::~GetDividendsForeignIssuerRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDividendsForeignIssuerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void GetDividendsForeignIssuerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDividendsForeignIssuerRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  switch (payload_case()) {
    case kGenerateDivForeignIssuerReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.generate_div_foreign_issuer_report_;
      }
      break;
    }
    case kGetDivForeignIssuerReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.get_div_foreign_issuer_report_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void GetDividendsForeignIssuerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDividendsForeignIssuerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest generate_div_foreign_issuer_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generate_div_foreign_issuer_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest get_div_foreign_issuer_report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_div_foreign_issuer_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDividendsForeignIssuerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest generate_div_foreign_issuer_report = 1;
  if (_internal_has_generate_div_foreign_issuer_report()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::generate_div_foreign_issuer_report(this),
        _Internal::generate_div_foreign_issuer_report(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest get_div_foreign_issuer_report = 2;
  if (_internal_has_get_div_foreign_issuer_report()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::get_div_foreign_issuer_report(this),
        _Internal::get_div_foreign_issuer_report(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  return target;
}

size_t GetDividendsForeignIssuerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest generate_div_foreign_issuer_report = 1;
    case kGenerateDivForeignIssuerReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.generate_div_foreign_issuer_report_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest get_div_foreign_issuer_report = 2;
    case kGetDivForeignIssuerReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.get_div_foreign_issuer_report_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDividendsForeignIssuerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDividendsForeignIssuerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDividendsForeignIssuerRequest::GetClassData() const { return &_class_data_; }


void GetDividendsForeignIssuerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsForeignIssuerRequest*>(&to_msg);
  auto& from = static_cast<const GetDividendsForeignIssuerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kGenerateDivForeignIssuerReport: {
      _this->_internal_mutable_generate_div_foreign_issuer_report()->::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest::MergeFrom(
          from._internal_generate_div_foreign_issuer_report());
      break;
    }
    case kGetDivForeignIssuerReport: {
      _this->_internal_mutable_get_div_foreign_issuer_report()->::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest::MergeFrom(
          from._internal_get_div_foreign_issuer_report());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsForeignIssuerRequest::CopyFrom(const GetDividendsForeignIssuerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDividendsForeignIssuerRequest::IsInitialized() const {
  return true;
}

void GetDividendsForeignIssuerRequest::InternalSwap(GetDividendsForeignIssuerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDividendsForeignIssuerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[22]);
}

// ===================================================================

class GetDividendsForeignIssuerResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& generate_div_foreign_issuer_report_response(const GetDividendsForeignIssuerResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& div_foreign_issuer_report(const GetDividendsForeignIssuerResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse&
GetDividendsForeignIssuerResponse::_Internal::generate_div_foreign_issuer_report_response(const GetDividendsForeignIssuerResponse* msg) {
  return *msg->_impl_.payload_.generate_div_foreign_issuer_report_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse&
GetDividendsForeignIssuerResponse::_Internal::div_foreign_issuer_report(const GetDividendsForeignIssuerResponse* msg) {
  return *msg->_impl_.payload_.div_foreign_issuer_report_;
}
void GetDividendsForeignIssuerResponse::set_allocated_generate_div_foreign_issuer_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* generate_div_foreign_issuer_report_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (generate_div_foreign_issuer_report_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generate_div_foreign_issuer_report_response);
    if (message_arena != submessage_arena) {
      generate_div_foreign_issuer_report_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generate_div_foreign_issuer_report_response, submessage_arena);
    }
    set_has_generate_div_foreign_issuer_report_response();
    _impl_.payload_.generate_div_foreign_issuer_report_response_ = generate_div_foreign_issuer_report_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
}
void GetDividendsForeignIssuerResponse::set_allocated_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* div_foreign_issuer_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (div_foreign_issuer_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(div_foreign_issuer_report);
    if (message_arena != submessage_arena) {
      div_foreign_issuer_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, div_foreign_issuer_report, submessage_arena);
    }
    set_has_div_foreign_issuer_report();
    _impl_.payload_.div_foreign_issuer_report_ = div_foreign_issuer_report;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
}
GetDividendsForeignIssuerResponse::GetDividendsForeignIssuerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
}
GetDividendsForeignIssuerResponse::GetDividendsForeignIssuerResponse(const GetDividendsForeignIssuerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDividendsForeignIssuerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kGenerateDivForeignIssuerReportResponse: {
      _this->_internal_mutable_generate_div_foreign_issuer_report_response()->::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse::MergeFrom(
          from._internal_generate_div_foreign_issuer_report_response());
      break;
    }
    case kDivForeignIssuerReport: {
      _this->_internal_mutable_div_foreign_issuer_report()->::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse::MergeFrom(
          from._internal_div_foreign_issuer_report());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
}

inline void GetDividendsForeignIssuerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

GetDividendsForeignIssuerResponse::~GetDividendsForeignIssuerResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDividendsForeignIssuerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void GetDividendsForeignIssuerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDividendsForeignIssuerResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  switch (payload_case()) {
    case kGenerateDivForeignIssuerReportResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.generate_div_foreign_issuer_report_response_;
      }
      break;
    }
    case kDivForeignIssuerReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.div_foreign_issuer_report_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void GetDividendsForeignIssuerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDividendsForeignIssuerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse generate_div_foreign_issuer_report_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generate_div_foreign_issuer_report_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse div_foreign_issuer_report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_div_foreign_issuer_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDividendsForeignIssuerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse generate_div_foreign_issuer_report_response = 1;
  if (_internal_has_generate_div_foreign_issuer_report_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::generate_div_foreign_issuer_report_response(this),
        _Internal::generate_div_foreign_issuer_report_response(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse div_foreign_issuer_report = 2;
  if (_internal_has_div_foreign_issuer_report()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::div_foreign_issuer_report(this),
        _Internal::div_foreign_issuer_report(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  return target;
}

size_t GetDividendsForeignIssuerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse generate_div_foreign_issuer_report_response = 1;
    case kGenerateDivForeignIssuerReportResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.generate_div_foreign_issuer_report_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse div_foreign_issuer_report = 2;
    case kDivForeignIssuerReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.div_foreign_issuer_report_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDividendsForeignIssuerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDividendsForeignIssuerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDividendsForeignIssuerResponse::GetClassData() const { return &_class_data_; }


void GetDividendsForeignIssuerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsForeignIssuerResponse*>(&to_msg);
  auto& from = static_cast<const GetDividendsForeignIssuerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kGenerateDivForeignIssuerReportResponse: {
      _this->_internal_mutable_generate_div_foreign_issuer_report_response()->::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse::MergeFrom(
          from._internal_generate_div_foreign_issuer_report_response());
      break;
    }
    case kDivForeignIssuerReport: {
      _this->_internal_mutable_div_foreign_issuer_report()->::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse::MergeFrom(
          from._internal_div_foreign_issuer_report());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsForeignIssuerResponse::CopyFrom(const GetDividendsForeignIssuerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDividendsForeignIssuerResponse::IsInitialized() const {
  return true;
}

void GetDividendsForeignIssuerResponse::InternalSwap(GetDividendsForeignIssuerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDividendsForeignIssuerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[23]);
}

// ===================================================================

class GenerateDividendsForeignIssuerReportRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GenerateDividendsForeignIssuerReportRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GenerateDividendsForeignIssuerReportRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GenerateDividendsForeignIssuerReportRequest::_Internal::from(const GenerateDividendsForeignIssuerReportRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GenerateDividendsForeignIssuerReportRequest::_Internal::to(const GenerateDividendsForeignIssuerReportRequest* msg) {
  return *msg->_impl_.to_;
}
void GenerateDividendsForeignIssuerReportRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void GenerateDividendsForeignIssuerReportRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
GenerateDividendsForeignIssuerReportRequest::GenerateDividendsForeignIssuerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
}
GenerateDividendsForeignIssuerReportRequest::GenerateDividendsForeignIssuerReportRequest(const GenerateDividendsForeignIssuerReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateDividendsForeignIssuerReportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
}

inline void GenerateDividendsForeignIssuerReportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateDividendsForeignIssuerReportRequest::~GenerateDividendsForeignIssuerReportRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateDividendsForeignIssuerReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GenerateDividendsForeignIssuerReportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateDividendsForeignIssuerReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateDividendsForeignIssuerReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateDividendsForeignIssuerReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
  return target;
}

size_t GenerateDividendsForeignIssuerReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateDividendsForeignIssuerReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateDividendsForeignIssuerReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateDividendsForeignIssuerReportRequest::GetClassData() const { return &_class_data_; }


void GenerateDividendsForeignIssuerReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateDividendsForeignIssuerReportRequest*>(&to_msg);
  auto& from = static_cast<const GenerateDividendsForeignIssuerReportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateDividendsForeignIssuerReportRequest::CopyFrom(const GenerateDividendsForeignIssuerReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateDividendsForeignIssuerReportRequest::IsInitialized() const {
  return true;
}

void GenerateDividendsForeignIssuerReportRequest::InternalSwap(GenerateDividendsForeignIssuerReportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateDividendsForeignIssuerReportRequest, _impl_.to_)
      + sizeof(GenerateDividendsForeignIssuerReportRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GenerateDividendsForeignIssuerReportRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateDividendsForeignIssuerReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[24]);
}

// ===================================================================

class GetDividendsForeignIssuerReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDividendsForeignIssuerReportRequest>()._impl_._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetDividendsForeignIssuerReportRequest::GetDividendsForeignIssuerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
}
GetDividendsForeignIssuerReportRequest::GetDividendsForeignIssuerReportRequest(const GetDividendsForeignIssuerReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDividendsForeignIssuerReportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.page_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_ = from._impl_.page_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
}

inline void GetDividendsForeignIssuerReportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.page_){0}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDividendsForeignIssuerReportRequest::~GetDividendsForeignIssuerReportRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDividendsForeignIssuerReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void GetDividendsForeignIssuerReportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDividendsForeignIssuerReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.page_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDividendsForeignIssuerReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_page(&has_bits);
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDividendsForeignIssuerReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // optional int32 page = 2;
  if (_internal_has_page()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
  return target;
}

size_t GetDividendsForeignIssuerReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // optional int32 page = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDividendsForeignIssuerReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDividendsForeignIssuerReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDividendsForeignIssuerReportRequest::GetClassData() const { return &_class_data_; }


void GetDividendsForeignIssuerReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsForeignIssuerReportRequest*>(&to_msg);
  auto& from = static_cast<const GetDividendsForeignIssuerReportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_page()) {
    _this->_internal_set_page(from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsForeignIssuerReportRequest::CopyFrom(const GetDividendsForeignIssuerReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDividendsForeignIssuerReportRequest::IsInitialized() const {
  return true;
}

void GetDividendsForeignIssuerReportRequest::InternalSwap(GetDividendsForeignIssuerReportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDividendsForeignIssuerReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[25]);
}

// ===================================================================

class GenerateDividendsForeignIssuerReportResponse::_Internal {
 public:
};

GenerateDividendsForeignIssuerReportResponse::GenerateDividendsForeignIssuerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
}
GenerateDividendsForeignIssuerReportResponse::GenerateDividendsForeignIssuerReportResponse(const GenerateDividendsForeignIssuerReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateDividendsForeignIssuerReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
}

inline void GenerateDividendsForeignIssuerReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateDividendsForeignIssuerReportResponse::~GenerateDividendsForeignIssuerReportResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateDividendsForeignIssuerReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void GenerateDividendsForeignIssuerReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateDividendsForeignIssuerReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateDividendsForeignIssuerReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateDividendsForeignIssuerReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
  return target;
}

size_t GenerateDividendsForeignIssuerReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateDividendsForeignIssuerReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateDividendsForeignIssuerReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateDividendsForeignIssuerReportResponse::GetClassData() const { return &_class_data_; }


void GenerateDividendsForeignIssuerReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateDividendsForeignIssuerReportResponse*>(&to_msg);
  auto& from = static_cast<const GenerateDividendsForeignIssuerReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateDividendsForeignIssuerReportResponse::CopyFrom(const GenerateDividendsForeignIssuerReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateDividendsForeignIssuerReportResponse::IsInitialized() const {
  return true;
}

void GenerateDividendsForeignIssuerReportResponse::InternalSwap(GenerateDividendsForeignIssuerReportResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateDividendsForeignIssuerReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[26]);
}

// ===================================================================

class GetDividendsForeignIssuerReportResponse::_Internal {
 public:
};

GetDividendsForeignIssuerReportResponse::GetDividendsForeignIssuerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
}
GetDividendsForeignIssuerReportResponse::GetDividendsForeignIssuerReportResponse(const GetDividendsForeignIssuerReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDividendsForeignIssuerReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dividends_foreign_issuer_report_){from._impl_.dividends_foreign_issuer_report_}
    , decltype(_impl_.itemscount_){}
    , decltype(_impl_.pagescount_){}
    , decltype(_impl_.page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.itemscount_, &from._impl_.itemscount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_) -
    reinterpret_cast<char*>(&_impl_.itemscount_)) + sizeof(_impl_.page_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
}

inline void GetDividendsForeignIssuerReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dividends_foreign_issuer_report_){arena}
    , decltype(_impl_.itemscount_){0}
    , decltype(_impl_.pagescount_){0}
    , decltype(_impl_.page_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDividendsForeignIssuerReportResponse::~GetDividendsForeignIssuerReportResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDividendsForeignIssuerReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dividends_foreign_issuer_report_.~RepeatedPtrField();
}

void GetDividendsForeignIssuerReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDividendsForeignIssuerReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dividends_foreign_issuer_report_.Clear();
  ::memset(&_impl_.itemscount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_) -
      reinterpret_cast<char*>(&_impl_.itemscount_)) + sizeof(_impl_.page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDividendsForeignIssuerReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport dividends_foreign_issuer_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dividends_foreign_issuer_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 itemsCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pagesCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pagescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDividendsForeignIssuerReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport dividends_foreign_issuer_report = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dividends_foreign_issuer_report_size()); i < n; i++) {
    const auto& repfield = this->_internal_dividends_foreign_issuer_report(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 itemsCount = 2;
  if (this->_internal_itemscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_itemscount(), target);
  }

  // int32 pagesCount = 3;
  if (this->_internal_pagescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pagescount(), target);
  }

  // int32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
  return target;
}

size_t GetDividendsForeignIssuerReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport dividends_foreign_issuer_report = 1;
  total_size += 1UL * this->_internal_dividends_foreign_issuer_report_size();
  for (const auto& msg : this->_impl_.dividends_foreign_issuer_report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 itemsCount = 2;
  if (this->_internal_itemscount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemscount());
  }

  // int32 pagesCount = 3;
  if (this->_internal_pagescount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pagescount());
  }

  // int32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDividendsForeignIssuerReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDividendsForeignIssuerReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDividendsForeignIssuerReportResponse::GetClassData() const { return &_class_data_; }


void GetDividendsForeignIssuerReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsForeignIssuerReportResponse*>(&to_msg);
  auto& from = static_cast<const GetDividendsForeignIssuerReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dividends_foreign_issuer_report_.MergeFrom(from._impl_.dividends_foreign_issuer_report_);
  if (from._internal_itemscount() != 0) {
    _this->_internal_set_itemscount(from._internal_itemscount());
  }
  if (from._internal_pagescount() != 0) {
    _this->_internal_set_pagescount(from._internal_pagescount());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsForeignIssuerReportResponse::CopyFrom(const GetDividendsForeignIssuerReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDividendsForeignIssuerReportResponse::IsInitialized() const {
  return true;
}

void GetDividendsForeignIssuerReportResponse::InternalSwap(GetDividendsForeignIssuerReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dividends_foreign_issuer_report_.InternalSwap(&other->_impl_.dividends_foreign_issuer_report_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDividendsForeignIssuerReportResponse, _impl_.page_)
      + sizeof(GetDividendsForeignIssuerReportResponse::_impl_.page_)
      - PROTOBUF_FIELD_OFFSET(GetDividendsForeignIssuerReportResponse, _impl_.itemscount_)>(
          reinterpret_cast<char*>(&_impl_.itemscount_),
          reinterpret_cast<char*>(&other->_impl_.itemscount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDividendsForeignIssuerReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[27]);
}

// ===================================================================

class DividendsForeignIssuerReport::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& record_date(const DividendsForeignIssuerReport* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& payment_date(const DividendsForeignIssuerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend(const DividendsForeignIssuerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& external_commission(const DividendsForeignIssuerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_gross(const DividendsForeignIssuerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& tax(const DividendsForeignIssuerReport* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_amount(const DividendsForeignIssuerReport* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DividendsForeignIssuerReport::_Internal::record_date(const DividendsForeignIssuerReport* msg) {
  return *msg->_impl_.record_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DividendsForeignIssuerReport::_Internal::payment_date(const DividendsForeignIssuerReport* msg) {
  return *msg->_impl_.payment_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
DividendsForeignIssuerReport::_Internal::dividend(const DividendsForeignIssuerReport* msg) {
  return *msg->_impl_.dividend_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
DividendsForeignIssuerReport::_Internal::external_commission(const DividendsForeignIssuerReport* msg) {
  return *msg->_impl_.external_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
DividendsForeignIssuerReport::_Internal::dividend_gross(const DividendsForeignIssuerReport* msg) {
  return *msg->_impl_.dividend_gross_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
DividendsForeignIssuerReport::_Internal::tax(const DividendsForeignIssuerReport* msg) {
  return *msg->_impl_.tax_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
DividendsForeignIssuerReport::_Internal::dividend_amount(const DividendsForeignIssuerReport* msg) {
  return *msg->_impl_.dividend_amount_;
}
void DividendsForeignIssuerReport::clear_record_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.record_date_ != nullptr) {
    delete _impl_.record_date_;
  }
  _impl_.record_date_ = nullptr;
}
void DividendsForeignIssuerReport::clear_payment_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.payment_date_ != nullptr) {
    delete _impl_.payment_date_;
  }
  _impl_.payment_date_ = nullptr;
}
void DividendsForeignIssuerReport::clear_dividend() {
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_ != nullptr) {
    delete _impl_.dividend_;
  }
  _impl_.dividend_ = nullptr;
}
void DividendsForeignIssuerReport::clear_external_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.external_commission_ != nullptr) {
    delete _impl_.external_commission_;
  }
  _impl_.external_commission_ = nullptr;
}
void DividendsForeignIssuerReport::clear_dividend_gross() {
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_gross_ != nullptr) {
    delete _impl_.dividend_gross_;
  }
  _impl_.dividend_gross_ = nullptr;
}
void DividendsForeignIssuerReport::clear_tax() {
  if (GetArenaForAllocation() == nullptr && _impl_.tax_ != nullptr) {
    delete _impl_.tax_;
  }
  _impl_.tax_ = nullptr;
}
void DividendsForeignIssuerReport::clear_dividend_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_amount_ != nullptr) {
    delete _impl_.dividend_amount_;
  }
  _impl_.dividend_amount_ = nullptr;
}
DividendsForeignIssuerReport::DividendsForeignIssuerReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
}
DividendsForeignIssuerReport::DividendsForeignIssuerReport(const DividendsForeignIssuerReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DividendsForeignIssuerReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.security_name_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.issuer_country_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.record_date_){nullptr}
    , decltype(_impl_.payment_date_){nullptr}
    , decltype(_impl_.dividend_){nullptr}
    , decltype(_impl_.external_commission_){nullptr}
    , decltype(_impl_.dividend_gross_){nullptr}
    , decltype(_impl_.tax_){nullptr}
    , decltype(_impl_.dividend_amount_){nullptr}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.security_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.security_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_security_name().empty()) {
    _this->_impl_.security_name_.Set(from._internal_security_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issuer_country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer_country().empty()) {
    _this->_impl_.issuer_country_.Set(from._internal_issuer_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_record_date()) {
    _this->_impl_.record_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.record_date_);
  }
  if (from._internal_has_payment_date()) {
    _this->_impl_.payment_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.payment_date_);
  }
  if (from._internal_has_dividend()) {
    _this->_impl_.dividend_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dividend_);
  }
  if (from._internal_has_external_commission()) {
    _this->_impl_.external_commission_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.external_commission_);
  }
  if (from._internal_has_dividend_gross()) {
    _this->_impl_.dividend_gross_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dividend_gross_);
  }
  if (from._internal_has_tax()) {
    _this->_impl_.tax_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.tax_);
  }
  if (from._internal_has_dividend_amount()) {
    _this->_impl_.dividend_amount_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dividend_amount_);
  }
  _this->_impl_.quantity_ = from._impl_.quantity_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
}

inline void DividendsForeignIssuerReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.security_name_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.issuer_country_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.record_date_){nullptr}
    , decltype(_impl_.payment_date_){nullptr}
    , decltype(_impl_.dividend_){nullptr}
    , decltype(_impl_.external_commission_){nullptr}
    , decltype(_impl_.dividend_gross_){nullptr}
    , decltype(_impl_.tax_){nullptr}
    , decltype(_impl_.dividend_amount_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.security_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.security_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issuer_country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DividendsForeignIssuerReport::~DividendsForeignIssuerReport() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DividendsForeignIssuerReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.security_name_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.issuer_country_.Destroy();
  _impl_.currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.record_date_;
  if (this != internal_default_instance()) delete _impl_.payment_date_;
  if (this != internal_default_instance()) delete _impl_.dividend_;
  if (this != internal_default_instance()) delete _impl_.external_commission_;
  if (this != internal_default_instance()) delete _impl_.dividend_gross_;
  if (this != internal_default_instance()) delete _impl_.tax_;
  if (this != internal_default_instance()) delete _impl_.dividend_amount_;
}

void DividendsForeignIssuerReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DividendsForeignIssuerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.security_name_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.issuer_country_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.record_date_ != nullptr) {
    delete _impl_.record_date_;
  }
  _impl_.record_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payment_date_ != nullptr) {
    delete _impl_.payment_date_;
  }
  _impl_.payment_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_ != nullptr) {
    delete _impl_.dividend_;
  }
  _impl_.dividend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.external_commission_ != nullptr) {
    delete _impl_.external_commission_;
  }
  _impl_.external_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_gross_ != nullptr) {
    delete _impl_.dividend_gross_;
  }
  _impl_.dividend_gross_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tax_ != nullptr) {
    delete _impl_.tax_;
  }
  _impl_.tax_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_amount_ != nullptr) {
    delete _impl_.dividend_amount_;
  }
  _impl_.dividend_amount_ = nullptr;
  _impl_.quantity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DividendsForeignIssuerReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp record_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp payment_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string security_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_security_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.security_name"));
        } else
          goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.isin"));
        } else
          goto handle_unusual;
        continue;
      // string issuer_country = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_issuer_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country"));
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dividend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dividend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation external_commission = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_gross = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dividend_gross(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation tax = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tax(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_amount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dividend_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.currency"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DividendsForeignIssuerReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp record_date = 1;
  if (this->_internal_has_record_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::record_date(this),
        _Internal::record_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp payment_date = 2;
  if (this->_internal_has_payment_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payment_date(this),
        _Internal::payment_date(this).GetCachedSize(), target, stream);
  }

  // string security_name = 3;
  if (!this->_internal_security_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_name().data(), static_cast<int>(this->_internal_security_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.security_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_security_name(), target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // string issuer_country = 5;
  if (!this->_internal_issuer_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer_country().data(), static_cast<int>(this->_internal_issuer_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_issuer_country(), target);
  }

  // int64 quantity = 6;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_quantity(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend = 7;
  if (this->_internal_has_dividend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::dividend(this),
        _Internal::dividend(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation external_commission = 8;
  if (this->_internal_has_external_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::external_commission(this),
        _Internal::external_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_gross = 9;
  if (this->_internal_has_dividend_gross()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dividend_gross(this),
        _Internal::dividend_gross(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation tax = 10;
  if (this->_internal_has_tax()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tax(this),
        _Internal::tax(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_amount = 11;
  if (this->_internal_has_dividend_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dividend_amount(this),
        _Internal::dividend_amount(this).GetCachedSize(), target, stream);
  }

  // string currency = 12;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.currency");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
  return target;
}

size_t DividendsForeignIssuerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string security_name = 3;
  if (!this->_internal_security_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_name());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string issuer_country = 5;
  if (!this->_internal_issuer_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer_country());
  }

  // string currency = 12;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .google.protobuf.Timestamp record_date = 1;
  if (this->_internal_has_record_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_date_);
  }

  // .google.protobuf.Timestamp payment_date = 2;
  if (this->_internal_has_payment_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payment_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend = 7;
  if (this->_internal_has_dividend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dividend_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation external_commission = 8;
  if (this->_internal_has_external_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.external_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_gross = 9;
  if (this->_internal_has_dividend_gross()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dividend_gross_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation tax = 10;
  if (this->_internal_has_tax()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tax_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_amount = 11;
  if (this->_internal_has_dividend_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dividend_amount_);
  }

  // int64 quantity = 6;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DividendsForeignIssuerReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DividendsForeignIssuerReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DividendsForeignIssuerReport::GetClassData() const { return &_class_data_; }


void DividendsForeignIssuerReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DividendsForeignIssuerReport*>(&to_msg);
  auto& from = static_cast<const DividendsForeignIssuerReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_security_name().empty()) {
    _this->_internal_set_security_name(from._internal_security_name());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_issuer_country().empty()) {
    _this->_internal_set_issuer_country(from._internal_issuer_country());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (from._internal_has_record_date()) {
    _this->_internal_mutable_record_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_record_date());
  }
  if (from._internal_has_payment_date()) {
    _this->_internal_mutable_payment_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_payment_date());
  }
  if (from._internal_has_dividend()) {
    _this->_internal_mutable_dividend()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dividend());
  }
  if (from._internal_has_external_commission()) {
    _this->_internal_mutable_external_commission()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_external_commission());
  }
  if (from._internal_has_dividend_gross()) {
    _this->_internal_mutable_dividend_gross()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dividend_gross());
  }
  if (from._internal_has_tax()) {
    _this->_internal_mutable_tax()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_tax());
  }
  if (from._internal_has_dividend_amount()) {
    _this->_internal_mutable_dividend_amount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dividend_amount());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DividendsForeignIssuerReport::CopyFrom(const DividendsForeignIssuerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DividendsForeignIssuerReport::IsInitialized() const {
  return true;
}

void DividendsForeignIssuerReport::InternalSwap(DividendsForeignIssuerReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.security_name_, lhs_arena,
      &other->_impl_.security_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_country_, lhs_arena,
      &other->_impl_.issuer_country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DividendsForeignIssuerReport, _impl_.quantity_)
      + sizeof(DividendsForeignIssuerReport::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(DividendsForeignIssuerReport, _impl_.record_date_)>(
          reinterpret_cast<char*>(&_impl_.record_date_),
          reinterpret_cast<char*>(&other->_impl_.record_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DividendsForeignIssuerReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[28]);
}

// ===================================================================

class PortfolioStreamRequest::_Internal {
 public:
};

PortfolioStreamRequest::PortfolioStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
}
PortfolioStreamRequest::PortfolioStreamRequest(const PortfolioStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortfolioStreamRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
}

inline void PortfolioStreamRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PortfolioStreamRequest::~PortfolioStreamRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortfolioStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accounts_.~RepeatedPtrField();
}

void PortfolioStreamRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortfolioStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioStreamRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortfolioStreamRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1;
  for (int i = 0, n = this->_internal_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
  return target;
}

size_t PortfolioStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accounts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.accounts_.size());
  for (int i = 0, n = _impl_.accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.accounts_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortfolioStreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortfolioStreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortfolioStreamRequest::GetClassData() const { return &_class_data_; }


void PortfolioStreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortfolioStreamRequest*>(&to_msg);
  auto& from = static_cast<const PortfolioStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortfolioStreamRequest::CopyFrom(const PortfolioStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioStreamRequest::IsInitialized() const {
  return true;
}

void PortfolioStreamRequest::InternalSwap(PortfolioStreamRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioStreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[29]);
}

// ===================================================================

class PortfolioStreamResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& subscriptions(const PortfolioStreamResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& portfolio(const PortfolioStreamResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Ping& ping(const PortfolioStreamResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult&
PortfolioStreamResponse::_Internal::subscriptions(const PortfolioStreamResponse* msg) {
  return *msg->_impl_.payload_.subscriptions_;
}
const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse&
PortfolioStreamResponse::_Internal::portfolio(const PortfolioStreamResponse* msg) {
  return *msg->_impl_.payload_.portfolio_;
}
const ::tinkoff::public_::invest::api::contract::v1::Ping&
PortfolioStreamResponse::_Internal::ping(const PortfolioStreamResponse* msg) {
  return *msg->_impl_.payload_.ping_;
}
void PortfolioStreamResponse::set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* subscriptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscriptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscriptions);
    if (message_arena != submessage_arena) {
      subscriptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscriptions, submessage_arena);
    }
    set_has_subscriptions();
    _impl_.payload_.subscriptions_ = subscriptions;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
}
void PortfolioStreamResponse::set_allocated_portfolio(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* portfolio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (portfolio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(portfolio);
    if (message_arena != submessage_arena) {
      portfolio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, portfolio, submessage_arena);
    }
    set_has_portfolio();
    _impl_.payload_.portfolio_ = portfolio;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
}
void PortfolioStreamResponse::set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping));
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.ping)
}
void PortfolioStreamResponse::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.ping_;
    }
    clear_has_payload();
  }
}
PortfolioStreamResponse::PortfolioStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
}
PortfolioStreamResponse::PortfolioStreamResponse(const PortfolioStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortfolioStreamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSubscriptions: {
      _this->_internal_mutable_subscriptions()->::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult::MergeFrom(
          from._internal_subscriptions());
      break;
    }
    case kPortfolio: {
      _this->_internal_mutable_portfolio()->::tinkoff::public_::invest::api::contract::v1::PortfolioResponse::MergeFrom(
          from._internal_portfolio());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
}

inline void PortfolioStreamResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

PortfolioStreamResponse::~PortfolioStreamResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortfolioStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void PortfolioStreamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortfolioStreamResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  switch (payload_case()) {
    case kSubscriptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscriptions_;
      }
      break;
    }
    case kPortfolio: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.portfolio_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.ping_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void PortfolioStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioStreamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PortfolioResponse portfolio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_portfolio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortfolioStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult subscriptions = 1;
  if (_internal_has_subscriptions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subscriptions(this),
        _Internal::subscriptions(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.PortfolioResponse portfolio = 2;
  if (_internal_has_portfolio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::portfolio(this),
        _Internal::portfolio(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  return target;
}

size_t PortfolioStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult subscriptions = 1;
    case kSubscriptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscriptions_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.PortfolioResponse portfolio = 2;
    case kPortfolio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.portfolio_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.ping_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortfolioStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortfolioStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortfolioStreamResponse::GetClassData() const { return &_class_data_; }


void PortfolioStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortfolioStreamResponse*>(&to_msg);
  auto& from = static_cast<const PortfolioStreamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSubscriptions: {
      _this->_internal_mutable_subscriptions()->::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult::MergeFrom(
          from._internal_subscriptions());
      break;
    }
    case kPortfolio: {
      _this->_internal_mutable_portfolio()->::tinkoff::public_::invest::api::contract::v1::PortfolioResponse::MergeFrom(
          from._internal_portfolio());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortfolioStreamResponse::CopyFrom(const PortfolioStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioStreamResponse::IsInitialized() const {
  return true;
}

void PortfolioStreamResponse::InternalSwap(PortfolioStreamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioStreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[30]);
}

// ===================================================================

class PortfolioSubscriptionResult::_Internal {
 public:
};

PortfolioSubscriptionResult::PortfolioSubscriptionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
}
PortfolioSubscriptionResult::PortfolioSubscriptionResult(const PortfolioSubscriptionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortfolioSubscriptionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
}

inline void PortfolioSubscriptionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PortfolioSubscriptionResult::~PortfolioSubscriptionResult() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortfolioSubscriptionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accounts_.~RepeatedPtrField();
}

void PortfolioSubscriptionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortfolioSubscriptionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioSubscriptionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortfolioSubscriptionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus accounts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
  return target;
}

size_t PortfolioSubscriptionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->_impl_.accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortfolioSubscriptionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortfolioSubscriptionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortfolioSubscriptionResult::GetClassData() const { return &_class_data_; }


void PortfolioSubscriptionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortfolioSubscriptionResult*>(&to_msg);
  auto& from = static_cast<const PortfolioSubscriptionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortfolioSubscriptionResult::CopyFrom(const PortfolioSubscriptionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioSubscriptionResult::IsInitialized() const {
  return true;
}

void PortfolioSubscriptionResult::InternalSwap(PortfolioSubscriptionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioSubscriptionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[31]);
}

// ===================================================================

class AccountSubscriptionStatus::_Internal {
 public:
};

AccountSubscriptionStatus::AccountSubscriptionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
}
AccountSubscriptionStatus::AccountSubscriptionStatus(const AccountSubscriptionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountSubscriptionStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.subscription_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subscription_status_ = from._impl_.subscription_status_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
}

inline void AccountSubscriptionStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.subscription_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountSubscriptionStatus::~AccountSubscriptionStatus() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountSubscriptionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void AccountSubscriptionStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountSubscriptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountSubscriptionStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionStatus subscription_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_status(static_cast<::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountSubscriptionStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionStatus subscription_status = 6;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_subscription_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
  return target;
}

size_t AccountSubscriptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionStatus subscription_status = 6;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountSubscriptionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountSubscriptionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountSubscriptionStatus::GetClassData() const { return &_class_data_; }


void AccountSubscriptionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountSubscriptionStatus*>(&to_msg);
  auto& from = static_cast<const AccountSubscriptionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountSubscriptionStatus::CopyFrom(const AccountSubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSubscriptionStatus::IsInitialized() const {
  return true;
}

void AccountSubscriptionStatus::InternalSwap(AccountSubscriptionStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountSubscriptionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[32]);
}

// ===================================================================

class GetOperationsByCursorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOperationsByCursorRequest>()._impl_._has_bits_);
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetOperationsByCursorRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetOperationsByCursorRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_without_commissions(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_without_trades(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_without_overnights(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOperationsByCursorRequest::_Internal::from(const GetOperationsByCursorRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOperationsByCursorRequest::_Internal::to(const GetOperationsByCursorRequest* msg) {
  return *msg->_impl_.to_;
}
void GetOperationsByCursorRequest::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetOperationsByCursorRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
GetOperationsByCursorRequest::GetOperationsByCursorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
}
GetOperationsByCursorRequest::GetOperationsByCursorRequest(const GetOperationsByCursorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOperationsByCursorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_types_){from._impl_.operation_types_}
    , /*decltype(_impl_._operation_types_cached_byte_size_)*/{0}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.without_commissions_){}
    , decltype(_impl_.without_trades_){}
    , decltype(_impl_.without_overnights_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_id()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cursor()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.without_overnights_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.without_overnights_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
}

inline void GetOperationsByCursorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_types_){arena}
    , /*decltype(_impl_._operation_types_cached_byte_size_)*/{0}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.without_commissions_){false}
    , decltype(_impl_.without_trades_){false}
    , decltype(_impl_.without_overnights_){false}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOperationsByCursorRequest::~GetOperationsByCursorRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOperationsByCursorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_types_.~RepeatedField();
  _impl_.account_id_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.cursor_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetOperationsByCursorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOperationsByCursorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_types_.Clear();
  _impl_.account_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cursor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.without_trades_) -
        reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.without_trades_));
  }
  _impl_.without_overnights_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOperationsByCursorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp from = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp to = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cursor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.cursor"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_limit(&has_bits);
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.OperationType operation_types = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_operation_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_operation_types(static_cast<::tinkoff::public_::invest::api::contract::v1::OperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bool without_commissions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_without_commissions(&has_bits);
          _impl_.without_commissions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool without_trades = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_without_trades(&has_bits);
          _impl_.without_trades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool without_overnights = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_without_overnights(&has_bits);
          _impl_.without_overnights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOperationsByCursorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // optional string instrument_id = 2;
  if (_internal_has_instrument_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  // optional .google.protobuf.Timestamp from = 6;
  if (_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 7;
  if (_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // optional string cursor = 11;
  if (_internal_has_cursor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_cursor(), target);
  }

  // optional int32 limit = 12;
  if (_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_limit(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationType operation_types = 13;
  {
    int byte_size = _impl_._operation_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          13, _impl_.operation_types_, byte_size, target);
    }
  }

  // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 14;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_state(), target);
  }

  // optional bool without_commissions = 15;
  if (_internal_has_without_commissions()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_without_commissions(), target);
  }

  // optional bool without_trades = 16;
  if (_internal_has_without_trades()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_without_trades(), target);
  }

  // optional bool without_overnights = 17;
  if (_internal_has_without_overnights()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_without_overnights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
  return target;
}

size_t GetOperationsByCursorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationType operation_types = 13;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operation_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_operation_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._operation_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string instrument_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_id());
    }

    // optional string cursor = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cursor());
    }

    // optional .google.protobuf.Timestamp from = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

    // optional int32 limit = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
    }

    // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional bool without_commissions = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool without_trades = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional bool without_overnights = 17;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOperationsByCursorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOperationsByCursorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOperationsByCursorRequest::GetClassData() const { return &_class_data_; }


void GetOperationsByCursorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOperationsByCursorRequest*>(&to_msg);
  auto& from = static_cast<const GetOperationsByCursorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operation_types_.MergeFrom(from._impl_.operation_types_);
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cursor(from._internal_cursor());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_to());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.limit_ = from._impl_.limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.without_commissions_ = from._impl_.without_commissions_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.without_trades_ = from._impl_.without_trades_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_without_overnights(from._internal_without_overnights());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOperationsByCursorRequest::CopyFrom(const GetOperationsByCursorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsByCursorRequest::IsInitialized() const {
  return true;
}

void GetOperationsByCursorRequest::InternalSwap(GetOperationsByCursorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.operation_types_.InternalSwap(&other->_impl_.operation_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOperationsByCursorRequest, _impl_.without_overnights_)
      + sizeof(GetOperationsByCursorRequest::_impl_.without_overnights_)
      - PROTOBUF_FIELD_OFFSET(GetOperationsByCursorRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOperationsByCursorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[33]);
}

// ===================================================================

class GetOperationsByCursorResponse::_Internal {
 public:
};

GetOperationsByCursorResponse::GetOperationsByCursorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
}
GetOperationsByCursorResponse::GetOperationsByCursorResponse(const GetOperationsByCursorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOperationsByCursorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.has_next_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.has_next_ = from._impl_.has_next_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
}

inline void GetOperationsByCursorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.has_next_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOperationsByCursorResponse::~GetOperationsByCursorResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOperationsByCursorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.next_cursor_.Destroy();
}

void GetOperationsByCursorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOperationsByCursorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.next_cursor_.ClearToEmpty();
  _impl_.has_next_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOperationsByCursorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_next = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.has_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string next_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.OperationItem items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOperationsByCursorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_next = 1;
  if (this->_internal_has_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_next(), target);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_cursor(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationItem items = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
  return target;
}

size_t GetOperationsByCursorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationItem items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // bool has_next = 1;
  if (this->_internal_has_next() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOperationsByCursorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOperationsByCursorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOperationsByCursorResponse::GetClassData() const { return &_class_data_; }


void GetOperationsByCursorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOperationsByCursorResponse*>(&to_msg);
  auto& from = static_cast<const GetOperationsByCursorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  if (from._internal_has_next() != 0) {
    _this->_internal_set_has_next(from._internal_has_next());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOperationsByCursorResponse::CopyFrom(const GetOperationsByCursorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsByCursorResponse::IsInitialized() const {
  return true;
}

void GetOperationsByCursorResponse::InternalSwap(GetOperationsByCursorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
  swap(_impl_.has_next_, other->_impl_.has_next_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOperationsByCursorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[34]);
}

// ===================================================================

class OperationItem::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date(const OperationItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& payment(const OperationItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price(const OperationItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& commission(const OperationItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& yield(const OperationItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_relative(const OperationItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& accrued_int(const OperationItem* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& cancel_date_time(const OperationItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& trades_info(const OperationItem* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationItem::_Internal::date(const OperationItem* msg) {
  return *msg->_impl_.date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationItem::_Internal::payment(const OperationItem* msg) {
  return *msg->_impl_.payment_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationItem::_Internal::price(const OperationItem* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationItem::_Internal::commission(const OperationItem* msg) {
  return *msg->_impl_.commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationItem::_Internal::yield(const OperationItem* msg) {
  return *msg->_impl_.yield_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
OperationItem::_Internal::yield_relative(const OperationItem* msg) {
  return *msg->_impl_.yield_relative_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationItem::_Internal::accrued_int(const OperationItem* msg) {
  return *msg->_impl_.accrued_int_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationItem::_Internal::cancel_date_time(const OperationItem* msg) {
  return *msg->_impl_.cancel_date_time_;
}
const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades&
OperationItem::_Internal::trades_info(const OperationItem* msg) {
  return *msg->_impl_.trades_info_;
}
void OperationItem::clear_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
}
void OperationItem::clear_payment() {
  if (GetArenaForAllocation() == nullptr && _impl_.payment_ != nullptr) {
    delete _impl_.payment_;
  }
  _impl_.payment_ = nullptr;
}
void OperationItem::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void OperationItem::clear_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.commission_ != nullptr) {
    delete _impl_.commission_;
  }
  _impl_.commission_ = nullptr;
}
void OperationItem::clear_yield() {
  if (GetArenaForAllocation() == nullptr && _impl_.yield_ != nullptr) {
    delete _impl_.yield_;
  }
  _impl_.yield_ = nullptr;
}
void OperationItem::clear_yield_relative() {
  if (GetArenaForAllocation() == nullptr && _impl_.yield_relative_ != nullptr) {
    delete _impl_.yield_relative_;
  }
  _impl_.yield_relative_ = nullptr;
}
void OperationItem::clear_accrued_int() {
  if (GetArenaForAllocation() == nullptr && _impl_.accrued_int_ != nullptr) {
    delete _impl_.accrued_int_;
  }
  _impl_.accrued_int_ = nullptr;
}
void OperationItem::clear_cancel_date_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancel_date_time_ != nullptr) {
    delete _impl_.cancel_date_time_;
  }
  _impl_.cancel_date_time_ = nullptr;
}
OperationItem::OperationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OperationItem)
}
OperationItem::OperationItem(const OperationItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cursor_){}
    , decltype(_impl_.broker_account_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.parent_operation_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.cancel_reason_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.payment_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.commission_){nullptr}
    , decltype(_impl_.yield_){nullptr}
    , decltype(_impl_.yield_relative_){nullptr}
    , decltype(_impl_.accrued_int_){nullptr}
    , decltype(_impl_.cancel_date_time_){nullptr}
    , decltype(_impl_.trades_info_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.quantity_rest_){}
    , decltype(_impl_.quantity_done_){}
    , decltype(_impl_.instrument_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broker_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broker_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_broker_account_id().empty()) {
    _this->_impl_.broker_account_id_.Set(from._internal_broker_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parent_operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_operation_id().empty()) {
    _this->_impl_.parent_operation_id_.Set(from._internal_parent_operation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cancel_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cancel_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cancel_reason().empty()) {
    _this->_impl_.cancel_reason_.Set(from._internal_cancel_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_);
  }
  if (from._internal_has_payment()) {
    _this->_impl_.payment_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.payment_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.price_);
  }
  if (from._internal_has_commission()) {
    _this->_impl_.commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.commission_);
  }
  if (from._internal_has_yield()) {
    _this->_impl_.yield_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.yield_);
  }
  if (from._internal_has_yield_relative()) {
    _this->_impl_.yield_relative_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.yield_relative_);
  }
  if (from._internal_has_accrued_int()) {
    _this->_impl_.accrued_int_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.accrued_int_);
  }
  if (from._internal_has_cancel_date_time()) {
    _this->_impl_.cancel_date_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.cancel_date_time_);
  }
  if (from._internal_has_trades_info()) {
    _this->_impl_.trades_info_ = new ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades(*from._impl_.trades_info_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.instrument_kind_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.instrument_kind_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OperationItem)
}

inline void OperationItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cursor_){}
    , decltype(_impl_.broker_account_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.parent_operation_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.cancel_reason_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.payment_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.commission_){nullptr}
    , decltype(_impl_.yield_){nullptr}
    , decltype(_impl_.yield_relative_){nullptr}
    , decltype(_impl_.accrued_int_){nullptr}
    , decltype(_impl_.cancel_date_time_){nullptr}
    , decltype(_impl_.trades_info_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.quantity_){int64_t{0}}
    , decltype(_impl_.quantity_rest_){int64_t{0}}
    , decltype(_impl_.quantity_done_){int64_t{0}}
    , decltype(_impl_.instrument_kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broker_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broker_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cancel_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cancel_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationItem::~OperationItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OperationItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cursor_.Destroy();
  _impl_.broker_account_id_.Destroy();
  _impl_.id_.Destroy();
  _impl_.parent_operation_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.cancel_reason_.Destroy();
  _impl_.asset_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.date_;
  if (this != internal_default_instance()) delete _impl_.payment_;
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.commission_;
  if (this != internal_default_instance()) delete _impl_.yield_;
  if (this != internal_default_instance()) delete _impl_.yield_relative_;
  if (this != internal_default_instance()) delete _impl_.accrued_int_;
  if (this != internal_default_instance()) delete _impl_.cancel_date_time_;
  if (this != internal_default_instance()) delete _impl_.trades_info_;
}

void OperationItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OperationItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cursor_.ClearToEmpty();
  _impl_.broker_account_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.parent_operation_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.cancel_reason_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payment_ != nullptr) {
    delete _impl_.payment_;
  }
  _impl_.payment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.commission_ != nullptr) {
    delete _impl_.commission_;
  }
  _impl_.commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.yield_ != nullptr) {
    delete _impl_.yield_;
  }
  _impl_.yield_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.yield_relative_ != nullptr) {
    delete _impl_.yield_relative_;
  }
  _impl_.yield_relative_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accrued_int_ != nullptr) {
    delete _impl_.accrued_int_;
  }
  _impl_.accrued_int_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancel_date_time_ != nullptr) {
    delete _impl_.cancel_date_time_;
  }
  _impl_.cancel_date_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trades_info_ != nullptr) {
    delete _impl_.trades_info_;
  }
  _impl_.trades_info_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.instrument_kind_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.instrument_kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cursor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.cursor"));
        } else
          goto handle_unusual;
        continue;
      // string broker_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_broker_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.broker_account_id"));
        } else
          goto handle_unusual;
        continue;
      // string id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.id"));
        } else
          goto handle_unusual;
        continue;
      // string parent_operation_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_parent_operation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.parent_operation_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OperationType type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.description"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OperationState state = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string figi = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue commission = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_relative(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue accrued_int = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_accrued_int(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity_rest = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.quantity_rest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity_done = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.quantity_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cancel_date_time = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_date_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cancel_reason = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_cancel_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_reason"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OperationItemTrades trades_info = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_trades_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string asset_uid = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItem.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OperationItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cursor = 1;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.cursor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cursor(), target);
  }

  // string broker_account_id = 6;
  if (!this->_internal_broker_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_account_id().data(), static_cast<int>(this->_internal_broker_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.broker_account_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_broker_account_id(), target);
  }

  // string id = 16;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_id(), target);
  }

  // string parent_operation_id = 17;
  if (!this->_internal_parent_operation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_operation_id().data(), static_cast<int>(this->_internal_parent_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.parent_operation_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_parent_operation_id(), target);
  }

  // string name = 18;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.name");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp date = 21;
  if (this->_internal_has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationType type = 22;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_type(), target);
  }

  // string description = 23;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.description");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_description(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationState state = 24;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_state(), target);
  }

  // string instrument_uid = 31;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_instrument_uid(), target);
  }

  // string figi = 32;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.figi");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_figi(), target);
  }

  // string instrument_type = 33;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_type");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_instrument_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 34;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_instrument_kind(), target);
  }

  // string position_uid = 35;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.position_uid");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_position_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 41;
  if (this->_internal_has_payment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::payment(this),
        _Internal::payment(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 42;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue commission = 43;
  if (this->_internal_has_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::commission(this),
        _Internal::commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 44;
  if (this->_internal_has_yield()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::yield(this),
        _Internal::yield(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 45;
  if (this->_internal_has_yield_relative()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::yield_relative(this),
        _Internal::yield_relative(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue accrued_int = 46;
  if (this->_internal_has_accrued_int()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::accrued_int(this),
        _Internal::accrued_int(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 51;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(51, this->_internal_quantity(), target);
  }

  // int64 quantity_rest = 52;
  if (this->_internal_quantity_rest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(52, this->_internal_quantity_rest(), target);
  }

  // int64 quantity_done = 53;
  if (this->_internal_quantity_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(53, this->_internal_quantity_done(), target);
  }

  // .google.protobuf.Timestamp cancel_date_time = 56;
  if (this->_internal_has_cancel_date_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::cancel_date_time(this),
        _Internal::cancel_date_time(this).GetCachedSize(), target, stream);
  }

  // string cancel_reason = 57;
  if (!this->_internal_cancel_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancel_reason().data(), static_cast<int>(this->_internal_cancel_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_reason");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_cancel_reason(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationItemTrades trades_info = 61;
  if (this->_internal_has_trades_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::trades_info(this),
        _Internal::trades_info(this).GetCachedSize(), target, stream);
  }

  // string asset_uid = 64;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItem.asset_uid");
    target = stream->WriteStringMaybeAliased(
        64, this->_internal_asset_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OperationItem)
  return target;
}

size_t OperationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OperationItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cursor = 1;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // string broker_account_id = 6;
  if (!this->_internal_broker_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_account_id());
  }

  // string id = 16;
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string parent_operation_id = 17;
  if (!this->_internal_parent_operation_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_operation_id());
  }

  // string name = 18;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 23;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string instrument_uid = 31;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string figi = 32;
  if (!this->_internal_figi().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_type = 33;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // string position_uid = 35;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string cancel_reason = 57;
  if (!this->_internal_cancel_reason().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancel_reason());
  }

  // string asset_uid = 64;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // .google.protobuf.Timestamp date = 21;
  if (this->_internal_has_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 41;
  if (this->_internal_has_payment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payment_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 42;
  if (this->_internal_has_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue commission = 43;
  if (this->_internal_has_commission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 44;
  if (this->_internal_has_yield()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yield_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 45;
  if (this->_internal_has_yield_relative()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yield_relative_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue accrued_int = 46;
  if (this->_internal_has_accrued_int()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accrued_int_);
  }

  // .google.protobuf.Timestamp cancel_date_time = 56;
  if (this->_internal_has_cancel_date_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancel_date_time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationItemTrades trades_info = 61;
  if (this->_internal_has_trades_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trades_info_);
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationType type = 22;
  if (this->_internal_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.OperationState state = 24;
  if (this->_internal_state() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int64 quantity = 51;
  if (this->_internal_quantity() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_quantity());
  }

  // int64 quantity_rest = 52;
  if (this->_internal_quantity_rest() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_quantity_rest());
  }

  // int64 quantity_done = 53;
  if (this->_internal_quantity_done() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_quantity_done());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 34;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationItem::GetClassData() const { return &_class_data_; }


void OperationItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationItem*>(&to_msg);
  auto& from = static_cast<const OperationItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OperationItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (!from._internal_broker_account_id().empty()) {
    _this->_internal_set_broker_account_id(from._internal_broker_account_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_parent_operation_id().empty()) {
    _this->_internal_set_parent_operation_id(from._internal_parent_operation_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_cancel_reason().empty()) {
    _this->_internal_set_cancel_reason(from._internal_cancel_reason());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (from._internal_has_date()) {
    _this->_internal_mutable_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date());
  }
  if (from._internal_has_payment()) {
    _this->_internal_mutable_payment()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_payment());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_commission()) {
    _this->_internal_mutable_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_commission());
  }
  if (from._internal_has_yield()) {
    _this->_internal_mutable_yield()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_yield());
  }
  if (from._internal_has_yield_relative()) {
    _this->_internal_mutable_yield_relative()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_yield_relative());
  }
  if (from._internal_has_accrued_int()) {
    _this->_internal_mutable_accrued_int()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_accrued_int());
  }
  if (from._internal_has_cancel_date_time()) {
    _this->_internal_mutable_cancel_date_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_cancel_date_time());
  }
  if (from._internal_has_trades_info()) {
    _this->_internal_mutable_trades_info()->::tinkoff::public_::invest::api::contract::v1::OperationItemTrades::MergeFrom(
        from._internal_trades_info());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_quantity_rest() != 0) {
    _this->_internal_set_quantity_rest(from._internal_quantity_rest());
  }
  if (from._internal_quantity_done() != 0) {
    _this->_internal_set_quantity_done(from._internal_quantity_done());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationItem::CopyFrom(const OperationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OperationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationItem::IsInitialized() const {
  return true;
}

void OperationItem::InternalSwap(OperationItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broker_account_id_, lhs_arena,
      &other->_impl_.broker_account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_operation_id_, lhs_arena,
      &other->_impl_.parent_operation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cancel_reason_, lhs_arena,
      &other->_impl_.cancel_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationItem, _impl_.instrument_kind_)
      + sizeof(OperationItem::_impl_.instrument_kind_)
      - PROTOBUF_FIELD_OFFSET(OperationItem, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[35]);
}

// ===================================================================

class OperationItemTrades::_Internal {
 public:
};

OperationItemTrades::OperationItemTrades(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
}
OperationItemTrades::OperationItemTrades(const OperationItemTrades& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationItemTrades* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){from._impl_.trades_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
}

inline void OperationItemTrades::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationItemTrades::~OperationItemTrades() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationItemTrades::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trades_.~RepeatedPtrField();
}

void OperationItemTrades::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationItemTrades::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationItemTrades::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.OperationItemTrade trades = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationItemTrades::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationItemTrade trades = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
  return target;
}

size_t OperationItemTrades::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OperationItemTrade trades = 6;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->_impl_.trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationItemTrades::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationItemTrades::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationItemTrades::GetClassData() const { return &_class_data_; }


void OperationItemTrades::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationItemTrades*>(&to_msg);
  auto& from = static_cast<const OperationItemTrades&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trades_.MergeFrom(from._impl_.trades_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationItemTrades::CopyFrom(const OperationItemTrades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationItemTrades::IsInitialized() const {
  return true;
}

void OperationItemTrades::InternalSwap(OperationItemTrades* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trades_.InternalSwap(&other->_impl_.trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationItemTrades::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[36]);
}

// ===================================================================

class OperationItemTrade::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date(const OperationItemTrade* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price(const OperationItemTrade* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& yield(const OperationItemTrade* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_relative(const OperationItemTrade* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationItemTrade::_Internal::date(const OperationItemTrade* msg) {
  return *msg->_impl_.date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationItemTrade::_Internal::price(const OperationItemTrade* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OperationItemTrade::_Internal::yield(const OperationItemTrade* msg) {
  return *msg->_impl_.yield_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
OperationItemTrade::_Internal::yield_relative(const OperationItemTrade* msg) {
  return *msg->_impl_.yield_relative_;
}
void OperationItemTrade::clear_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
}
void OperationItemTrade::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void OperationItemTrade::clear_yield() {
  if (GetArenaForAllocation() == nullptr && _impl_.yield_ != nullptr) {
    delete _impl_.yield_;
  }
  _impl_.yield_ = nullptr;
}
void OperationItemTrade::clear_yield_relative() {
  if (GetArenaForAllocation() == nullptr && _impl_.yield_relative_ != nullptr) {
    delete _impl_.yield_relative_;
  }
  _impl_.yield_relative_ = nullptr;
}
OperationItemTrade::OperationItemTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
}
OperationItemTrade::OperationItemTrade(const OperationItemTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationItemTrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.yield_){nullptr}
    , decltype(_impl_.yield_relative_){nullptr}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_num().empty()) {
    _this->_impl_.num_.Set(from._internal_num(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.price_);
  }
  if (from._internal_has_yield()) {
    _this->_impl_.yield_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.yield_);
  }
  if (from._internal_has_yield_relative()) {
    _this->_impl_.yield_relative_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.yield_relative_);
  }
  _this->_impl_.quantity_ = from._impl_.quantity_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
}

inline void OperationItemTrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.yield_){nullptr}
    , decltype(_impl_.yield_relative_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationItemTrade::~OperationItemTrade() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationItemTrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.num_.Destroy();
  if (this != internal_default_instance()) delete _impl_.date_;
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.yield_;
  if (this != internal_default_instance()) delete _impl_.yield_relative_;
}

void OperationItemTrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationItemTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.yield_ != nullptr) {
    delete _impl_.yield_;
  }
  _impl_.yield_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.yield_relative_ != nullptr) {
    delete _impl_.yield_relative_;
  }
  _impl_.yield_relative_ = nullptr;
  _impl_.quantity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationItemTrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OperationItemTrade.num"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_relative(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationItemTrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string num = 1;
  if (!this->_internal_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OperationItemTrade.num");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_num(), target);
  }

  // .google.protobuf.Timestamp date = 6;
  if (this->_internal_has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 11;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_quantity(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 16;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 21;
  if (this->_internal_has_yield()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::yield(this),
        _Internal::yield(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 22;
  if (this->_internal_has_yield_relative()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::yield_relative(this),
        _Internal::yield_relative(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
  return target;
}

size_t OperationItemTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string num = 1;
  if (!this->_internal_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  // .google.protobuf.Timestamp date = 6;
  if (this->_internal_has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 16;
  if (this->_internal_has_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 21;
  if (this->_internal_has_yield()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yield_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 22;
  if (this->_internal_has_yield_relative()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yield_relative_);
  }

  // int64 quantity = 11;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationItemTrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationItemTrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationItemTrade::GetClassData() const { return &_class_data_; }


void OperationItemTrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationItemTrade*>(&to_msg);
  auto& from = static_cast<const OperationItemTrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_num().empty()) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_has_date()) {
    _this->_internal_mutable_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_yield()) {
    _this->_internal_mutable_yield()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_yield());
  }
  if (from._internal_has_yield_relative()) {
    _this->_internal_mutable_yield_relative()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_yield_relative());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationItemTrade::CopyFrom(const OperationItemTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationItemTrade::IsInitialized() const {
  return true;
}

void OperationItemTrade::InternalSwap(OperationItemTrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.num_, lhs_arena,
      &other->_impl_.num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationItemTrade, _impl_.quantity_)
      + sizeof(OperationItemTrade::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(OperationItemTrade, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationItemTrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[37]);
}

// ===================================================================

class PositionsStreamRequest::_Internal {
 public:
};

PositionsStreamRequest::PositionsStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
}
PositionsStreamRequest::PositionsStreamRequest(const PositionsStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsStreamRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
}

inline void PositionsStreamRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionsStreamRequest::~PositionsStreamRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accounts_.~RepeatedPtrField();
}

void PositionsStreamRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsStreamRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsStreamRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1;
  for (int i = 0, n = this->_internal_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
  return target;
}

size_t PositionsStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accounts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.accounts_.size());
  for (int i = 0, n = _impl_.accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.accounts_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsStreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsStreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsStreamRequest::GetClassData() const { return &_class_data_; }


void PositionsStreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsStreamRequest*>(&to_msg);
  auto& from = static_cast<const PositionsStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsStreamRequest::CopyFrom(const PositionsStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsStreamRequest::IsInitialized() const {
  return true;
}

void PositionsStreamRequest::InternalSwap(PositionsStreamRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsStreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[38]);
}

// ===================================================================

class PositionsStreamResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& subscriptions(const PositionsStreamResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::PositionData& position(const PositionsStreamResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Ping& ping(const PositionsStreamResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult&
PositionsStreamResponse::_Internal::subscriptions(const PositionsStreamResponse* msg) {
  return *msg->_impl_.payload_.subscriptions_;
}
const ::tinkoff::public_::invest::api::contract::v1::PositionData&
PositionsStreamResponse::_Internal::position(const PositionsStreamResponse* msg) {
  return *msg->_impl_.payload_.position_;
}
const ::tinkoff::public_::invest::api::contract::v1::Ping&
PositionsStreamResponse::_Internal::ping(const PositionsStreamResponse* msg) {
  return *msg->_impl_.payload_.ping_;
}
void PositionsStreamResponse::set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* subscriptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscriptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscriptions);
    if (message_arena != submessage_arena) {
      subscriptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscriptions, submessage_arena);
    }
    set_has_subscriptions();
    _impl_.payload_.subscriptions_ = subscriptions;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
}
void PositionsStreamResponse::set_allocated_position(::tinkoff::public_::invest::api::contract::v1::PositionData* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    _impl_.payload_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.position)
}
void PositionsStreamResponse::set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping));
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.ping)
}
void PositionsStreamResponse::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.ping_;
    }
    clear_has_payload();
  }
}
PositionsStreamResponse::PositionsStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
}
PositionsStreamResponse::PositionsStreamResponse(const PositionsStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsStreamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSubscriptions: {
      _this->_internal_mutable_subscriptions()->::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult::MergeFrom(
          from._internal_subscriptions());
      break;
    }
    case kPosition: {
      _this->_internal_mutable_position()->::tinkoff::public_::invest::api::contract::v1::PositionData::MergeFrom(
          from._internal_position());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
}

inline void PositionsStreamResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

PositionsStreamResponse::~PositionsStreamResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void PositionsStreamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsStreamResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  switch (payload_case()) {
    case kSubscriptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscriptions_;
      }
      break;
    }
    case kPosition: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.position_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.ping_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void PositionsStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsStreamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PositionData position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult subscriptions = 1;
  if (_internal_has_subscriptions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subscriptions(this),
        _Internal::subscriptions(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.PositionData position = 2;
  if (_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  return target;
}

size_t PositionsStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult subscriptions = 1;
    case kSubscriptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscriptions_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.PositionData position = 2;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.position_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.ping_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsStreamResponse::GetClassData() const { return &_class_data_; }


void PositionsStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsStreamResponse*>(&to_msg);
  auto& from = static_cast<const PositionsStreamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSubscriptions: {
      _this->_internal_mutable_subscriptions()->::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult::MergeFrom(
          from._internal_subscriptions());
      break;
    }
    case kPosition: {
      _this->_internal_mutable_position()->::tinkoff::public_::invest::api::contract::v1::PositionData::MergeFrom(
          from._internal_position());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsStreamResponse::CopyFrom(const PositionsStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsStreamResponse::IsInitialized() const {
  return true;
}

void PositionsStreamResponse::InternalSwap(PositionsStreamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsStreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[39]);
}

// ===================================================================

class PositionsSubscriptionResult::_Internal {
 public:
};

PositionsSubscriptionResult::PositionsSubscriptionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
}
PositionsSubscriptionResult::PositionsSubscriptionResult(const PositionsSubscriptionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsSubscriptionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
}

inline void PositionsSubscriptionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionsSubscriptionResult::~PositionsSubscriptionResult() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsSubscriptionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accounts_.~RepeatedPtrField();
}

void PositionsSubscriptionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsSubscriptionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsSubscriptionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsSubscriptionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus accounts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
  return target;
}

size_t PositionsSubscriptionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->_impl_.accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsSubscriptionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsSubscriptionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsSubscriptionResult::GetClassData() const { return &_class_data_; }


void PositionsSubscriptionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsSubscriptionResult*>(&to_msg);
  auto& from = static_cast<const PositionsSubscriptionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsSubscriptionResult::CopyFrom(const PositionsSubscriptionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsSubscriptionResult::IsInitialized() const {
  return true;
}

void PositionsSubscriptionResult::InternalSwap(PositionsSubscriptionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsSubscriptionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[40]);
}

// ===================================================================

class PositionsSubscriptionStatus::_Internal {
 public:
};

PositionsSubscriptionStatus::PositionsSubscriptionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
}
PositionsSubscriptionStatus::PositionsSubscriptionStatus(const PositionsSubscriptionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsSubscriptionStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.subscription_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subscription_status_ = from._impl_.subscription_status_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
}

inline void PositionsSubscriptionStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.subscription_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionsSubscriptionStatus::~PositionsSubscriptionStatus() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsSubscriptionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void PositionsSubscriptionStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsSubscriptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsSubscriptionStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PositionsAccountSubscriptionStatus subscription_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_status(static_cast<::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsSubscriptionStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.PositionsAccountSubscriptionStatus subscription_status = 6;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_subscription_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
  return target;
}

size_t PositionsSubscriptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.PositionsAccountSubscriptionStatus subscription_status = 6;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsSubscriptionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsSubscriptionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsSubscriptionStatus::GetClassData() const { return &_class_data_; }


void PositionsSubscriptionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsSubscriptionStatus*>(&to_msg);
  auto& from = static_cast<const PositionsSubscriptionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsSubscriptionStatus::CopyFrom(const PositionsSubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsSubscriptionStatus::IsInitialized() const {
  return true;
}

void PositionsSubscriptionStatus::InternalSwap(PositionsSubscriptionStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsSubscriptionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[41]);
}

// ===================================================================

class PositionData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date(const PositionData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PositionData::_Internal::date(const PositionData* msg) {
  return *msg->_impl_.date_;
}
void PositionData::clear_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
}
PositionData::PositionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionData)
}
PositionData::PositionData(const PositionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){from._impl_.money_}
    , decltype(_impl_.securities_){from._impl_.securities_}
    , decltype(_impl_.futures_){from._impl_.futures_}
    , decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.date_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionData)
}

inline void PositionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){arena}
    , decltype(_impl_.securities_){arena}
    , decltype(_impl_.futures_){arena}
    , decltype(_impl_.options_){arena}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.date_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionData::~PositionData() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.money_.~RepeatedPtrField();
  _impl_.securities_.~RepeatedPtrField();
  _impl_.futures_.~RepeatedPtrField();
  _impl_.options_.~RepeatedPtrField();
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.date_;
}

void PositionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionData::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.money_.Clear();
  _impl_.securities_.Clear();
  _impl_.futures_.Clear();
  _impl_.options_.Clear();
  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PositionData.account_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsMoney money = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_money(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_securities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_futures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PositionData.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsMoney money = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_money_size()); i < n; i++) {
    const auto& repfield = this->_internal_money(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_securities_size()); i < n; i++) {
    const auto& repfield = this->_internal_securities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_futures_size()); i < n; i++) {
    const auto& repfield = this->_internal_futures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp date = 6;
  if (this->_internal_has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionData)
  return target;
}

size_t PositionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsMoney money = 2;
  total_size += 1UL * this->_internal_money_size();
  for (const auto& msg : this->_impl_.money_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
  total_size += 1UL * this->_internal_securities_size();
  for (const auto& msg : this->_impl_.securities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 4;
  total_size += 1UL * this->_internal_futures_size();
  for (const auto& msg : this->_impl_.futures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 5;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_impl_.options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .google.protobuf.Timestamp date = 6;
  if (this->_internal_has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionData::GetClassData() const { return &_class_data_; }


void PositionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionData*>(&to_msg);
  auto& from = static_cast<const PositionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.money_.MergeFrom(from._impl_.money_);
  _this->_impl_.securities_.MergeFrom(from._impl_.securities_);
  _this->_impl_.futures_.MergeFrom(from._impl_.futures_);
  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_date()) {
    _this->_internal_mutable_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionData::CopyFrom(const PositionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionData::IsInitialized() const {
  return true;
}

void PositionData::InternalSwap(PositionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.money_.InternalSwap(&other->_impl_.money_);
  _impl_.securities_.InternalSwap(&other->_impl_.securities_);
  _impl_.futures_.InternalSwap(&other->_impl_.futures_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  swap(_impl_.date_, other->_impl_.date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[42]);
}

// ===================================================================

class PositionsMoney::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& available_value(const PositionsMoney* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked_value(const PositionsMoney* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PositionsMoney::_Internal::available_value(const PositionsMoney* msg) {
  return *msg->_impl_.available_value_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PositionsMoney::_Internal::blocked_value(const PositionsMoney* msg) {
  return *msg->_impl_.blocked_value_;
}
void PositionsMoney::clear_available_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.available_value_ != nullptr) {
    delete _impl_.available_value_;
  }
  _impl_.available_value_ = nullptr;
}
void PositionsMoney::clear_blocked_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.blocked_value_ != nullptr) {
    delete _impl_.blocked_value_;
  }
  _impl_.blocked_value_ = nullptr;
}
PositionsMoney::PositionsMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
}
PositionsMoney::PositionsMoney(const PositionsMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsMoney* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.available_value_){nullptr}
    , decltype(_impl_.blocked_value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_available_value()) {
    _this->_impl_.available_value_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.available_value_);
  }
  if (from._internal_has_blocked_value()) {
    _this->_impl_.blocked_value_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.blocked_value_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
}

inline void PositionsMoney::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.available_value_){nullptr}
    , decltype(_impl_.blocked_value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionsMoney::~PositionsMoney() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.available_value_;
  if (this != internal_default_instance()) delete _impl_.blocked_value_;
}

void PositionsMoney::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.available_value_ != nullptr) {
    delete _impl_.available_value_;
  }
  _impl_.available_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blocked_value_ != nullptr) {
    delete _impl_.blocked_value_;
  }
  _impl_.blocked_value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsMoney::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue available_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_available_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blocked_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionsMoney::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue available_value = 1;
  if (this->_internal_has_available_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::available_value(this),
        _Internal::available_value(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_value = 2;
  if (this->_internal_has_blocked_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blocked_value(this),
        _Internal::blocked_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
  return target;
}

size_t PositionsMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue available_value = 1;
  if (this->_internal_has_available_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.available_value_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_value = 2;
  if (this->_internal_has_blocked_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blocked_value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsMoney::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsMoney::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsMoney::GetClassData() const { return &_class_data_; }


void PositionsMoney::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsMoney*>(&to_msg);
  auto& from = static_cast<const PositionsMoney&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_available_value()) {
    _this->_internal_mutable_available_value()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_available_value());
  }
  if (from._internal_has_blocked_value()) {
    _this->_internal_mutable_blocked_value()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_blocked_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsMoney::CopyFrom(const PositionsMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsMoney::IsInitialized() const {
  return true;
}

void PositionsMoney::InternalSwap(PositionsMoney* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionsMoney, _impl_.blocked_value_)
      + sizeof(PositionsMoney::_impl_.blocked_value_)
      - PROTOBUF_FIELD_OFFSET(PositionsMoney, _impl_.available_value_)>(
          reinterpret_cast<char*>(&_impl_.available_value_),
          reinterpret_cast<char*>(&other->_impl_.available_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsMoney::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operations_2eproto_getter, &descriptor_table_operations_2eproto_once,
      file_level_metadata_operations_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OperationsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OperationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OperationsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Operation*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OperationTrade*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OperationTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OperationTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsFutures*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsOptions*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::BrokerReport*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::BrokerReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::BrokerReport >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OperationItem*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OperationItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OperationItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionData*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionData >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PositionsMoney*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
