// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

#include "users.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR GetAccountsRequest::GetAccountsRequest(
    ::_pbi::ConstantInitialized) {}
struct GetAccountsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountsRequestDefaultTypeInternal() {}
  union {
    GetAccountsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountsRequestDefaultTypeInternal _GetAccountsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAccountsResponse::GetAccountsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountsResponseDefaultTypeInternal() {}
  union {
    GetAccountsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountsResponseDefaultTypeInternal _GetAccountsResponse_default_instance_;
PROTOBUF_CONSTEXPR Account::Account(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.opened_date_)*/nullptr
  , /*decltype(_impl_.closed_date_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.access_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountDefaultTypeInternal _Account_default_instance_;
PROTOBUF_CONSTEXPR GetMarginAttributesRequest::GetMarginAttributesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMarginAttributesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMarginAttributesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMarginAttributesRequestDefaultTypeInternal() {}
  union {
    GetMarginAttributesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMarginAttributesRequestDefaultTypeInternal _GetMarginAttributesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMarginAttributesResponse::GetMarginAttributesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.liquid_portfolio_)*/nullptr
  , /*decltype(_impl_.starting_margin_)*/nullptr
  , /*decltype(_impl_.minimal_margin_)*/nullptr
  , /*decltype(_impl_.funds_sufficiency_level_)*/nullptr
  , /*decltype(_impl_.amount_of_missing_funds_)*/nullptr
  , /*decltype(_impl_.corrected_margin_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMarginAttributesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMarginAttributesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMarginAttributesResponseDefaultTypeInternal() {}
  union {
    GetMarginAttributesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMarginAttributesResponseDefaultTypeInternal _GetMarginAttributesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserTariffRequest::GetUserTariffRequest(
    ::_pbi::ConstantInitialized) {}
struct GetUserTariffRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserTariffRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserTariffRequestDefaultTypeInternal() {}
  union {
    GetUserTariffRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserTariffRequestDefaultTypeInternal _GetUserTariffRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserTariffResponse::GetUserTariffResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unary_limits_)*/{}
  , /*decltype(_impl_.stream_limits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserTariffResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserTariffResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserTariffResponseDefaultTypeInternal() {}
  union {
    GetUserTariffResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserTariffResponseDefaultTypeInternal _GetUserTariffResponse_default_instance_;
PROTOBUF_CONSTEXPR UnaryLimit::UnaryLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.methods_)*/{}
  , /*decltype(_impl_.limit_per_minute_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnaryLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnaryLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnaryLimitDefaultTypeInternal() {}
  union {
    UnaryLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnaryLimitDefaultTypeInternal _UnaryLimit_default_instance_;
PROTOBUF_CONSTEXPR StreamLimit::StreamLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.streams_)*/{}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.open_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamLimitDefaultTypeInternal() {}
  union {
    StreamLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamLimitDefaultTypeInternal _StreamLimit_default_instance_;
PROTOBUF_CONSTEXPR GetInfoRequest::GetInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct GetInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInfoRequestDefaultTypeInternal() {}
  union {
    GetInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInfoResponse::GetInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qualified_for_work_with_)*/{}
  , /*decltype(_impl_.tariff_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prem_status_)*/false
  , /*decltype(_impl_.qual_status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInfoResponseDefaultTypeInternal() {}
  union {
    GetInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_users_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_users_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_users_2eproto = nullptr;

const uint32_t TableStruct_users_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccountsResponse, _impl_.accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _impl_.opened_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _impl_.closed_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Account, _impl_.access_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesRequest, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse, _impl_.liquid_portfolio_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse, _impl_.starting_margin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse, _impl_.minimal_margin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse, _impl_.funds_sufficiency_level_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse, _impl_.amount_of_missing_funds_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse, _impl_.corrected_margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetUserTariffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetUserTariffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetUserTariffResponse, _impl_.unary_limits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetUserTariffResponse, _impl_.stream_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::UnaryLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::UnaryLimit, _impl_.limit_per_minute_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::UnaryLimit, _impl_.methods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StreamLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StreamLimit, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StreamLimit, _impl_.streams_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StreamLimit, _impl_.open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetInfoResponse, _impl_.prem_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetInfoResponse, _impl_.qual_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetInfoResponse, _impl_.qualified_for_work_with_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetInfoResponse, _impl_.tariff_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccountsRequest)},
  { 6, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccountsResponse)},
  { 13, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Account)},
  { 26, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesRequest)},
  { 33, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse)},
  { 45, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetUserTariffRequest)},
  { 51, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetUserTariffResponse)},
  { 59, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::UnaryLimit)},
  { 67, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::StreamLimit)},
  { 76, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetInfoRequest)},
  { 82, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetInfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_GetAccountsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAccountsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Account_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetMarginAttributesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetMarginAttributesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetUserTariffRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetUserTariffResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_UnaryLimit_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_StreamLimit_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetInfoRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetInfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_users_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013users.proto\022&tinkoff.public_.invest.ap"
  "i.contract.v1\032\037google/protobuf/timestamp"
  ".proto\032\037google/api/field_behavior.proto\032"
  "\014common.proto\"\024\n\022GetAccountsRequest\"X\n\023G"
  "etAccountsResponse\022A\n\010accounts\030\001 \003(\0132/.t"
  "inkoff.public_.invest.api.contract.v1.Ac"
  "count\"\332\002\n\007Account\022\n\n\002id\030\001 \001(\t\022A\n\004type\030\002 "
  "\001(\01623.tinkoff.public_.invest.api.contrac"
  "t.v1.AccountType\022\014\n\004name\030\003 \001(\t\022E\n\006status"
  "\030\004 \001(\01625.tinkoff.public_.invest.api.cont"
  "ract.v1.AccountStatus\022/\n\013opened_date\030\005 \001"
  "(\0132\032.google.protobuf.Timestamp\022/\n\013closed"
  "_date\030\006 \001(\0132\032.google.protobuf.Timestamp\022"
  "I\n\014access_level\030\007 \001(\01623.tinkoff.public_."
  "invest.api.contract.v1.AccessLevel\"5\n\032Ge"
  "tMarginAttributesRequest\022\027\n\naccount_id\030\001"
  " \001(\tB\003\340A\002\"\373\003\n\033GetMarginAttributesRespons"
  "e\022L\n\020liquid_portfolio\030\001 \001(\01322.tinkoff.pu"
  "blic_.invest.api.contract.v1.MoneyValue\022"
  "K\n\017starting_margin\030\002 \001(\01322.tinkoff.publi"
  "c_.invest.api.contract.v1.MoneyValue\022J\n\016"
  "minimal_margin\030\003 \001(\01322.tinkoff.public_.i"
  "nvest.api.contract.v1.MoneyValue\022R\n\027fund"
  "s_sufficiency_level\030\004 \001(\01321.tinkoff.publ"
  "ic_.invest.api.contract.v1.Quotation\022S\n\027"
  "amount_of_missing_funds\030\005 \001(\01322.tinkoff."
  "public_.invest.api.contract.v1.MoneyValu"
  "e\022L\n\020corrected_margin\030\006 \001(\01322.tinkoff.pu"
  "blic_.invest.api.contract.v1.MoneyValue\""
  "\026\n\024GetUserTariffRequest\"\255\001\n\025GetUserTarif"
  "fResponse\022H\n\014unary_limits\030\001 \003(\01322.tinkof"
  "f.public_.invest.api.contract.v1.UnaryLi"
  "mit\022J\n\rstream_limits\030\002 \003(\01323.tinkoff.pub"
  "lic_.invest.api.contract.v1.StreamLimit\""
  "7\n\nUnaryLimit\022\030\n\020limit_per_minute\030\001 \001(\005\022"
  "\017\n\007methods\030\002 \003(\t\";\n\013StreamLimit\022\r\n\005limit"
  "\030\001 \001(\005\022\017\n\007streams\030\002 \003(\t\022\014\n\004open\030\003 \001(\005\"\020\n"
  "\016GetInfoRequest\"l\n\017GetInfoResponse\022\023\n\013pr"
  "em_status\030\001 \001(\010\022\023\n\013qual_status\030\002 \001(\010\022\037\n\027"
  "qualified_for_work_with\030\003 \003(\t\022\016\n\006tariff\030"
  "\004 \001(\t*\200\001\n\013AccountType\022\034\n\030ACCOUNT_TYPE_UN"
  "SPECIFIED\020\000\022\030\n\024ACCOUNT_TYPE_TINKOFF\020\001\022\034\n"
  "\030ACCOUNT_TYPE_TINKOFF_IIS\020\002\022\033\n\027ACCOUNT_T"
  "YPE_INVEST_BOX\020\003*{\n\rAccountStatus\022\036\n\032ACC"
  "OUNT_STATUS_UNSPECIFIED\020\000\022\026\n\022ACCOUNT_STA"
  "TUS_NEW\020\001\022\027\n\023ACCOUNT_STATUS_OPEN\020\002\022\031\n\025AC"
  "COUNT_STATUS_CLOSED\020\003*\241\001\n\013AccessLevel\022$\n"
  " ACCOUNT_ACCESS_LEVEL_UNSPECIFIED\020\000\022$\n A"
  "CCOUNT_ACCESS_LEVEL_FULL_ACCESS\020\001\022\"\n\036ACC"
  "OUNT_ACCESS_LEVEL_READ_ONLY\020\002\022\"\n\036ACCOUNT"
  "_ACCESS_LEVEL_NO_ACCESS\020\0032\303\004\n\014UsersServi"
  "ce\022\206\001\n\013GetAccounts\022:.tinkoff.public_.inv"
  "est.api.contract.v1.GetAccountsRequest\032;"
  ".tinkoff.public_.invest.api.contract.v1."
  "GetAccountsResponse\022\236\001\n\023GetMarginAttribu"
  "tes\022B.tinkoff.public_.invest.api.contrac"
  "t.v1.GetMarginAttributesRequest\032C.tinkof"
  "f.public_.invest.api.contract.v1.GetMarg"
  "inAttributesResponse\022\214\001\n\rGetUserTariff\022<"
  ".tinkoff.public_.invest.api.contract.v1."
  "GetUserTariffRequest\032=.tinkoff.public_.i"
  "nvest.api.contract.v1.GetUserTariffRespo"
  "nse\022z\n\007GetInfo\0226.tinkoff.public_.invest."
  "api.contract.v1.GetInfoRequest\0327.tinkoff"
  ".public_.invest.api.contract.v1.GetInfoR"
  "esponseBa\n\034ru.tinkoff.piapi.contract.v1P"
  "\001Z\014./;investapi\242\002\005TIAPI\252\002\024Tinkoff.Invest"
  "Api.V1\312\002\021Tinkoff\\Invest\\V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_users_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_users_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_users_2eproto = {
    false, false, 2714, descriptor_table_protodef_users_2eproto,
    "users.proto",
    &descriptor_table_users_2eproto_once, descriptor_table_users_2eproto_deps, 3, 11,
    schemas, file_default_instances, TableStruct_users_2eproto::offsets,
    file_level_metadata_users_2eproto, file_level_enum_descriptors_users_2eproto,
    file_level_service_descriptors_users_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_users_2eproto_getter() {
  return &descriptor_table_users_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_users_2eproto(&descriptor_table_users_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_users_2eproto);
  return file_level_enum_descriptors_users_2eproto[0];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_users_2eproto);
  return file_level_enum_descriptors_users_2eproto[1];
}
bool AccountStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccessLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_users_2eproto);
  return file_level_enum_descriptors_users_2eproto[2];
}
bool AccessLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetAccountsRequest::_Internal {
 public:
};

GetAccountsRequest::GetAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAccountsRequest)
}
GetAccountsRequest::GetAccountsRequest(const GetAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetAccountsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAccountsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetAccountsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[0]);
}

// ===================================================================

class GetAccountsResponse::_Internal {
 public:
};

GetAccountsResponse::GetAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
}
GetAccountsResponse::GetAccountsResponse(const GetAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
}

inline void GetAccountsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAccountsResponse::~GetAccountsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accounts_.~RepeatedPtrField();
}

void GetAccountsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Account accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Account accounts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
  return target;
}

size_t GetAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Account accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->_impl_.accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountsResponse::GetClassData() const { return &_class_data_; }


void GetAccountsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountsResponse*>(&to_msg);
  auto& from = static_cast<const GetAccountsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountsResponse::CopyFrom(const GetAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountsResponse::IsInitialized() const {
  return true;
}

void GetAccountsResponse::InternalSwap(GetAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[1]);
}

// ===================================================================

class Account::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& opened_date(const Account* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& closed_date(const Account* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Account::_Internal::opened_date(const Account* msg) {
  return *msg->_impl_.opened_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Account::_Internal::closed_date(const Account* msg) {
  return *msg->_impl_.closed_date_;
}
void Account::clear_opened_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.opened_date_ != nullptr) {
    delete _impl_.opened_date_;
  }
  _impl_.opened_date_ = nullptr;
}
void Account::clear_closed_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.closed_date_ != nullptr) {
    delete _impl_.closed_date_;
  }
  _impl_.closed_date_ = nullptr;
}
Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Account* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.opened_date_){nullptr}
    , decltype(_impl_.closed_date_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.access_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_opened_date()) {
    _this->_impl_.opened_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.opened_date_);
  }
  if (from._internal_has_closed_date()) {
    _this->_impl_.closed_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.closed_date_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.access_level_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.access_level_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Account)
}

inline void Account::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.opened_date_){nullptr}
    , decltype(_impl_.closed_date_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.access_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Account)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.opened_date_;
  if (this != internal_default_instance()) delete _impl_.closed_date_;
}

void Account::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Account)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.opened_date_ != nullptr) {
    delete _impl_.opened_date_;
  }
  _impl_.opened_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.closed_date_ != nullptr) {
    delete _impl_.closed_date_;
  }
  _impl_.closed_date_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.access_level_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.access_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Account.id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AccountType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tinkoff::public_::invest::api::contract::v1::AccountType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Account.name"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AccountStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::tinkoff::public_::invest::api::contract::v1::AccountStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp opened_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opened_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp closed_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_closed_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AccessLevel access_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_access_level(static_cast<::tinkoff::public_::invest::api::contract::v1::AccessLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Account::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Account)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Account.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AccountType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Account.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AccountStatus status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp opened_date = 5;
  if (this->_internal_has_opened_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::opened_date(this),
        _Internal::opened_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp closed_date = 6;
  if (this->_internal_has_closed_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::closed_date(this),
        _Internal::closed_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.AccessLevel access_level = 7;
  if (this->_internal_access_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_access_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Account)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp opened_date = 5;
  if (this->_internal_has_opened_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opened_date_);
  }

  // .google.protobuf.Timestamp closed_date = 6;
  if (this->_internal_has_closed_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.closed_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.AccountType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.AccountStatus status = 4;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.AccessLevel access_level = 7;
  if (this->_internal_access_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_access_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Account::GetClassData() const { return &_class_data_; }


void Account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Account*>(&to_msg);
  auto& from = static_cast<const Account&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Account)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_opened_date()) {
    _this->_internal_mutable_opened_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_opened_date());
  }
  if (from._internal_has_closed_date()) {
    _this->_internal_mutable_closed_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_closed_date());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_access_level() != 0) {
    _this->_internal_set_access_level(from._internal_access_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, _impl_.access_level_)
      + sizeof(Account::_impl_.access_level_)
      - PROTOBUF_FIELD_OFFSET(Account, _impl_.opened_date_)>(
          reinterpret_cast<char*>(&_impl_.opened_date_),
          reinterpret_cast<char*>(&other->_impl_.opened_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[2]);
}

// ===================================================================

class GetMarginAttributesRequest::_Internal {
 public:
};

GetMarginAttributesRequest::GetMarginAttributesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
}
GetMarginAttributesRequest::GetMarginAttributesRequest(const GetMarginAttributesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMarginAttributesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
}

inline void GetMarginAttributesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMarginAttributesRequest::~GetMarginAttributesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMarginAttributesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void GetMarginAttributesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMarginAttributesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMarginAttributesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMarginAttributesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
  return target;
}

size_t GetMarginAttributesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMarginAttributesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMarginAttributesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMarginAttributesRequest::GetClassData() const { return &_class_data_; }


void GetMarginAttributesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMarginAttributesRequest*>(&to_msg);
  auto& from = static_cast<const GetMarginAttributesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMarginAttributesRequest::CopyFrom(const GetMarginAttributesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMarginAttributesRequest::IsInitialized() const {
  return true;
}

void GetMarginAttributesRequest::InternalSwap(GetMarginAttributesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMarginAttributesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[3]);
}

// ===================================================================

class GetMarginAttributesResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& liquid_portfolio(const GetMarginAttributesResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& starting_margin(const GetMarginAttributesResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& minimal_margin(const GetMarginAttributesResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& funds_sufficiency_level(const GetMarginAttributesResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& amount_of_missing_funds(const GetMarginAttributesResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& corrected_margin(const GetMarginAttributesResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetMarginAttributesResponse::_Internal::liquid_portfolio(const GetMarginAttributesResponse* msg) {
  return *msg->_impl_.liquid_portfolio_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetMarginAttributesResponse::_Internal::starting_margin(const GetMarginAttributesResponse* msg) {
  return *msg->_impl_.starting_margin_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetMarginAttributesResponse::_Internal::minimal_margin(const GetMarginAttributesResponse* msg) {
  return *msg->_impl_.minimal_margin_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetMarginAttributesResponse::_Internal::funds_sufficiency_level(const GetMarginAttributesResponse* msg) {
  return *msg->_impl_.funds_sufficiency_level_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetMarginAttributesResponse::_Internal::amount_of_missing_funds(const GetMarginAttributesResponse* msg) {
  return *msg->_impl_.amount_of_missing_funds_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetMarginAttributesResponse::_Internal::corrected_margin(const GetMarginAttributesResponse* msg) {
  return *msg->_impl_.corrected_margin_;
}
void GetMarginAttributesResponse::clear_liquid_portfolio() {
  if (GetArenaForAllocation() == nullptr && _impl_.liquid_portfolio_ != nullptr) {
    delete _impl_.liquid_portfolio_;
  }
  _impl_.liquid_portfolio_ = nullptr;
}
void GetMarginAttributesResponse::clear_starting_margin() {
  if (GetArenaForAllocation() == nullptr && _impl_.starting_margin_ != nullptr) {
    delete _impl_.starting_margin_;
  }
  _impl_.starting_margin_ = nullptr;
}
void GetMarginAttributesResponse::clear_minimal_margin() {
  if (GetArenaForAllocation() == nullptr && _impl_.minimal_margin_ != nullptr) {
    delete _impl_.minimal_margin_;
  }
  _impl_.minimal_margin_ = nullptr;
}
void GetMarginAttributesResponse::clear_funds_sufficiency_level() {
  if (GetArenaForAllocation() == nullptr && _impl_.funds_sufficiency_level_ != nullptr) {
    delete _impl_.funds_sufficiency_level_;
  }
  _impl_.funds_sufficiency_level_ = nullptr;
}
void GetMarginAttributesResponse::clear_amount_of_missing_funds() {
  if (GetArenaForAllocation() == nullptr && _impl_.amount_of_missing_funds_ != nullptr) {
    delete _impl_.amount_of_missing_funds_;
  }
  _impl_.amount_of_missing_funds_ = nullptr;
}
void GetMarginAttributesResponse::clear_corrected_margin() {
  if (GetArenaForAllocation() == nullptr && _impl_.corrected_margin_ != nullptr) {
    delete _impl_.corrected_margin_;
  }
  _impl_.corrected_margin_ = nullptr;
}
GetMarginAttributesResponse::GetMarginAttributesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
}
GetMarginAttributesResponse::GetMarginAttributesResponse(const GetMarginAttributesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMarginAttributesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.liquid_portfolio_){nullptr}
    , decltype(_impl_.starting_margin_){nullptr}
    , decltype(_impl_.minimal_margin_){nullptr}
    , decltype(_impl_.funds_sufficiency_level_){nullptr}
    , decltype(_impl_.amount_of_missing_funds_){nullptr}
    , decltype(_impl_.corrected_margin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_liquid_portfolio()) {
    _this->_impl_.liquid_portfolio_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.liquid_portfolio_);
  }
  if (from._internal_has_starting_margin()) {
    _this->_impl_.starting_margin_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.starting_margin_);
  }
  if (from._internal_has_minimal_margin()) {
    _this->_impl_.minimal_margin_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.minimal_margin_);
  }
  if (from._internal_has_funds_sufficiency_level()) {
    _this->_impl_.funds_sufficiency_level_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.funds_sufficiency_level_);
  }
  if (from._internal_has_amount_of_missing_funds()) {
    _this->_impl_.amount_of_missing_funds_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.amount_of_missing_funds_);
  }
  if (from._internal_has_corrected_margin()) {
    _this->_impl_.corrected_margin_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.corrected_margin_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
}

inline void GetMarginAttributesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.liquid_portfolio_){nullptr}
    , decltype(_impl_.starting_margin_){nullptr}
    , decltype(_impl_.minimal_margin_){nullptr}
    , decltype(_impl_.funds_sufficiency_level_){nullptr}
    , decltype(_impl_.amount_of_missing_funds_){nullptr}
    , decltype(_impl_.corrected_margin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMarginAttributesResponse::~GetMarginAttributesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMarginAttributesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.liquid_portfolio_;
  if (this != internal_default_instance()) delete _impl_.starting_margin_;
  if (this != internal_default_instance()) delete _impl_.minimal_margin_;
  if (this != internal_default_instance()) delete _impl_.funds_sufficiency_level_;
  if (this != internal_default_instance()) delete _impl_.amount_of_missing_funds_;
  if (this != internal_default_instance()) delete _impl_.corrected_margin_;
}

void GetMarginAttributesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMarginAttributesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.liquid_portfolio_ != nullptr) {
    delete _impl_.liquid_portfolio_;
  }
  _impl_.liquid_portfolio_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.starting_margin_ != nullptr) {
    delete _impl_.starting_margin_;
  }
  _impl_.starting_margin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.minimal_margin_ != nullptr) {
    delete _impl_.minimal_margin_;
  }
  _impl_.minimal_margin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.funds_sufficiency_level_ != nullptr) {
    delete _impl_.funds_sufficiency_level_;
  }
  _impl_.funds_sufficiency_level_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.amount_of_missing_funds_ != nullptr) {
    delete _impl_.amount_of_missing_funds_;
  }
  _impl_.amount_of_missing_funds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.corrected_margin_ != nullptr) {
    delete _impl_.corrected_margin_;
  }
  _impl_.corrected_margin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMarginAttributesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue liquid_portfolio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquid_portfolio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue starting_margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_starting_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue minimal_margin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimal_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation funds_sufficiency_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds_sufficiency_level(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount_of_missing_funds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount_of_missing_funds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue corrected_margin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_corrected_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMarginAttributesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue liquid_portfolio = 1;
  if (this->_internal_has_liquid_portfolio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::liquid_portfolio(this),
        _Internal::liquid_portfolio(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue starting_margin = 2;
  if (this->_internal_has_starting_margin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::starting_margin(this),
        _Internal::starting_margin(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue minimal_margin = 3;
  if (this->_internal_has_minimal_margin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::minimal_margin(this),
        _Internal::minimal_margin(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation funds_sufficiency_level = 4;
  if (this->_internal_has_funds_sufficiency_level()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::funds_sufficiency_level(this),
        _Internal::funds_sufficiency_level(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount_of_missing_funds = 5;
  if (this->_internal_has_amount_of_missing_funds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::amount_of_missing_funds(this),
        _Internal::amount_of_missing_funds(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue corrected_margin = 6;
  if (this->_internal_has_corrected_margin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::corrected_margin(this),
        _Internal::corrected_margin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
  return target;
}

size_t GetMarginAttributesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue liquid_portfolio = 1;
  if (this->_internal_has_liquid_portfolio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.liquid_portfolio_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue starting_margin = 2;
  if (this->_internal_has_starting_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.starting_margin_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue minimal_margin = 3;
  if (this->_internal_has_minimal_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.minimal_margin_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation funds_sufficiency_level = 4;
  if (this->_internal_has_funds_sufficiency_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.funds_sufficiency_level_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue amount_of_missing_funds = 5;
  if (this->_internal_has_amount_of_missing_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_of_missing_funds_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue corrected_margin = 6;
  if (this->_internal_has_corrected_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.corrected_margin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMarginAttributesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMarginAttributesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMarginAttributesResponse::GetClassData() const { return &_class_data_; }


void GetMarginAttributesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMarginAttributesResponse*>(&to_msg);
  auto& from = static_cast<const GetMarginAttributesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_liquid_portfolio()) {
    _this->_internal_mutable_liquid_portfolio()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_liquid_portfolio());
  }
  if (from._internal_has_starting_margin()) {
    _this->_internal_mutable_starting_margin()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_starting_margin());
  }
  if (from._internal_has_minimal_margin()) {
    _this->_internal_mutable_minimal_margin()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_minimal_margin());
  }
  if (from._internal_has_funds_sufficiency_level()) {
    _this->_internal_mutable_funds_sufficiency_level()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_funds_sufficiency_level());
  }
  if (from._internal_has_amount_of_missing_funds()) {
    _this->_internal_mutable_amount_of_missing_funds()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_amount_of_missing_funds());
  }
  if (from._internal_has_corrected_margin()) {
    _this->_internal_mutable_corrected_margin()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_corrected_margin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMarginAttributesResponse::CopyFrom(const GetMarginAttributesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetMarginAttributesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMarginAttributesResponse::IsInitialized() const {
  return true;
}

void GetMarginAttributesResponse::InternalSwap(GetMarginAttributesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMarginAttributesResponse, _impl_.corrected_margin_)
      + sizeof(GetMarginAttributesResponse::_impl_.corrected_margin_)
      - PROTOBUF_FIELD_OFFSET(GetMarginAttributesResponse, _impl_.liquid_portfolio_)>(
          reinterpret_cast<char*>(&_impl_.liquid_portfolio_),
          reinterpret_cast<char*>(&other->_impl_.liquid_portfolio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMarginAttributesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[4]);
}

// ===================================================================

class GetUserTariffRequest::_Internal {
 public:
};

GetUserTariffRequest::GetUserTariffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetUserTariffRequest)
}
GetUserTariffRequest::GetUserTariffRequest(const GetUserTariffRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetUserTariffRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetUserTariffRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserTariffRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserTariffRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetUserTariffRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[5]);
}

// ===================================================================

class GetUserTariffResponse::_Internal {
 public:
};

GetUserTariffResponse::GetUserTariffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
}
GetUserTariffResponse::GetUserTariffResponse(const GetUserTariffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserTariffResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unary_limits_){from._impl_.unary_limits_}
    , decltype(_impl_.stream_limits_){from._impl_.stream_limits_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
}

inline void GetUserTariffResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unary_limits_){arena}
    , decltype(_impl_.stream_limits_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetUserTariffResponse::~GetUserTariffResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserTariffResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unary_limits_.~RepeatedPtrField();
  _impl_.stream_limits_.~RepeatedPtrField();
}

void GetUserTariffResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserTariffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unary_limits_.Clear();
  _impl_.stream_limits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserTariffResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.UnaryLimit unary_limits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unary_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.StreamLimit stream_limits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserTariffResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.UnaryLimit unary_limits = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unary_limits_size()); i < n; i++) {
    const auto& repfield = this->_internal_unary_limits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.StreamLimit stream_limits = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_limits_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream_limits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
  return target;
}

size_t GetUserTariffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.UnaryLimit unary_limits = 1;
  total_size += 1UL * this->_internal_unary_limits_size();
  for (const auto& msg : this->_impl_.unary_limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.StreamLimit stream_limits = 2;
  total_size += 1UL * this->_internal_stream_limits_size();
  for (const auto& msg : this->_impl_.stream_limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserTariffResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserTariffResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserTariffResponse::GetClassData() const { return &_class_data_; }


void GetUserTariffResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserTariffResponse*>(&to_msg);
  auto& from = static_cast<const GetUserTariffResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unary_limits_.MergeFrom(from._impl_.unary_limits_);
  _this->_impl_.stream_limits_.MergeFrom(from._impl_.stream_limits_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserTariffResponse::CopyFrom(const GetUserTariffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetUserTariffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTariffResponse::IsInitialized() const {
  return true;
}

void GetUserTariffResponse::InternalSwap(GetUserTariffResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unary_limits_.InternalSwap(&other->_impl_.unary_limits_);
  _impl_.stream_limits_.InternalSwap(&other->_impl_.stream_limits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserTariffResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[6]);
}

// ===================================================================

class UnaryLimit::_Internal {
 public:
};

UnaryLimit::UnaryLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
}
UnaryLimit::UnaryLimit(const UnaryLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnaryLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.methods_){from._impl_.methods_}
    , decltype(_impl_.limit_per_minute_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.limit_per_minute_ = from._impl_.limit_per_minute_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
}

inline void UnaryLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.methods_){arena}
    , decltype(_impl_.limit_per_minute_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnaryLimit::~UnaryLimit() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnaryLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.methods_.~RepeatedPtrField();
}

void UnaryLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnaryLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.methods_.Clear();
  _impl_.limit_per_minute_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnaryLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 limit_per_minute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string methods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_methods();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.UnaryLimit.methods"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnaryLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit_per_minute = 1;
  if (this->_internal_limit_per_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit_per_minute(), target);
  }

  // repeated string methods = 2;
  for (int i = 0, n = this->_internal_methods_size(); i < n; i++) {
    const auto& s = this->_internal_methods(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.UnaryLimit.methods");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
  return target;
}

size_t UnaryLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string methods = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.methods_.size());
  for (int i = 0, n = _impl_.methods_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.methods_.Get(i));
  }

  // int32 limit_per_minute = 1;
  if (this->_internal_limit_per_minute() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit_per_minute());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnaryLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnaryLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnaryLimit::GetClassData() const { return &_class_data_; }


void UnaryLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnaryLimit*>(&to_msg);
  auto& from = static_cast<const UnaryLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.methods_.MergeFrom(from._impl_.methods_);
  if (from._internal_limit_per_minute() != 0) {
    _this->_internal_set_limit_per_minute(from._internal_limit_per_minute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnaryLimit::CopyFrom(const UnaryLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.UnaryLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryLimit::IsInitialized() const {
  return true;
}

void UnaryLimit::InternalSwap(UnaryLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.methods_.InternalSwap(&other->_impl_.methods_);
  swap(_impl_.limit_per_minute_, other->_impl_.limit_per_minute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnaryLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[7]);
}

// ===================================================================

class StreamLimit::_Internal {
 public:
};

StreamLimit::StreamLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.StreamLimit)
}
StreamLimit::StreamLimit(const StreamLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.streams_){from._impl_.streams_}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.open_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.open_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.open_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.StreamLimit)
}

inline void StreamLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.streams_){arena}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.open_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamLimit::~StreamLimit() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.StreamLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.streams_.~RepeatedPtrField();
}

void StreamLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.StreamLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.streams_.Clear();
  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.open_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string streams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_streams();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.StreamLimit.streams"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.StreamLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit(), target);
  }

  // repeated string streams = 2;
  for (int i = 0, n = this->_internal_streams_size(); i < n; i++) {
    const auto& s = this->_internal_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.StreamLimit.streams");
    target = stream->WriteString(2, s, target);
  }

  // int32 open = 3;
  if (this->_internal_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.StreamLimit)
  return target;
}

size_t StreamLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.StreamLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string streams = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.streams_.size());
  for (int i = 0, n = _impl_.streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.streams_.Get(i));
  }

  // int32 limit = 1;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 open = 3;
  if (this->_internal_open() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_open());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamLimit::GetClassData() const { return &_class_data_; }


void StreamLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamLimit*>(&to_msg);
  auto& from = static_cast<const StreamLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.StreamLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.streams_.MergeFrom(from._impl_.streams_);
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_open() != 0) {
    _this->_internal_set_open(from._internal_open());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamLimit::CopyFrom(const StreamLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.StreamLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamLimit::IsInitialized() const {
  return true;
}

void StreamLimit::InternalSwap(StreamLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.streams_.InternalSwap(&other->_impl_.streams_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamLimit, _impl_.open_)
      + sizeof(StreamLimit::_impl_.open_)
      - PROTOBUF_FIELD_OFFSET(StreamLimit, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[8]);
}

// ===================================================================

class GetInfoRequest::_Internal {
 public:
};

GetInfoRequest::GetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(const GetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[9]);
}

// ===================================================================

class GetInfoResponse::_Internal {
 public:
};

GetInfoResponse::GetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
}
GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qualified_for_work_with_){from._impl_.qualified_for_work_with_}
    , decltype(_impl_.tariff_){}
    , decltype(_impl_.prem_status_){}
    , decltype(_impl_.qual_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tariff_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tariff_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tariff().empty()) {
    _this->_impl_.tariff_.Set(from._internal_tariff(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.prem_status_, &from._impl_.prem_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.qual_status_) -
    reinterpret_cast<char*>(&_impl_.prem_status_)) + sizeof(_impl_.qual_status_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
}

inline void GetInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qualified_for_work_with_){arena}
    , decltype(_impl_.tariff_){}
    , decltype(_impl_.prem_status_){false}
    , decltype(_impl_.qual_status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tariff_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tariff_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qualified_for_work_with_.~RepeatedPtrField();
  _impl_.tariff_.Destroy();
}

void GetInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qualified_for_work_with_.Clear();
  _impl_.tariff_.ClearToEmpty();
  ::memset(&_impl_.prem_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.qual_status_) -
      reinterpret_cast<char*>(&_impl_.prem_status_)) + sizeof(_impl_.qual_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool prem_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.prem_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool qual_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.qual_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string qualified_for_work_with = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_qualified_for_work_with();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetInfoResponse.qualified_for_work_with"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string tariff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tariff();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetInfoResponse.tariff"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool prem_status = 1;
  if (this->_internal_prem_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_prem_status(), target);
  }

  // bool qual_status = 2;
  if (this->_internal_qual_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_qual_status(), target);
  }

  // repeated string qualified_for_work_with = 3;
  for (int i = 0, n = this->_internal_qualified_for_work_with_size(); i < n; i++) {
    const auto& s = this->_internal_qualified_for_work_with(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetInfoResponse.qualified_for_work_with");
    target = stream->WriteString(3, s, target);
  }

  // string tariff = 4;
  if (!this->_internal_tariff().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tariff().data(), static_cast<int>(this->_internal_tariff().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetInfoResponse.tariff");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tariff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
  return target;
}

size_t GetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string qualified_for_work_with = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.qualified_for_work_with_.size());
  for (int i = 0, n = _impl_.qualified_for_work_with_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.qualified_for_work_with_.Get(i));
  }

  // string tariff = 4;
  if (!this->_internal_tariff().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tariff());
  }

  // bool prem_status = 1;
  if (this->_internal_prem_status() != 0) {
    total_size += 1 + 1;
  }

  // bool qual_status = 2;
  if (this->_internal_qual_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInfoResponse::GetClassData() const { return &_class_data_; }


void GetInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qualified_for_work_with_.MergeFrom(from._impl_.qualified_for_work_with_);
  if (!from._internal_tariff().empty()) {
    _this->_internal_set_tariff(from._internal_tariff());
  }
  if (from._internal_prem_status() != 0) {
    _this->_internal_set_prem_status(from._internal_prem_status());
  }
  if (from._internal_qual_status() != 0) {
    _this->_internal_set_qual_status(from._internal_qual_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  return true;
}

void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.qualified_for_work_with_.InternalSwap(&other->_impl_.qualified_for_work_with_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tariff_, lhs_arena,
      &other->_impl_.tariff_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetInfoResponse, _impl_.qual_status_)
      + sizeof(GetInfoResponse::_impl_.qual_status_)
      - PROTOBUF_FIELD_OFFSET(GetInfoResponse, _impl_.prem_status_)>(
          reinterpret_cast<char*>(&_impl_.prem_status_),
          reinterpret_cast<char*>(&other->_impl_.prem_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_users_2eproto_getter, &descriptor_table_users_2eproto_once,
      file_level_metadata_users_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAccountsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAccountsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Account*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetMarginAttributesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetUserTariffRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetUserTariffRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetUserTariffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetUserTariffResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetUserTariffResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetUserTariffResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::UnaryLimit*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::UnaryLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::UnaryLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::StreamLimit*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::StreamLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::StreamLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetInfoRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetInfoResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
