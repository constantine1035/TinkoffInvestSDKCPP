// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: instruments.proto

#include "instruments.pb.h"
#include "instruments.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

static const char* InstrumentsService_method_names[] = {
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/TradingSchedules",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/BondBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/Bonds",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetBondCoupons",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetBondEvents",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/CurrencyBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/Currencies",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/EtfBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/Etfs",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/FutureBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/Futures",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/OptionBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/Options",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/OptionsBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/ShareBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/Shares",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/Indicatives",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetAccruedInterests",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetFuturesMargin",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetInstrumentBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetDividends",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetAssetBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetAssets",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetFavorites",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/EditFavorites",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetCountries",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/FindInstrument",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetBrands",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetBrandBy",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetAssetFundamentals",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetAssetReports",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetConsensusForecasts",
  "/tinkoff.public_.invest.api.contract.v1.InstrumentsService/GetForecastBy",
};

std::unique_ptr< InstrumentsService::Stub> InstrumentsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InstrumentsService::Stub> stub(new InstrumentsService::Stub(channel, options));
  return stub;
}

InstrumentsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TradingSchedules_(InstrumentsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BondBy_(InstrumentsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Bonds_(InstrumentsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBondCoupons_(InstrumentsService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBondEvents_(InstrumentsService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrencyBy_(InstrumentsService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Currencies_(InstrumentsService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EtfBy_(InstrumentsService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Etfs_(InstrumentsService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FutureBy_(InstrumentsService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Futures_(InstrumentsService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OptionBy_(InstrumentsService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Options_(InstrumentsService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OptionsBy_(InstrumentsService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShareBy_(InstrumentsService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shares_(InstrumentsService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Indicatives_(InstrumentsService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccruedInterests_(InstrumentsService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFuturesMargin_(InstrumentsService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstrumentBy_(InstrumentsService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDividends_(InstrumentsService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetBy_(InstrumentsService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssets_(InstrumentsService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFavorites_(InstrumentsService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditFavorites_(InstrumentsService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCountries_(InstrumentsService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindInstrument_(InstrumentsService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBrands_(InstrumentsService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBrandBy_(InstrumentsService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetFundamentals_(InstrumentsService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetReports_(InstrumentsService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConsensusForecasts_(InstrumentsService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetForecastBy_(InstrumentsService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InstrumentsService::Stub::TradingSchedules(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest& request, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradingSchedules_, context, request, response);
}

void InstrumentsService::Stub::async::TradingSchedules(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest* request, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradingSchedules_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::TradingSchedules(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest* request, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradingSchedules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse>* InstrumentsService::Stub::PrepareAsyncTradingSchedulesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradingSchedules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse>* InstrumentsService::Stub::AsyncTradingSchedulesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradingSchedulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::BondBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::BondResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::BondResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BondBy_, context, request, response);
}

void InstrumentsService::Stub::async::BondBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::BondResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::BondResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BondBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::BondBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::BondResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BondBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::BondResponse>* InstrumentsService::Stub::PrepareAsyncBondByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::BondResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BondBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::BondResponse>* InstrumentsService::Stub::AsyncBondByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBondByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::Bonds(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::tinkoff::public_::invest::api::contract::v1::BondsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::BondsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Bonds_, context, request, response);
}

void InstrumentsService::Stub::async::Bonds(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::BondsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::BondsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Bonds_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::Bonds(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::BondsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Bonds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::BondsResponse>* InstrumentsService::Stub::PrepareAsyncBondsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::BondsResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Bonds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::BondsResponse>* InstrumentsService::Stub::AsyncBondsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBondsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetBondCoupons(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBondCoupons_, context, request, response);
}

void InstrumentsService::Stub::async::GetBondCoupons(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBondCoupons_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetBondCoupons(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBondCoupons_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse>* InstrumentsService::Stub::PrepareAsyncGetBondCouponsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBondCoupons_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse>* InstrumentsService::Stub::AsyncGetBondCouponsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBondCouponsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetBondEvents(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBondEvents_, context, request, response);
}

void InstrumentsService::Stub::async::GetBondEvents(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBondEvents_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetBondEvents(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBondEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse>* InstrumentsService::Stub::PrepareAsyncGetBondEventsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBondEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse>* InstrumentsService::Stub::AsyncGetBondEventsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBondEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::CurrencyBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurrencyBy_, context, request, response);
}

void InstrumentsService::Stub::async::CurrencyBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrencyBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::CurrencyBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrencyBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse>* InstrumentsService::Stub::PrepareAsyncCurrencyByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurrencyBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse>* InstrumentsService::Stub::AsyncCurrencyByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurrencyByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::Currencies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Currencies_, context, request, response);
}

void InstrumentsService::Stub::async::Currencies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Currencies_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::Currencies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Currencies_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse>* InstrumentsService::Stub::PrepareAsyncCurrenciesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Currencies_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse>* InstrumentsService::Stub::AsyncCurrenciesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurrenciesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::EtfBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::EtfResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::EtfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EtfBy_, context, request, response);
}

void InstrumentsService::Stub::async::EtfBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::EtfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::EtfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EtfBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::EtfBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::EtfResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EtfBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::EtfResponse>* InstrumentsService::Stub::PrepareAsyncEtfByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::EtfResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EtfBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::EtfResponse>* InstrumentsService::Stub::AsyncEtfByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEtfByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::Etfs(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::tinkoff::public_::invest::api::contract::v1::EtfsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::EtfsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Etfs_, context, request, response);
}

void InstrumentsService::Stub::async::Etfs(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::EtfsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::EtfsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Etfs_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::Etfs(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::EtfsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Etfs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::EtfsResponse>* InstrumentsService::Stub::PrepareAsyncEtfsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::EtfsResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Etfs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::EtfsResponse>* InstrumentsService::Stub::AsyncEtfsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEtfsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::FutureBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::FutureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::FutureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FutureBy_, context, request, response);
}

void InstrumentsService::Stub::async::FutureBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::FutureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::FutureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FutureBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::FutureBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::FutureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FutureBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::FutureResponse>* InstrumentsService::Stub::PrepareAsyncFutureByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::FutureResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FutureBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::FutureResponse>* InstrumentsService::Stub::AsyncFutureByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFutureByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::Futures(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::tinkoff::public_::invest::api::contract::v1::FuturesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::FuturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Futures_, context, request, response);
}

void InstrumentsService::Stub::async::Futures(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::FuturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::FuturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Futures_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::Futures(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::FuturesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Futures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::FuturesResponse>* InstrumentsService::Stub::PrepareAsyncFuturesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::FuturesResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Futures_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::FuturesResponse>* InstrumentsService::Stub::AsyncFuturesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFuturesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::OptionBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::OptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::OptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OptionBy_, context, request, response);
}

void InstrumentsService::Stub::async::OptionBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::OptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptionBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::OptionBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptionBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::OptionResponse>* InstrumentsService::Stub::PrepareAsyncOptionByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::OptionResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OptionBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::OptionResponse>* InstrumentsService::Stub::AsyncOptionByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptionByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::Options(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Options_, context, request, response);
}

void InstrumentsService::Stub::async::Options(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Options_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::Options(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Options_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse>* InstrumentsService::Stub::PrepareAsyncOptionsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Options_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse>* InstrumentsService::Stub::AsyncOptionsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::OptionsBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest& request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OptionsBy_, context, request, response);
}

void InstrumentsService::Stub::async::OptionsBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptionsBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::OptionsBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptionsBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse>* InstrumentsService::Stub::PrepareAsyncOptionsByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OptionsBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse>* InstrumentsService::Stub::AsyncOptionsByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptionsByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::ShareBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::ShareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::ShareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShareBy_, context, request, response);
}

void InstrumentsService::Stub::async::ShareBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::ShareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::ShareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::ShareBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::ShareResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::ShareResponse>* InstrumentsService::Stub::PrepareAsyncShareByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::ShareResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShareBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::ShareResponse>* InstrumentsService::Stub::AsyncShareByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShareByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::Shares(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::tinkoff::public_::invest::api::contract::v1::SharesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::SharesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shares_, context, request, response);
}

void InstrumentsService::Stub::async::Shares(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::SharesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::SharesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shares_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::Shares(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::SharesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shares_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::SharesResponse>* InstrumentsService::Stub::PrepareAsyncSharesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::SharesResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shares_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::SharesResponse>* InstrumentsService::Stub::AsyncSharesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSharesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::Indicatives(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest& request, ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest, ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Indicatives_, context, request, response);
}

void InstrumentsService::Stub::async::Indicatives(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest* request, ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest, ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Indicatives_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::Indicatives(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest* request, ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Indicatives_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse>* InstrumentsService::Stub::PrepareAsyncIndicativesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Indicatives_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse>* InstrumentsService::Stub::AsyncIndicativesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndicativesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetAccruedInterests(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccruedInterests_, context, request, response);
}

void InstrumentsService::Stub::async::GetAccruedInterests(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccruedInterests_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetAccruedInterests(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccruedInterests_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse>* InstrumentsService::Stub::PrepareAsyncGetAccruedInterestsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccruedInterests_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse>* InstrumentsService::Stub::AsyncGetAccruedInterestsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccruedInterestsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetFuturesMargin(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFuturesMargin_, context, request, response);
}

void InstrumentsService::Stub::async::GetFuturesMargin(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFuturesMargin_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetFuturesMargin(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFuturesMargin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse>* InstrumentsService::Stub::PrepareAsyncGetFuturesMarginRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFuturesMargin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse>* InstrumentsService::Stub::AsyncGetFuturesMarginRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFuturesMarginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetInstrumentBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInstrumentBy_, context, request, response);
}

void InstrumentsService::Stub::async::GetInstrumentBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInstrumentBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetInstrumentBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInstrumentBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse>* InstrumentsService::Stub::PrepareAsyncGetInstrumentByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInstrumentBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse>* InstrumentsService::Stub::AsyncGetInstrumentByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInstrumentByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetDividends(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDividends_, context, request, response);
}

void InstrumentsService::Stub::async::GetDividends(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDividends_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetDividends(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDividends_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse>* InstrumentsService::Stub::PrepareAsyncGetDividendsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDividends_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse>* InstrumentsService::Stub::AsyncGetDividendsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDividendsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetAssetBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetRequest& request, ::tinkoff::public_::invest::api::contract::v1::AssetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::AssetRequest, ::tinkoff::public_::invest::api::contract::v1::AssetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetBy_, context, request, response);
}

void InstrumentsService::Stub::async::GetAssetBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetRequest* request, ::tinkoff::public_::invest::api::contract::v1::AssetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::AssetRequest, ::tinkoff::public_::invest::api::contract::v1::AssetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetAssetBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetRequest* request, ::tinkoff::public_::invest::api::contract::v1::AssetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::AssetResponse>* InstrumentsService::Stub::PrepareAsyncGetAssetByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::AssetResponse, ::tinkoff::public_::invest::api::contract::v1::AssetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::AssetResponse>* InstrumentsService::Stub::AsyncGetAssetByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetAssets(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetsRequest& request, ::tinkoff::public_::invest::api::contract::v1::AssetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::AssetsRequest, ::tinkoff::public_::invest::api::contract::v1::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssets_, context, request, response);
}

void InstrumentsService::Stub::async::GetAssets(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetsRequest* request, ::tinkoff::public_::invest::api::contract::v1::AssetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::AssetsRequest, ::tinkoff::public_::invest::api::contract::v1::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssets_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetAssets(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetsRequest* request, ::tinkoff::public_::invest::api::contract::v1::AssetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::AssetsResponse>* InstrumentsService::Stub::PrepareAsyncGetAssetsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::AssetsResponse, ::tinkoff::public_::invest::api::contract::v1::AssetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::AssetsResponse>* InstrumentsService::Stub::AsyncGetAssetsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetFavorites(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFavorites_, context, request, response);
}

void InstrumentsService::Stub::async::GetFavorites(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFavorites_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetFavorites(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFavorites_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse>* InstrumentsService::Stub::PrepareAsyncGetFavoritesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFavorites_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse>* InstrumentsService::Stub::AsyncGetFavoritesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFavoritesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::EditFavorites(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest& request, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditFavorites_, context, request, response);
}

void InstrumentsService::Stub::async::EditFavorites(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest* request, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditFavorites_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::EditFavorites(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest* request, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditFavorites_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse>* InstrumentsService::Stub::PrepareAsyncEditFavoritesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditFavorites_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse>* InstrumentsService::Stub::AsyncEditFavoritesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditFavoritesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetCountries(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCountries_, context, request, response);
}

void InstrumentsService::Stub::async::GetCountries(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCountries_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetCountries(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCountries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse>* InstrumentsService::Stub::PrepareAsyncGetCountriesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCountries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse>* InstrumentsService::Stub::AsyncGetCountriesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCountriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::FindInstrument(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest& request, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindInstrument_, context, request, response);
}

void InstrumentsService::Stub::async::FindInstrument(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindInstrument_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::FindInstrument(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindInstrument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse>* InstrumentsService::Stub::PrepareAsyncFindInstrumentRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindInstrument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse>* InstrumentsService::Stub::AsyncFindInstrumentRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindInstrumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetBrands(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBrands_, context, request, response);
}

void InstrumentsService::Stub::async::GetBrands(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrands_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetBrands(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrands_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse>* InstrumentsService::Stub::PrepareAsyncGetBrandsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBrands_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse>* InstrumentsService::Stub::AsyncGetBrandsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBrandsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetBrandBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest& request, ::tinkoff::public_::invest::api::contract::v1::Brand* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, ::tinkoff::public_::invest::api::contract::v1::Brand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBrandBy_, context, request, response);
}

void InstrumentsService::Stub::async::GetBrandBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest* request, ::tinkoff::public_::invest::api::contract::v1::Brand* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, ::tinkoff::public_::invest::api::contract::v1::Brand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrandBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetBrandBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest* request, ::tinkoff::public_::invest::api::contract::v1::Brand* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrandBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::Brand>* InstrumentsService::Stub::PrepareAsyncGetBrandByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::Brand, ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBrandBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::Brand>* InstrumentsService::Stub::AsyncGetBrandByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBrandByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetAssetFundamentals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetFundamentals_, context, request, response);
}

void InstrumentsService::Stub::async::GetAssetFundamentals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetFundamentals_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetAssetFundamentals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetFundamentals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse>* InstrumentsService::Stub::PrepareAsyncGetAssetFundamentalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetFundamentals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse>* InstrumentsService::Stub::AsyncGetAssetFundamentalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetFundamentalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetAssetReports(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetReports_, context, request, response);
}

void InstrumentsService::Stub::async::GetAssetReports(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetReports_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetAssetReports(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetReports_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse>* InstrumentsService::Stub::PrepareAsyncGetAssetReportsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetReports_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse>* InstrumentsService::Stub::AsyncGetAssetReportsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetReportsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetConsensusForecasts(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConsensusForecasts_, context, request, response);
}

void InstrumentsService::Stub::async::GetConsensusForecasts(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConsensusForecasts_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetConsensusForecasts(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConsensusForecasts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse>* InstrumentsService::Stub::PrepareAsyncGetConsensusForecastsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConsensusForecasts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse>* InstrumentsService::Stub::AsyncGetConsensusForecastsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConsensusForecastsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstrumentsService::Stub::GetForecastBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetForecastBy_, context, request, response);
}

void InstrumentsService::Stub::async::GetForecastBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetForecastBy_, context, request, response, std::move(f));
}

void InstrumentsService::Stub::async::GetForecastBy(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetForecastBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse>* InstrumentsService::Stub::PrepareAsyncGetForecastByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetForecastBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse>* InstrumentsService::Stub::AsyncGetForecastByRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetForecastByRaw(context, request, cq);
  result->StartCall();
  return result;
}

InstrumentsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse* resp) {
               return service->TradingSchedules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::BondResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::BondResponse* resp) {
               return service->BondBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::BondsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::BondsResponse* resp) {
               return service->Bonds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse* resp) {
               return service->GetBondCoupons(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse* resp) {
               return service->GetBondEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse* resp) {
               return service->CurrencyBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse* resp) {
               return service->Currencies(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::EtfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::EtfResponse* resp) {
               return service->EtfBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::EtfsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::EtfsResponse* resp) {
               return service->Etfs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::FutureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::FutureResponse* resp) {
               return service->FutureBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::FuturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::FuturesResponse* resp) {
               return service->Futures(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::OptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::OptionResponse* resp) {
               return service->OptionBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* resp) {
               return service->Options(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* resp) {
               return service->OptionsBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::ShareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::ShareResponse* resp) {
               return service->ShareBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, ::tinkoff::public_::invest::api::contract::v1::SharesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::SharesResponse* resp) {
               return service->Shares(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest, ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse* resp) {
               return service->Indicatives(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse* resp) {
               return service->GetAccruedInterests(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse* resp) {
               return service->GetFuturesMargin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse* resp) {
               return service->GetInstrumentBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse* resp) {
               return service->GetDividends(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::AssetRequest, ::tinkoff::public_::invest::api::contract::v1::AssetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::AssetRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::AssetResponse* resp) {
               return service->GetAssetBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::AssetsRequest, ::tinkoff::public_::invest::api::contract::v1::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::AssetsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::AssetsResponse* resp) {
               return service->GetAssets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse* resp) {
               return service->GetFavorites(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse* resp) {
               return service->EditFavorites(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse* resp) {
               return service->GetCountries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse* resp) {
               return service->FindInstrument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse* resp) {
               return service->GetBrands(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, ::tinkoff::public_::invest::api::contract::v1::Brand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::Brand* resp) {
               return service->GetBrandBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse* resp) {
               return service->GetAssetFundamentals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse* resp) {
               return service->GetAssetReports(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse* resp) {
               return service->GetConsensusForecasts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstrumentsService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstrumentsService::Service, ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstrumentsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse* resp) {
               return service->GetForecastBy(ctx, req, resp);
             }, this)));
}

InstrumentsService::Service::~Service() {
}

::grpc::Status InstrumentsService::Service::TradingSchedules(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest* request, ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::BondBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::BondResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::Bonds(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::BondsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetBondCoupons(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetBondEvents(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::CurrencyBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::Currencies(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::EtfBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::EtfResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::Etfs(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::EtfsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::FutureBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::FutureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::Futures(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::FuturesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::OptionBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::Options(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::OptionsBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest* request, ::tinkoff::public_::invest::api::contract::v1::OptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::ShareBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::ShareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::Shares(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest* request, ::tinkoff::public_::invest::api::contract::v1::SharesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::Indicatives(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest* request, ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetAccruedInterests(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetFuturesMargin(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetInstrumentBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetDividends(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetAssetBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetRequest* request, ::tinkoff::public_::invest::api::contract::v1::AssetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetAssets(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::AssetsRequest* request, ::tinkoff::public_::invest::api::contract::v1::AssetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetFavorites(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::EditFavorites(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest* request, ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetCountries(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::FindInstrument(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest* request, ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetBrands(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetBrandBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest* request, ::tinkoff::public_::invest::api::contract::v1::Brand* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetAssetFundamentals(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetAssetReports(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetConsensusForecasts(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstrumentsService::Service::GetForecastBy(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinkoff
}  // namespace public_
}  // namespace invest
}  // namespace api
}  // namespace contract
}  // namespace v1

