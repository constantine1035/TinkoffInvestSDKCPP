// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stoporders.proto

#include "stoporders.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR PostStopOrderRequest_TrailingData::PostStopOrderRequest_TrailingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indent_)*/nullptr
  , /*decltype(_impl_.spread_)*/nullptr
  , /*decltype(_impl_.indent_type_)*/0
  , /*decltype(_impl_.spread_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostStopOrderRequest_TrailingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostStopOrderRequest_TrailingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostStopOrderRequest_TrailingDataDefaultTypeInternal() {}
  union {
    PostStopOrderRequest_TrailingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostStopOrderRequest_TrailingDataDefaultTypeInternal _PostStopOrderRequest_TrailingData_default_instance_;
PROTOBUF_CONSTEXPR PostStopOrderRequest::PostStopOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.stop_price_)*/nullptr
  , /*decltype(_impl_.expire_date_)*/nullptr
  , /*decltype(_impl_.trailing_data_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.expiration_type_)*/0
  , /*decltype(_impl_.stop_order_type_)*/0
  , /*decltype(_impl_.exchange_order_type_)*/0
  , /*decltype(_impl_.take_profit_type_)*/0
  , /*decltype(_impl_.price_type_)*/0} {}
struct PostStopOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostStopOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostStopOrderRequestDefaultTypeInternal() {}
  union {
    PostStopOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostStopOrderRequestDefaultTypeInternal _PostStopOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR PostStopOrderResponse::PostStopOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostStopOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostStopOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostStopOrderResponseDefaultTypeInternal() {}
  union {
    PostStopOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostStopOrderResponseDefaultTypeInternal _PostStopOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStopOrdersRequest::GetStopOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStopOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStopOrdersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStopOrdersRequestDefaultTypeInternal() {}
  union {
    GetStopOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStopOrdersRequestDefaultTypeInternal _GetStopOrdersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStopOrdersResponse::GetStopOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStopOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStopOrdersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStopOrdersResponseDefaultTypeInternal() {}
  union {
    GetStopOrdersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStopOrdersResponseDefaultTypeInternal _GetStopOrdersResponse_default_instance_;
PROTOBUF_CONSTEXPR CancelStopOrderRequest::CancelStopOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelStopOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelStopOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelStopOrderRequestDefaultTypeInternal() {}
  union {
    CancelStopOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelStopOrderRequestDefaultTypeInternal _CancelStopOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelStopOrderResponse::CancelStopOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelStopOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelStopOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelStopOrderResponseDefaultTypeInternal() {}
  union {
    CancelStopOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelStopOrderResponseDefaultTypeInternal _CancelStopOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR StopOrder_TrailingData::StopOrder_TrailingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indent_)*/nullptr
  , /*decltype(_impl_.spread_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.extr_)*/nullptr
  , /*decltype(_impl_.indent_type_)*/0
  , /*decltype(_impl_.spread_type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopOrder_TrailingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopOrder_TrailingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopOrder_TrailingDataDefaultTypeInternal() {}
  union {
    StopOrder_TrailingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopOrder_TrailingDataDefaultTypeInternal _StopOrder_TrailingData_default_instance_;
PROTOBUF_CONSTEXPR StopOrder::StopOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_date_)*/nullptr
  , /*decltype(_impl_.activation_date_time_)*/nullptr
  , /*decltype(_impl_.expiration_time_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.stop_price_)*/nullptr
  , /*decltype(_impl_.trailing_data_)*/nullptr
  , /*decltype(_impl_.lots_requested_)*/int64_t{0}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.take_profit_type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopOrderDefaultTypeInternal() {}
  union {
    StopOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopOrderDefaultTypeInternal _StopOrder_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_stoporders_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_stoporders_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_stoporders_2eproto = nullptr;

const uint32_t TableStruct_stoporders_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData, _impl_.indent_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData, _impl_.indent_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData, _impl_.spread_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData, _impl_.spread_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.stop_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.expiration_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.stop_order_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.expire_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.exchange_order_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.take_profit_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.trailing_data_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.price_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest, _impl_.order_id_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse, _impl_.stop_order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse, _impl_.order_request_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse, _impl_.response_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest, _impl_.to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse, _impl_.stop_orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest, _impl_.stop_order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _impl_.indent_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _impl_.indent_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _impl_.spread_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _impl_.spread_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData, _impl_.extr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.stop_order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.lots_requested_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.create_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.activation_date_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.expiration_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.stop_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.take_profit_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.trailing_data_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::StopOrder, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData)},
  { 10, 31, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest)},
  { 46, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse)},
  { 55, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest)},
  { 65, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse)},
  { 72, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest)},
  { 80, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse)},
  { 87, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData)},
  { 100, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::StopOrder)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_PostStopOrderRequest_TrailingData_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PostStopOrderRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PostStopOrderResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetStopOrdersRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetStopOrdersResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CancelStopOrderRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CancelStopOrderResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_StopOrder_TrailingData_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_StopOrder_default_instance_._instance,
};

const char descriptor_table_protodef_stoporders_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020stoporders.proto\022&tinkoff.public_.inve"
  "st.api.contract.v1\032\037google/protobuf/time"
  "stamp.proto\032\037google/api/field_behavior.p"
  "roto\032\014common.proto\"\235\n\n\024PostStopOrderRequ"
  "est\022\025\n\004figi\030\001 \001(\tB\002\030\001H\000\210\001\001\022\025\n\010quantity\030\002"
  " \001(\003B\003\340A\002\022E\n\005price\030\003 \001(\01321.tinkoff.publi"
  "c_.invest.api.contract.v1.QuotationH\001\210\001\001"
  "\022J\n\nstop_price\030\004 \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.QuotationH\002\210\001\001\022R\n\t"
  "direction\030\005 \001(\0162:.tinkoff.public_.invest"
  ".api.contract.v1.StopOrderDirectionB\003\340A\002"
  "\022\027\n\naccount_id\030\006 \001(\tB\003\340A\002\022]\n\017expiration_"
  "type\030\007 \001(\0162\?.tinkoff.public_.invest.api."
  "contract.v1.StopOrderExpirationTypeB\003\340A\002"
  "\022S\n\017stop_order_type\030\010 \001(\01625.tinkoff.publ"
  "ic_.invest.api.contract.v1.StopOrderType"
  "B\003\340A\002\0224\n\013expire_date\030\t \001(\0132\032.google.prot"
  "obuf.TimestampH\003\210\001\001\022\032\n\rinstrument_id\030\n \001"
  "(\tB\003\340A\002\022V\n\023exchange_order_type\030\013 \001(\01629.t"
  "inkoff.public_.invest.api.contract.v1.Ex"
  "changeOrderType\022P\n\020take_profit_type\030\014 \001("
  "\01626.tinkoff.public_.invest.api.contract."
  "v1.TakeProfitType\022`\n\rtrailing_data\030\r \001(\013"
  "2I.tinkoff.public_.invest.api.contract.v"
  "1.PostStopOrderRequest.TrailingData\022E\n\np"
  "rice_type\030\016 \001(\01621.tinkoff.public_.invest"
  ".api.contract.v1.PriceType\022\025\n\010order_id\030\017"
  " \001(\tB\003\340A\002\032\264\002\n\014TrailingData\022A\n\006indent\030\001 \001"
  "(\01321.tinkoff.public_.invest.api.contract"
  ".v1.Quotation\022N\n\013indent_type\030\002 \001(\01629.tin"
  "koff.public_.invest.api.contract.v1.Trai"
  "lingValueType\022A\n\006spread\030\003 \001(\01321.tinkoff."
  "public_.invest.api.contract.v1.Quotation"
  "\022N\n\013spread_type\030\004 \001(\01629.tinkoff.public_."
  "invest.api.contract.v1.TrailingValueType"
  "B\007\n\005_figiB\010\n\006_priceB\r\n\013_stop_priceB\016\n\014_e"
  "xpire_date\"\236\001\n\025PostStopOrderResponse\022\025\n\r"
  "stop_order_id\030\001 \001(\t\022\030\n\020order_request_id\030"
  "\002 \001(\t\022T\n\021response_metadata\030\376\001 \001(\01328.tink"
  "off.public_.invest.api.contract.v1.Respo"
  "nseMetadata\"\320\001\n\024GetStopOrdersRequest\022\027\n\n"
  "account_id\030\001 \001(\tB\003\340A\002\022M\n\006status\030\002 \001(\0162=."
  "tinkoff.public_.invest.api.contract.v1.S"
  "topOrderStatusOption\022(\n\004from\030\003 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022&\n\002to\030\004 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\"_\n\025GetStopOrdersR"
  "esponse\022F\n\013stop_orders\030\001 \003(\01321.tinkoff.p"
  "ublic_.invest.api.contract.v1.StopOrder\""
  "M\n\026CancelStopOrderRequest\022\027\n\naccount_id\030"
  "\001 \001(\tB\003\340A\002\022\032\n\rstop_order_id\030\002 \001(\tB\003\340A\002\"C"
  "\n\027CancelStopOrderResponse\022(\n\004time\030\001 \001(\0132"
  "\032.google.protobuf.Timestamp\"\265\n\n\tStopOrde"
  "r\022\025\n\rstop_order_id\030\001 \001(\t\022\026\n\016lots_request"
  "ed\030\002 \001(\003\022\014\n\004figi\030\003 \001(\t\022M\n\tdirection\030\004 \001("
  "\0162:.tinkoff.public_.invest.api.contract."
  "v1.StopOrderDirection\022\020\n\010currency\030\005 \001(\t\022"
  "I\n\norder_type\030\006 \001(\01625.tinkoff.public_.in"
  "vest.api.contract.v1.StopOrderType\022/\n\013cr"
  "eate_date\030\007 \001(\0132\032.google.protobuf.Timest"
  "amp\0228\n\024activation_date_time\030\010 \001(\0132\032.goog"
  "le.protobuf.Timestamp\0223\n\017expiration_time"
  "\030\t \001(\0132\032.google.protobuf.Timestamp\022A\n\005pr"
  "ice\030\n \001(\01322.tinkoff.public_.invest.api.c"
  "ontract.v1.MoneyValue\022F\n\nstop_price\030\013 \001("
  "\01322.tinkoff.public_.invest.api.contract."
  "v1.MoneyValue\022\026\n\016instrument_uid\030\014 \001(\t\022P\n"
  "\020take_profit_type\030\r \001(\01626.tinkoff.public"
  "_.invest.api.contract.v1.TakeProfitType\022"
  "U\n\rtrailing_data\030\016 \001(\0132>.tinkoff.public_"
  ".invest.api.contract.v1.StopOrder.Traili"
  "ngData\022M\n\006status\030\017 \001(\0162=.tinkoff.public_"
  ".invest.api.contract.v1.StopOrderStatusO"
  "ption\032\203\004\n\014TrailingData\022A\n\006indent\030\001 \001(\01321"
  ".tinkoff.public_.invest.api.contract.v1."
  "Quotation\022N\n\013indent_type\030\002 \001(\01629.tinkoff"
  ".public_.invest.api.contract.v1.Trailing"
  "ValueType\022A\n\006spread\030\003 \001(\01321.tinkoff.publ"
  "ic_.invest.api.contract.v1.Quotation\022N\n\013"
  "spread_type\030\004 \001(\01629.tinkoff.public_.inve"
  "st.api.contract.v1.TrailingValueType\022J\n\006"
  "status\030\005 \001(\0162:.tinkoff.public_.invest.ap"
  "i.contract.v1.TrailingStopStatus\022@\n\005pric"
  "e\030\007 \001(\01321.tinkoff.public_.invest.api.con"
  "tract.v1.Quotation\022\?\n\004extr\030\010 \001(\01321.tinko"
  "ff.public_.invest.api.contract.v1.Quotat"
  "ion*w\n\022StopOrderDirection\022$\n STOP_ORDER_"
  "DIRECTION_UNSPECIFIED\020\000\022\034\n\030STOP_ORDER_DI"
  "RECTION_BUY\020\001\022\035\n\031STOP_ORDER_DIRECTION_SE"
  "LL\020\002*\245\001\n\027StopOrderExpirationType\022*\n&STOP"
  "_ORDER_EXPIRATION_TYPE_UNSPECIFIED\020\000\022/\n+"
  "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CAN"
  "CEL\020\001\022-\n)STOP_ORDER_EXPIRATION_TYPE_GOOD"
  "_TILL_DATE\020\002*\220\001\n\rStopOrderType\022\037\n\033STOP_O"
  "RDER_TYPE_UNSPECIFIED\020\000\022\037\n\033STOP_ORDER_TY"
  "PE_TAKE_PROFIT\020\001\022\035\n\031STOP_ORDER_TYPE_STOP"
  "_LOSS\020\002\022\036\n\032STOP_ORDER_TYPE_STOP_LIMIT\020\003*"
  "\322\001\n\025StopOrderStatusOption\022!\n\035STOP_ORDER_"
  "STATUS_UNSPECIFIED\020\000\022\031\n\025STOP_ORDER_STATU"
  "S_ALL\020\001\022\034\n\030STOP_ORDER_STATUS_ACTIVE\020\002\022\036\n"
  "\032STOP_ORDER_STATUS_EXECUTED\020\003\022\036\n\032STOP_OR"
  "DER_STATUS_CANCELED\020\004\022\035\n\031STOP_ORDER_STAT"
  "US_EXPIRED\020\005*w\n\021ExchangeOrderType\022#\n\037EXC"
  "HANGE_ORDER_TYPE_UNSPECIFIED\020\000\022\036\n\032EXCHAN"
  "GE_ORDER_TYPE_MARKET\020\001\022\035\n\031EXCHANGE_ORDER"
  "_TYPE_LIMIT\020\002*o\n\016TakeProfitType\022 \n\034TAKE_"
  "PROFIT_TYPE_UNSPECIFIED\020\000\022\034\n\030TAKE_PROFIT"
  "_TYPE_REGULAR\020\001\022\035\n\031TAKE_PROFIT_TYPE_TRAI"
  "LING\020\002*m\n\021TrailingValueType\022\036\n\032TRAILING_"
  "VALUE_UNSPECIFIED\020\000\022\033\n\027TRAILING_VALUE_AB"
  "SOLUTE\020\001\022\033\n\027TRAILING_VALUE_RELATIVE\020\002*j\n"
  "\022TrailingStopStatus\022\035\n\031TRAILING_STOP_UNS"
  "PECIFIED\020\000\022\030\n\024TRAILING_STOP_ACTIVE\020\001\022\033\n\027"
  "TRAILING_STOP_ACTIVATED\020\0022\306\003\n\021StopOrders"
  "Service\022\214\001\n\rPostStopOrder\022<.tinkoff.publ"
  "ic_.invest.api.contract.v1.PostStopOrder"
  "Request\032=.tinkoff.public_.invest.api.con"
  "tract.v1.PostStopOrderResponse\022\214\001\n\rGetSt"
  "opOrders\022<.tinkoff.public_.invest.api.co"
  "ntract.v1.GetStopOrdersRequest\032=.tinkoff"
  ".public_.invest.api.contract.v1.GetStopO"
  "rdersResponse\022\222\001\n\017CancelStopOrder\022>.tink"
  "off.public_.invest.api.contract.v1.Cance"
  "lStopOrderRequest\032\?.tinkoff.public_.inve"
  "st.api.contract.v1.CancelStopOrderRespon"
  "seBa\n\034ru.tinkoff.piapi.contract.v1P\001Z\014./"
  ";investapi\242\002\005TIAPI\252\002\024Tinkoff.InvestApi.V"
  "1\312\002\021Tinkoff\\Invest\\V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_stoporders_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_stoporders_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_stoporders_2eproto = {
    false, false, 5069, descriptor_table_protodef_stoporders_2eproto,
    "stoporders.proto",
    &descriptor_table_stoporders_2eproto_once, descriptor_table_stoporders_2eproto_deps, 3, 9,
    schemas, file_default_instances, TableStruct_stoporders_2eproto::offsets,
    file_level_metadata_stoporders_2eproto, file_level_enum_descriptors_stoporders_2eproto,
    file_level_service_descriptors_stoporders_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_stoporders_2eproto_getter() {
  return &descriptor_table_stoporders_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_stoporders_2eproto(&descriptor_table_stoporders_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[0];
}
bool StopOrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderExpirationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[1];
}
bool StopOrderExpirationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[2];
}
bool StopOrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopOrderStatusOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[3];
}
bool StopOrderStatusOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExchangeOrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[4];
}
bool ExchangeOrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TakeProfitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[5];
}
bool TakeProfitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrailingValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[6];
}
bool TrailingValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrailingStopStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stoporders_2eproto);
  return file_level_enum_descriptors_stoporders_2eproto[7];
}
bool TrailingStopStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PostStopOrderRequest_TrailingData::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& indent(const PostStopOrderRequest_TrailingData* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& spread(const PostStopOrderRequest_TrailingData* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PostStopOrderRequest_TrailingData::_Internal::indent(const PostStopOrderRequest_TrailingData* msg) {
  return *msg->_impl_.indent_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PostStopOrderRequest_TrailingData::_Internal::spread(const PostStopOrderRequest_TrailingData* msg) {
  return *msg->_impl_.spread_;
}
void PostStopOrderRequest_TrailingData::clear_indent() {
  if (GetArenaForAllocation() == nullptr && _impl_.indent_ != nullptr) {
    delete _impl_.indent_;
  }
  _impl_.indent_ = nullptr;
}
void PostStopOrderRequest_TrailingData::clear_spread() {
  if (GetArenaForAllocation() == nullptr && _impl_.spread_ != nullptr) {
    delete _impl_.spread_;
  }
  _impl_.spread_ = nullptr;
}
PostStopOrderRequest_TrailingData::PostStopOrderRequest_TrailingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
}
PostStopOrderRequest_TrailingData::PostStopOrderRequest_TrailingData(const PostStopOrderRequest_TrailingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostStopOrderRequest_TrailingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indent_){nullptr}
    , decltype(_impl_.spread_){nullptr}
    , decltype(_impl_.indent_type_){}
    , decltype(_impl_.spread_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_indent()) {
    _this->_impl_.indent_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.indent_);
  }
  if (from._internal_has_spread()) {
    _this->_impl_.spread_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.spread_);
  }
  ::memcpy(&_impl_.indent_type_, &from._impl_.indent_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spread_type_) -
    reinterpret_cast<char*>(&_impl_.indent_type_)) + sizeof(_impl_.spread_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
}

inline void PostStopOrderRequest_TrailingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indent_){nullptr}
    , decltype(_impl_.spread_){nullptr}
    , decltype(_impl_.indent_type_){0}
    , decltype(_impl_.spread_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostStopOrderRequest_TrailingData::~PostStopOrderRequest_TrailingData() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostStopOrderRequest_TrailingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.indent_;
  if (this != internal_default_instance()) delete _impl_.spread_;
}

void PostStopOrderRequest_TrailingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostStopOrderRequest_TrailingData::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.indent_ != nullptr) {
    delete _impl_.indent_;
  }
  _impl_.indent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spread_ != nullptr) {
    delete _impl_.spread_;
  }
  _impl_.spread_ = nullptr;
  ::memset(&_impl_.indent_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.spread_type_) -
      reinterpret_cast<char*>(&_impl_.indent_type_)) + sizeof(_impl_.spread_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostStopOrderRequest_TrailingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_indent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_indent_type(static_cast<::tinkoff::public_::invest::api::contract::v1::TrailingValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spread(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_spread_type(static_cast<::tinkoff::public_::invest::api::contract::v1::TrailingValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStopOrderRequest_TrailingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
  if (this->_internal_has_indent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::indent(this),
        _Internal::indent(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
  if (this->_internal_indent_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_indent_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
  if (this->_internal_has_spread()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spread(this),
        _Internal::spread(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
  if (this->_internal_spread_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_spread_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
  return target;
}

size_t PostStopOrderRequest_TrailingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
  if (this->_internal_has_indent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indent_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
  if (this->_internal_has_spread()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spread_);
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
  if (this->_internal_indent_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_indent_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
  if (this->_internal_spread_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_spread_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostStopOrderRequest_TrailingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostStopOrderRequest_TrailingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostStopOrderRequest_TrailingData::GetClassData() const { return &_class_data_; }


void PostStopOrderRequest_TrailingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostStopOrderRequest_TrailingData*>(&to_msg);
  auto& from = static_cast<const PostStopOrderRequest_TrailingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_indent()) {
    _this->_internal_mutable_indent()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_indent());
  }
  if (from._internal_has_spread()) {
    _this->_internal_mutable_spread()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_spread());
  }
  if (from._internal_indent_type() != 0) {
    _this->_internal_set_indent_type(from._internal_indent_type());
  }
  if (from._internal_spread_type() != 0) {
    _this->_internal_set_spread_type(from._internal_spread_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostStopOrderRequest_TrailingData::CopyFrom(const PostStopOrderRequest_TrailingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStopOrderRequest_TrailingData::IsInitialized() const {
  return true;
}

void PostStopOrderRequest_TrailingData::InternalSwap(PostStopOrderRequest_TrailingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostStopOrderRequest_TrailingData, _impl_.spread_type_)
      + sizeof(PostStopOrderRequest_TrailingData::_impl_.spread_type_)
      - PROTOBUF_FIELD_OFFSET(PostStopOrderRequest_TrailingData, _impl_.indent_)>(
          reinterpret_cast<char*>(&_impl_.indent_),
          reinterpret_cast<char*>(&other->_impl_.indent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStopOrderRequest_TrailingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[0]);
}

// ===================================================================

class PostStopOrderRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PostStopOrderRequest>()._impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const PostStopOrderRequest* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& stop_price(const PostStopOrderRequest* msg);
  static void set_has_stop_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_date(const PostStopOrderRequest* msg);
  static void set_has_expire_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData& trailing_data(const PostStopOrderRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PostStopOrderRequest::_Internal::price(const PostStopOrderRequest* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PostStopOrderRequest::_Internal::stop_price(const PostStopOrderRequest* msg) {
  return *msg->_impl_.stop_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PostStopOrderRequest::_Internal::expire_date(const PostStopOrderRequest* msg) {
  return *msg->_impl_.expire_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData&
PostStopOrderRequest::_Internal::trailing_data(const PostStopOrderRequest* msg) {
  return *msg->_impl_.trailing_data_;
}
void PostStopOrderRequest::clear_price() {
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PostStopOrderRequest::clear_stop_price() {
  if (_impl_.stop_price_ != nullptr) _impl_.stop_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PostStopOrderRequest::clear_expire_date() {
  if (_impl_.expire_date_ != nullptr) _impl_.expire_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PostStopOrderRequest::PostStopOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
}
PostStopOrderRequest::PostStopOrderRequest(const PostStopOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostStopOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.expire_date_){nullptr}
    , decltype(_impl_.trailing_data_){nullptr}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.expiration_type_){}
    , decltype(_impl_.stop_order_type_){}
    , decltype(_impl_.exchange_order_type_){}
    , decltype(_impl_.take_profit_type_){}
    , decltype(_impl_.price_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  if (from._internal_has_stop_price()) {
    _this->_impl_.stop_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.stop_price_);
  }
  if (from._internal_has_expire_date()) {
    _this->_impl_.expire_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expire_date_);
  }
  if (from._internal_has_trailing_data()) {
    _this->_impl_.trailing_data_ = new ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData(*from._impl_.trailing_data_);
  }
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_type_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.price_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
}

inline void PostStopOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.expire_date_){nullptr}
    , decltype(_impl_.trailing_data_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.expiration_type_){0}
    , decltype(_impl_.stop_order_type_){0}
    , decltype(_impl_.exchange_order_type_){0}
    , decltype(_impl_.take_profit_type_){0}
    , decltype(_impl_.price_type_){0}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostStopOrderRequest::~PostStopOrderRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostStopOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.order_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.stop_price_;
  if (this != internal_default_instance()) delete _impl_.expire_date_;
  if (this != internal_default_instance()) delete _impl_.trailing_data_;
}

void PostStopOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostStopOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.figi_.ClearNonDefaultToEmpty();
  }
  _impl_.account_id_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.price_ != nullptr);
      _impl_.price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stop_price_ != nullptr);
      _impl_.stop_price_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.expire_date_ != nullptr);
      _impl_.expire_date_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.trailing_data_ != nullptr) {
    delete _impl_.trailing_data_;
  }
  _impl_.trailing_data_ = nullptr;
  ::memset(&_impl_.quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_type_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.price_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostStopOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation stop_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 5 [(.google.api.field_behavior) = REQUIRED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::StopOrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // string account_id = 6 [(.google.api.field_behavior) = REQUIRED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrderExpirationType expiration_type = 7 [(.google.api.field_behavior) = REQUIRED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_expiration_type(static_cast<::tinkoff::public_::invest::api::contract::v1::StopOrderExpirationType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrderType stop_order_type = 8 [(.google.api.field_behavior) = REQUIRED];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stop_order_type(static_cast<::tinkoff::public_::invest::api::contract::v1::StopOrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp expire_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 10 [(.google.api.field_behavior) = REQUIRED];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.ExchangeOrderType exchange_order_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchange_order_type(static_cast<::tinkoff::public_::invest::api::contract::v1::ExchangeOrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_take_profit_type(static_cast<::tinkoff::public_::invest::api::contract::v1::TakeProfitType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData trailing_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_trailing_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_price_type(static_cast<::tinkoff::public_::invest::api::contract::v1::PriceType>(val));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 15 [(.google.api.field_behavior) = REQUIRED];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.order_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStopOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation stop_price = 4;
  if (_internal_has_stop_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stop_price(this),
        _Internal::stop_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_direction(), target);
  }

  // string account_id = 6 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_account_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderExpirationType expiration_type = 7 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_expiration_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_expiration_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderType stop_order_type = 8 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_stop_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_stop_order_type(), target);
  }

  // optional .google.protobuf.Timestamp expire_date = 9;
  if (_internal_has_expire_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::expire_date(this),
        _Internal::expire_date(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 10 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_instrument_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.ExchangeOrderType exchange_order_type = 11;
  if (this->_internal_exchange_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_exchange_order_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 12;
  if (this->_internal_take_profit_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_take_profit_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData trailing_data = 13;
  if (this->_internal_has_trailing_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::trailing_data(this),
        _Internal::trailing_data(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 14;
  if (this->_internal_price_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_price_type(), target);
  }

  // string order_id = 15 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
  return target;
}

size_t PostStopOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string account_id = 6 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string instrument_id = 10 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string order_id = 15 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.price_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation stop_price = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_price_);
    }

    // optional .google.protobuf.Timestamp expire_date = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expire_date_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest.TrailingData trailing_data = 13;
  if (this->_internal_has_trailing_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trailing_data_);
  }

  // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderExpirationType expiration_type = 7 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_expiration_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_expiration_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderType stop_order_type = 8 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_stop_order_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stop_order_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.ExchangeOrderType exchange_order_type = 11;
  if (this->_internal_exchange_order_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exchange_order_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 12;
  if (this->_internal_take_profit_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_take_profit_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 14;
  if (this->_internal_price_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_price_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostStopOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostStopOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostStopOrderRequest::GetClassData() const { return &_class_data_; }


void PostStopOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostStopOrderRequest*>(&to_msg);
  auto& from = static_cast<const PostStopOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_figi()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stop_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_stop_price());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_expire_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_expire_date());
    }
  }
  if (from._internal_has_trailing_data()) {
    _this->_internal_mutable_trailing_data()->::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData::MergeFrom(
        from._internal_trailing_data());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_expiration_type() != 0) {
    _this->_internal_set_expiration_type(from._internal_expiration_type());
  }
  if (from._internal_stop_order_type() != 0) {
    _this->_internal_set_stop_order_type(from._internal_stop_order_type());
  }
  if (from._internal_exchange_order_type() != 0) {
    _this->_internal_set_exchange_order_type(from._internal_exchange_order_type());
  }
  if (from._internal_take_profit_type() != 0) {
    _this->_internal_set_take_profit_type(from._internal_take_profit_type());
  }
  if (from._internal_price_type() != 0) {
    _this->_internal_set_price_type(from._internal_price_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostStopOrderRequest::CopyFrom(const PostStopOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStopOrderRequest::IsInitialized() const {
  return true;
}

void PostStopOrderRequest::InternalSwap(PostStopOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostStopOrderRequest, _impl_.price_type_)
      + sizeof(PostStopOrderRequest::_impl_.price_type_)
      - PROTOBUF_FIELD_OFFSET(PostStopOrderRequest, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStopOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[1]);
}

// ===================================================================

class PostStopOrderResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& response_metadata(const PostStopOrderResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata&
PostStopOrderResponse::_Internal::response_metadata(const PostStopOrderResponse* msg) {
  return *msg->_impl_.response_metadata_;
}
void PostStopOrderResponse::clear_response_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
}
PostStopOrderResponse::PostStopOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
}
PostStopOrderResponse::PostStopOrderResponse(const PostStopOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostStopOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_order_id_){}
    , decltype(_impl_.order_request_id_){}
    , decltype(_impl_.response_metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stop_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_order_id().empty()) {
    _this->_impl_.stop_order_id_.Set(from._internal_stop_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_request_id().empty()) {
    _this->_impl_.order_request_id_.Set(from._internal_order_request_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response_metadata()) {
    _this->_impl_.response_metadata_ = new ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata(*from._impl_.response_metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
}

inline void PostStopOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_order_id_){}
    , decltype(_impl_.order_request_id_){}
    , decltype(_impl_.response_metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stop_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostStopOrderResponse::~PostStopOrderResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostStopOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_order_id_.Destroy();
  _impl_.order_request_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_metadata_;
}

void PostStopOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostStopOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_order_id_.ClearToEmpty();
  _impl_.order_request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostStopOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stop_order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stop_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.stop_order_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.order_request_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStopOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stop_order_id = 1;
  if (!this->_internal_stop_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_order_id().data(), static_cast<int>(this->_internal_stop_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.stop_order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_order_id(), target);
  }

  // string order_request_id = 2;
  if (!this->_internal_order_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_request_id().data(), static_cast<int>(this->_internal_order_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse.order_request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_request_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  if (this->_internal_has_response_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(254, _Internal::response_metadata(this),
        _Internal::response_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
  return target;
}

size_t PostStopOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_order_id = 1;
  if (!this->_internal_stop_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_order_id());
  }

  // string order_request_id = 2;
  if (!this->_internal_order_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_request_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  if (this->_internal_has_response_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostStopOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostStopOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostStopOrderResponse::GetClassData() const { return &_class_data_; }


void PostStopOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostStopOrderResponse*>(&to_msg);
  auto& from = static_cast<const PostStopOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stop_order_id().empty()) {
    _this->_internal_set_stop_order_id(from._internal_stop_order_id());
  }
  if (!from._internal_order_request_id().empty()) {
    _this->_internal_set_order_request_id(from._internal_order_request_id());
  }
  if (from._internal_has_response_metadata()) {
    _this->_internal_mutable_response_metadata()->::tinkoff::public_::invest::api::contract::v1::ResponseMetadata::MergeFrom(
        from._internal_response_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostStopOrderResponse::CopyFrom(const PostStopOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PostStopOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStopOrderResponse::IsInitialized() const {
  return true;
}

void PostStopOrderResponse::InternalSwap(PostStopOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_order_id_, lhs_arena,
      &other->_impl_.stop_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_request_id_, lhs_arena,
      &other->_impl_.order_request_id_, rhs_arena
  );
  swap(_impl_.response_metadata_, other->_impl_.response_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStopOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[2]);
}

// ===================================================================

class GetStopOrdersRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetStopOrdersRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetStopOrdersRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetStopOrdersRequest::_Internal::from(const GetStopOrdersRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetStopOrdersRequest::_Internal::to(const GetStopOrdersRequest* msg) {
  return *msg->_impl_.to_;
}
void GetStopOrdersRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void GetStopOrdersRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
GetStopOrdersRequest::GetStopOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
}
GetStopOrdersRequest::GetStopOrdersRequest(const GetStopOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStopOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
}

inline void GetStopOrdersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStopOrdersRequest::~GetStopOrdersRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStopOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetStopOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStopOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStopOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStopOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp from = 3;
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 4;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
  return target;
}

size_t GetStopOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .google.protobuf.Timestamp from = 3;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 4;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStopOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStopOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStopOrdersRequest::GetClassData() const { return &_class_data_; }


void GetStopOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStopOrdersRequest*>(&to_msg);
  auto& from = static_cast<const GetStopOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStopOrdersRequest::CopyFrom(const GetStopOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStopOrdersRequest::IsInitialized() const {
  return true;
}

void GetStopOrdersRequest::InternalSwap(GetStopOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStopOrdersRequest, _impl_.status_)
      + sizeof(GetStopOrdersRequest::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GetStopOrdersRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStopOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[3]);
}

// ===================================================================

class GetStopOrdersResponse::_Internal {
 public:
};

GetStopOrdersResponse::GetStopOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
}
GetStopOrdersResponse::GetStopOrdersResponse(const GetStopOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStopOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_orders_){from._impl_.stop_orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
}

inline void GetStopOrdersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStopOrdersResponse::~GetStopOrdersResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStopOrdersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_orders_.~RepeatedPtrField();
}

void GetStopOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStopOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStopOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.StopOrder stop_orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStopOrdersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.StopOrder stop_orders = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
  return target;
}

size_t GetStopOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.StopOrder stop_orders = 1;
  total_size += 1UL * this->_internal_stop_orders_size();
  for (const auto& msg : this->_impl_.stop_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStopOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStopOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStopOrdersResponse::GetClassData() const { return &_class_data_; }


void GetStopOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStopOrdersResponse*>(&to_msg);
  auto& from = static_cast<const GetStopOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stop_orders_.MergeFrom(from._impl_.stop_orders_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStopOrdersResponse::CopyFrom(const GetStopOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetStopOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStopOrdersResponse::IsInitialized() const {
  return true;
}

void GetStopOrdersResponse::InternalSwap(GetStopOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stop_orders_.InternalSwap(&other->_impl_.stop_orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStopOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[4]);
}

// ===================================================================

class CancelStopOrderRequest::_Internal {
 public:
};

CancelStopOrderRequest::CancelStopOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
}
CancelStopOrderRequest::CancelStopOrderRequest(const CancelStopOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelStopOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.stop_order_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stop_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_order_id().empty()) {
    _this->_impl_.stop_order_id_.Set(from._internal_stop_order_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
}

inline void CancelStopOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.stop_order_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stop_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelStopOrderRequest::~CancelStopOrderRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelStopOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.stop_order_id_.Destroy();
}

void CancelStopOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelStopOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.stop_order_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelStopOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string stop_order_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stop_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.stop_order_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelStopOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string stop_order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_stop_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_order_id().data(), static_cast<int>(this->_internal_stop_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest.stop_order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stop_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
  return target;
}

size_t CancelStopOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string stop_order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_stop_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_order_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelStopOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelStopOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelStopOrderRequest::GetClassData() const { return &_class_data_; }


void CancelStopOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelStopOrderRequest*>(&to_msg);
  auto& from = static_cast<const CancelStopOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_stop_order_id().empty()) {
    _this->_internal_set_stop_order_id(from._internal_stop_order_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelStopOrderRequest::CopyFrom(const CancelStopOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelStopOrderRequest::IsInitialized() const {
  return true;
}

void CancelStopOrderRequest::InternalSwap(CancelStopOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_order_id_, lhs_arena,
      &other->_impl_.stop_order_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelStopOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[5]);
}

// ===================================================================

class CancelStopOrderResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const CancelStopOrderResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CancelStopOrderResponse::_Internal::time(const CancelStopOrderResponse* msg) {
  return *msg->_impl_.time_;
}
void CancelStopOrderResponse::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
CancelStopOrderResponse::CancelStopOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
}
CancelStopOrderResponse::CancelStopOrderResponse(const CancelStopOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelStopOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
}

inline void CancelStopOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CancelStopOrderResponse::~CancelStopOrderResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelStopOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_;
}

void CancelStopOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelStopOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelStopOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelStopOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
  return target;
}

size_t CancelStopOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelStopOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelStopOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelStopOrderResponse::GetClassData() const { return &_class_data_; }


void CancelStopOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelStopOrderResponse*>(&to_msg);
  auto& from = static_cast<const CancelStopOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelStopOrderResponse::CopyFrom(const CancelStopOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CancelStopOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelStopOrderResponse::IsInitialized() const {
  return true;
}

void CancelStopOrderResponse::InternalSwap(CancelStopOrderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelStopOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[6]);
}

// ===================================================================

class StopOrder_TrailingData::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& indent(const StopOrder_TrailingData* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& spread(const StopOrder_TrailingData* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const StopOrder_TrailingData* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& extr(const StopOrder_TrailingData* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
StopOrder_TrailingData::_Internal::indent(const StopOrder_TrailingData* msg) {
  return *msg->_impl_.indent_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
StopOrder_TrailingData::_Internal::spread(const StopOrder_TrailingData* msg) {
  return *msg->_impl_.spread_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
StopOrder_TrailingData::_Internal::price(const StopOrder_TrailingData* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
StopOrder_TrailingData::_Internal::extr(const StopOrder_TrailingData* msg) {
  return *msg->_impl_.extr_;
}
void StopOrder_TrailingData::clear_indent() {
  if (GetArenaForAllocation() == nullptr && _impl_.indent_ != nullptr) {
    delete _impl_.indent_;
  }
  _impl_.indent_ = nullptr;
}
void StopOrder_TrailingData::clear_spread() {
  if (GetArenaForAllocation() == nullptr && _impl_.spread_ != nullptr) {
    delete _impl_.spread_;
  }
  _impl_.spread_ = nullptr;
}
void StopOrder_TrailingData::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void StopOrder_TrailingData::clear_extr() {
  if (GetArenaForAllocation() == nullptr && _impl_.extr_ != nullptr) {
    delete _impl_.extr_;
  }
  _impl_.extr_ = nullptr;
}
StopOrder_TrailingData::StopOrder_TrailingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
}
StopOrder_TrailingData::StopOrder_TrailingData(const StopOrder_TrailingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopOrder_TrailingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indent_){nullptr}
    , decltype(_impl_.spread_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.extr_){nullptr}
    , decltype(_impl_.indent_type_){}
    , decltype(_impl_.spread_type_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_indent()) {
    _this->_impl_.indent_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.indent_);
  }
  if (from._internal_has_spread()) {
    _this->_impl_.spread_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.spread_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  if (from._internal_has_extr()) {
    _this->_impl_.extr_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.extr_);
  }
  ::memcpy(&_impl_.indent_type_, &from._impl_.indent_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.indent_type_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
}

inline void StopOrder_TrailingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indent_){nullptr}
    , decltype(_impl_.spread_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.extr_){nullptr}
    , decltype(_impl_.indent_type_){0}
    , decltype(_impl_.spread_type_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StopOrder_TrailingData::~StopOrder_TrailingData() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopOrder_TrailingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.indent_;
  if (this != internal_default_instance()) delete _impl_.spread_;
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.extr_;
}

void StopOrder_TrailingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopOrder_TrailingData::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.indent_ != nullptr) {
    delete _impl_.indent_;
  }
  _impl_.indent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spread_ != nullptr) {
    delete _impl_.spread_;
  }
  _impl_.spread_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extr_ != nullptr) {
    delete _impl_.extr_;
  }
  _impl_.extr_ = nullptr;
  ::memset(&_impl_.indent_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.indent_type_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopOrder_TrailingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_indent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_indent_type(static_cast<::tinkoff::public_::invest::api::contract::v1::TrailingValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spread(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_spread_type(static_cast<::tinkoff::public_::invest::api::contract::v1::TrailingValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TrailingStopStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::tinkoff::public_::invest::api::contract::v1::TrailingStopStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation extr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_extr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopOrder_TrailingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
  if (this->_internal_has_indent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::indent(this),
        _Internal::indent(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
  if (this->_internal_indent_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_indent_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
  if (this->_internal_has_spread()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spread(this),
        _Internal::spread(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
  if (this->_internal_spread_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_spread_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingStopStatus status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 7;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation extr = 8;
  if (this->_internal_has_extr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::extr(this),
        _Internal::extr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
  return target;
}

size_t StopOrder_TrailingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation indent = 1;
  if (this->_internal_has_indent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indent_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation spread = 3;
  if (this->_internal_has_spread()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spread_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 7;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation extr = 8;
  if (this->_internal_has_extr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extr_);
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType indent_type = 2;
  if (this->_internal_indent_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_indent_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingValueType spread_type = 4;
  if (this->_internal_spread_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_spread_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TrailingStopStatus status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopOrder_TrailingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopOrder_TrailingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopOrder_TrailingData::GetClassData() const { return &_class_data_; }


void StopOrder_TrailingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopOrder_TrailingData*>(&to_msg);
  auto& from = static_cast<const StopOrder_TrailingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_indent()) {
    _this->_internal_mutable_indent()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_indent());
  }
  if (from._internal_has_spread()) {
    _this->_internal_mutable_spread()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_spread());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_extr()) {
    _this->_internal_mutable_extr()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_extr());
  }
  if (from._internal_indent_type() != 0) {
    _this->_internal_set_indent_type(from._internal_indent_type());
  }
  if (from._internal_spread_type() != 0) {
    _this->_internal_set_spread_type(from._internal_spread_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopOrder_TrailingData::CopyFrom(const StopOrder_TrailingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopOrder_TrailingData::IsInitialized() const {
  return true;
}

void StopOrder_TrailingData::InternalSwap(StopOrder_TrailingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopOrder_TrailingData, _impl_.status_)
      + sizeof(StopOrder_TrailingData::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StopOrder_TrailingData, _impl_.indent_)>(
          reinterpret_cast<char*>(&_impl_.indent_),
          reinterpret_cast<char*>(&other->_impl_.indent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopOrder_TrailingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[7]);
}

// ===================================================================

class StopOrder::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_date(const StopOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& activation_date_time(const StopOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time(const StopOrder* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price(const StopOrder* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& stop_price(const StopOrder* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData& trailing_data(const StopOrder* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StopOrder::_Internal::create_date(const StopOrder* msg) {
  return *msg->_impl_.create_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StopOrder::_Internal::activation_date_time(const StopOrder* msg) {
  return *msg->_impl_.activation_date_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StopOrder::_Internal::expiration_time(const StopOrder* msg) {
  return *msg->_impl_.expiration_time_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
StopOrder::_Internal::price(const StopOrder* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
StopOrder::_Internal::stop_price(const StopOrder* msg) {
  return *msg->_impl_.stop_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData&
StopOrder::_Internal::trailing_data(const StopOrder* msg) {
  return *msg->_impl_.trailing_data_;
}
void StopOrder::clear_create_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_date_ != nullptr) {
    delete _impl_.create_date_;
  }
  _impl_.create_date_ = nullptr;
}
void StopOrder::clear_activation_date_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.activation_date_time_ != nullptr) {
    delete _impl_.activation_date_time_;
  }
  _impl_.activation_date_time_ = nullptr;
}
void StopOrder::clear_expiration_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
}
void StopOrder::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void StopOrder::clear_stop_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_price_ != nullptr) {
    delete _impl_.stop_price_;
  }
  _impl_.stop_price_ = nullptr;
}
StopOrder::StopOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.StopOrder)
}
StopOrder::StopOrder(const StopOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.create_date_){nullptr}
    , decltype(_impl_.activation_date_time_){nullptr}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.trailing_data_){nullptr}
    , decltype(_impl_.lots_requested_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.take_profit_type_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stop_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_order_id().empty()) {
    _this->_impl_.stop_order_id_.Set(from._internal_stop_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_create_date()) {
    _this->_impl_.create_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.create_date_);
  }
  if (from._internal_has_activation_date_time()) {
    _this->_impl_.activation_date_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.activation_date_time_);
  }
  if (from._internal_has_expiration_time()) {
    _this->_impl_.expiration_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiration_time_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.price_);
  }
  if (from._internal_has_stop_price()) {
    _this->_impl_.stop_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.stop_price_);
  }
  if (from._internal_has_trailing_data()) {
    _this->_impl_.trailing_data_ = new ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData(*from._impl_.trailing_data_);
  }
  ::memcpy(&_impl_.lots_requested_, &from._impl_.lots_requested_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.lots_requested_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.StopOrder)
}

inline void StopOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.create_date_){nullptr}
    , decltype(_impl_.activation_date_time_){nullptr}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.trailing_data_){nullptr}
    , decltype(_impl_.lots_requested_){int64_t{0}}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.take_profit_type_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stop_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopOrder::~StopOrder() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.StopOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_order_id_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.create_date_;
  if (this != internal_default_instance()) delete _impl_.activation_date_time_;
  if (this != internal_default_instance()) delete _impl_.expiration_time_;
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.stop_price_;
  if (this != internal_default_instance()) delete _impl_.trailing_data_;
}

void StopOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.StopOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_order_id_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.create_date_ != nullptr) {
    delete _impl_.create_date_;
  }
  _impl_.create_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activation_date_time_ != nullptr) {
    delete _impl_.activation_date_time_;
  }
  _impl_.activation_date_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stop_price_ != nullptr) {
    delete _impl_.stop_price_;
  }
  _impl_.stop_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trailing_data_ != nullptr) {
    delete _impl_.trailing_data_;
  }
  _impl_.trailing_data_ = nullptr;
  ::memset(&_impl_.lots_requested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.lots_requested_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stop_order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stop_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.StopOrder.stop_order_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 lots_requested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lots_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string figi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.StopOrder.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::StopOrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // string currency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.StopOrder.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrderType order_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_type(static_cast<::tinkoff::public_::invest::api::contract::v1::StopOrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp activation_date_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_date_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiration_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue stop_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.StopOrder.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_take_profit_type(static_cast<::tinkoff::public_::invest::api::contract::v1::TakeProfitType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData trailing_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_trailing_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::tinkoff::public_::invest::api::contract::v1::StopOrderStatusOption>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.StopOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stop_order_id = 1;
  if (!this->_internal_stop_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_order_id().data(), static_cast<int>(this->_internal_stop_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.StopOrder.stop_order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_order_id(), target);
  }

  // int64 lots_requested = 2;
  if (this->_internal_lots_requested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_lots_requested(), target);
  }

  // string figi = 3;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.StopOrder.figi");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 4;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  // string currency = 5;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.StopOrder.currency");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderType order_type = 6;
  if (this->_internal_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_order_type(), target);
  }

  // .google.protobuf.Timestamp create_date = 7;
  if (this->_internal_has_create_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::create_date(this),
        _Internal::create_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp activation_date_time = 8;
  if (this->_internal_has_activation_date_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::activation_date_time(this),
        _Internal::activation_date_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expiration_time = 9;
  if (this->_internal_has_expiration_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::expiration_time(this),
        _Internal::expiration_time(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 10;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue stop_price = 11;
  if (this->_internal_has_stop_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::stop_price(this),
        _Internal::stop_price(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 12;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.StopOrder.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_instrument_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 13;
  if (this->_internal_take_profit_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_take_profit_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData trailing_data = 14;
  if (this->_internal_has_trailing_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::trailing_data(this),
        _Internal::trailing_data(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 15;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.StopOrder)
  return target;
}

size_t StopOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.StopOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_order_id = 1;
  if (!this->_internal_stop_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_order_id());
  }

  // string figi = 3;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string currency = 5;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string instrument_uid = 12;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .google.protobuf.Timestamp create_date = 7;
  if (this->_internal_has_create_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_date_);
  }

  // .google.protobuf.Timestamp activation_date_time = 8;
  if (this->_internal_has_activation_date_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activation_date_time_);
  }

  // .google.protobuf.Timestamp expiration_time = 9;
  if (this->_internal_has_expiration_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 10;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue stop_price = 11;
  if (this->_internal_has_stop_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stop_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrder.TrailingData trailing_data = 14;
  if (this->_internal_has_trailing_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trailing_data_);
  }

  // int64 lots_requested = 2;
  if (this->_internal_lots_requested() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lots_requested());
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderDirection direction = 4;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderType order_type = 6;
  if (this->_internal_order_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TakeProfitType take_profit_type = 13;
  if (this->_internal_take_profit_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_take_profit_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.StopOrderStatusOption status = 15;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopOrder::GetClassData() const { return &_class_data_; }


void StopOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopOrder*>(&to_msg);
  auto& from = static_cast<const StopOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.StopOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stop_order_id().empty()) {
    _this->_internal_set_stop_order_id(from._internal_stop_order_id());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_create_date()) {
    _this->_internal_mutable_create_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_create_date());
  }
  if (from._internal_has_activation_date_time()) {
    _this->_internal_mutable_activation_date_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_activation_date_time());
  }
  if (from._internal_has_expiration_time()) {
    _this->_internal_mutable_expiration_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiration_time());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_stop_price()) {
    _this->_internal_mutable_stop_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_stop_price());
  }
  if (from._internal_has_trailing_data()) {
    _this->_internal_mutable_trailing_data()->::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData::MergeFrom(
        from._internal_trailing_data());
  }
  if (from._internal_lots_requested() != 0) {
    _this->_internal_set_lots_requested(from._internal_lots_requested());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_order_type() != 0) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (from._internal_take_profit_type() != 0) {
    _this->_internal_set_take_profit_type(from._internal_take_profit_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopOrder::CopyFrom(const StopOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.StopOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopOrder::IsInitialized() const {
  return true;
}

void StopOrder::InternalSwap(StopOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_order_id_, lhs_arena,
      &other->_impl_.stop_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopOrder, _impl_.status_)
      + sizeof(StopOrder::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StopOrder, _impl_.create_date_)>(
          reinterpret_cast<char*>(&_impl_.create_date_),
          reinterpret_cast<char*>(&other->_impl_.create_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stoporders_2eproto_getter, &descriptor_table_stoporders_2eproto_once,
      file_level_metadata_stoporders_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest_TrailingData >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PostStopOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PostStopOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetStopOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CancelStopOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::StopOrder_TrailingData >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::StopOrder*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::StopOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::StopOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
