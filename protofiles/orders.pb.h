// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orders.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_orders_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_orders_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_orders_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_orders_2eproto {
static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_orders_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class CancelOrderRequest;
struct CancelOrderRequestDefaultTypeInternal;
extern CancelOrderRequestDefaultTypeInternal _CancelOrderRequest_default_instance_;
class CancelOrderResponse;
struct CancelOrderResponseDefaultTypeInternal;
extern CancelOrderResponseDefaultTypeInternal _CancelOrderResponse_default_instance_;
class GetOrderStateRequest;
struct GetOrderStateRequestDefaultTypeInternal;
extern GetOrderStateRequestDefaultTypeInternal _GetOrderStateRequest_default_instance_;
class GetOrdersRequest;
struct GetOrdersRequestDefaultTypeInternal;
extern GetOrdersRequestDefaultTypeInternal _GetOrdersRequest_default_instance_;
class GetOrdersResponse;
struct GetOrdersResponseDefaultTypeInternal;
extern GetOrdersResponseDefaultTypeInternal _GetOrdersResponse_default_instance_;
class OrderStage;
struct OrderStageDefaultTypeInternal;
extern OrderStageDefaultTypeInternal _OrderStage_default_instance_;
class OrderState;
struct OrderStateDefaultTypeInternal;
extern OrderStateDefaultTypeInternal _OrderState_default_instance_;
class OrderTrade;
struct OrderTradeDefaultTypeInternal;
extern OrderTradeDefaultTypeInternal _OrderTrade_default_instance_;
class OrderTrades;
struct OrderTradesDefaultTypeInternal;
extern OrderTradesDefaultTypeInternal _OrderTrades_default_instance_;
class PostOrderRequest;
struct PostOrderRequestDefaultTypeInternal;
extern PostOrderRequestDefaultTypeInternal _PostOrderRequest_default_instance_;
class PostOrderResponse;
struct PostOrderResponseDefaultTypeInternal;
extern PostOrderResponseDefaultTypeInternal _PostOrderResponse_default_instance_;
class ReplaceOrderRequest;
struct ReplaceOrderRequestDefaultTypeInternal;
extern ReplaceOrderRequestDefaultTypeInternal _ReplaceOrderRequest_default_instance_;
class TradesStreamRequest;
struct TradesStreamRequestDefaultTypeInternal;
extern TradesStreamRequestDefaultTypeInternal _TradesStreamRequest_default_instance_;
class TradesStreamResponse;
struct TradesStreamResponseDefaultTypeInternal;
extern TradesStreamResponseDefaultTypeInternal _TradesStreamResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
enum OrderDirection : int {
ORDER_DIRECTION_UNSPECIFIED = 0,
ORDER_DIRECTION_BUY = 1,
ORDER_DIRECTION_SELL = 2,
OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool OrderDirection_IsValid(int value);
extern const uint32_t OrderDirection_internal_data_[];
constexpr OrderDirection OrderDirection_MIN = static_cast<OrderDirection>(0);
constexpr OrderDirection OrderDirection_MAX = static_cast<OrderDirection>(2);
constexpr int OrderDirection_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OrderDirection_descriptor();
template <typename T>
const std::string& OrderDirection_Name(T value) {
    static_assert(std::is_same<T, OrderDirection>::value ||
                      std::is_integral<T>::value,
                  "Incorrect type passed to OrderDirection_Name().");
    return OrderDirection_Name(static_cast<OrderDirection>(value));
}
template <>
inline const std::string& OrderDirection_Name(OrderDirection value) {
    return ::google::protobuf::internal::NameOfDenseEnum<OrderDirection_descriptor,
                                                         0, 2>(
        static_cast<int>(value));
}
inline bool OrderDirection_Parse(absl::string_view name, OrderDirection* value) {
    return ::google::protobuf::internal::ParseNamedEnum<OrderDirection>(
        OrderDirection_descriptor(), name, value);
}
enum OrderType : int {
ORDER_TYPE_UNSPECIFIED = 0,
ORDER_TYPE_LIMIT = 1,
ORDER_TYPE_MARKET = 2,
ORDER_TYPE_BESTPRICE = 3,
OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool OrderType_IsValid(int value);
extern const uint32_t OrderType_internal_data_[];
constexpr OrderType OrderType_MIN = static_cast<OrderType>(0);
constexpr OrderType OrderType_MAX = static_cast<OrderType>(3);
constexpr int OrderType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
OrderType_descriptor();
template <typename T>
const std::string& OrderType_Name(T value) {
    static_assert(std::is_same<T, OrderType>::value ||
                      std::is_integral<T>::value,
                  "Incorrect type passed to OrderType_Name().");
    return OrderType_Name(static_cast<OrderType>(value));
}
template <>
inline const std::string& OrderType_Name(OrderType value) {
    return ::google::protobuf::internal::NameOfDenseEnum<OrderType_descriptor,
                                                         0, 3>(
        static_cast<int>(value));
}
inline bool OrderType_Parse(absl::string_view name, OrderType* value) {
    return ::google::protobuf::internal::ParseNamedEnum<OrderType>(
        OrderType_descriptor(), name, value);
}
enum OrderExecutionReportStatus : int {
EXECUTION_REPORT_STATUS_UNSPECIFIED = 0,
EXECUTION_REPORT_STATUS_FILL = 1,
EXECUTION_REPORT_STATUS_REJECTED = 2,
EXECUTION_REPORT_STATUS_CANCELLED = 3,
EXECUTION_REPORT_STATUS_NEW = 4,
EXECUTION_REPORT_STATUS_PARTIALLYFILL = 5,
OrderExecutionReportStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
OrderExecutionReportStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool OrderExecutionReportStatus_IsValid(int value);
extern const uint32_t OrderExecutionReportStatus_internal_data_[];
constexpr OrderExecutionReportStatus OrderExecutionReportStatus_MIN = static_cast<OrderExecutionReportStatus>(0);
constexpr OrderExecutionReportStatus OrderExecutionReportStatus_MAX = static_cast<OrderExecutionReportStatus>(5);
constexpr int OrderExecutionReportStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
OrderExecutionReportStatus_descriptor();
template <typename T>
const std::string& OrderExecutionReportStatus_Name(T value) {
    static_assert(std::is_same<T, OrderExecutionReportStatus>::value ||
                      std::is_integral<T>::value,
                  "Incorrect type passed to OrderExecutionReportStatus_Name().");
    return OrderExecutionReportStatus_Name(static_cast<OrderExecutionReportStatus>(value));
}
template <>
inline const std::string& OrderExecutionReportStatus_Name(OrderExecutionReportStatus value) {
    return ::google::protobuf::internal::NameOfDenseEnum<OrderExecutionReportStatus_descriptor,
                                                         0, 5>(
        static_cast<int>(value));
}
inline bool OrderExecutionReportStatus_Parse(absl::string_view name, OrderExecutionReportStatus* value) {
    return ::google::protobuf::internal::ParseNamedEnum<OrderExecutionReportStatus>(
        OrderExecutionReportStatus_descriptor(), name, value);
}
enum PriceType : int {
PRICE_TYPE_UNSPECIFIED = 0,
PRICE_TYPE_POINT = 1,
PRICE_TYPE_CURRENCY = 2,
PriceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
PriceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool PriceType_IsValid(int value);
extern const uint32_t PriceType_internal_data_[];
constexpr PriceType PriceType_MIN = static_cast<PriceType>(0);
constexpr PriceType PriceType_MAX = static_cast<PriceType>(2);
constexpr int PriceType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PriceType_descriptor();
template <typename T>
const std::string& PriceType_Name(T value) {
    static_assert(std::is_same<T, PriceType>::value ||
                      std::is_integral<T>::value,
                  "Incorrect type passed to PriceType_Name().");
    return PriceType_Name(static_cast<PriceType>(value));
}
template <>
inline const std::string& PriceType_Name(PriceType value) {
    return ::google::protobuf::internal::NameOfDenseEnum<PriceType_descriptor,
                                                         0, 2>(
        static_cast<int>(value));
}
inline bool PriceType_Parse(absl::string_view name, PriceType* value) {
    return ::google::protobuf::internal::ParseNamedEnum<PriceType>(
        PriceType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TradesStreamRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.TradesStreamRequest) */ {
public:
    inline TradesStreamRequest() : TradesStreamRequest(nullptr) {}
    ~TradesStreamRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR TradesStreamRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline TradesStreamRequest(const TradesStreamRequest& from) : TradesStreamRequest(nullptr, from) {}
    inline TradesStreamRequest(TradesStreamRequest&& from) noexcept
        : TradesStreamRequest(nullptr, std::move(from)) {}
    inline TradesStreamRequest& operator=(const TradesStreamRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline TradesStreamRequest& operator=(TradesStreamRequest&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const TradesStreamRequest& default_instance() {
        return *internal_default_instance();
    }
    static inline const TradesStreamRequest* internal_default_instance() {
        return reinterpret_cast<const TradesStreamRequest*>(
            &_TradesStreamRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;
    friend void swap(TradesStreamRequest& a, TradesStreamRequest& b) { a.Swap(&b); }
    inline void Swap(TradesStreamRequest* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TradesStreamRequest* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    TradesStreamRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<TradesStreamRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const TradesStreamRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const TradesStreamRequest& from) { TradesStreamRequest::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(TradesStreamRequest* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.TradesStreamRequest"; }

protected:
    explicit TradesStreamRequest(::google::protobuf::Arena* arena);
    TradesStreamRequest(::google::protobuf::Arena* arena, const TradesStreamRequest& from);
    TradesStreamRequest(::google::protobuf::Arena* arena, TradesStreamRequest&& from) noexcept
        : TradesStreamRequest(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kAccountsFieldNumber = 1,
    };
    // repeated string accounts = 1;
    int accounts_size() const;
private:
    int _internal_accounts_size() const;

public:
    void clear_accounts() ;
    const std::string& accounts(int index) const;
    std::string* mutable_accounts(int index);
    void set_accounts(int index, const std::string& value);
    void set_accounts(int index, std::string&& value);
    void set_accounts(int index, const char* value);
    void set_accounts(int index, const char* value, std::size_t size);
    void set_accounts(int index, absl::string_view value);
    std::string* add_accounts();
    void add_accounts(const std::string& value);
    void add_accounts(std::string&& value);
    void add_accounts(const char* value);
    void add_accounts(const char* value, std::size_t size);
    void add_accounts(absl::string_view value);
    const ::google::protobuf::RepeatedPtrField<std::string>& accounts() const;
    ::google::protobuf::RepeatedPtrField<std::string>* mutable_accounts();

private:
    const ::google::protobuf::RepeatedPtrField<std::string>& _internal_accounts() const;
    ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_accounts();

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.TradesStreamRequest)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        0, 1, 0,
        74, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> accounts_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrdersRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetOrdersRequest) */ {
public:
    inline GetOrdersRequest() : GetOrdersRequest(nullptr) {}
    ~GetOrdersRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR GetOrdersRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline GetOrdersRequest(const GetOrdersRequest& from) : GetOrdersRequest(nullptr, from) {}
    inline GetOrdersRequest(GetOrdersRequest&& from) noexcept
        : GetOrdersRequest(nullptr, std::move(from)) {}
    inline GetOrdersRequest& operator=(const GetOrdersRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline GetOrdersRequest& operator=(GetOrdersRequest&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const GetOrdersRequest& default_instance() {
        return *internal_default_instance();
    }
    static inline const GetOrdersRequest* internal_default_instance() {
        return reinterpret_cast<const GetOrdersRequest*>(
            &_GetOrdersRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 9;
    friend void swap(GetOrdersRequest& a, GetOrdersRequest& b) { a.Swap(&b); }
    inline void Swap(GetOrdersRequest* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GetOrdersRequest* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    GetOrdersRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<GetOrdersRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const GetOrdersRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const GetOrdersRequest& from) { GetOrdersRequest::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(GetOrdersRequest* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetOrdersRequest"; }

protected:
    explicit GetOrdersRequest(::google::protobuf::Arena* arena);
    GetOrdersRequest(::google::protobuf::Arena* arena, const GetOrdersRequest& from);
    GetOrdersRequest(::google::protobuf::Arena* arena, GetOrdersRequest&& from) noexcept
        : GetOrdersRequest(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kAccountIdFieldNumber = 1,
    };
    // string account_id = 1;
    void clear_account_id() ;
    const std::string& account_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_account_id(Arg_&& arg, Args_... args);
    std::string* mutable_account_id();
    PROTOBUF_NODISCARD std::string* release_account_id();
    void set_allocated_account_id(std::string* value);

private:
    const std::string& _internal_account_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
        const std::string& value);
    std::string* _internal_mutable_account_id();

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetOrdersRequest)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        0, 1, 0,
        73, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrderStateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest) */ {
public:
    inline GetOrderStateRequest() : GetOrderStateRequest(nullptr) {}
    ~GetOrderStateRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR GetOrderStateRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline GetOrderStateRequest(const GetOrderStateRequest& from) : GetOrderStateRequest(nullptr, from) {}
    inline GetOrderStateRequest(GetOrderStateRequest&& from) noexcept
        : GetOrderStateRequest(nullptr, std::move(from)) {}
    inline GetOrderStateRequest& operator=(const GetOrderStateRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline GetOrderStateRequest& operator=(GetOrderStateRequest&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const GetOrderStateRequest& default_instance() {
        return *internal_default_instance();
    }
    static inline const GetOrderStateRequest* internal_default_instance() {
        return reinterpret_cast<const GetOrderStateRequest*>(
            &_GetOrderStateRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 8;
    friend void swap(GetOrderStateRequest& a, GetOrderStateRequest& b) { a.Swap(&b); }
    inline void Swap(GetOrderStateRequest* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GetOrderStateRequest* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    GetOrderStateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<GetOrderStateRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const GetOrderStateRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const GetOrderStateRequest& from) { GetOrderStateRequest::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(GetOrderStateRequest* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetOrderStateRequest"; }

protected:
    explicit GetOrderStateRequest(::google::protobuf::Arena* arena);
    GetOrderStateRequest(::google::protobuf::Arena* arena, const GetOrderStateRequest& from);
    GetOrderStateRequest(::google::protobuf::Arena* arena, GetOrderStateRequest&& from) noexcept
        : GetOrderStateRequest(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kAccountIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    };
    // string account_id = 1;
    void clear_account_id() ;
    const std::string& account_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_account_id(Arg_&& arg, Args_... args);
    std::string* mutable_account_id();
    PROTOBUF_NODISCARD std::string* release_account_id();
    void set_allocated_account_id(std::string* value);

private:
    const std::string& _internal_account_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
        const std::string& value);
    std::string* _internal_mutable_account_id();

public:
    // string order_id = 2;
    void clear_order_id() ;
    const std::string& order_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_id();
    PROTOBUF_NODISCARD std::string* release_order_id();
    void set_allocated_order_id(std::string* value);

private:
    const std::string& _internal_order_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
        const std::string& value);
    std::string* _internal_mutable_order_id();

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        1, 2, 0,
        85, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.CancelOrderRequest) */ {
public:
    inline CancelOrderRequest() : CancelOrderRequest(nullptr) {}
    ~CancelOrderRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR CancelOrderRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline CancelOrderRequest(const CancelOrderRequest& from) : CancelOrderRequest(nullptr, from) {}
    inline CancelOrderRequest(CancelOrderRequest&& from) noexcept
        : CancelOrderRequest(nullptr, std::move(from)) {}
    inline CancelOrderRequest& operator=(const CancelOrderRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline CancelOrderRequest& operator=(CancelOrderRequest&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const CancelOrderRequest& default_instance() {
        return *internal_default_instance();
    }
    static inline const CancelOrderRequest* internal_default_instance() {
        return reinterpret_cast<const CancelOrderRequest*>(
            &_CancelOrderRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 6;
    friend void swap(CancelOrderRequest& a, CancelOrderRequest& b) { a.Swap(&b); }
    inline void Swap(CancelOrderRequest* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(CancelOrderRequest* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    CancelOrderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<CancelOrderRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const CancelOrderRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const CancelOrderRequest& from) { CancelOrderRequest::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(CancelOrderRequest* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.CancelOrderRequest"; }

protected:
    explicit CancelOrderRequest(::google::protobuf::Arena* arena);
    CancelOrderRequest(::google::protobuf::Arena* arena, const CancelOrderRequest& from);
    CancelOrderRequest(::google::protobuf::Arena* arena, CancelOrderRequest&& from) noexcept
        : CancelOrderRequest(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kAccountIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    };
    // string account_id = 1;
    void clear_account_id() ;
    const std::string& account_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_account_id(Arg_&& arg, Args_... args);
    std::string* mutable_account_id();
    PROTOBUF_NODISCARD std::string* release_account_id();
    void set_allocated_account_id(std::string* value);

private:
    const std::string& _internal_account_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
        const std::string& value);
    std::string* _internal_mutable_account_id();

public:
    // string order_id = 2;
    void clear_order_id() ;
    const std::string& order_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_id();
    PROTOBUF_NODISCARD std::string* release_order_id();
    void set_allocated_order_id(std::string* value);

private:
    const std::string& _internal_order_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
        const std::string& value);
    std::string* _internal_mutable_order_id();

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.CancelOrderRequest)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        1, 2, 0,
        83, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class ReplaceOrderRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest) */ {
public:
    inline ReplaceOrderRequest() : ReplaceOrderRequest(nullptr) {}
    ~ReplaceOrderRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR ReplaceOrderRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline ReplaceOrderRequest(const ReplaceOrderRequest& from) : ReplaceOrderRequest(nullptr, from) {}
    inline ReplaceOrderRequest(ReplaceOrderRequest&& from) noexcept
        : ReplaceOrderRequest(nullptr, std::move(from)) {}
    inline ReplaceOrderRequest& operator=(const ReplaceOrderRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline ReplaceOrderRequest& operator=(ReplaceOrderRequest&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ReplaceOrderRequest& default_instance() {
        return *internal_default_instance();
    }
    static inline const ReplaceOrderRequest* internal_default_instance() {
        return reinterpret_cast<const ReplaceOrderRequest*>(
            &_ReplaceOrderRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 13;
    friend void swap(ReplaceOrderRequest& a, ReplaceOrderRequest& b) { a.Swap(&b); }
    inline void Swap(ReplaceOrderRequest* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ReplaceOrderRequest* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ReplaceOrderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<ReplaceOrderRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const ReplaceOrderRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const ReplaceOrderRequest& from) { ReplaceOrderRequest::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(ReplaceOrderRequest* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest"; }

protected:
    explicit ReplaceOrderRequest(::google::protobuf::Arena* arena);
    ReplaceOrderRequest(::google::protobuf::Arena* arena, const ReplaceOrderRequest& from);
    ReplaceOrderRequest(::google::protobuf::Arena* arena, ReplaceOrderRequest&& from) noexcept
        : ReplaceOrderRequest(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kAccountIdFieldNumber = 1,
    kOrderIdFieldNumber = 6,
    kIdempotencyKeyFieldNumber = 7,
    kPriceFieldNumber = 12,
    kQuantityFieldNumber = 11,
    kPriceTypeFieldNumber = 13,
    };
    // string account_id = 1;
    void clear_account_id() ;
    const std::string& account_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_account_id(Arg_&& arg, Args_... args);
    std::string* mutable_account_id();
    PROTOBUF_NODISCARD std::string* release_account_id();
    void set_allocated_account_id(std::string* value);

private:
    const std::string& _internal_account_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
        const std::string& value);
    std::string* _internal_mutable_account_id();

public:
    // string order_id = 6;
    void clear_order_id() ;
    const std::string& order_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_id();
    PROTOBUF_NODISCARD std::string* release_order_id();
    void set_allocated_order_id(std::string* value);

private:
    const std::string& _internal_order_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
        const std::string& value);
    std::string* _internal_mutable_order_id();

public:
    // string idempotency_key = 7;
    void clear_idempotency_key() ;
    const std::string& idempotency_key() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_idempotency_key(Arg_&& arg, Args_... args);
    std::string* mutable_idempotency_key();
    PROTOBUF_NODISCARD std::string* release_idempotency_key();
    void set_allocated_idempotency_key(std::string* value);

private:
    const std::string& _internal_idempotency_key() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_idempotency_key(
        const std::string& value);
    std::string* _internal_mutable_idempotency_key();

public:
    // .tinkoff.public.invest.api.contract.v1.Quotation price = 12;
    bool has_price() const;
    void clear_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
    ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
    void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();

public:
    // int64 quantity = 11;
    void clear_quantity() ;
    ::int64_t quantity() const;
    void set_quantity(::int64_t value);

private:
    ::int64_t _internal_quantity() const;
    void _internal_set_quantity(::int64_t value);

public:
    // .tinkoff.public.invest.api.contract.v1.PriceType price_type = 13;
    void clear_price_type() ;
    ::tinkoff::public_::invest::api::contract::v1::PriceType price_type() const;
    void set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);

private:
    ::tinkoff::public_::invest::api::contract::v1::PriceType _internal_price_type() const;
    void _internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        3, 6, 1,
        99, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr idempotency_key_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    ::int64_t quantity_;
    int price_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class PostOrderResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PostOrderResponse) */ {
public:
    inline PostOrderResponse() : PostOrderResponse(nullptr) {}
    ~PostOrderResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR PostOrderResponse(
        ::google::protobuf::internal::ConstantInitialized);

    inline PostOrderResponse(const PostOrderResponse& from) : PostOrderResponse(nullptr, from) {}
    inline PostOrderResponse(PostOrderResponse&& from) noexcept
        : PostOrderResponse(nullptr, std::move(from)) {}
    inline PostOrderResponse& operator=(const PostOrderResponse& from) {
        CopyFrom(from);
        return *this;
    }
    inline PostOrderResponse& operator=(PostOrderResponse&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const PostOrderResponse& default_instance() {
        return *internal_default_instance();
    }
    static inline const PostOrderResponse* internal_default_instance() {
        return reinterpret_cast<const PostOrderResponse*>(
            &_PostOrderResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 5;
    friend void swap(PostOrderResponse& a, PostOrderResponse& b) { a.Swap(&b); }
    inline void Swap(PostOrderResponse* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(PostOrderResponse* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    PostOrderResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<PostOrderResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const PostOrderResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const PostOrderResponse& from) { PostOrderResponse::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(PostOrderResponse* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PostOrderResponse"; }

protected:
    explicit PostOrderResponse(::google::protobuf::Arena* arena);
    PostOrderResponse(::google::protobuf::Arena* arena, const PostOrderResponse& from);
    PostOrderResponse(::google::protobuf::Arena* arena, PostOrderResponse&& from) noexcept
        : PostOrderResponse(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kOrderIdFieldNumber = 1,
    kFigiFieldNumber = 11,
    kMessageFieldNumber = 15,
    kInstrumentUidFieldNumber = 17,
    kInitialOrderPriceFieldNumber = 5,
    kExecutedOrderPriceFieldNumber = 6,
    kTotalOrderAmountFieldNumber = 7,
    kInitialCommissionFieldNumber = 8,
    kExecutedCommissionFieldNumber = 9,
    kAciValueFieldNumber = 10,
    kInitialSecurityPriceFieldNumber = 13,
    kInitialOrderPricePtFieldNumber = 16,
    kLotsRequestedFieldNumber = 3,
    kLotsExecutedFieldNumber = 4,
    kExecutionReportStatusFieldNumber = 2,
    kDirectionFieldNumber = 12,
    kOrderTypeFieldNumber = 14,
    };
    // string order_id = 1;
    void clear_order_id() ;
    const std::string& order_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_id();
    PROTOBUF_NODISCARD std::string* release_order_id();
    void set_allocated_order_id(std::string* value);

private:
    const std::string& _internal_order_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
        const std::string& value);
    std::string* _internal_mutable_order_id();

public:
    // string figi = 11;
    void clear_figi() ;
    const std::string& figi() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_figi(Arg_&& arg, Args_... args);
    std::string* mutable_figi();
    PROTOBUF_NODISCARD std::string* release_figi();
    void set_allocated_figi(std::string* value);

private:
    const std::string& _internal_figi() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
        const std::string& value);
    std::string* _internal_mutable_figi();

public:
    // string message = 15;
    void clear_message() ;
    const std::string& message() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_message(Arg_&& arg, Args_... args);
    std::string* mutable_message();
    PROTOBUF_NODISCARD std::string* release_message();
    void set_allocated_message(std::string* value);

private:
    const std::string& _internal_message() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
        const std::string& value);
    std::string* _internal_mutable_message();

public:
    // string instrument_uid = 17;
    void clear_instrument_uid() ;
    const std::string& instrument_uid() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_instrument_uid(Arg_&& arg, Args_... args);
    std::string* mutable_instrument_uid();
    PROTOBUF_NODISCARD std::string* release_instrument_uid();
    void set_allocated_instrument_uid(std::string* value);

private:
    const std::string& _internal_instrument_uid() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
        const std::string& value);
    std::string* _internal_mutable_instrument_uid();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_order_price = 5;
    bool has_initial_order_price() const;
    void clear_initial_order_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_order_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_order_price();
    void set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_order_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_order_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_order_price();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue executed_order_price = 6;
    bool has_executed_order_price() const;
    void clear_executed_order_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_order_price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_order_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_order_price();
    void set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_order_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_order_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_order_price();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue total_order_amount = 7;
    bool has_total_order_amount() const;
    void clear_total_order_amount() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_order_amount();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_order_amount();
    void set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_order_amount();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_order_amount() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_order_amount();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_commission = 8;
    bool has_initial_commission() const;
    void clear_initial_commission() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_commission() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_commission();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_commission();
    void set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_commission();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_commission() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_commission();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue executed_commission = 9;
    bool has_executed_commission() const;
    void clear_executed_commission() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_commission();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_commission();
    void set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_commission();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_commission() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_commission();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue aci_value = 10;
    bool has_aci_value() const;
    void clear_aci_value() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_aci_value();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_aci_value();
    void set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_aci_value();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_aci_value() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_aci_value();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_security_price = 13;
    bool has_initial_security_price() const;
    void clear_initial_security_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_security_price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_security_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_security_price();
    void set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_security_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_security_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_security_price();

public:
    // .tinkoff.public.invest.api.contract.v1.Quotation initial_order_price_pt = 16;
    bool has_initial_order_price_pt() const;
    void clear_initial_order_price_pt() ;
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& initial_order_price_pt() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_initial_order_price_pt();
    ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_initial_order_price_pt();
    void set_allocated_initial_order_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    void unsafe_arena_set_allocated_initial_order_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_initial_order_price_pt();

private:
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_initial_order_price_pt() const;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_initial_order_price_pt();

public:
    // int64 lots_requested = 3;
    void clear_lots_requested() ;
    ::int64_t lots_requested() const;
    void set_lots_requested(::int64_t value);

private:
    ::int64_t _internal_lots_requested() const;
    void _internal_set_lots_requested(::int64_t value);

public:
    // int64 lots_executed = 4;
    void clear_lots_executed() ;
    ::int64_t lots_executed() const;
    void set_lots_executed(::int64_t value);

private:
    ::int64_t _internal_lots_executed() const;
    void _internal_set_lots_executed(::int64_t value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
    void clear_execution_report_status() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus execution_report_status() const;
    void set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus _internal_execution_report_status() const;
    void _internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 12;
    void clear_direction() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
    void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
    void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderType order_type = 14;
    void clear_order_type() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderType order_type() const;
    void set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderType _internal_order_type() const;
    void _internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PostOrderResponse)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        5, 17, 8,
        113, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* initial_order_price_pt_;
    ::int64_t lots_requested_;
    ::int64_t lots_executed_;
    int execution_report_status_;
    int direction_;
    int order_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class PostOrderRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PostOrderRequest) */ {
public:
    inline PostOrderRequest() : PostOrderRequest(nullptr) {}
    ~PostOrderRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR PostOrderRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline PostOrderRequest(const PostOrderRequest& from) : PostOrderRequest(nullptr, from) {}
    inline PostOrderRequest(PostOrderRequest&& from) noexcept
        : PostOrderRequest(nullptr, std::move(from)) {}
    inline PostOrderRequest& operator=(const PostOrderRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline PostOrderRequest& operator=(PostOrderRequest&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const PostOrderRequest& default_instance() {
        return *internal_default_instance();
    }
    static inline const PostOrderRequest* internal_default_instance() {
        return reinterpret_cast<const PostOrderRequest*>(
            &_PostOrderRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;
    friend void swap(PostOrderRequest& a, PostOrderRequest& b) { a.Swap(&b); }
    inline void Swap(PostOrderRequest* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(PostOrderRequest* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    PostOrderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<PostOrderRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const PostOrderRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const PostOrderRequest& from) { PostOrderRequest::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(PostOrderRequest* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PostOrderRequest"; }

protected:
    explicit PostOrderRequest(::google::protobuf::Arena* arena);
    PostOrderRequest(::google::protobuf::Arena* arena, const PostOrderRequest& from);
    PostOrderRequest(::google::protobuf::Arena* arena, PostOrderRequest&& from) noexcept
        : PostOrderRequest(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kFigiFieldNumber = 1,
    kAccountIdFieldNumber = 5,
    kOrderIdFieldNumber = 7,
    kInstrumentIdFieldNumber = 8,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 2,
    kDirectionFieldNumber = 4,
    kOrderTypeFieldNumber = 6,
    };
    // string figi = 1 [deprecated = true];
    [[deprecated]]  void clear_figi() ;
    [[deprecated]] const std::string& figi() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
    [[deprecated]] std::string* mutable_figi();
    [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
    [[deprecated]] void set_allocated_figi(std::string* value);

private:
    const std::string& _internal_figi() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
        const std::string& value);
    std::string* _internal_mutable_figi();

public:
    // string account_id = 5;
    void clear_account_id() ;
    const std::string& account_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_account_id(Arg_&& arg, Args_... args);
    std::string* mutable_account_id();
    PROTOBUF_NODISCARD std::string* release_account_id();
    void set_allocated_account_id(std::string* value);

private:
    const std::string& _internal_account_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
        const std::string& value);
    std::string* _internal_mutable_account_id();

public:
    // string order_id = 7;
    void clear_order_id() ;
    const std::string& order_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_id();
    PROTOBUF_NODISCARD std::string* release_order_id();
    void set_allocated_order_id(std::string* value);

private:
    const std::string& _internal_order_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
        const std::string& value);
    std::string* _internal_mutable_order_id();

public:
    // string instrument_id = 8;
    void clear_instrument_id() ;
    const std::string& instrument_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_instrument_id(Arg_&& arg, Args_... args);
    std::string* mutable_instrument_id();
    PROTOBUF_NODISCARD std::string* release_instrument_id();
    void set_allocated_instrument_id(std::string* value);

private:
    const std::string& _internal_instrument_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
        const std::string& value);
    std::string* _internal_mutable_instrument_id();

public:
    // .tinkoff.public.invest.api.contract.v1.Quotation price = 3;
    bool has_price() const;
    void clear_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
    ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
    void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();

public:
    // int64 quantity = 2;
    void clear_quantity() ;
    ::int64_t quantity() const;
    void set_quantity(::int64_t value);

private:
    ::int64_t _internal_quantity() const;
    void _internal_set_quantity(::int64_t value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 4;
    void clear_direction() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
    void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
    void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderType order_type = 6;
    void clear_order_type() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderType order_type() const;
    void set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderType _internal_order_type() const;
    void _internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PostOrderRequest)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        3, 8, 1,
        106, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    ::int64_t quantity_;
    int direction_;
    int order_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderTrade final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OrderTrade) */ {
public:
    inline OrderTrade() : OrderTrade(nullptr) {}
    ~OrderTrade() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR OrderTrade(
        ::google::protobuf::internal::ConstantInitialized);

    inline OrderTrade(const OrderTrade& from) : OrderTrade(nullptr, from) {}
    inline OrderTrade(OrderTrade&& from) noexcept
        : OrderTrade(nullptr, std::move(from)) {}
    inline OrderTrade& operator=(const OrderTrade& from) {
        CopyFrom(from);
        return *this;
    }
    inline OrderTrade& operator=(OrderTrade&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const OrderTrade& default_instance() {
        return *internal_default_instance();
    }
    static inline const OrderTrade* internal_default_instance() {
        return reinterpret_cast<const OrderTrade*>(
            &_OrderTrade_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;
    friend void swap(OrderTrade& a, OrderTrade& b) { a.Swap(&b); }
    inline void Swap(OrderTrade* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(OrderTrade* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    OrderTrade* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<OrderTrade>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const OrderTrade& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const OrderTrade& from) { OrderTrade::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(OrderTrade* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OrderTrade"; }

protected:
    explicit OrderTrade(::google::protobuf::Arena* arena);
    OrderTrade(::google::protobuf::Arena* arena, const OrderTrade& from);
    OrderTrade(::google::protobuf::Arena* arena, OrderTrade&& from) noexcept
        : OrderTrade(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kTradeIdFieldNumber = 4,
    kDateTimeFieldNumber = 1,
    kPriceFieldNumber = 2,
    kQuantityFieldNumber = 3,
    };
    // string trade_id = 4;
    void clear_trade_id() ;
    const std::string& trade_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_trade_id(Arg_&& arg, Args_... args);
    std::string* mutable_trade_id();
    PROTOBUF_NODISCARD std::string* release_trade_id();
    void set_allocated_trade_id(std::string* value);

private:
    const std::string& _internal_trade_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(
        const std::string& value);
    std::string* _internal_mutable_trade_id();

public:
    // .google.protobuf.Timestamp date_time = 1;
    bool has_date_time() const;
    void clear_date_time() ;
    const ::google::protobuf::Timestamp& date_time() const;
    PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date_time();
    ::google::protobuf::Timestamp* mutable_date_time();
    void set_allocated_date_time(::google::protobuf::Timestamp* value);
    void unsafe_arena_set_allocated_date_time(::google::protobuf::Timestamp* value);
    ::google::protobuf::Timestamp* unsafe_arena_release_date_time();

private:
    const ::google::protobuf::Timestamp& _internal_date_time() const;
    ::google::protobuf::Timestamp* _internal_mutable_date_time();

public:
    // .tinkoff.public.invest.api.contract.v1.Quotation price = 2;
    bool has_price() const;
    void clear_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
    ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
    void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
    ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();

public:
    // int64 quantity = 3;
    void clear_quantity() ;
    ::int64_t quantity() const;
    void set_quantity(::int64_t value);

private:
    ::int64_t _internal_quantity() const;
    void _internal_set_quantity(::int64_t value);

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OrderTrade)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        2, 4, 2,
        65, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr trade_id_;
    ::google::protobuf::Timestamp* date_time_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    ::int64_t quantity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderStage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OrderStage) */ {
public:
    inline OrderStage() : OrderStage(nullptr) {}
    ~OrderStage() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR OrderStage(
        ::google::protobuf::internal::ConstantInitialized);

    inline OrderStage(const OrderStage& from) : OrderStage(nullptr, from) {}
    inline OrderStage(OrderStage&& from) noexcept
        : OrderStage(nullptr, std::move(from)) {}
    inline OrderStage& operator=(const OrderStage& from) {
        CopyFrom(from);
        return *this;
    }
    inline OrderStage& operator=(OrderStage&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const OrderStage& default_instance() {
        return *internal_default_instance();
    }
    static inline const OrderStage* internal_default_instance() {
        return reinterpret_cast<const OrderStage*>(
            &_OrderStage_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 12;
    friend void swap(OrderStage& a, OrderStage& b) { a.Swap(&b); }
    inline void Swap(OrderStage* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(OrderStage* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    OrderStage* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<OrderStage>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const OrderStage& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const OrderStage& from) { OrderStage::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(OrderStage* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OrderStage"; }

protected:
    explicit OrderStage(::google::protobuf::Arena* arena);
    OrderStage(::google::protobuf::Arena* arena, const OrderStage& from);
    OrderStage(::google::protobuf::Arena* arena, OrderStage&& from) noexcept
        : OrderStage(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kTradeIdFieldNumber = 3,
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    };
    // string trade_id = 3;
    void clear_trade_id() ;
    const std::string& trade_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_trade_id(Arg_&& arg, Args_... args);
    std::string* mutable_trade_id();
    PROTOBUF_NODISCARD std::string* release_trade_id();
    void set_allocated_trade_id(std::string* value);

private:
    const std::string& _internal_trade_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(
        const std::string& value);
    std::string* _internal_mutable_trade_id();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue price = 1;
    bool has_price() const;
    void clear_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
    void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();

public:
    // int64 quantity = 2;
    void clear_quantity() ;
    ::int64_t quantity() const;
    void set_quantity(::int64_t value);

private:
    ::int64_t _internal_quantity() const;
    void _internal_set_quantity(::int64_t value);

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OrderStage)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        2, 3, 1,
        65, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr trade_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    ::int64_t quantity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.CancelOrderResponse) */ {
public:
    inline CancelOrderResponse() : CancelOrderResponse(nullptr) {}
    ~CancelOrderResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR CancelOrderResponse(
        ::google::protobuf::internal::ConstantInitialized);

    inline CancelOrderResponse(const CancelOrderResponse& from) : CancelOrderResponse(nullptr, from) {}
    inline CancelOrderResponse(CancelOrderResponse&& from) noexcept
        : CancelOrderResponse(nullptr, std::move(from)) {}
    inline CancelOrderResponse& operator=(const CancelOrderResponse& from) {
        CopyFrom(from);
        return *this;
    }
    inline CancelOrderResponse& operator=(CancelOrderResponse&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const CancelOrderResponse& default_instance() {
        return *internal_default_instance();
    }
    static inline const CancelOrderResponse* internal_default_instance() {
        return reinterpret_cast<const CancelOrderResponse*>(
            &_CancelOrderResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 7;
    friend void swap(CancelOrderResponse& a, CancelOrderResponse& b) { a.Swap(&b); }
    inline void Swap(CancelOrderResponse* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(CancelOrderResponse* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    CancelOrderResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<CancelOrderResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const CancelOrderResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const CancelOrderResponse& from) { CancelOrderResponse::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(CancelOrderResponse* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.CancelOrderResponse"; }

protected:
    explicit CancelOrderResponse(::google::protobuf::Arena* arena);
    CancelOrderResponse(::google::protobuf::Arena* arena, const CancelOrderResponse& from);
    CancelOrderResponse(::google::protobuf::Arena* arena, CancelOrderResponse&& from) noexcept
        : CancelOrderResponse(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kTimeFieldNumber = 1,
    };
    // .google.protobuf.Timestamp time = 1;
    bool has_time() const;
    void clear_time() ;
    const ::google::protobuf::Timestamp& time() const;
    PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
    ::google::protobuf::Timestamp* mutable_time();
    void set_allocated_time(::google::protobuf::Timestamp* value);
    void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
    ::google::protobuf::Timestamp* unsafe_arena_release_time();

private:
    const ::google::protobuf::Timestamp& _internal_time() const;
    ::google::protobuf::Timestamp* _internal_mutable_time();

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.CancelOrderResponse)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        0, 1, 1,
        0, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderTrades final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OrderTrades) */ {
public:
    inline OrderTrades() : OrderTrades(nullptr) {}
    ~OrderTrades() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR OrderTrades(
        ::google::protobuf::internal::ConstantInitialized);

    inline OrderTrades(const OrderTrades& from) : OrderTrades(nullptr, from) {}
    inline OrderTrades(OrderTrades&& from) noexcept
        : OrderTrades(nullptr, std::move(from)) {}
    inline OrderTrades& operator=(const OrderTrades& from) {
        CopyFrom(from);
        return *this;
    }
    inline OrderTrades& operator=(OrderTrades&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const OrderTrades& default_instance() {
        return *internal_default_instance();
    }
    static inline const OrderTrades* internal_default_instance() {
        return reinterpret_cast<const OrderTrades*>(
            &_OrderTrades_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;
    friend void swap(OrderTrades& a, OrderTrades& b) { a.Swap(&b); }
    inline void Swap(OrderTrades* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(OrderTrades* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    OrderTrades* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<OrderTrades>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const OrderTrades& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const OrderTrades& from) { OrderTrades::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(OrderTrades* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OrderTrades"; }

protected:
    explicit OrderTrades(::google::protobuf::Arena* arena);
    OrderTrades(::google::protobuf::Arena* arena, const OrderTrades& from);
    OrderTrades(::google::protobuf::Arena* arena, OrderTrades&& from) noexcept
        : OrderTrades(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kTradesFieldNumber = 5,
    kOrderIdFieldNumber = 1,
    kFigiFieldNumber = 4,
    kAccountIdFieldNumber = 6,
    kInstrumentUidFieldNumber = 7,
    kCreatedAtFieldNumber = 2,
    kDirectionFieldNumber = 3,
    };
    // repeated .tinkoff.public.invest.api.contract.v1.OrderTrade trades = 5;
    int trades_size() const;
private:
    int _internal_trades_size() const;

public:
    void clear_trades() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderTrade* mutable_trades(int index);
    ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>* mutable_trades();

private:
    const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>& _internal_trades() const;
    ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>* _internal_mutable_trades();
public:
    const ::tinkoff::public_::invest::api::contract::v1::OrderTrade& trades(int index) const;
    ::tinkoff::public_::invest::api::contract::v1::OrderTrade* add_trades();
    const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>& trades() const;
    // string order_id = 1;
    void clear_order_id() ;
    const std::string& order_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_id();
    PROTOBUF_NODISCARD std::string* release_order_id();
    void set_allocated_order_id(std::string* value);

private:
    const std::string& _internal_order_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
        const std::string& value);
    std::string* _internal_mutable_order_id();

public:
    // string figi = 4;
    void clear_figi() ;
    const std::string& figi() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_figi(Arg_&& arg, Args_... args);
    std::string* mutable_figi();
    PROTOBUF_NODISCARD std::string* release_figi();
    void set_allocated_figi(std::string* value);

private:
    const std::string& _internal_figi() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
        const std::string& value);
    std::string* _internal_mutable_figi();

public:
    // string account_id = 6;
    void clear_account_id() ;
    const std::string& account_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_account_id(Arg_&& arg, Args_... args);
    std::string* mutable_account_id();
    PROTOBUF_NODISCARD std::string* release_account_id();
    void set_allocated_account_id(std::string* value);

private:
    const std::string& _internal_account_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
        const std::string& value);
    std::string* _internal_mutable_account_id();

public:
    // string instrument_uid = 7;
    void clear_instrument_uid() ;
    const std::string& instrument_uid() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_instrument_uid(Arg_&& arg, Args_... args);
    std::string* mutable_instrument_uid();
    PROTOBUF_NODISCARD std::string* release_instrument_uid();
    void set_allocated_instrument_uid(std::string* value);

private:
    const std::string& _internal_instrument_uid() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
        const std::string& value);
    std::string* _internal_mutable_instrument_uid();

public:
    // .google.protobuf.Timestamp created_at = 2;
    bool has_created_at() const;
    void clear_created_at() ;
    const ::google::protobuf::Timestamp& created_at() const;
    PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
    ::google::protobuf::Timestamp* mutable_created_at();
    void set_allocated_created_at(::google::protobuf::Timestamp* value);
    void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
    ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

private:
    const ::google::protobuf::Timestamp& _internal_created_at() const;
    ::google::protobuf::Timestamp* _internal_mutable_created_at();

public:
    // .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 3;
    void clear_direction() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
    void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
    void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OrderTrades)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        3, 7, 2,
        94, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderTrade > trades_;
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::Timestamp* created_at_;
    int direction_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OrderState) */ {
public:
    inline OrderState() : OrderState(nullptr) {}
    ~OrderState() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR OrderState(
        ::google::protobuf::internal::ConstantInitialized);

    inline OrderState(const OrderState& from) : OrderState(nullptr, from) {}
    inline OrderState(OrderState&& from) noexcept
        : OrderState(nullptr, std::move(from)) {}
    inline OrderState& operator=(const OrderState& from) {
        CopyFrom(from);
        return *this;
    }
    inline OrderState& operator=(OrderState&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const OrderState& default_instance() {
        return *internal_default_instance();
    }
    static inline const OrderState* internal_default_instance() {
        return reinterpret_cast<const OrderState*>(
            &_OrderState_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 11;
    friend void swap(OrderState& a, OrderState& b) { a.Swap(&b); }
    inline void Swap(OrderState* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(OrderState* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    OrderState* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<OrderState>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const OrderState& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const OrderState& from) { OrderState::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(OrderState* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OrderState"; }

protected:
    explicit OrderState(::google::protobuf::Arena* arena);
    OrderState(::google::protobuf::Arena* arena, const OrderState& from);
    OrderState(::google::protobuf::Arena* arena, OrderState&& from) noexcept
        : OrderState(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kStagesFieldNumber = 14,
    kOrderIdFieldNumber = 1,
    kFigiFieldNumber = 11,
    kCurrencyFieldNumber = 16,
    kInstrumentUidFieldNumber = 19,
    kOrderRequestIdFieldNumber = 20,
    kInitialOrderPriceFieldNumber = 5,
    kExecutedOrderPriceFieldNumber = 6,
    kTotalOrderAmountFieldNumber = 7,
    kAveragePositionPriceFieldNumber = 8,
    kInitialCommissionFieldNumber = 9,
    kExecutedCommissionFieldNumber = 10,
    kInitialSecurityPriceFieldNumber = 13,
    kServiceCommissionFieldNumber = 15,
    kOrderDateFieldNumber = 18,
    kLotsRequestedFieldNumber = 3,
    kLotsExecutedFieldNumber = 4,
    kExecutionReportStatusFieldNumber = 2,
    kDirectionFieldNumber = 12,
    kOrderTypeFieldNumber = 17,
    };
    // repeated .tinkoff.public.invest.api.contract.v1.OrderStage stages = 14;
    int stages_size() const;
private:
    int _internal_stages_size() const;

public:
    void clear_stages() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderStage* mutable_stages(int index);
    ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>* mutable_stages();

private:
    const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>& _internal_stages() const;
    ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>* _internal_mutable_stages();
public:
    const ::tinkoff::public_::invest::api::contract::v1::OrderStage& stages(int index) const;
    ::tinkoff::public_::invest::api::contract::v1::OrderStage* add_stages();
    const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>& stages() const;
    // string order_id = 1;
    void clear_order_id() ;
    const std::string& order_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_id();
    PROTOBUF_NODISCARD std::string* release_order_id();
    void set_allocated_order_id(std::string* value);

private:
    const std::string& _internal_order_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
        const std::string& value);
    std::string* _internal_mutable_order_id();

public:
    // string figi = 11;
    void clear_figi() ;
    const std::string& figi() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_figi(Arg_&& arg, Args_... args);
    std::string* mutable_figi();
    PROTOBUF_NODISCARD std::string* release_figi();
    void set_allocated_figi(std::string* value);

private:
    const std::string& _internal_figi() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
        const std::string& value);
    std::string* _internal_mutable_figi();

public:
    // string currency = 16;
    void clear_currency() ;
    const std::string& currency() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_currency(Arg_&& arg, Args_... args);
    std::string* mutable_currency();
    PROTOBUF_NODISCARD std::string* release_currency();
    void set_allocated_currency(std::string* value);

private:
    const std::string& _internal_currency() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
        const std::string& value);
    std::string* _internal_mutable_currency();

public:
    // string instrument_uid = 19;
    void clear_instrument_uid() ;
    const std::string& instrument_uid() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_instrument_uid(Arg_&& arg, Args_... args);
    std::string* mutable_instrument_uid();
    PROTOBUF_NODISCARD std::string* release_instrument_uid();
    void set_allocated_instrument_uid(std::string* value);

private:
    const std::string& _internal_instrument_uid() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
        const std::string& value);
    std::string* _internal_mutable_instrument_uid();

public:
    // string order_request_id = 20;
    void clear_order_request_id() ;
    const std::string& order_request_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_order_request_id(Arg_&& arg, Args_... args);
    std::string* mutable_order_request_id();
    PROTOBUF_NODISCARD std::string* release_order_request_id();
    void set_allocated_order_request_id(std::string* value);

private:
    const std::string& _internal_order_request_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_request_id(
        const std::string& value);
    std::string* _internal_mutable_order_request_id();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_order_price = 5;
    bool has_initial_order_price() const;
    void clear_initial_order_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_order_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_order_price();
    void set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_order_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_order_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_order_price();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue executed_order_price = 6;
    bool has_executed_order_price() const;
    void clear_executed_order_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_order_price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_order_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_order_price();
    void set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_order_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_order_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_order_price();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue total_order_amount = 7;
    bool has_total_order_amount() const;
    void clear_total_order_amount() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_order_amount();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_order_amount();
    void set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_order_amount();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_order_amount() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_order_amount();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price = 8;
    bool has_average_position_price() const;
    void clear_average_position_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price();
    void set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_commission = 9;
    bool has_initial_commission() const;
    void clear_initial_commission() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_commission() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_commission();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_commission();
    void set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_commission();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_commission() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_commission();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue executed_commission = 10;
    bool has_executed_commission() const;
    void clear_executed_commission() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_commission();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_commission();
    void set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_commission();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_commission() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_commission();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_security_price = 13;
    bool has_initial_security_price() const;
    void clear_initial_security_price() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_security_price() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_security_price();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_security_price();
    void set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_security_price();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_security_price() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_security_price();

public:
    // .tinkoff.public.invest.api.contract.v1.MoneyValue service_commission = 15;
    bool has_service_commission() const;
    void clear_service_commission() ;
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& service_commission() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_service_commission();
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_service_commission();
    void set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    void unsafe_arena_set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_service_commission();

private:
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_service_commission() const;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_service_commission();

public:
    // .google.protobuf.Timestamp order_date = 18;
    bool has_order_date() const;
    void clear_order_date() ;
    const ::google::protobuf::Timestamp& order_date() const;
    PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_order_date();
    ::google::protobuf::Timestamp* mutable_order_date();
    void set_allocated_order_date(::google::protobuf::Timestamp* value);
    void unsafe_arena_set_allocated_order_date(::google::protobuf::Timestamp* value);
    ::google::protobuf::Timestamp* unsafe_arena_release_order_date();

private:
    const ::google::protobuf::Timestamp& _internal_order_date() const;
    ::google::protobuf::Timestamp* _internal_mutable_order_date();

public:
    // int64 lots_requested = 3;
    void clear_lots_requested() ;
    ::int64_t lots_requested() const;
    void set_lots_requested(::int64_t value);

private:
    ::int64_t _internal_lots_requested() const;
    void _internal_set_lots_requested(::int64_t value);

public:
    // int64 lots_executed = 4;
    void clear_lots_executed() ;
    ::int64_t lots_executed() const;
    void set_lots_executed(::int64_t value);

private:
    ::int64_t _internal_lots_executed() const;
    void _internal_set_lots_executed(::int64_t value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
    void clear_execution_report_status() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus execution_report_status() const;
    void set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus _internal_execution_report_status() const;
    void _internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 12;
    void clear_direction() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
    void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
    void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);

public:
    // .tinkoff.public.invest.api.contract.v1.OrderType order_type = 17;
    void clear_order_type() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderType order_type() const;
    void set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);

private:
    ::tinkoff::public_::invest::api::contract::v1::OrderType _internal_order_type() const;
    void _internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);

public:
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OrderState)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        5, 20, 10,
        123, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderStage > stages_;
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::internal::ArenaStringPtr order_request_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission_;
    ::google::protobuf::Timestamp* order_date_;
    ::int64_t lots_requested_;
    ::int64_t lots_executed_;
    int execution_report_status_;
    int direction_;
    int order_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class TradesStreamResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.TradesStreamResponse) */ {
public:
    inline TradesStreamResponse() : TradesStreamResponse(nullptr) {}
    ~TradesStreamResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR TradesStreamResponse(
        ::google::protobuf::internal::ConstantInitialized);

    inline TradesStreamResponse(const TradesStreamResponse& from) : TradesStreamResponse(nullptr, from) {}
    inline TradesStreamResponse(TradesStreamResponse&& from) noexcept
        : TradesStreamResponse(nullptr, std::move(from)) {}
    inline TradesStreamResponse& operator=(const TradesStreamResponse& from) {
        CopyFrom(from);
        return *this;
    }
    inline TradesStreamResponse& operator=(TradesStreamResponse&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const TradesStreamResponse& default_instance() {
        return *internal_default_instance();
    }
    enum PayloadCase {
    kOrderTrades = 1,
    kPing = 2,
    PAYLOAD_NOT_SET = 0,
    };
    static inline const TradesStreamResponse* internal_default_instance() {
        return reinterpret_cast<const TradesStreamResponse*>(
            &_TradesStreamResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;
    friend void swap(TradesStreamResponse& a, TradesStreamResponse& b) { a.Swap(&b); }
    inline void Swap(TradesStreamResponse* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TradesStreamResponse* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    TradesStreamResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<TradesStreamResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const TradesStreamResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const TradesStreamResponse& from) { TradesStreamResponse::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(TradesStreamResponse* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.TradesStreamResponse"; }

protected:
    explicit TradesStreamResponse(::google::protobuf::Arena* arena);
    TradesStreamResponse(::google::protobuf::Arena* arena, const TradesStreamResponse& from);
    TradesStreamResponse(::google::protobuf::Arena* arena, TradesStreamResponse&& from) noexcept
        : TradesStreamResponse(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kOrderTradesFieldNumber = 1,
    kPingFieldNumber = 2,
    };
    // .tinkoff.public.invest.api.contract.v1.OrderTrades order_trades = 1;
    bool has_order_trades() const;
private:
    bool _internal_has_order_trades() const;

public:
    void clear_order_trades() ;
    const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& order_trades() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::OrderTrades* release_order_trades();
    ::tinkoff::public_::invest::api::contract::v1::OrderTrades* mutable_order_trades();
    void set_allocated_order_trades(::tinkoff::public_::invest::api::contract::v1::OrderTrades* value);
    void unsafe_arena_set_allocated_order_trades(::tinkoff::public_::invest::api::contract::v1::OrderTrades* value);
    ::tinkoff::public_::invest::api::contract::v1::OrderTrades* unsafe_arena_release_order_trades();

private:
    const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& _internal_order_trades() const;
    ::tinkoff::public_::invest::api::contract::v1::OrderTrades* _internal_mutable_order_trades();

public:
    // .tinkoff.public.invest.api.contract.v1.Ping ping = 2;
    bool has_ping() const;
private:
    bool _internal_has_ping() const;

public:
    void clear_ping() ;
    const ::tinkoff::public_::invest::api::contract::v1::Ping& ping() const;
    PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Ping* release_ping();
    ::tinkoff::public_::invest::api::contract::v1::Ping* mutable_ping();
    void set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value);
    void unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value);
    ::tinkoff::public_::invest::api::contract::v1::Ping* unsafe_arena_release_ping();

private:
    const ::tinkoff::public_::invest::api::contract::v1::Ping& _internal_ping() const;
    ::tinkoff::public_::invest::api::contract::v1::Ping* _internal_mutable_ping();

public:
    void clear_payload();
    PayloadCase payload_case() const;
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.TradesStreamResponse)
private:
    class _Internal;
    void set_has_order_trades();
    void set_has_ping();
    inline bool has_payload() const;
    inline void clear_has_payload();
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        0, 2, 2,
        0, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
    ::google::protobuf::internal::ConstantInitialized _constinit_;
    ::tinkoff::public_::invest::api::contract::v1::OrderTrades* order_trades_;
    ::tinkoff::public_::invest::api::contract::v1::Ping* ping_;
    } payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrdersResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetOrdersResponse) */ {
public:
    inline GetOrdersResponse() : GetOrdersResponse(nullptr) {}
    ~GetOrdersResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR GetOrdersResponse(
        ::google::protobuf::internal::ConstantInitialized);

    inline GetOrdersResponse(const GetOrdersResponse& from) : GetOrdersResponse(nullptr, from) {}
    inline GetOrdersResponse(GetOrdersResponse&& from) noexcept
        : GetOrdersResponse(nullptr, std::move(from)) {}
    inline GetOrdersResponse& operator=(const GetOrdersResponse& from) {
        CopyFrom(from);
        return *this;
    }
    inline GetOrdersResponse& operator=(GetOrdersResponse&& from) noexcept {
        if (this == &from) return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const GetOrdersResponse& default_instance() {
        return *internal_default_instance();
    }
    static inline const GetOrdersResponse* internal_default_instance() {
        return reinterpret_cast<const GetOrdersResponse*>(
            &_GetOrdersResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 10;
    friend void swap(GetOrdersResponse& a, GetOrdersResponse& b) { a.Swap(&b); }
    inline void Swap(GetOrdersResponse* other) {
        if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GetOrdersResponse* other) {
        if (other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    GetOrdersResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::Message::DefaultConstruct<GetOrdersResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const GetOrdersResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const GetOrdersResponse& from) { GetOrdersResponse::MergeImpl(*this, from); }

private:
    static void MergeImpl(
        ::google::protobuf::MessageLite& to_msg,
        const ::google::protobuf::MessageLite& from_msg);

public:
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(GetOrdersResponse* other);
private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetOrdersResponse"; }

protected:
    explicit GetOrdersResponse(::google::protobuf::Arena* arena);
    GetOrdersResponse(::google::protobuf::Arena* arena, const GetOrdersResponse& from);
    GetOrdersResponse(::google::protobuf::Arena* arena, GetOrdersResponse&& from) noexcept
        : GetOrdersResponse(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
    kOrdersFieldNumber = 1,
    };
    // repeated .tinkoff.public.invest.api.contract.v1.OrderState orders = 1;
    int orders_size() const;
private:
    int _internal_orders_size() const;

public:
    void clear_orders() ;
    ::tinkoff::public_::invest::api::contract::v1::OrderState* mutable_orders(int index);
    ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>* mutable_orders();

private:
    const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>& _internal_orders() const;
    ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>* _internal_mutable_orders();
public:
    const ::tinkoff::public_::invest::api::contract::v1::OrderState& orders(int index) const;
    ::tinkoff::public_::invest::api::contract::v1::OrderState* add_orders();
    const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>& orders() const;
    // @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetOrdersResponse)
private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<
        0, 1, 1,
        0, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderState > orders_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union { Impl_ _impl_; };
    friend struct ::TableStruct_orders_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TradesStreamRequest

// repeated string accounts = 1;
inline int TradesStreamRequest::_internal_accounts_size() const {
    return _internal_accounts().size();
}
inline int TradesStreamRequest::accounts_size() const {
    return _internal_accounts_size();
}
inline void TradesStreamRequest::clear_accounts() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.accounts_.Clear();
}
inline std::string* TradesStreamRequest::add_accounts()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
std::string* _s = _internal_mutable_accounts()->Add();
// @@protoc_insertion_point(field_add_mutable:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
return _s;
}
inline const std::string& TradesStreamRequest::accounts(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
return _internal_accounts().Get(index);
}
inline std::string* TradesStreamRequest::mutable_accounts(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
return _internal_mutable_accounts()->Mutable(index);
}
inline void TradesStreamRequest::set_accounts(int index, const std::string& value) {
    _internal_mutable_accounts()->Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::set_accounts(int index, std::string&& value) {
    _internal_mutable_accounts()->Mutable(index)->assign(std::move(value));
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::set_accounts(int index, const char* value) {
    ABSL_DCHECK(value != nullptr);
    _internal_mutable_accounts()->Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::set_accounts(int index, const char* value,
                                              std::size_t size) {
    _internal_mutable_accounts()->Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::set_accounts(int index, absl::string_view value) {
    _internal_mutable_accounts()->Mutable(index)->assign(
        value.data(), value.size());
    // @@protoc_insertion_point(field_set_string_piece:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_accounts()->Add()->assign(value);
    // @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(std::string&& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_accounts()->Add(std::move(value));
    // @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(const char* value) {
    ABSL_DCHECK(value != nullptr);
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_accounts()->Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(const char* value, std::size_t size) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_accounts()->Add()->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(absl::string_view value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_accounts()->Add()->assign(value.data(),
                                                value.size());
    // @@protoc_insertion_point(field_add_string_piece:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TradesStreamRequest::accounts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
return _internal_accounts();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TradesStreamRequest::mutable_accounts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.TradesStreamRequest.accounts)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_accounts();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TradesStreamRequest::_internal_accounts() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.accounts_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TradesStreamRequest::_internal_mutable_accounts() {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// TradesStreamResponse

// .tinkoff.public.invest.api.contract.v1.OrderTrades order_trades = 1;
inline bool TradesStreamResponse::has_order_trades() const {
    return payload_case() == kOrderTrades;
}
inline bool TradesStreamResponse::_internal_has_order_trades() const {
    return payload_case() == kOrderTrades;
}
inline void TradesStreamResponse::set_has_order_trades() {
    _impl_._oneof_case_[0] = kOrderTrades;
}
inline void TradesStreamResponse::clear_order_trades() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (payload_case() == kOrderTrades) {
        if (GetArena() == nullptr) {
            delete _impl_.payload_.order_trades_;
        }
        clear_has_payload();
    }
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::release_order_trades() {
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.order_trades)
    if (payload_case() == kOrderTrades) {
        clear_has_payload();
        auto* temp = _impl_.payload_.order_trades_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.payload_.order_trades_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& TradesStreamResponse::_internal_order_trades() const {
    return payload_case() == kOrderTrades ? *_impl_.payload_.order_trades_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::OrderTrades&>(::tinkoff::public_::invest::api::contract::v1::_OrderTrades_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& TradesStreamResponse::order_trades() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.order_trades)
return _internal_order_trades();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::unsafe_arena_release_order_trades() {
    // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.order_trades)
    if (payload_case() == kOrderTrades) {
        clear_has_payload();
        auto* temp = _impl_.payload_.order_trades_;
        _impl_.payload_.order_trades_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TradesStreamResponse::unsafe_arena_set_allocated_order_trades(::tinkoff::public_::invest::api::contract::v1::OrderTrades* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_payload();
    if (value) {
        set_has_order_trades();
        _impl_.payload_.order_trades_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.order_trades)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::_internal_mutable_order_trades() {
    if (payload_case() != kOrderTrades) {
        clear_payload();
        set_has_order_trades();
        _impl_.payload_.order_trades_ =
            ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::OrderTrades>(GetArena());
    }
    return _impl_.payload_.order_trades_;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::mutable_order_trades() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::OrderTrades* _msg = _internal_mutable_order_trades();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.order_trades)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.Ping ping = 2;
inline bool TradesStreamResponse::has_ping() const {
    return payload_case() == kPing;
}
inline bool TradesStreamResponse::_internal_has_ping() const {
    return payload_case() == kPing;
}
inline void TradesStreamResponse::set_has_ping() {
    _impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::release_ping() {
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.ping)
    if (payload_case() == kPing) {
        clear_has_payload();
        auto* temp = _impl_.payload_.ping_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.payload_.ping_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& TradesStreamResponse::_internal_ping() const {
    return payload_case() == kPing ? *_impl_.payload_.ping_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Ping&>(::tinkoff::public_::invest::api::contract::v1::_Ping_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& TradesStreamResponse::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.ping)
return _internal_ping();
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::unsafe_arena_release_ping() {
    // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.ping)
    if (payload_case() == kPing) {
        clear_has_payload();
        auto* temp = _impl_.payload_.ping_;
        _impl_.payload_.ping_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TradesStreamResponse::unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_payload();
    if (value) {
        set_has_ping();
        _impl_.payload_.ping_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.ping)
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::_internal_mutable_ping() {
    if (payload_case() != kPing) {
        clear_payload();
        set_has_ping();
        _impl_.payload_.ping_ =
            ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Ping>(GetArena());
    }
    return _impl_.payload_.ping_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::Ping* _msg = _internal_mutable_ping();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.TradesStreamResponse.ping)
return _msg;
}

inline bool TradesStreamResponse::has_payload() const {
    return payload_case() != PAYLOAD_NOT_SET;
}
inline void TradesStreamResponse::clear_has_payload() {
    _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline TradesStreamResponse::PayloadCase TradesStreamResponse::payload_case() const {
    return TradesStreamResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OrderTrades

// string order_id = 1;
inline void OrderTrades::clear_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.ClearToEmpty();
}
inline const std::string& OrderTrades::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrades.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderTrades::set_order_id(Arg_&& arg,
                                                             Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderTrades.order_id)
}
inline std::string* OrderTrades::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrades.order_id)
return _s;
}
inline const std::string& OrderTrades::_internal_order_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Get();
}
inline void OrderTrades::_internal_set_order_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(value, GetArena());
}
inline std::string* OrderTrades::_internal_mutable_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* OrderTrades::release_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrades.order_id)
    return _impl_.order_id_.Release();
}
inline void OrderTrades::set_allocated_order_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_id_.IsDefault()) {
          _impl_.order_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrades.order_id)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool OrderTrades::has_created_at() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
    return value;
}
inline const ::google::protobuf::Timestamp& OrderTrades::_internal_created_at() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::google::protobuf::Timestamp* p = _impl_.created_at_;
    return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OrderTrades::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrades.created_at)
return _internal_created_at();
}
inline void OrderTrades::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
    }
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrades.created_at)
}
inline ::google::protobuf::Timestamp* OrderTrades::release_created_at() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::google::protobuf::Timestamp* released = _impl_.created_at_;
    _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::google::protobuf::Timestamp* OrderTrades::unsafe_arena_release_created_at() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrades.created_at)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::google::protobuf::Timestamp* temp = _impl_.created_at_;
    _impl_.created_at_ = nullptr;
    return temp;
}
inline ::google::protobuf::Timestamp* OrderTrades::_internal_mutable_created_at() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.created_at_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
        _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
    }
    return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* OrderTrades::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrades.created_at)
return _msg;
}
inline void OrderTrades::set_allocated_created_at(::google::protobuf::Timestamp* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrades.created_at)
}

// .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 3;
inline void OrderTrades::clear_direction() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderTrades::direction() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrades.direction)
    return _internal_direction();
}
inline void OrderTrades::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    _internal_set_direction(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderTrades.direction)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderTrades::_internal_direction() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(_impl_.direction_);
}
inline void OrderTrades::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = value;
}

// string figi = 4;
inline void OrderTrades::clear_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.ClearToEmpty();
}
inline const std::string& OrderTrades::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrades.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderTrades::set_figi(Arg_&& arg,
                                                         Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderTrades.figi)
}
inline std::string* OrderTrades::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrades.figi)
return _s;
}
inline const std::string& OrderTrades::_internal_figi() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.figi_.Get();
}
inline void OrderTrades::_internal_set_figi(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(value, GetArena());
}
inline std::string* OrderTrades::_internal_mutable_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.figi_.Mutable( GetArena());
}
inline std::string* OrderTrades::release_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrades.figi)
    return _impl_.figi_.Release();
}
inline void OrderTrades::set_allocated_figi(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrades.figi)
}

// repeated .tinkoff.public.invest.api.contract.v1.OrderTrade trades = 5;
inline int OrderTrades::_internal_trades_size() const {
    return _internal_trades().size();
}
inline int OrderTrades::trades_size() const {
    return _internal_trades_size();
}
inline void OrderTrades::clear_trades() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trades_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrade* OrderTrades::mutable_trades(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrades.trades)
return _internal_mutable_trades()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>* OrderTrades::mutable_trades()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.OrderTrades.trades)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_trades();
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderTrade& OrderTrades::trades(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrades.trades)
return _internal_trades().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrade* OrderTrades::add_trades() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::OrderTrade* _add = _internal_mutable_trades()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.OrderTrades.trades)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>& OrderTrades::trades() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.OrderTrades.trades)
return _internal_trades();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>&
OrderTrades::_internal_trades() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.trades_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderTrade>*
OrderTrades::_internal_mutable_trades() {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.trades_;
}

// string account_id = 6;
inline void OrderTrades::clear_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderTrades::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrades.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderTrades::set_account_id(Arg_&& arg,
                                                               Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderTrades.account_id)
}
inline std::string* OrderTrades::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrades.account_id)
return _s;
}
inline const std::string& OrderTrades::_internal_account_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Get();
}
inline void OrderTrades::_internal_set_account_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(value, GetArena());
}
inline std::string* OrderTrades::_internal_mutable_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* OrderTrades::release_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrades.account_id)
    return _impl_.account_id_.Release();
}
inline void OrderTrades::set_allocated_account_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrades.account_id)
}

// string instrument_uid = 7;
inline void OrderTrades::clear_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OrderTrades::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrades.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderTrades::set_instrument_uid(Arg_&& arg,
                                                                   Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderTrades.instrument_uid)
}
inline std::string* OrderTrades::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrades.instrument_uid)
return _s;
}
inline const std::string& OrderTrades::_internal_instrument_uid() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.instrument_uid_.Get();
}
inline void OrderTrades::_internal_set_instrument_uid(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* OrderTrades::_internal_mutable_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* OrderTrades::release_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrades.instrument_uid)
    return _impl_.instrument_uid_.Release();
}
inline void OrderTrades::set_allocated_instrument_uid(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.instrument_uid_.IsDefault()) {
          _impl_.instrument_uid_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrades.instrument_uid)
}

// -------------------------------------------------------------------

// OrderTrade

// .google.protobuf.Timestamp date_time = 1;
inline bool OrderTrade::has_date_time() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.date_time_ != nullptr);
    return value;
}
inline const ::google::protobuf::Timestamp& OrderTrade::_internal_date_time() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::google::protobuf::Timestamp* p = _impl_.date_time_;
    return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OrderTrade::date_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrade.date_time)
return _internal_date_time();
}
inline void OrderTrade::unsafe_arena_set_allocated_date_time(::google::protobuf::Timestamp* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_time_);
    }
    _impl_.date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrade.date_time)
}
inline ::google::protobuf::Timestamp* OrderTrade::release_date_time() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::google::protobuf::Timestamp* released = _impl_.date_time_;
    _impl_.date_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::google::protobuf::Timestamp* OrderTrade::unsafe_arena_release_date_time() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrade.date_time)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::google::protobuf::Timestamp* temp = _impl_.date_time_;
    _impl_.date_time_ = nullptr;
    return temp;
}
inline ::google::protobuf::Timestamp* OrderTrade::_internal_mutable_date_time() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.date_time_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
        _impl_.date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
    }
    return _impl_.date_time_;
}
inline ::google::protobuf::Timestamp* OrderTrade::mutable_date_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_date_time();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrade.date_time)
return _msg;
}
inline void OrderTrade::set_allocated_date_time(::google::protobuf::Timestamp* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_time_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrade.date_time)
}

// .tinkoff.public.invest.api.contract.v1.Quotation price = 2;
inline bool OrderTrade::has_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OrderTrade::_internal_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OrderTrade::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrade.price)
return _internal_price();
}
inline void OrderTrade::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }
    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrade.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.price_;
    _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::unsafe_arena_release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrade.price)

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
    _impl_.price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::_internal_mutable_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
        _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
    }
    return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrade.price)
return _msg;
}
inline void OrderTrade::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }

    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrade.price)
}

// int64 quantity = 3;
inline void OrderTrade::clear_quantity() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t OrderTrade::quantity() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrade.quantity)
    return _internal_quantity();
}
inline void OrderTrade::set_quantity(::int64_t value) {
    _internal_set_quantity(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderTrade.quantity)
}
inline ::int64_t OrderTrade::_internal_quantity() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.quantity_;
}
inline void OrderTrade::_internal_set_quantity(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = value;
}

// string trade_id = 4;
inline void OrderTrade::clear_trade_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.ClearToEmpty();
}
inline const std::string& OrderTrade::trade_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderTrade.trade_id)
return _internal_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderTrade::set_trade_id(Arg_&& arg,
                                                            Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderTrade.trade_id)
}
inline std::string* OrderTrade::mutable_trade_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_trade_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderTrade.trade_id)
return _s;
}
inline const std::string& OrderTrade::_internal_trade_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.trade_id_.Get();
}
inline void OrderTrade::_internal_set_trade_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.Set(value, GetArena());
}
inline std::string* OrderTrade::_internal_mutable_trade_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.trade_id_.Mutable( GetArena());
}
inline std::string* OrderTrade::release_trade_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderTrade.trade_id)
    return _impl_.trade_id_.Release();
}
inline void OrderTrade::set_allocated_trade_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.trade_id_.IsDefault()) {
          _impl_.trade_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderTrade.trade_id)
}

// -------------------------------------------------------------------

// PostOrderRequest

// string figi = 1 [deprecated = true];
inline void PostOrderRequest::clear_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.ClearToEmpty();
}
inline const std::string& PostOrderRequest::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderRequest::set_figi(Arg_&& arg,
                                                              Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderRequest.figi)
}
inline std::string* PostOrderRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderRequest.figi)
return _s;
}
inline const std::string& PostOrderRequest::_internal_figi() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.figi_.Get();
}
inline void PostOrderRequest::_internal_set_figi(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(value, GetArena());
}
inline std::string* PostOrderRequest::_internal_mutable_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.figi_.Mutable( GetArena());
}
inline std::string* PostOrderRequest::release_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderRequest.figi)
    return _impl_.figi_.Release();
}
inline void PostOrderRequest::set_allocated_figi(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderRequest.figi)
}

// int64 quantity = 2;
inline void PostOrderRequest::clear_quantity() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t PostOrderRequest::quantity() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.quantity)
    return _internal_quantity();
}
inline void PostOrderRequest::set_quantity(::int64_t value) {
    _internal_set_quantity(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderRequest.quantity)
}
inline ::int64_t PostOrderRequest::_internal_quantity() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.quantity_;
}
inline void PostOrderRequest::_internal_set_quantity(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = value;
}

// .tinkoff.public.invest.api.contract.v1.Quotation price = 3;
inline bool PostOrderRequest::has_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderRequest::_internal_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderRequest::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.price)
return _internal_price();
}
inline void PostOrderRequest::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }
    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderRequest.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.price_;
    _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::unsafe_arena_release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderRequest.price)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
    _impl_.price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::_internal_mutable_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
        _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
    }
    return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderRequest.price)
return _msg;
}
inline void PostOrderRequest::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderRequest.price)
}

// .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 4;
inline void PostOrderRequest::clear_direction() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderRequest::direction() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.direction)
    return _internal_direction();
}
inline void PostOrderRequest::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    _internal_set_direction(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderRequest.direction)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderRequest::_internal_direction() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(_impl_.direction_);
}
inline void PostOrderRequest::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = value;
}

// string account_id = 5;
inline void PostOrderRequest::clear_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PostOrderRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderRequest::set_account_id(Arg_&& arg,
                                                                    Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderRequest.account_id)
}
inline std::string* PostOrderRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderRequest.account_id)
return _s;
}
inline const std::string& PostOrderRequest::_internal_account_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Get();
}
inline void PostOrderRequest::_internal_set_account_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(value, GetArena());
}
inline std::string* PostOrderRequest::_internal_mutable_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* PostOrderRequest::release_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderRequest.account_id)
    return _impl_.account_id_.Release();
}
inline void PostOrderRequest::set_allocated_account_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderRequest.account_id)
}

// .tinkoff.public.invest.api.contract.v1.OrderType order_type = 6;
inline void PostOrderRequest::clear_order_type() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderRequest::order_type() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_type)
    return _internal_order_type();
}
inline void PostOrderRequest::set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
    _internal_set_order_type(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderRequest::_internal_order_type() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderType>(_impl_.order_type_);
}
inline void PostOrderRequest::_internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_type_ = value;
}

// string order_id = 7;
inline void PostOrderRequest::clear_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.ClearToEmpty();
}
inline const std::string& PostOrderRequest::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderRequest::set_order_id(Arg_&& arg,
                                                                  Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_id)
}
inline std::string* PostOrderRequest::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_id)
return _s;
}
inline const std::string& PostOrderRequest::_internal_order_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Get();
}
inline void PostOrderRequest::_internal_set_order_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(value, GetArena());
}
inline std::string* PostOrderRequest::_internal_mutable_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* PostOrderRequest::release_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_id)
    return _impl_.order_id_.Release();
}
inline void PostOrderRequest::set_allocated_order_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_id_.IsDefault()) {
          _impl_.order_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_id)
}

// string instrument_id = 8;
inline void PostOrderRequest::clear_instrument_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& PostOrderRequest::instrument_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderRequest.instrument_id)
return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderRequest::set_instrument_id(Arg_&& arg,
                                                                       Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderRequest.instrument_id)
}
inline std::string* PostOrderRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderRequest.instrument_id)
return _s;
}
inline const std::string& PostOrderRequest::_internal_instrument_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.instrument_id_.Get();
}
inline void PostOrderRequest::_internal_set_instrument_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* PostOrderRequest::_internal_mutable_instrument_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* PostOrderRequest::release_instrument_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderRequest.instrument_id)
    return _impl_.instrument_id_.Release();
}
inline void PostOrderRequest::set_allocated_instrument_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderRequest.instrument_id)
}

// -------------------------------------------------------------------

// PostOrderResponse

// string order_id = 1;
inline void PostOrderResponse::clear_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderResponse::set_order_id(Arg_&& arg,
                                                                   Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_id)
}
inline std::string* PostOrderResponse::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_id)
return _s;
}
inline const std::string& PostOrderResponse::_internal_order_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Get();
}
inline void PostOrderResponse::_internal_set_order_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(value, GetArena());
}
inline std::string* PostOrderResponse::_internal_mutable_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* PostOrderResponse::release_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_id)
    return _impl_.order_id_.Release();
}
inline void PostOrderResponse::set_allocated_order_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_id_.IsDefault()) {
          _impl_.order_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_id)
}

// .tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
inline void PostOrderResponse::clear_execution_report_status() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.execution_report_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus PostOrderResponse::execution_report_status() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.execution_report_status)
    return _internal_execution_report_status();
}
inline void PostOrderResponse::set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
    _internal_set_execution_report_status(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.execution_report_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus PostOrderResponse::_internal_execution_report_status() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus>(_impl_.execution_report_status_);
}
inline void PostOrderResponse::_internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.execution_report_status_ = value;
}

// int64 lots_requested = 3;
inline void PostOrderResponse::clear_lots_requested() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_requested_ = ::int64_t{0};
}
inline ::int64_t PostOrderResponse::lots_requested() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.lots_requested)
    return _internal_lots_requested();
}
inline void PostOrderResponse::set_lots_requested(::int64_t value) {
    _internal_set_lots_requested(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.lots_requested)
}
inline ::int64_t PostOrderResponse::_internal_lots_requested() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.lots_requested_;
}
inline void PostOrderResponse::_internal_set_lots_requested(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_requested_ = value;
}

// int64 lots_executed = 4;
inline void PostOrderResponse::clear_lots_executed() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_executed_ = ::int64_t{0};
}
inline ::int64_t PostOrderResponse::lots_executed() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.lots_executed)
    return _internal_lots_executed();
}
inline void PostOrderResponse::set_lots_executed(::int64_t value) {
    _internal_set_lots_executed(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.lots_executed)
}
inline ::int64_t PostOrderResponse::_internal_lots_executed() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.lots_executed_;
}
inline void PostOrderResponse::_internal_set_lots_executed(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_executed_ = value;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue initial_order_price = 5;
inline bool PostOrderResponse::has_initial_order_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.initial_order_price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_initial_order_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_order_price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::initial_order_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price)
return _internal_initial_order_price();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_order_price_);
    }
    _impl_.initial_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_initial_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_order_price_;
    _impl_.initial_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_initial_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_price_;
    _impl_.initial_order_price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_initial_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.initial_order_price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.initial_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.initial_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_initial_order_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_order_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price)
return _msg;
}
inline void PostOrderResponse::set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_order_price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.initial_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue executed_order_price = 6;
inline bool PostOrderResponse::has_executed_order_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.executed_order_price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_executed_order_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_order_price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::executed_order_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_order_price)
return _internal_executed_order_price();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_order_price_);
    }
    _impl_.executed_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_executed_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.executed_order_price_;
    _impl_.executed_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_executed_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_order_price)

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_order_price_;
    _impl_.executed_order_price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_executed_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.executed_order_price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.executed_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.executed_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_executed_order_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_order_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_order_price)
return _msg;
}
inline void PostOrderResponse::set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_order_price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }

    _impl_.executed_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_order_price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_order_amount = 7;
inline bool PostOrderResponse::has_total_order_amount() const {
    bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.total_order_amount_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_total_order_amount() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_order_amount_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::total_order_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.total_order_amount)
return _internal_total_order_amount();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_order_amount_);
    }
    _impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000004u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000004u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.total_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_total_order_amount() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000004u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_order_amount_;
    _impl_.total_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_total_order_amount() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.total_order_amount)

    _impl_._has_bits_[0] &= ~0x00000004u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
    _impl_.total_order_amount_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_total_order_amount() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.total_order_amount_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.total_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_total_order_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_order_amount();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.total_order_amount)
return _msg;
}
inline void PostOrderResponse::set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_order_amount_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000004u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000004u;
    }

    _impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.total_order_amount)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue initial_commission = 8;
inline bool PostOrderResponse::has_initial_commission() const {
    bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.initial_commission_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_initial_commission() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_commission_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::initial_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_commission)
return _internal_initial_commission();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_commission_);
    }
    _impl_.initial_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000008u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000008u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_initial_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000008u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_commission_;
    _impl_.initial_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_initial_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_commission)

    _impl_._has_bits_[0] &= ~0x00000008u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_commission_;
    _impl_.initial_commission_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_initial_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.initial_commission_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.initial_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.initial_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_initial_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_commission)
return _msg;
}
inline void PostOrderResponse::set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_commission_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000008u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000008u;
    }

    _impl_.initial_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_commission)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue executed_commission = 9;
inline bool PostOrderResponse::has_executed_commission() const {
    bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.executed_commission_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_executed_commission() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_commission_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::executed_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_commission)
return _internal_executed_commission();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_commission_);
    }
    _impl_.executed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000010u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000010u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_executed_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000010u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.executed_commission_;
    _impl_.executed_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_executed_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_commission)

    _impl_._has_bits_[0] &= ~0x00000010u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
    _impl_.executed_commission_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_executed_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.executed_commission_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.executed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.executed_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_executed_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_commission)
return _msg;
}
inline void PostOrderResponse::set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_commission_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000010u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000010u;
    }

    _impl_.executed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_commission)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue aci_value = 10;
inline bool PostOrderResponse::has_aci_value() const {
    bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.aci_value_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_aci_value() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.aci_value_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::aci_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.aci_value)
return _internal_aci_value();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aci_value_);
    }
    _impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000020u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000020u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.aci_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_aci_value() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000020u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.aci_value_;
    _impl_.aci_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_aci_value() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.aci_value)

    _impl_._has_bits_[0] &= ~0x00000020u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.aci_value_;
    _impl_.aci_value_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_aci_value() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.aci_value_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.aci_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_aci_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_aci_value();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.aci_value)
return _msg;
}
inline void PostOrderResponse::set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aci_value_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000020u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000020u;
    }

    _impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.aci_value)
}

// string figi = 11;
inline void PostOrderResponse::clear_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderResponse::set_figi(Arg_&& arg,
                                                               Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.figi)
}
inline std::string* PostOrderResponse::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.figi)
return _s;
}
inline const std::string& PostOrderResponse::_internal_figi() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.figi_.Get();
}
inline void PostOrderResponse::_internal_set_figi(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(value, GetArena());
}
inline std::string* PostOrderResponse::_internal_mutable_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.figi_.Mutable( GetArena());
}
inline std::string* PostOrderResponse::release_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.figi)
    return _impl_.figi_.Release();
}
inline void PostOrderResponse::set_allocated_figi(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.figi)
}

// .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 12;
inline void PostOrderResponse::clear_direction() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderResponse::direction() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.direction)
    return _internal_direction();
}
inline void PostOrderResponse::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    _internal_set_direction(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.direction)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderResponse::_internal_direction() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(_impl_.direction_);
}
inline void PostOrderResponse::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = value;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue initial_security_price = 13;
inline bool PostOrderResponse::has_initial_security_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.initial_security_price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_initial_security_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_security_price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::initial_security_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_security_price)
return _internal_initial_security_price();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_security_price_);
    }
    _impl_.initial_security_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000040u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000040u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_security_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_initial_security_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000040u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_security_price_;
    _impl_.initial_security_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_initial_security_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_security_price)

    _impl_._has_bits_[0] &= ~0x00000040u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_security_price_;
    _impl_.initial_security_price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_initial_security_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.initial_security_price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.initial_security_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.initial_security_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_initial_security_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_security_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_security_price)
return _msg;
}
inline void PostOrderResponse::set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_security_price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000040u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000040u;
    }

    _impl_.initial_security_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_security_price)
}

// .tinkoff.public.invest.api.contract.v1.OrderType order_type = 14;
inline void PostOrderResponse::clear_order_type() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderResponse::order_type() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_type)
    return _internal_order_type();
}
inline void PostOrderResponse::set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
    _internal_set_order_type(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderResponse::_internal_order_type() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderType>(_impl_.order_type_);
}
inline void PostOrderResponse::_internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_type_ = value;
}

// string message = 15;
inline void PostOrderResponse::clear_message() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::message() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.message)
return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderResponse::set_message(Arg_&& arg,
                                                                  Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.message)
}
inline std::string* PostOrderResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_message();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.message)
return _s;
}
inline const std::string& PostOrderResponse::_internal_message() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.message_.Get();
}
inline void PostOrderResponse::_internal_set_message(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.Set(value, GetArena());
}
inline std::string* PostOrderResponse::_internal_mutable_message() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.message_.Mutable( GetArena());
}
inline std::string* PostOrderResponse::release_message() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.message)
    return _impl_.message_.Release();
}
inline void PostOrderResponse::set_allocated_message(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.message)
}

// .tinkoff.public.invest.api.contract.v1.Quotation initial_order_price_pt = 16;
inline bool PostOrderResponse::has_initial_order_price_pt() const {
    bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.initial_order_price_pt_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderResponse::_internal_initial_order_price_pt() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.initial_order_price_pt_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderResponse::initial_order_price_pt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
return _internal_initial_order_price_pt();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_order_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_order_price_pt_);
    }
    _impl_.initial_order_price_pt_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000080u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000080u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::release_initial_order_price_pt() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000080u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.initial_order_price_pt_;
    _impl_.initial_order_price_pt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::unsafe_arena_release_initial_order_price_pt() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)

    _impl_._has_bits_[0] &= ~0x00000080u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.initial_order_price_pt_;
    _impl_.initial_order_price_pt_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::_internal_mutable_initial_order_price_pt() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.initial_order_price_pt_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
        _impl_.initial_order_price_pt_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
    }
    return _impl_.initial_order_price_pt_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::mutable_initial_order_price_pt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000080u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_initial_order_price_pt();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
return _msg;
}
inline void PostOrderResponse::set_allocated_initial_order_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_order_price_pt_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000080u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000080u;
    }

    _impl_.initial_order_price_pt_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
}

// string instrument_uid = 17;
inline void PostOrderResponse::clear_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PostOrderResponse.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostOrderResponse::set_instrument_uid(Arg_&& arg,
                                                                         Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PostOrderResponse.instrument_uid)
}
inline std::string* PostOrderResponse::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PostOrderResponse.instrument_uid)
return _s;
}
inline const std::string& PostOrderResponse::_internal_instrument_uid() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.instrument_uid_.Get();
}
inline void PostOrderResponse::_internal_set_instrument_uid(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* PostOrderResponse::_internal_mutable_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* PostOrderResponse::release_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PostOrderResponse.instrument_uid)
    return _impl_.instrument_uid_.Release();
}
inline void PostOrderResponse::set_allocated_instrument_uid(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.instrument_uid_.IsDefault()) {
          _impl_.instrument_uid_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PostOrderResponse.instrument_uid)
}

// -------------------------------------------------------------------

// CancelOrderRequest

// string account_id = 1;
inline void CancelOrderRequest::clear_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.ClearToEmpty();
}
inline const std::string& CancelOrderRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelOrderRequest::set_account_id(Arg_&& arg,
                                                                      Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.account_id)
}
inline std::string* CancelOrderRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.account_id)
return _s;
}
inline const std::string& CancelOrderRequest::_internal_account_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Get();
}
inline void CancelOrderRequest::_internal_set_account_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(value, GetArena());
}
inline std::string* CancelOrderRequest::_internal_mutable_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* CancelOrderRequest::release_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.account_id)
    return _impl_.account_id_.Release();
}
inline void CancelOrderRequest::set_allocated_account_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.account_id)
}

// string order_id = 2;
inline void CancelOrderRequest::clear_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.ClearToEmpty();
}
inline const std::string& CancelOrderRequest::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelOrderRequest::set_order_id(Arg_&& arg,
                                                                    Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.order_id)
}
inline std::string* CancelOrderRequest::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.order_id)
return _s;
}
inline const std::string& CancelOrderRequest::_internal_order_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Get();
}
inline void CancelOrderRequest::_internal_set_order_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(value, GetArena());
}
inline std::string* CancelOrderRequest::_internal_mutable_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* CancelOrderRequest::release_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.order_id)
    return _impl_.order_id_.Release();
}
inline void CancelOrderRequest::set_allocated_order_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_id_.IsDefault()) {
          _impl_.order_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.CancelOrderRequest.order_id)
}

// -------------------------------------------------------------------

// CancelOrderResponse

// .google.protobuf.Timestamp time = 1;
inline bool CancelOrderResponse::has_time() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
    return value;
}
inline const ::google::protobuf::Timestamp& CancelOrderResponse::_internal_time() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::google::protobuf::Timestamp* p = _impl_.time_;
    return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CancelOrderResponse::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.CancelOrderResponse.time)
return _internal_time();
}
inline void CancelOrderResponse::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
    }
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.CancelOrderResponse.time)
}
inline ::google::protobuf::Timestamp* CancelOrderResponse::release_time() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::google::protobuf::Timestamp* released = _impl_.time_;
    _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::google::protobuf::Timestamp* CancelOrderResponse::unsafe_arena_release_time() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.CancelOrderResponse.time)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::google::protobuf::Timestamp* temp = _impl_.time_;
    _impl_.time_ = nullptr;
    return temp;
}
inline ::google::protobuf::Timestamp* CancelOrderResponse::_internal_mutable_time() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.time_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
        _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
    }
    return _impl_.time_;
}
inline ::google::protobuf::Timestamp* CancelOrderResponse::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_time();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.CancelOrderResponse.time)
return _msg;
}
inline void CancelOrderResponse::set_allocated_time(::google::protobuf::Timestamp* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.CancelOrderResponse.time)
}

// -------------------------------------------------------------------

// GetOrderStateRequest

// string account_id = 1;
inline void GetOrderStateRequest::clear_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetOrderStateRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOrderStateRequest::set_account_id(Arg_&& arg,
                                                                        Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.account_id)
}
inline std::string* GetOrderStateRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.account_id)
return _s;
}
inline const std::string& GetOrderStateRequest::_internal_account_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Get();
}
inline void GetOrderStateRequest::_internal_set_account_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(value, GetArena());
}
inline std::string* GetOrderStateRequest::_internal_mutable_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* GetOrderStateRequest::release_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.account_id)
    return _impl_.account_id_.Release();
}
inline void GetOrderStateRequest::set_allocated_account_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.account_id)
}

// string order_id = 2;
inline void GetOrderStateRequest::clear_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.ClearToEmpty();
}
inline const std::string& GetOrderStateRequest::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOrderStateRequest::set_order_id(Arg_&& arg,
                                                                      Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.order_id)
}
inline std::string* GetOrderStateRequest::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.order_id)
return _s;
}
inline const std::string& GetOrderStateRequest::_internal_order_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Get();
}
inline void GetOrderStateRequest::_internal_set_order_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(value, GetArena());
}
inline std::string* GetOrderStateRequest::_internal_mutable_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* GetOrderStateRequest::release_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.order_id)
    return _impl_.order_id_.Release();
}
inline void GetOrderStateRequest::set_allocated_order_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_id_.IsDefault()) {
          _impl_.order_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.order_id)
}

// -------------------------------------------------------------------

// GetOrdersRequest

// string account_id = 1;
inline void GetOrdersRequest::clear_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetOrdersRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOrdersRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOrdersRequest::set_account_id(Arg_&& arg,
                                                                    Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOrdersRequest.account_id)
}
inline std::string* GetOrdersRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOrdersRequest.account_id)
return _s;
}
inline const std::string& GetOrdersRequest::_internal_account_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Get();
}
inline void GetOrdersRequest::_internal_set_account_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(value, GetArena());
}
inline std::string* GetOrdersRequest::_internal_mutable_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* GetOrdersRequest::release_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOrdersRequest.account_id)
    return _impl_.account_id_.Release();
}
inline void GetOrdersRequest::set_allocated_account_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOrdersRequest.account_id)
}

// -------------------------------------------------------------------

// GetOrdersResponse

// repeated .tinkoff.public.invest.api.contract.v1.OrderState orders = 1;
inline int GetOrdersResponse::_internal_orders_size() const {
    return _internal_orders().size();
}
inline int GetOrdersResponse::orders_size() const {
    return _internal_orders_size();
}
inline void GetOrdersResponse::clear_orders() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.orders_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderState* GetOrdersResponse::mutable_orders(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOrdersResponse.orders)
return _internal_mutable_orders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>* GetOrdersResponse::mutable_orders()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.GetOrdersResponse.orders)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_orders();
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderState& GetOrdersResponse::orders(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOrdersResponse.orders)
return _internal_orders().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderState* GetOrdersResponse::add_orders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::OrderState* _add = _internal_mutable_orders()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.GetOrdersResponse.orders)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>& GetOrdersResponse::orders() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.GetOrdersResponse.orders)
return _internal_orders();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>&
GetOrdersResponse::_internal_orders() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.orders_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderState>*
GetOrdersResponse::_internal_mutable_orders() {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.orders_;
}

// -------------------------------------------------------------------

// OrderState

// string order_id = 1;
inline void OrderState::clear_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.ClearToEmpty();
}
inline const std::string& OrderState::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderState::set_order_id(Arg_&& arg,
                                                            Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.order_id)
}
inline std::string* OrderState::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.order_id)
return _s;
}
inline const std::string& OrderState::_internal_order_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Get();
}
inline void OrderState::_internal_set_order_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(value, GetArena());
}
inline std::string* OrderState::_internal_mutable_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* OrderState::release_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.order_id)
    return _impl_.order_id_.Release();
}
inline void OrderState::set_allocated_order_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_id_.IsDefault()) {
          _impl_.order_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.order_id)
}

// .tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
inline void OrderState::clear_execution_report_status() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.execution_report_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus OrderState::execution_report_status() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.execution_report_status)
    return _internal_execution_report_status();
}
inline void OrderState::set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
    _internal_set_execution_report_status(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.execution_report_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus OrderState::_internal_execution_report_status() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus>(_impl_.execution_report_status_);
}
inline void OrderState::_internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.execution_report_status_ = value;
}

// int64 lots_requested = 3;
inline void OrderState::clear_lots_requested() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_requested_ = ::int64_t{0};
}
inline ::int64_t OrderState::lots_requested() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.lots_requested)
    return _internal_lots_requested();
}
inline void OrderState::set_lots_requested(::int64_t value) {
    _internal_set_lots_requested(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.lots_requested)
}
inline ::int64_t OrderState::_internal_lots_requested() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.lots_requested_;
}
inline void OrderState::_internal_set_lots_requested(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_requested_ = value;
}

// int64 lots_executed = 4;
inline void OrderState::clear_lots_executed() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_executed_ = ::int64_t{0};
}
inline ::int64_t OrderState::lots_executed() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.lots_executed)
    return _internal_lots_executed();
}
inline void OrderState::set_lots_executed(::int64_t value) {
    _internal_set_lots_executed(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.lots_executed)
}
inline ::int64_t OrderState::_internal_lots_executed() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.lots_executed_;
}
inline void OrderState::_internal_set_lots_executed(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.lots_executed_ = value;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue initial_order_price = 5;
inline bool OrderState::has_initial_order_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.initial_order_price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_initial_order_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_order_price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::initial_order_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.initial_order_price)
return _internal_initial_order_price();
}
inline void OrderState::unsafe_arena_set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_order_price_);
    }
    _impl_.initial_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.initial_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_initial_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_order_price_;
    _impl_.initial_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_initial_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.initial_order_price)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_price_;
    _impl_.initial_order_price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_initial_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.initial_order_price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.initial_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.initial_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_initial_order_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_order_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.initial_order_price)
return _msg;
}
inline void OrderState::set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_order_price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.initial_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.initial_order_price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue executed_order_price = 6;
inline bool OrderState::has_executed_order_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.executed_order_price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_executed_order_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_order_price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::executed_order_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.executed_order_price)
return _internal_executed_order_price();
}
inline void OrderState::unsafe_arena_set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_order_price_);
    }
    _impl_.executed_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.executed_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_executed_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.executed_order_price_;
    _impl_.executed_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_executed_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.executed_order_price)

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_order_price_;
    _impl_.executed_order_price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_executed_order_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.executed_order_price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.executed_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.executed_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_executed_order_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_order_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.executed_order_price)
return _msg;
}
inline void OrderState::set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_order_price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }

    _impl_.executed_order_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.executed_order_price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_order_amount = 7;
inline bool OrderState::has_total_order_amount() const {
    bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.total_order_amount_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_total_order_amount() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_order_amount_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::total_order_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.total_order_amount)
return _internal_total_order_amount();
}
inline void OrderState::unsafe_arena_set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_order_amount_);
    }
    _impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000004u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000004u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.total_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_total_order_amount() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000004u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_order_amount_;
    _impl_.total_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_total_order_amount() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.total_order_amount)

    _impl_._has_bits_[0] &= ~0x00000004u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
    _impl_.total_order_amount_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_total_order_amount() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.total_order_amount_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.total_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_total_order_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_order_amount();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.total_order_amount)
return _msg;
}
inline void OrderState::set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_order_amount_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000004u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000004u;
    }

    _impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.total_order_amount)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price = 8;
inline bool OrderState::has_average_position_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.average_position_price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_average_position_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::average_position_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.average_position_price)
return _internal_average_position_price();
}
inline void OrderState::unsafe_arena_set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_);
    }
    _impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000008u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000008u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.average_position_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_average_position_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000008u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.average_position_price_;
    _impl_.average_position_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_average_position_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.average_position_price)

    _impl_._has_bits_[0] &= ~0x00000008u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
    _impl_.average_position_price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_average_position_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.average_position_price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.average_position_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_average_position_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.average_position_price)
return _msg;
}
inline void OrderState::set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000008u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000008u;
    }

    _impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.average_position_price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue initial_commission = 9;
inline bool OrderState::has_initial_commission() const {
    bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.initial_commission_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_initial_commission() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_commission_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::initial_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.initial_commission)
return _internal_initial_commission();
}
inline void OrderState::unsafe_arena_set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_commission_);
    }
    _impl_.initial_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000010u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000010u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.initial_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_initial_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000010u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_commission_;
    _impl_.initial_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_initial_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.initial_commission)

    _impl_._has_bits_[0] &= ~0x00000010u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_commission_;
    _impl_.initial_commission_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_initial_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.initial_commission_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.initial_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.initial_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_initial_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.initial_commission)
return _msg;
}
inline void OrderState::set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_commission_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000010u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000010u;
    }

    _impl_.initial_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.initial_commission)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue executed_commission = 10;
inline bool OrderState::has_executed_commission() const {
    bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.executed_commission_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_executed_commission() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_commission_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::executed_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.executed_commission)
return _internal_executed_commission();
}
inline void OrderState::unsafe_arena_set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_commission_);
    }
    _impl_.executed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000020u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000020u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.executed_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_executed_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000020u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.executed_commission_;
    _impl_.executed_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_executed_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.executed_commission)

    _impl_._has_bits_[0] &= ~0x00000020u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
    _impl_.executed_commission_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_executed_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.executed_commission_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.executed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.executed_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_executed_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.executed_commission)
return _msg;
}
inline void OrderState::set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.executed_commission_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000020u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000020u;
    }

    _impl_.executed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.executed_commission)
}

// string figi = 11;
inline void OrderState::clear_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.ClearToEmpty();
}
inline const std::string& OrderState::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderState::set_figi(Arg_&& arg,
                                                        Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.figi)
}
inline std::string* OrderState::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.figi)
return _s;
}
inline const std::string& OrderState::_internal_figi() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.figi_.Get();
}
inline void OrderState::_internal_set_figi(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.Set(value, GetArena());
}
inline std::string* OrderState::_internal_mutable_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.figi_.Mutable( GetArena());
}
inline std::string* OrderState::release_figi() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.figi)
    return _impl_.figi_.Release();
}
inline void OrderState::set_allocated_figi(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.figi)
}

// .tinkoff.public.invest.api.contract.v1.OrderDirection direction = 12;
inline void OrderState::clear_direction() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderState::direction() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.direction)
    return _internal_direction();
}
inline void OrderState::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    _internal_set_direction(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.direction)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderState::_internal_direction() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(_impl_.direction_);
}
inline void OrderState::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.direction_ = value;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue initial_security_price = 13;
inline bool OrderState::has_initial_security_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.initial_security_price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_initial_security_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_security_price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::initial_security_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.initial_security_price)
return _internal_initial_security_price();
}
inline void OrderState::unsafe_arena_set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_security_price_);
    }
    _impl_.initial_security_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000040u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000040u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.initial_security_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_initial_security_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000040u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_security_price_;
    _impl_.initial_security_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_initial_security_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.initial_security_price)

    _impl_._has_bits_[0] &= ~0x00000040u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_security_price_;
    _impl_.initial_security_price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_initial_security_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.initial_security_price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.initial_security_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.initial_security_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_initial_security_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_security_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.initial_security_price)
return _msg;
}
inline void OrderState::set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_security_price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000040u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000040u;
    }

    _impl_.initial_security_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.initial_security_price)
}

// repeated .tinkoff.public.invest.api.contract.v1.OrderStage stages = 14;
inline int OrderState::_internal_stages_size() const {
    return _internal_stages().size();
}
inline int OrderState::stages_size() const {
    return _internal_stages_size();
}
inline void OrderState::clear_stages() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.stages_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderStage* OrderState::mutable_stages(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.stages)
return _internal_mutable_stages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>* OrderState::mutable_stages()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.OrderState.stages)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_stages();
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderStage& OrderState::stages(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.stages)
return _internal_stages().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderStage* OrderState::add_stages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::OrderStage* _add = _internal_mutable_stages()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.OrderState.stages)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>& OrderState::stages() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.OrderState.stages)
return _internal_stages();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>&
OrderState::_internal_stages() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.stages_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OrderStage>*
OrderState::_internal_mutable_stages() {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.stages_;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue service_commission = 15;
inline bool OrderState::has_service_commission() const {
    bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.service_commission_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_service_commission() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.service_commission_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::service_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.service_commission)
return _internal_service_commission();
}
inline void OrderState::unsafe_arena_set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_commission_);
    }
    _impl_.service_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000080u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000080u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.service_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_service_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000080u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.service_commission_;
    _impl_.service_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_service_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.service_commission)

    _impl_._has_bits_[0] &= ~0x00000080u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.service_commission_;
    _impl_.service_commission_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_service_commission() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.service_commission_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.service_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.service_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_service_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000080u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_service_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.service_commission)
return _msg;
}
inline void OrderState::set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_commission_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000080u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000080u;
    }

    _impl_.service_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.service_commission)
}

// string currency = 16;
inline void OrderState::clear_currency() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.currency_.ClearToEmpty();
}
inline const std::string& OrderState::currency() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.currency)
return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderState::set_currency(Arg_&& arg,
                                                            Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.currency)
}
inline std::string* OrderState::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_currency();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.currency)
return _s;
}
inline const std::string& OrderState::_internal_currency() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.currency_.Get();
}
inline void OrderState::_internal_set_currency(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.currency_.Set(value, GetArena());
}
inline std::string* OrderState::_internal_mutable_currency() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.currency_.Mutable( GetArena());
}
inline std::string* OrderState::release_currency() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.currency)
    return _impl_.currency_.Release();
}
inline void OrderState::set_allocated_currency(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.currency_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.currency)
}

// .tinkoff.public.invest.api.contract.v1.OrderType order_type = 17;
inline void OrderState::clear_order_type() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType OrderState::order_type() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.order_type)
    return _internal_order_type();
}
inline void OrderState::set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
    _internal_set_order_type(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.order_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType OrderState::_internal_order_type() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::OrderType>(_impl_.order_type_);
}
inline void OrderState::_internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_type_ = value;
}

// .google.protobuf.Timestamp order_date = 18;
inline bool OrderState::has_order_date() const {
    bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.order_date_ != nullptr);
    return value;
}
inline const ::google::protobuf::Timestamp& OrderState::_internal_order_date() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::google::protobuf::Timestamp* p = _impl_.order_date_;
    return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OrderState::order_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.order_date)
return _internal_order_date();
}
inline void OrderState::unsafe_arena_set_allocated_order_date(::google::protobuf::Timestamp* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.order_date_);
    }
    _impl_.order_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000100u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000100u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.order_date)
}
inline ::google::protobuf::Timestamp* OrderState::release_order_date() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000100u;
    ::google::protobuf::Timestamp* released = _impl_.order_date_;
    _impl_.order_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::google::protobuf::Timestamp* OrderState::unsafe_arena_release_order_date() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.order_date)

    _impl_._has_bits_[0] &= ~0x00000100u;
    ::google::protobuf::Timestamp* temp = _impl_.order_date_;
    _impl_.order_date_ = nullptr;
    return temp;
}
inline ::google::protobuf::Timestamp* OrderState::_internal_mutable_order_date() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.order_date_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
        _impl_.order_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
    }
    return _impl_.order_date_;
}
inline ::google::protobuf::Timestamp* OrderState::mutable_order_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000100u;
::google::protobuf::Timestamp* _msg = _internal_mutable_order_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.order_date)
return _msg;
}
inline void OrderState::set_allocated_order_date(::google::protobuf::Timestamp* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.order_date_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000100u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000100u;
    }

    _impl_.order_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.order_date)
}

// string instrument_uid = 19;
inline void OrderState::clear_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OrderState::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderState::set_instrument_uid(Arg_&& arg,
                                                                  Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.instrument_uid)
}
inline std::string* OrderState::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.instrument_uid)
return _s;
}
inline const std::string& OrderState::_internal_instrument_uid() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.instrument_uid_.Get();
}
inline void OrderState::_internal_set_instrument_uid(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* OrderState::_internal_mutable_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* OrderState::release_instrument_uid() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.instrument_uid)
    return _impl_.instrument_uid_.Release();
}
inline void OrderState::set_allocated_instrument_uid(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.instrument_uid_.IsDefault()) {
          _impl_.instrument_uid_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.instrument_uid)
}

// string order_request_id = 20;
inline void OrderState::clear_order_request_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_request_id_.ClearToEmpty();
}
inline const std::string& OrderState::order_request_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderState.order_request_id)
return _internal_order_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderState::set_order_request_id(Arg_&& arg,
                                                                    Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderState.order_request_id)
}
inline std::string* OrderState::mutable_order_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_request_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderState.order_request_id)
return _s;
}
inline const std::string& OrderState::_internal_order_request_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_request_id_.Get();
}
inline void OrderState::_internal_set_order_request_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_request_id_.Set(value, GetArena());
}
inline std::string* OrderState::_internal_mutable_order_request_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_request_id_.Mutable( GetArena());
}
inline std::string* OrderState::release_order_request_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderState.order_request_id)
    return _impl_.order_request_id_.Release();
}
inline void OrderState::set_allocated_order_request_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_request_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_request_id_.IsDefault()) {
          _impl_.order_request_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderState.order_request_id)
}

// -------------------------------------------------------------------

// OrderStage

// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 1;
inline bool OrderStage::has_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderStage::_internal_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderStage::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderStage.price)
return _internal_price();
}
inline void OrderStage::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }
    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OrderStage.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.price_;
    _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::unsafe_arena_release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderStage.price)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
    _impl_.price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::_internal_mutable_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
        _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
    }
    return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderStage.price)
return _msg;
}
inline void OrderStage::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderStage.price)
}

// int64 quantity = 2;
inline void OrderStage::clear_quantity() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t OrderStage::quantity() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderStage.quantity)
    return _internal_quantity();
}
inline void OrderStage::set_quantity(::int64_t value) {
    _internal_set_quantity(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderStage.quantity)
}
inline ::int64_t OrderStage::_internal_quantity() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.quantity_;
}
inline void OrderStage::_internal_set_quantity(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = value;
}

// string trade_id = 3;
inline void OrderStage::clear_trade_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.ClearToEmpty();
}
inline const std::string& OrderStage::trade_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OrderStage.trade_id)
return _internal_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderStage::set_trade_id(Arg_&& arg,
                                                            Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OrderStage.trade_id)
}
inline std::string* OrderStage::mutable_trade_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_trade_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OrderStage.trade_id)
return _s;
}
inline const std::string& OrderStage::_internal_trade_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.trade_id_.Get();
}
inline void OrderStage::_internal_set_trade_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.Set(value, GetArena());
}
inline std::string* OrderStage::_internal_mutable_trade_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.trade_id_.Mutable( GetArena());
}
inline std::string* OrderStage::release_trade_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OrderStage.trade_id)
    return _impl_.trade_id_.Release();
}
inline void OrderStage::set_allocated_trade_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.trade_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.trade_id_.IsDefault()) {
          _impl_.trade_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OrderStage.trade_id)
}

// -------------------------------------------------------------------

// ReplaceOrderRequest

// string account_id = 1;
inline void ReplaceOrderRequest::clear_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.ClearToEmpty();
}
inline const std::string& ReplaceOrderRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplaceOrderRequest::set_account_id(Arg_&& arg,
                                                                       Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.account_id)
}
inline std::string* ReplaceOrderRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.account_id)
return _s;
}
inline const std::string& ReplaceOrderRequest::_internal_account_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Get();
}
inline void ReplaceOrderRequest::_internal_set_account_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.Set(value, GetArena());
}
inline std::string* ReplaceOrderRequest::_internal_mutable_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* ReplaceOrderRequest::release_account_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.account_id)
    return _impl_.account_id_.Release();
}
inline void ReplaceOrderRequest::set_allocated_account_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.account_id)
}

// string order_id = 6;
inline void ReplaceOrderRequest::clear_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.ClearToEmpty();
}
inline const std::string& ReplaceOrderRequest::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplaceOrderRequest::set_order_id(Arg_&& arg,
                                                                     Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.order_id)
}
inline std::string* ReplaceOrderRequest::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.order_id)
return _s;
}
inline const std::string& ReplaceOrderRequest::_internal_order_id() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Get();
}
inline void ReplaceOrderRequest::_internal_set_order_id(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.Set(value, GetArena());
}
inline std::string* ReplaceOrderRequest::_internal_mutable_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* ReplaceOrderRequest::release_order_id() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.order_id)
    return _impl_.order_id_.Release();
}
inline void ReplaceOrderRequest::set_allocated_order_id(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.order_id_.IsDefault()) {
          _impl_.order_id_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.order_id)
}

// string idempotency_key = 7;
inline void ReplaceOrderRequest::clear_idempotency_key() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.idempotency_key_.ClearToEmpty();
}
inline const std::string& ReplaceOrderRequest::idempotency_key() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
return _internal_idempotency_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplaceOrderRequest::set_idempotency_key(Arg_&& arg,
                                                                            Args_... args) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.idempotency_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
}
inline std::string* ReplaceOrderRequest::mutable_idempotency_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_idempotency_key();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
return _s;
}
inline const std::string& ReplaceOrderRequest::_internal_idempotency_key() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.idempotency_key_.Get();
}
inline void ReplaceOrderRequest::_internal_set_idempotency_key(const std::string& value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.idempotency_key_.Set(value, GetArena());
}
inline std::string* ReplaceOrderRequest::_internal_mutable_idempotency_key() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _impl_.idempotency_key_.Mutable( GetArena());
}
inline std::string* ReplaceOrderRequest::release_idempotency_key() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
    return _impl_.idempotency_key_.Release();
}
inline void ReplaceOrderRequest::set_allocated_idempotency_key(std::string* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.idempotency_key_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.idempotency_key_.IsDefault()) {
          _impl_.idempotency_key_.Set("", GetArena());
        }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
}

// int64 quantity = 11;
inline void ReplaceOrderRequest::clear_quantity() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t ReplaceOrderRequest::quantity() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.quantity)
    return _internal_quantity();
}
inline void ReplaceOrderRequest::set_quantity(::int64_t value) {
    _internal_set_quantity(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.quantity)
}
inline ::int64_t ReplaceOrderRequest::_internal_quantity() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.quantity_;
}
inline void ReplaceOrderRequest::_internal_set_quantity(::int64_t value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.quantity_ = value;
}

// .tinkoff.public.invest.api.contract.v1.Quotation price = 12;
inline bool ReplaceOrderRequest::has_price() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
    return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& ReplaceOrderRequest::_internal_price() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
    return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& ReplaceOrderRequest::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price)
return _internal_price();
}
inline void ReplaceOrderRequest::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }
    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.price_;
    _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::unsafe_arena_release_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
    _impl_.price_ = nullptr;
    return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::_internal_mutable_price() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (_impl_.price_ == nullptr) {
        auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
        _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
    }
    return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price)
return _msg;
}
inline void ReplaceOrderRequest::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
    // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price)
}

// .tinkoff.public.invest.api.contract.v1.PriceType price_type = 13;
inline void ReplaceOrderRequest::clear_price_type() {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.price_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType ReplaceOrderRequest::price_type() const {
    // @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price_type)
    return _internal_price_type();
}
inline void ReplaceOrderRequest::set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
    _internal_set_price_type(value);
    // @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType ReplaceOrderRequest::_internal_price_type() const {
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return static_cast<::tinkoff::public_::invest::api::contract::v1::PriceType>(_impl_.price_type_);
}
inline void ReplaceOrderRequest::_internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.price_type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OrderDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OrderDirection>() {
    return ::tinkoff::public_::invest::api::contract::v1::OrderDirection_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OrderType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OrderType>() {
    return ::tinkoff::public_::invest::api::contract::v1::OrderType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus>() {
    return ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::PriceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::PriceType>() {
    return ::tinkoff::public_::invest::api::contract::v1::PriceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_orders_2eproto_2epb_2eh