// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orders.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orders_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_orders_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_orders_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orders_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_orders_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class CancelOrderRequest;
struct CancelOrderRequestDefaultTypeInternal;
extern CancelOrderRequestDefaultTypeInternal _CancelOrderRequest_default_instance_;
class CancelOrderResponse;
struct CancelOrderResponseDefaultTypeInternal;
extern CancelOrderResponseDefaultTypeInternal _CancelOrderResponse_default_instance_;
class GetMaxLotsRequest;
struct GetMaxLotsRequestDefaultTypeInternal;
extern GetMaxLotsRequestDefaultTypeInternal _GetMaxLotsRequest_default_instance_;
class GetMaxLotsResponse;
struct GetMaxLotsResponseDefaultTypeInternal;
extern GetMaxLotsResponseDefaultTypeInternal _GetMaxLotsResponse_default_instance_;
class GetMaxLotsResponse_BuyLimitsView;
struct GetMaxLotsResponse_BuyLimitsViewDefaultTypeInternal;
extern GetMaxLotsResponse_BuyLimitsViewDefaultTypeInternal _GetMaxLotsResponse_BuyLimitsView_default_instance_;
class GetMaxLotsResponse_SellLimitsView;
struct GetMaxLotsResponse_SellLimitsViewDefaultTypeInternal;
extern GetMaxLotsResponse_SellLimitsViewDefaultTypeInternal _GetMaxLotsResponse_SellLimitsView_default_instance_;
class GetOrderPriceRequest;
struct GetOrderPriceRequestDefaultTypeInternal;
extern GetOrderPriceRequestDefaultTypeInternal _GetOrderPriceRequest_default_instance_;
class GetOrderPriceResponse;
struct GetOrderPriceResponseDefaultTypeInternal;
extern GetOrderPriceResponseDefaultTypeInternal _GetOrderPriceResponse_default_instance_;
class GetOrderPriceResponse_ExtraBond;
struct GetOrderPriceResponse_ExtraBondDefaultTypeInternal;
extern GetOrderPriceResponse_ExtraBondDefaultTypeInternal _GetOrderPriceResponse_ExtraBond_default_instance_;
class GetOrderPriceResponse_ExtraFuture;
struct GetOrderPriceResponse_ExtraFutureDefaultTypeInternal;
extern GetOrderPriceResponse_ExtraFutureDefaultTypeInternal _GetOrderPriceResponse_ExtraFuture_default_instance_;
class GetOrderStateRequest;
struct GetOrderStateRequestDefaultTypeInternal;
extern GetOrderStateRequestDefaultTypeInternal _GetOrderStateRequest_default_instance_;
class GetOrdersRequest;
struct GetOrdersRequestDefaultTypeInternal;
extern GetOrdersRequestDefaultTypeInternal _GetOrdersRequest_default_instance_;
class GetOrdersResponse;
struct GetOrdersResponseDefaultTypeInternal;
extern GetOrdersResponseDefaultTypeInternal _GetOrdersResponse_default_instance_;
class OrderStage;
struct OrderStageDefaultTypeInternal;
extern OrderStageDefaultTypeInternal _OrderStage_default_instance_;
class OrderState;
struct OrderStateDefaultTypeInternal;
extern OrderStateDefaultTypeInternal _OrderState_default_instance_;
class OrderTrade;
struct OrderTradeDefaultTypeInternal;
extern OrderTradeDefaultTypeInternal _OrderTrade_default_instance_;
class OrderTrades;
struct OrderTradesDefaultTypeInternal;
extern OrderTradesDefaultTypeInternal _OrderTrades_default_instance_;
class PostOrderRequest;
struct PostOrderRequestDefaultTypeInternal;
extern PostOrderRequestDefaultTypeInternal _PostOrderRequest_default_instance_;
class PostOrderResponse;
struct PostOrderResponseDefaultTypeInternal;
extern PostOrderResponseDefaultTypeInternal _PostOrderResponse_default_instance_;
class ReplaceOrderRequest;
struct ReplaceOrderRequestDefaultTypeInternal;
extern ReplaceOrderRequestDefaultTypeInternal _ReplaceOrderRequest_default_instance_;
class TradesStreamRequest;
struct TradesStreamRequestDefaultTypeInternal;
extern TradesStreamRequestDefaultTypeInternal _TradesStreamRequest_default_instance_;
class TradesStreamResponse;
struct TradesStreamResponseDefaultTypeInternal;
extern TradesStreamResponseDefaultTypeInternal _TradesStreamResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> ::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OrderStage* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OrderStage>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OrderState* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OrderState>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OrderTrade* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OrderTrade>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OrderTrades* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OrderTrades>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PostOrderRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PostOrderRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PostOrderResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PostOrderResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

enum OrderDirection : int {
  ORDER_DIRECTION_UNSPECIFIED = 0,
  ORDER_DIRECTION_BUY = 1,
  ORDER_DIRECTION_SELL = 2,
  OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderDirection_IsValid(int value);
constexpr OrderDirection OrderDirection_MIN = ORDER_DIRECTION_UNSPECIFIED;
constexpr OrderDirection OrderDirection_MAX = ORDER_DIRECTION_SELL;
constexpr int OrderDirection_ARRAYSIZE = OrderDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderDirection_descriptor();
template<typename T>
inline const std::string& OrderDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderDirection_descriptor(), enum_t_value);
}
inline bool OrderDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderDirection>(
    OrderDirection_descriptor(), name, value);
}
enum OrderType : int {
  ORDER_TYPE_UNSPECIFIED = 0,
  ORDER_TYPE_LIMIT = 1,
  ORDER_TYPE_MARKET = 2,
  ORDER_TYPE_BESTPRICE = 3,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = ORDER_TYPE_UNSPECIFIED;
constexpr OrderType OrderType_MAX = ORDER_TYPE_BESTPRICE;
constexpr int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor();
template<typename T>
inline const std::string& OrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderType_descriptor(), enum_t_value);
}
inline bool OrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
enum OrderExecutionReportStatus : int {
  EXECUTION_REPORT_STATUS_UNSPECIFIED = 0,
  EXECUTION_REPORT_STATUS_FILL = 1,
  EXECUTION_REPORT_STATUS_REJECTED = 2,
  EXECUTION_REPORT_STATUS_CANCELLED = 3,
  EXECUTION_REPORT_STATUS_NEW = 4,
  EXECUTION_REPORT_STATUS_PARTIALLYFILL = 5,
  OrderExecutionReportStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderExecutionReportStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderExecutionReportStatus_IsValid(int value);
constexpr OrderExecutionReportStatus OrderExecutionReportStatus_MIN = EXECUTION_REPORT_STATUS_UNSPECIFIED;
constexpr OrderExecutionReportStatus OrderExecutionReportStatus_MAX = EXECUTION_REPORT_STATUS_PARTIALLYFILL;
constexpr int OrderExecutionReportStatus_ARRAYSIZE = OrderExecutionReportStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderExecutionReportStatus_descriptor();
template<typename T>
inline const std::string& OrderExecutionReportStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderExecutionReportStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderExecutionReportStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderExecutionReportStatus_descriptor(), enum_t_value);
}
inline bool OrderExecutionReportStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderExecutionReportStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderExecutionReportStatus>(
    OrderExecutionReportStatus_descriptor(), name, value);
}
enum TimeInForceType : int {
  TIME_IN_FORCE_UNSPECIFIED = 0,
  TIME_IN_FORCE_DAY = 1,
  TIME_IN_FORCE_FILL_AND_KILL = 2,
  TIME_IN_FORCE_FILL_OR_KILL = 3,
  TimeInForceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TimeInForceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TimeInForceType_IsValid(int value);
constexpr TimeInForceType TimeInForceType_MIN = TIME_IN_FORCE_UNSPECIFIED;
constexpr TimeInForceType TimeInForceType_MAX = TIME_IN_FORCE_FILL_OR_KILL;
constexpr int TimeInForceType_ARRAYSIZE = TimeInForceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeInForceType_descriptor();
template<typename T>
inline const std::string& TimeInForceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeInForceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeInForceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeInForceType_descriptor(), enum_t_value);
}
inline bool TimeInForceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeInForceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeInForceType>(
    TimeInForceType_descriptor(), name, value);
}
// ===================================================================

class TradesStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest) */ {
 public:
  inline TradesStreamRequest() : TradesStreamRequest(nullptr) {}
  ~TradesStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR TradesStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradesStreamRequest(const TradesStreamRequest& from);
  TradesStreamRequest(TradesStreamRequest&& from) noexcept
    : TradesStreamRequest() {
    *this = ::std::move(from);
  }

  inline TradesStreamRequest& operator=(const TradesStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesStreamRequest& operator=(TradesStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradesStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradesStreamRequest* internal_default_instance() {
    return reinterpret_cast<const TradesStreamRequest*>(
               &_TradesStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradesStreamRequest& a, TradesStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradesStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradesStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradesStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TradesStreamRequest& from) {
    TradesStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradesStreamRequest";
  }
  protected:
  explicit TradesStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated string accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  const std::string& accounts(int index) const;
  std::string* mutable_accounts(int index);
  void set_accounts(int index, const std::string& value);
  void set_accounts(int index, std::string&& value);
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  std::string* add_accounts();
  void add_accounts(const std::string& value);
  void add_accounts(std::string&& value);
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accounts();
  private:
  const std::string& _internal_accounts(int index) const;
  std::string* _internal_add_accounts();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class TradesStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse) */ {
 public:
  inline TradesStreamResponse() : TradesStreamResponse(nullptr) {}
  ~TradesStreamResponse() override;
  explicit PROTOBUF_CONSTEXPR TradesStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradesStreamResponse(const TradesStreamResponse& from);
  TradesStreamResponse(TradesStreamResponse&& from) noexcept
    : TradesStreamResponse() {
    *this = ::std::move(from);
  }

  inline TradesStreamResponse& operator=(const TradesStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesStreamResponse& operator=(TradesStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradesStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kOrderTrades = 1,
    kPing = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const TradesStreamResponse* internal_default_instance() {
    return reinterpret_cast<const TradesStreamResponse*>(
               &_TradesStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TradesStreamResponse& a, TradesStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradesStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradesStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradesStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TradesStreamResponse& from) {
    TradesStreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradesStreamResponse";
  }
  protected:
  explicit TradesStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderTradesFieldNumber = 1,
    kPingFieldNumber = 2,
  };
  // .tinkoff.public_.invest.api.contract.v1.OrderTrades order_trades = 1;
  bool has_order_trades() const;
  private:
  bool _internal_has_order_trades() const;
  public:
  void clear_order_trades();
  const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& order_trades() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::OrderTrades* release_order_trades();
  ::tinkoff::public_::invest::api::contract::v1::OrderTrades* mutable_order_trades();
  void set_allocated_order_trades(::tinkoff::public_::invest::api::contract::v1::OrderTrades* order_trades);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& _internal_order_trades() const;
  ::tinkoff::public_::invest::api::contract::v1::OrderTrades* _internal_mutable_order_trades();
  public:
  void unsafe_arena_set_allocated_order_trades(
      ::tinkoff::public_::invest::api::contract::v1::OrderTrades* order_trades);
  ::tinkoff::public_::invest::api::contract::v1::OrderTrades* unsafe_arena_release_order_trades();

  // .tinkoff.public_.invest.api.contract.v1.Ping ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::tinkoff::public_::invest::api::contract::v1::Ping& ping() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Ping* release_ping();
  ::tinkoff::public_::invest::api::contract::v1::Ping* mutable_ping();
  void set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Ping& _internal_ping() const;
  ::tinkoff::public_::invest::api::contract::v1::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::tinkoff::public_::invest::api::contract::v1::Ping* ping);
  ::tinkoff::public_::invest::api::contract::v1::Ping* unsafe_arena_release_ping();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
 private:
  class _Internal;
  void set_has_order_trades();
  void set_has_ping();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::OrderTrades* order_trades_;
      ::tinkoff::public_::invest::api::contract::v1::Ping* ping_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderTrades final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OrderTrades) */ {
 public:
  inline OrderTrades() : OrderTrades(nullptr) {}
  ~OrderTrades() override;
  explicit PROTOBUF_CONSTEXPR OrderTrades(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderTrades(const OrderTrades& from);
  OrderTrades(OrderTrades&& from) noexcept
    : OrderTrades() {
    *this = ::std::move(from);
  }

  inline OrderTrades& operator=(const OrderTrades& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderTrades& operator=(OrderTrades&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderTrades& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderTrades* internal_default_instance() {
    return reinterpret_cast<const OrderTrades*>(
               &_OrderTrades_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderTrades& a, OrderTrades& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderTrades* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderTrades* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderTrades* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderTrades>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderTrades& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderTrades& from) {
    OrderTrades::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderTrades* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OrderTrades";
  }
  protected:
  explicit OrderTrades(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 5,
    kOrderIdFieldNumber = 1,
    kFigiFieldNumber = 4,
    kAccountIdFieldNumber = 6,
    kInstrumentUidFieldNumber = 7,
    kCreatedAtFieldNumber = 2,
    kDirectionFieldNumber = 3,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.OrderTrade trades = 5;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::tinkoff::public_::invest::api::contract::v1::OrderTrade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderTrade >*
      mutable_trades();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OrderTrade& _internal_trades(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OrderTrade* _internal_add_trades();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::OrderTrade& trades(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OrderTrade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderTrade >&
      trades() const;

  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string figi = 4;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string account_id = 6;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string instrument_uid = 7;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 3;
  void clear_direction();
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OrderTrades)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderTrade > trades_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderTrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OrderTrade) */ {
 public:
  inline OrderTrade() : OrderTrade(nullptr) {}
  ~OrderTrade() override;
  explicit PROTOBUF_CONSTEXPR OrderTrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderTrade(const OrderTrade& from);
  OrderTrade(OrderTrade&& from) noexcept
    : OrderTrade() {
    *this = ::std::move(from);
  }

  inline OrderTrade& operator=(const OrderTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderTrade& operator=(OrderTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderTrade* internal_default_instance() {
    return reinterpret_cast<const OrderTrade*>(
               &_OrderTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrderTrade& a, OrderTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderTrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderTrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderTrade& from) {
    OrderTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderTrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OrderTrade";
  }
  protected:
  explicit OrderTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeIdFieldNumber = 4,
    kDateTimeFieldNumber = 1,
    kPriceFieldNumber = 2,
    kQuantityFieldNumber = 3,
  };
  // string trade_id = 4;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // .google.protobuf.Timestamp date_time = 1;
  bool has_date_time() const;
  private:
  bool _internal_has_date_time() const;
  public:
  void clear_date_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_date_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_time();
  void set_allocated_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* date_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_time();
  public:
  void unsafe_arena_set_allocated_date_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* date_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date_time();

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  // int64 quantity = 3;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OrderTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_time_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    int64_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class PostOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PostOrderRequest) */ {
 public:
  inline PostOrderRequest() : PostOrderRequest(nullptr) {}
  ~PostOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR PostOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostOrderRequest(const PostOrderRequest& from);
  PostOrderRequest(PostOrderRequest&& from) noexcept
    : PostOrderRequest() {
    *this = ::std::move(from);
  }

  inline PostOrderRequest& operator=(const PostOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostOrderRequest& operator=(PostOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PostOrderRequest*>(
               &_PostOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostOrderRequest& a, PostOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostOrderRequest& from) {
    PostOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PostOrderRequest";
  }
  protected:
  explicit PostOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kAccountIdFieldNumber = 5,
    kOrderIdFieldNumber = 7,
    kInstrumentIdFieldNumber = 8,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 2,
    kDirectionFieldNumber = 4,
    kOrderTypeFieldNumber = 6,
    kTimeInForceFieldNumber = 9,
    kPriceTypeFieldNumber = 10,
  };
  // optional string figi = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_figi() const;
  private:
  bool _internal_has_figi() const;
  public:
  PROTOBUF_DEPRECATED void clear_figi();
  PROTOBUF_DEPRECATED const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_figi(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_figi();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_figi();
  PROTOBUF_DEPRECATED void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string account_id = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string order_id = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string instrument_id = 8;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_direction();
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_order_type();
  ::tinkoff::public_::invest::api::contract::v1::OrderType order_type() const;
  void set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderType _internal_order_type() const;
  void _internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.TimeInForceType time_in_force = 9;
  void clear_time_in_force();
  ::tinkoff::public_::invest::api::contract::v1::TimeInForceType time_in_force() const;
  void set_time_in_force(::tinkoff::public_::invest::api::contract::v1::TimeInForceType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::TimeInForceType _internal_time_in_force() const;
  void _internal_set_time_in_force(::tinkoff::public_::invest::api::contract::v1::TimeInForceType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 10;
  void clear_price_type();
  ::tinkoff::public_::invest::api::contract::v1::PriceType price_type() const;
  void set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::PriceType _internal_price_type() const;
  void _internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    int64_t quantity_;
    int direction_;
    int order_type_;
    int time_in_force_;
    int price_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class PostOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PostOrderResponse) */ {
 public:
  inline PostOrderResponse() : PostOrderResponse(nullptr) {}
  ~PostOrderResponse() override;
  explicit PROTOBUF_CONSTEXPR PostOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostOrderResponse(const PostOrderResponse& from);
  PostOrderResponse(PostOrderResponse&& from) noexcept
    : PostOrderResponse() {
    *this = ::std::move(from);
  }

  inline PostOrderResponse& operator=(const PostOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostOrderResponse& operator=(PostOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PostOrderResponse*>(
               &_PostOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PostOrderResponse& a, PostOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostOrderResponse& from) {
    PostOrderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostOrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PostOrderResponse";
  }
  protected:
  explicit PostOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kFigiFieldNumber = 11,
    kMessageFieldNumber = 15,
    kInstrumentUidFieldNumber = 17,
    kOrderRequestIdFieldNumber = 20,
    kInitialOrderPriceFieldNumber = 5,
    kExecutedOrderPriceFieldNumber = 6,
    kTotalOrderAmountFieldNumber = 7,
    kInitialCommissionFieldNumber = 8,
    kExecutedCommissionFieldNumber = 9,
    kAciValueFieldNumber = 10,
    kInitialSecurityPriceFieldNumber = 13,
    kInitialOrderPricePtFieldNumber = 16,
    kResponseMetadataFieldNumber = 254,
    kLotsRequestedFieldNumber = 3,
    kLotsExecutedFieldNumber = 4,
    kExecutionReportStatusFieldNumber = 2,
    kDirectionFieldNumber = 12,
    kOrderTypeFieldNumber = 14,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string figi = 11;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string message = 15;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string instrument_uid = 17;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // string order_request_id = 20;
  void clear_order_request_id();
  const std::string& order_request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_request_id();
  PROTOBUF_NODISCARD std::string* release_order_request_id();
  void set_allocated_order_request_id(std::string* order_request_id);
  private:
  const std::string& _internal_order_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_request_id(const std::string& value);
  std::string* _internal_mutable_order_request_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
  bool has_initial_order_price() const;
  private:
  bool _internal_has_initial_order_price() const;
  public:
  void clear_initial_order_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_order_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_order_price();
  void set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_order_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_order_price();
  public:
  void unsafe_arena_set_allocated_initial_order_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_order_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
  bool has_executed_order_price() const;
  private:
  bool _internal_has_executed_order_price() const;
  public:
  void clear_executed_order_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_order_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_order_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_order_price();
  void set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_order_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_order_price();
  public:
  void unsafe_arena_set_allocated_executed_order_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_order_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
  bool has_total_order_amount() const;
  private:
  bool _internal_has_total_order_amount() const;
  public:
  void clear_total_order_amount();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_order_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_order_amount();
  void set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_order_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_order_amount();
  public:
  void unsafe_arena_set_allocated_total_order_amount(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_order_amount();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 8;
  bool has_initial_commission() const;
  private:
  bool _internal_has_initial_commission() const;
  public:
  void clear_initial_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_commission();
  void set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_commission();
  public:
  void unsafe_arena_set_allocated_initial_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 9;
  bool has_executed_commission() const;
  private:
  bool _internal_has_executed_commission() const;
  public:
  void clear_executed_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_commission();
  void set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_commission();
  public:
  void unsafe_arena_set_allocated_executed_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 10;
  bool has_aci_value() const;
  private:
  bool _internal_has_aci_value() const;
  public:
  void clear_aci_value();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_aci_value();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_aci_value();
  void set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_aci_value() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_aci_value();
  public:
  void unsafe_arena_set_allocated_aci_value(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_aci_value();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
  bool has_initial_security_price() const;
  private:
  bool _internal_has_initial_security_price() const;
  public:
  void clear_initial_security_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_security_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_security_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_security_price();
  void set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_security_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_security_price();
  public:
  void unsafe_arena_set_allocated_initial_security_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_security_price();

  // .tinkoff.public_.invest.api.contract.v1.Quotation initial_order_price_pt = 16;
  bool has_initial_order_price_pt() const;
  private:
  bool _internal_has_initial_order_price_pt() const;
  public:
  void clear_initial_order_price_pt();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& initial_order_price_pt() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_initial_order_price_pt();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_initial_order_price_pt();
  void set_allocated_initial_order_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* initial_order_price_pt);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_initial_order_price_pt() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_initial_order_price_pt();
  public:
  void unsafe_arena_set_allocated_initial_order_price_pt(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* initial_order_price_pt);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_initial_order_price_pt();

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  bool has_response_metadata() const;
  private:
  bool _internal_has_response_metadata() const;
  public:
  void clear_response_metadata();
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& response_metadata() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* release_response_metadata();
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* mutable_response_metadata();
  void set_allocated_response_metadata(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& _internal_response_metadata() const;
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* _internal_mutable_response_metadata();
  public:
  void unsafe_arena_set_allocated_response_metadata(
      ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata);
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* unsafe_arena_release_response_metadata();

  // int64 lots_requested = 3;
  void clear_lots_requested();
  int64_t lots_requested() const;
  void set_lots_requested(int64_t value);
  private:
  int64_t _internal_lots_requested() const;
  void _internal_set_lots_requested(int64_t value);
  public:

  // int64 lots_executed = 4;
  void clear_lots_executed();
  int64_t lots_executed() const;
  void set_lots_executed(int64_t value);
  private:
  int64_t _internal_lots_executed() const;
  void _internal_set_lots_executed(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
  void clear_execution_report_status();
  ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus execution_report_status() const;
  void set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus _internal_execution_report_status() const;
  void _internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  void clear_direction();
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 14;
  void clear_order_type();
  ::tinkoff::public_::invest::api::contract::v1::OrderType order_type() const;
  void set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderType _internal_order_type() const;
  void _internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_request_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* initial_order_price_pt_;
    ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata_;
    int64_t lots_requested_;
    int64_t lots_executed_;
    int execution_report_status_;
    int direction_;
    int order_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest) */ {
 public:
  inline CancelOrderRequest() : CancelOrderRequest(nullptr) {}
  ~CancelOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR CancelOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOrderRequest(const CancelOrderRequest& from);
  CancelOrderRequest(CancelOrderRequest&& from) noexcept
    : CancelOrderRequest() {
    *this = ::std::move(from);
  }

  inline CancelOrderRequest& operator=(const CancelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrderRequest& operator=(CancelOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOrderRequest*>(
               &_CancelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CancelOrderRequest& a, CancelOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelOrderRequest& from) {
    CancelOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CancelOrderRequest";
  }
  protected:
  explicit CancelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse) */ {
 public:
  inline CancelOrderResponse() : CancelOrderResponse(nullptr) {}
  ~CancelOrderResponse() override;
  explicit PROTOBUF_CONSTEXPR CancelOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOrderResponse(const CancelOrderResponse& from);
  CancelOrderResponse(CancelOrderResponse&& from) noexcept
    : CancelOrderResponse() {
    *this = ::std::move(from);
  }

  inline CancelOrderResponse& operator=(const CancelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrderResponse& operator=(CancelOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const CancelOrderResponse*>(
               &_CancelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CancelOrderResponse& a, CancelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelOrderResponse& from) {
    CancelOrderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CancelOrderResponse";
  }
  protected:
  explicit CancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kResponseMetadataFieldNumber = 254,
  };
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  bool has_response_metadata() const;
  private:
  bool _internal_has_response_metadata() const;
  public:
  void clear_response_metadata();
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& response_metadata() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* release_response_metadata();
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* mutable_response_metadata();
  void set_allocated_response_metadata(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& _internal_response_metadata() const;
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* _internal_mutable_response_metadata();
  public:
  void unsafe_arena_set_allocated_response_metadata(
      ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata);
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* unsafe_arena_release_response_metadata();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrderStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest) */ {
 public:
  inline GetOrderStateRequest() : GetOrderStateRequest(nullptr) {}
  ~GetOrderStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrderStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderStateRequest(const GetOrderStateRequest& from);
  GetOrderStateRequest(GetOrderStateRequest&& from) noexcept
    : GetOrderStateRequest() {
    *this = ::std::move(from);
  }

  inline GetOrderStateRequest& operator=(const GetOrderStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderStateRequest& operator=(GetOrderStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrderStateRequest*>(
               &_GetOrderStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetOrderStateRequest& a, GetOrderStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrderStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrderStateRequest& from) {
    GetOrderStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest";
  }
  protected:
  explicit GetOrderStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    kPriceTypeFieldNumber = 3,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 3;
  void clear_price_type();
  ::tinkoff::public_::invest::api::contract::v1::PriceType price_type() const;
  void set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::PriceType _internal_price_type() const;
  void _internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    int price_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest) */ {
 public:
  inline GetOrdersRequest() : GetOrdersRequest(nullptr) {}
  ~GetOrdersRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrdersRequest(const GetOrdersRequest& from);
  GetOrdersRequest(GetOrdersRequest&& from) noexcept
    : GetOrdersRequest() {
    *this = ::std::move(from);
  }

  inline GetOrdersRequest& operator=(const GetOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrdersRequest& operator=(GetOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrdersRequest*>(
               &_GetOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetOrdersRequest& a, GetOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrdersRequest& from) {
    GetOrdersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOrdersRequest";
  }
  protected:
  explicit GetOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrdersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse) */ {
 public:
  inline GetOrdersResponse() : GetOrdersResponse(nullptr) {}
  ~GetOrdersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrdersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrdersResponse(const GetOrdersResponse& from);
  GetOrdersResponse(GetOrdersResponse&& from) noexcept
    : GetOrdersResponse() {
    *this = ::std::move(from);
  }

  inline GetOrdersResponse& operator=(const GetOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrdersResponse& operator=(GetOrdersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrdersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrdersResponse*>(
               &_GetOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetOrdersResponse& a, GetOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrdersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrdersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrdersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrdersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrdersResponse& from) {
    GetOrdersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrdersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOrdersResponse";
  }
  protected:
  explicit GetOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.OrderState orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::tinkoff::public_::invest::api::contract::v1::OrderState* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderState >*
      mutable_orders();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OrderState& _internal_orders(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OrderState* _internal_add_orders();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::OrderState& orders(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OrderState* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderState >&
      orders() const;

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderState > orders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OrderState) */ {
 public:
  inline OrderState() : OrderState(nullptr) {}
  ~OrderState() override;
  explicit PROTOBUF_CONSTEXPR OrderState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderState(const OrderState& from);
  OrderState(OrderState&& from) noexcept
    : OrderState() {
    *this = ::std::move(from);
  }

  inline OrderState& operator=(const OrderState& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderState& operator=(OrderState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderState& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderState* internal_default_instance() {
    return reinterpret_cast<const OrderState*>(
               &_OrderState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OrderState& a, OrderState& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderState& from) {
    OrderState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OrderState";
  }
  protected:
  explicit OrderState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStagesFieldNumber = 14,
    kOrderIdFieldNumber = 1,
    kFigiFieldNumber = 11,
    kCurrencyFieldNumber = 16,
    kInstrumentUidFieldNumber = 19,
    kOrderRequestIdFieldNumber = 20,
    kInitialOrderPriceFieldNumber = 5,
    kExecutedOrderPriceFieldNumber = 6,
    kTotalOrderAmountFieldNumber = 7,
    kAveragePositionPriceFieldNumber = 8,
    kInitialCommissionFieldNumber = 9,
    kExecutedCommissionFieldNumber = 10,
    kInitialSecurityPriceFieldNumber = 13,
    kServiceCommissionFieldNumber = 15,
    kOrderDateFieldNumber = 18,
    kLotsRequestedFieldNumber = 3,
    kLotsExecutedFieldNumber = 4,
    kExecutionReportStatusFieldNumber = 2,
    kDirectionFieldNumber = 12,
    kOrderTypeFieldNumber = 17,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.OrderStage stages = 14;
  int stages_size() const;
  private:
  int _internal_stages_size() const;
  public:
  void clear_stages();
  ::tinkoff::public_::invest::api::contract::v1::OrderStage* mutable_stages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderStage >*
      mutable_stages();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OrderStage& _internal_stages(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OrderStage* _internal_add_stages();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::OrderStage& stages(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OrderStage* add_stages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderStage >&
      stages() const;

  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string figi = 11;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string currency = 16;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string instrument_uid = 19;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // string order_request_id = 20;
  void clear_order_request_id();
  const std::string& order_request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_request_id();
  PROTOBUF_NODISCARD std::string* release_order_request_id();
  void set_allocated_order_request_id(std::string* order_request_id);
  private:
  const std::string& _internal_order_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_request_id(const std::string& value);
  std::string* _internal_mutable_order_request_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
  bool has_initial_order_price() const;
  private:
  bool _internal_has_initial_order_price() const;
  public:
  void clear_initial_order_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_order_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_order_price();
  void set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_order_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_order_price();
  public:
  void unsafe_arena_set_allocated_initial_order_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_order_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
  bool has_executed_order_price() const;
  private:
  bool _internal_has_executed_order_price() const;
  public:
  void clear_executed_order_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_order_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_order_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_order_price();
  void set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_order_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_order_price();
  public:
  void unsafe_arena_set_allocated_executed_order_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_order_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
  bool has_total_order_amount() const;
  private:
  bool _internal_has_total_order_amount() const;
  public:
  void clear_total_order_amount();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_order_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_order_amount();
  void set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_order_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_order_amount();
  public:
  void unsafe_arena_set_allocated_total_order_amount(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_order_amount();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 8;
  bool has_average_position_price() const;
  private:
  bool _internal_has_average_position_price() const;
  public:
  void clear_average_position_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price();
  void set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price();
  public:
  void unsafe_arena_set_allocated_average_position_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 9;
  bool has_initial_commission() const;
  private:
  bool _internal_has_initial_commission() const;
  public:
  void clear_initial_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_commission();
  void set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_commission();
  public:
  void unsafe_arena_set_allocated_initial_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 10;
  bool has_executed_commission() const;
  private:
  bool _internal_has_executed_commission() const;
  public:
  void clear_executed_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_commission();
  void set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_commission();
  public:
  void unsafe_arena_set_allocated_executed_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
  bool has_initial_security_price() const;
  private:
  bool _internal_has_initial_security_price() const;
  public:
  void clear_initial_security_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_security_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_security_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_security_price();
  void set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_security_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_security_price();
  public:
  void unsafe_arena_set_allocated_initial_security_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_security_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 15;
  bool has_service_commission() const;
  private:
  bool _internal_has_service_commission() const;
  public:
  void clear_service_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& service_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_service_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_service_commission();
  void set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_service_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_service_commission();
  public:
  void unsafe_arena_set_allocated_service_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_service_commission();

  // .google.protobuf.Timestamp order_date = 18;
  bool has_order_date() const;
  private:
  bool _internal_has_order_date() const;
  public:
  void clear_order_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& order_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_order_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_order_date();
  void set_allocated_order_date(::PROTOBUF_NAMESPACE_ID::Timestamp* order_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_order_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_order_date();
  public:
  void unsafe_arena_set_allocated_order_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* order_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_order_date();

  // int64 lots_requested = 3;
  void clear_lots_requested();
  int64_t lots_requested() const;
  void set_lots_requested(int64_t value);
  private:
  int64_t _internal_lots_requested() const;
  void _internal_set_lots_requested(int64_t value);
  public:

  // int64 lots_executed = 4;
  void clear_lots_executed();
  int64_t lots_executed() const;
  void set_lots_executed(int64_t value);
  private:
  int64_t _internal_lots_executed() const;
  void _internal_set_lots_executed(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
  void clear_execution_report_status();
  ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus execution_report_status() const;
  void set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus _internal_execution_report_status() const;
  void _internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  void clear_direction();
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 17;
  void clear_order_type();
  ::tinkoff::public_::invest::api::contract::v1::OrderType order_type() const;
  void set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderType _internal_order_type() const;
  void _internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OrderState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderStage > stages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_request_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* order_date_;
    int64_t lots_requested_;
    int64_t lots_executed_;
    int execution_report_status_;
    int direction_;
    int order_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class OrderStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OrderStage) */ {
 public:
  inline OrderStage() : OrderStage(nullptr) {}
  ~OrderStage() override;
  explicit PROTOBUF_CONSTEXPR OrderStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderStage(const OrderStage& from);
  OrderStage(OrderStage&& from) noexcept
    : OrderStage() {
    *this = ::std::move(from);
  }

  inline OrderStage& operator=(const OrderStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderStage& operator=(OrderStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderStage* internal_default_instance() {
    return reinterpret_cast<const OrderStage*>(
               &_OrderStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OrderStage& a, OrderStage& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderStage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderStage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderStage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderStage& from) {
    OrderStage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderStage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OrderStage";
  }
  protected:
  explicit OrderStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeIdFieldNumber = 3,
    kPriceFieldNumber = 1,
    kExecutionTimeFieldNumber = 5,
    kQuantityFieldNumber = 2,
  };
  // string trade_id = 3;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 1;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

  // .google.protobuf.Timestamp execution_time = 5;
  bool has_execution_time() const;
  private:
  bool _internal_has_execution_time() const;
  public:
  void clear_execution_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& execution_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_execution_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_execution_time();
  void set_allocated_execution_time(::PROTOBUF_NAMESPACE_ID::Timestamp* execution_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_execution_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_execution_time();
  public:
  void unsafe_arena_set_allocated_execution_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_execution_time();

  // int64 quantity = 2;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OrderStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_time_;
    int64_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class ReplaceOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest) */ {
 public:
  inline ReplaceOrderRequest() : ReplaceOrderRequest(nullptr) {}
  ~ReplaceOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR ReplaceOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceOrderRequest(const ReplaceOrderRequest& from);
  ReplaceOrderRequest(ReplaceOrderRequest&& from) noexcept
    : ReplaceOrderRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceOrderRequest& operator=(const ReplaceOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceOrderRequest& operator=(ReplaceOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceOrderRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceOrderRequest*>(
               &_ReplaceOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReplaceOrderRequest& a, ReplaceOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceOrderRequest& from) {
    ReplaceOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest";
  }
  protected:
  explicit ReplaceOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kOrderIdFieldNumber = 6,
    kIdempotencyKeyFieldNumber = 7,
    kPriceFieldNumber = 12,
    kQuantityFieldNumber = 11,
    kPriceTypeFieldNumber = 13,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string order_id = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string idempotency_key = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_idempotency_key();
  const std::string& idempotency_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idempotency_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idempotency_key();
  PROTOBUF_NODISCARD std::string* release_idempotency_key();
  void set_allocated_idempotency_key(std::string* idempotency_key);
  private:
  const std::string& _internal_idempotency_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idempotency_key(const std::string& value);
  std::string* _internal_mutable_idempotency_key();
  public:

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 12;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  // int64 quantity = 11 [(.google.api.field_behavior) = REQUIRED];
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // optional .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 13;
  bool has_price_type() const;
  private:
  bool _internal_has_price_type() const;
  public:
  void clear_price_type();
  ::tinkoff::public_::invest::api::contract::v1::PriceType price_type() const;
  void set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::PriceType _internal_price_type() const;
  void _internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idempotency_key_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    int64_t quantity_;
    int price_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetMaxLotsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest) */ {
 public:
  inline GetMaxLotsRequest() : GetMaxLotsRequest(nullptr) {}
  ~GetMaxLotsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMaxLotsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMaxLotsRequest(const GetMaxLotsRequest& from);
  GetMaxLotsRequest(GetMaxLotsRequest&& from) noexcept
    : GetMaxLotsRequest() {
    *this = ::std::move(from);
  }

  inline GetMaxLotsRequest& operator=(const GetMaxLotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMaxLotsRequest& operator=(GetMaxLotsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMaxLotsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMaxLotsRequest* internal_default_instance() {
    return reinterpret_cast<const GetMaxLotsRequest*>(
               &_GetMaxLotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetMaxLotsRequest& a, GetMaxLotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMaxLotsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMaxLotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMaxLotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMaxLotsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMaxLotsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMaxLotsRequest& from) {
    GetMaxLotsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMaxLotsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest";
  }
  protected:
  explicit GetMaxLotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
    kPriceFieldNumber = 3,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetMaxLotsResponse_BuyLimitsView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView) */ {
 public:
  inline GetMaxLotsResponse_BuyLimitsView() : GetMaxLotsResponse_BuyLimitsView(nullptr) {}
  ~GetMaxLotsResponse_BuyLimitsView() override;
  explicit PROTOBUF_CONSTEXPR GetMaxLotsResponse_BuyLimitsView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMaxLotsResponse_BuyLimitsView(const GetMaxLotsResponse_BuyLimitsView& from);
  GetMaxLotsResponse_BuyLimitsView(GetMaxLotsResponse_BuyLimitsView&& from) noexcept
    : GetMaxLotsResponse_BuyLimitsView() {
    *this = ::std::move(from);
  }

  inline GetMaxLotsResponse_BuyLimitsView& operator=(const GetMaxLotsResponse_BuyLimitsView& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMaxLotsResponse_BuyLimitsView& operator=(GetMaxLotsResponse_BuyLimitsView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMaxLotsResponse_BuyLimitsView& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMaxLotsResponse_BuyLimitsView* internal_default_instance() {
    return reinterpret_cast<const GetMaxLotsResponse_BuyLimitsView*>(
               &_GetMaxLotsResponse_BuyLimitsView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetMaxLotsResponse_BuyLimitsView& a, GetMaxLotsResponse_BuyLimitsView& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMaxLotsResponse_BuyLimitsView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMaxLotsResponse_BuyLimitsView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMaxLotsResponse_BuyLimitsView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMaxLotsResponse_BuyLimitsView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMaxLotsResponse_BuyLimitsView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMaxLotsResponse_BuyLimitsView& from) {
    GetMaxLotsResponse_BuyLimitsView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMaxLotsResponse_BuyLimitsView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView";
  }
  protected:
  explicit GetMaxLotsResponse_BuyLimitsView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyMoneyAmountFieldNumber = 1,
    kBuyMaxLotsFieldNumber = 2,
    kBuyMaxMarketLotsFieldNumber = 3,
  };
  // .tinkoff.public_.invest.api.contract.v1.Quotation buy_money_amount = 1;
  bool has_buy_money_amount() const;
  private:
  bool _internal_has_buy_money_amount() const;
  public:
  void clear_buy_money_amount();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& buy_money_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_buy_money_amount();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_buy_money_amount();
  void set_allocated_buy_money_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* buy_money_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_buy_money_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_buy_money_amount();
  public:
  void unsafe_arena_set_allocated_buy_money_amount(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* buy_money_amount);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_buy_money_amount();

  // int64 buy_max_lots = 2;
  void clear_buy_max_lots();
  int64_t buy_max_lots() const;
  void set_buy_max_lots(int64_t value);
  private:
  int64_t _internal_buy_max_lots() const;
  void _internal_set_buy_max_lots(int64_t value);
  public:

  // int64 buy_max_market_lots = 3;
  void clear_buy_max_market_lots();
  int64_t buy_max_market_lots() const;
  void set_buy_max_market_lots(int64_t value);
  private:
  int64_t _internal_buy_max_market_lots() const;
  void _internal_set_buy_max_market_lots(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::Quotation* buy_money_amount_;
    int64_t buy_max_lots_;
    int64_t buy_max_market_lots_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetMaxLotsResponse_SellLimitsView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView) */ {
 public:
  inline GetMaxLotsResponse_SellLimitsView() : GetMaxLotsResponse_SellLimitsView(nullptr) {}
  ~GetMaxLotsResponse_SellLimitsView() override;
  explicit PROTOBUF_CONSTEXPR GetMaxLotsResponse_SellLimitsView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMaxLotsResponse_SellLimitsView(const GetMaxLotsResponse_SellLimitsView& from);
  GetMaxLotsResponse_SellLimitsView(GetMaxLotsResponse_SellLimitsView&& from) noexcept
    : GetMaxLotsResponse_SellLimitsView() {
    *this = ::std::move(from);
  }

  inline GetMaxLotsResponse_SellLimitsView& operator=(const GetMaxLotsResponse_SellLimitsView& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMaxLotsResponse_SellLimitsView& operator=(GetMaxLotsResponse_SellLimitsView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMaxLotsResponse_SellLimitsView& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMaxLotsResponse_SellLimitsView* internal_default_instance() {
    return reinterpret_cast<const GetMaxLotsResponse_SellLimitsView*>(
               &_GetMaxLotsResponse_SellLimitsView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetMaxLotsResponse_SellLimitsView& a, GetMaxLotsResponse_SellLimitsView& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMaxLotsResponse_SellLimitsView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMaxLotsResponse_SellLimitsView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMaxLotsResponse_SellLimitsView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMaxLotsResponse_SellLimitsView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMaxLotsResponse_SellLimitsView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMaxLotsResponse_SellLimitsView& from) {
    GetMaxLotsResponse_SellLimitsView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMaxLotsResponse_SellLimitsView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView";
  }
  protected:
  explicit GetMaxLotsResponse_SellLimitsView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellMaxLotsFieldNumber = 1,
  };
  // int64 sell_max_lots = 1;
  void clear_sell_max_lots();
  int64_t sell_max_lots() const;
  void set_sell_max_lots(int64_t value);
  private:
  int64_t _internal_sell_max_lots() const;
  void _internal_set_sell_max_lots(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t sell_max_lots_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetMaxLotsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse) */ {
 public:
  inline GetMaxLotsResponse() : GetMaxLotsResponse(nullptr) {}
  ~GetMaxLotsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMaxLotsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMaxLotsResponse(const GetMaxLotsResponse& from);
  GetMaxLotsResponse(GetMaxLotsResponse&& from) noexcept
    : GetMaxLotsResponse() {
    *this = ::std::move(from);
  }

  inline GetMaxLotsResponse& operator=(const GetMaxLotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMaxLotsResponse& operator=(GetMaxLotsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMaxLotsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMaxLotsResponse* internal_default_instance() {
    return reinterpret_cast<const GetMaxLotsResponse*>(
               &_GetMaxLotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetMaxLotsResponse& a, GetMaxLotsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMaxLotsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMaxLotsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMaxLotsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMaxLotsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMaxLotsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMaxLotsResponse& from) {
    GetMaxLotsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMaxLotsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse";
  }
  protected:
  explicit GetMaxLotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetMaxLotsResponse_BuyLimitsView BuyLimitsView;
  typedef GetMaxLotsResponse_SellLimitsView SellLimitsView;

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kBuyLimitsFieldNumber = 2,
    kBuyMarginLimitsFieldNumber = 3,
    kSellLimitsFieldNumber = 4,
    kSellMarginLimitsFieldNumber = 5,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_limits = 2;
  bool has_buy_limits() const;
  private:
  bool _internal_has_buy_limits() const;
  public:
  void clear_buy_limits();
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& buy_limits() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* release_buy_limits();
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* mutable_buy_limits();
  void set_allocated_buy_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_limits);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& _internal_buy_limits() const;
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* _internal_mutable_buy_limits();
  public:
  void unsafe_arena_set_allocated_buy_limits(
      ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_limits);
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* unsafe_arena_release_buy_limits();

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_margin_limits = 3;
  bool has_buy_margin_limits() const;
  private:
  bool _internal_has_buy_margin_limits() const;
  public:
  void clear_buy_margin_limits();
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& buy_margin_limits() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* release_buy_margin_limits();
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* mutable_buy_margin_limits();
  void set_allocated_buy_margin_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_margin_limits);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& _internal_buy_margin_limits() const;
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* _internal_mutable_buy_margin_limits();
  public:
  void unsafe_arena_set_allocated_buy_margin_limits(
      ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_margin_limits);
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* unsafe_arena_release_buy_margin_limits();

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_limits = 4;
  bool has_sell_limits() const;
  private:
  bool _internal_has_sell_limits() const;
  public:
  void clear_sell_limits();
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& sell_limits() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* release_sell_limits();
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* mutable_sell_limits();
  void set_allocated_sell_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_limits);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& _internal_sell_limits() const;
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* _internal_mutable_sell_limits();
  public:
  void unsafe_arena_set_allocated_sell_limits(
      ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_limits);
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* unsafe_arena_release_sell_limits();

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_margin_limits = 5;
  bool has_sell_margin_limits() const;
  private:
  bool _internal_has_sell_margin_limits() const;
  public:
  void clear_sell_margin_limits();
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& sell_margin_limits() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* release_sell_margin_limits();
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* mutable_sell_margin_limits();
  void set_allocated_sell_margin_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_margin_limits);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& _internal_sell_margin_limits() const;
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* _internal_mutable_sell_margin_limits();
  public:
  void unsafe_arena_set_allocated_sell_margin_limits(
      ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_margin_limits);
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* unsafe_arena_release_sell_margin_limits();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_limits_;
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_margin_limits_;
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_limits_;
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_margin_limits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrderPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest) */ {
 public:
  inline GetOrderPriceRequest() : GetOrderPriceRequest(nullptr) {}
  ~GetOrderPriceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrderPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderPriceRequest(const GetOrderPriceRequest& from);
  GetOrderPriceRequest(GetOrderPriceRequest&& from) noexcept
    : GetOrderPriceRequest() {
    *this = ::std::move(from);
  }

  inline GetOrderPriceRequest& operator=(const GetOrderPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderPriceRequest& operator=(GetOrderPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderPriceRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrderPriceRequest*>(
               &_GetOrderPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetOrderPriceRequest& a, GetOrderPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderPriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrderPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrderPriceRequest& from) {
    GetOrderPriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderPriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest";
  }
  protected:
  explicit GetOrderPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 13,
    kDirectionFieldNumber = 12,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string instrument_id = 2;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* price);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  // int64 quantity = 13;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  void clear_direction();
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OrderDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_;
    int64_t quantity_;
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrderPriceResponse_ExtraBond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond) */ {
 public:
  inline GetOrderPriceResponse_ExtraBond() : GetOrderPriceResponse_ExtraBond(nullptr) {}
  ~GetOrderPriceResponse_ExtraBond() override;
  explicit PROTOBUF_CONSTEXPR GetOrderPriceResponse_ExtraBond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderPriceResponse_ExtraBond(const GetOrderPriceResponse_ExtraBond& from);
  GetOrderPriceResponse_ExtraBond(GetOrderPriceResponse_ExtraBond&& from) noexcept
    : GetOrderPriceResponse_ExtraBond() {
    *this = ::std::move(from);
  }

  inline GetOrderPriceResponse_ExtraBond& operator=(const GetOrderPriceResponse_ExtraBond& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderPriceResponse_ExtraBond& operator=(GetOrderPriceResponse_ExtraBond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderPriceResponse_ExtraBond& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderPriceResponse_ExtraBond* internal_default_instance() {
    return reinterpret_cast<const GetOrderPriceResponse_ExtraBond*>(
               &_GetOrderPriceResponse_ExtraBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetOrderPriceResponse_ExtraBond& a, GetOrderPriceResponse_ExtraBond& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderPriceResponse_ExtraBond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderPriceResponse_ExtraBond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderPriceResponse_ExtraBond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrderPriceResponse_ExtraBond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderPriceResponse_ExtraBond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrderPriceResponse_ExtraBond& from) {
    GetOrderPriceResponse_ExtraBond::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderPriceResponse_ExtraBond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond";
  }
  protected:
  explicit GetOrderPriceResponse_ExtraBond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAciValueFieldNumber = 2,
    kNominalConversionRateFieldNumber = 3,
  };
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 2;
  bool has_aci_value() const;
  private:
  bool _internal_has_aci_value() const;
  public:
  void clear_aci_value();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_aci_value();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_aci_value();
  void set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_aci_value() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_aci_value();
  public:
  void unsafe_arena_set_allocated_aci_value(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_aci_value();

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal_conversion_rate = 3;
  bool has_nominal_conversion_rate() const;
  private:
  bool _internal_has_nominal_conversion_rate() const;
  public:
  void clear_nominal_conversion_rate();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal_conversion_rate() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_nominal_conversion_rate();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_nominal_conversion_rate();
  void set_allocated_nominal_conversion_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_conversion_rate);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_nominal_conversion_rate() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_nominal_conversion_rate();
  public:
  void unsafe_arena_set_allocated_nominal_conversion_rate(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_conversion_rate);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_nominal_conversion_rate();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_conversion_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrderPriceResponse_ExtraFuture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture) */ {
 public:
  inline GetOrderPriceResponse_ExtraFuture() : GetOrderPriceResponse_ExtraFuture(nullptr) {}
  ~GetOrderPriceResponse_ExtraFuture() override;
  explicit PROTOBUF_CONSTEXPR GetOrderPriceResponse_ExtraFuture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderPriceResponse_ExtraFuture(const GetOrderPriceResponse_ExtraFuture& from);
  GetOrderPriceResponse_ExtraFuture(GetOrderPriceResponse_ExtraFuture&& from) noexcept
    : GetOrderPriceResponse_ExtraFuture() {
    *this = ::std::move(from);
  }

  inline GetOrderPriceResponse_ExtraFuture& operator=(const GetOrderPriceResponse_ExtraFuture& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderPriceResponse_ExtraFuture& operator=(GetOrderPriceResponse_ExtraFuture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderPriceResponse_ExtraFuture& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderPriceResponse_ExtraFuture* internal_default_instance() {
    return reinterpret_cast<const GetOrderPriceResponse_ExtraFuture*>(
               &_GetOrderPriceResponse_ExtraFuture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetOrderPriceResponse_ExtraFuture& a, GetOrderPriceResponse_ExtraFuture& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderPriceResponse_ExtraFuture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderPriceResponse_ExtraFuture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderPriceResponse_ExtraFuture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrderPriceResponse_ExtraFuture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderPriceResponse_ExtraFuture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrderPriceResponse_ExtraFuture& from) {
    GetOrderPriceResponse_ExtraFuture::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderPriceResponse_ExtraFuture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture";
  }
  protected:
  explicit GetOrderPriceResponse_ExtraFuture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialMarginFieldNumber = 2,
  };
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin = 2;
  bool has_initial_margin() const;
  private:
  bool _internal_has_initial_margin() const;
  public:
  void clear_initial_margin();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_margin();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_margin();
  void set_allocated_initial_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_margin() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_margin();
  public:
  void unsafe_arena_set_allocated_initial_margin(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_margin();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// -------------------------------------------------------------------

class GetOrderPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse) */ {
 public:
  inline GetOrderPriceResponse() : GetOrderPriceResponse(nullptr) {}
  ~GetOrderPriceResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrderPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderPriceResponse(const GetOrderPriceResponse& from);
  GetOrderPriceResponse(GetOrderPriceResponse&& from) noexcept
    : GetOrderPriceResponse() {
    *this = ::std::move(from);
  }

  inline GetOrderPriceResponse& operator=(const GetOrderPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderPriceResponse& operator=(GetOrderPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  enum InstrumentExtraCase {
    kExtraBond = 12,
    kExtraFuture = 13,
    INSTRUMENT_EXTRA_NOT_SET = 0,
  };

  static inline const GetOrderPriceResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrderPriceResponse*>(
               &_GetOrderPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetOrderPriceResponse& a, GetOrderPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderPriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrderPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderPriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrderPriceResponse& from) {
    GetOrderPriceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderPriceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse";
  }
  protected:
  explicit GetOrderPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetOrderPriceResponse_ExtraBond ExtraBond;
  typedef GetOrderPriceResponse_ExtraFuture ExtraFuture;

  // accessors -------------------------------------------------------

  enum : int {
    kTotalOrderAmountFieldNumber = 1,
    kInitialOrderAmountFieldNumber = 5,
    kExecutedCommissionFieldNumber = 7,
    kExecutedCommissionRubFieldNumber = 8,
    kServiceCommissionFieldNumber = 9,
    kDealCommissionFieldNumber = 10,
    kLotsRequestedFieldNumber = 3,
    kExtraBondFieldNumber = 12,
    kExtraFutureFieldNumber = 13,
  };
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 1;
  bool has_total_order_amount() const;
  private:
  bool _internal_has_total_order_amount() const;
  public:
  void clear_total_order_amount();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_order_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_order_amount();
  void set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_order_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_order_amount();
  public:
  void unsafe_arena_set_allocated_total_order_amount(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_order_amount();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_amount = 5;
  bool has_initial_order_amount() const;
  private:
  bool _internal_has_initial_order_amount() const;
  public:
  void clear_initial_order_amount();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_order_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_order_amount();
  void set_allocated_initial_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_order_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_order_amount();
  public:
  void unsafe_arena_set_allocated_initial_order_amount(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_amount);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_order_amount();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 7;
  bool has_executed_commission() const;
  private:
  bool _internal_has_executed_commission() const;
  public:
  void clear_executed_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_commission();
  void set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_commission();
  public:
  void unsafe_arena_set_allocated_executed_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission_rub = 8;
  bool has_executed_commission_rub() const;
  private:
  bool _internal_has_executed_commission_rub() const;
  public:
  void clear_executed_commission_rub();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission_rub() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_executed_commission_rub();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_executed_commission_rub();
  void set_allocated_executed_commission_rub(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_rub);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_executed_commission_rub() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_executed_commission_rub();
  public:
  void unsafe_arena_set_allocated_executed_commission_rub(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_rub);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_executed_commission_rub();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 9;
  bool has_service_commission() const;
  private:
  bool _internal_has_service_commission() const;
  public:
  void clear_service_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& service_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_service_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_service_commission();
  void set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_service_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_service_commission();
  public:
  void unsafe_arena_set_allocated_service_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_service_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue deal_commission = 10;
  bool has_deal_commission() const;
  private:
  bool _internal_has_deal_commission() const;
  public:
  void clear_deal_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& deal_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_deal_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_deal_commission();
  void set_allocated_deal_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* deal_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_deal_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_deal_commission();
  public:
  void unsafe_arena_set_allocated_deal_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* deal_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_deal_commission();

  // int64 lots_requested = 3;
  void clear_lots_requested();
  int64_t lots_requested() const;
  void set_lots_requested(int64_t value);
  private:
  int64_t _internal_lots_requested() const;
  void _internal_set_lots_requested(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond extra_bond = 12;
  bool has_extra_bond() const;
  private:
  bool _internal_has_extra_bond() const;
  public:
  void clear_extra_bond();
  const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond& extra_bond() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* release_extra_bond();
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* mutable_extra_bond();
  void set_allocated_extra_bond(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* extra_bond);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond& _internal_extra_bond() const;
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* _internal_mutable_extra_bond();
  public:
  void unsafe_arena_set_allocated_extra_bond(
      ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* extra_bond);
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* unsafe_arena_release_extra_bond();

  // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture extra_future = 13;
  bool has_extra_future() const;
  private:
  bool _internal_has_extra_future() const;
  public:
  void clear_extra_future();
  const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture& extra_future() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* release_extra_future();
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* mutable_extra_future();
  void set_allocated_extra_future(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* extra_future);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture& _internal_extra_future() const;
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* _internal_mutable_extra_future();
  public:
  void unsafe_arena_set_allocated_extra_future(
      ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* extra_future);
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* unsafe_arena_release_extra_future();

  void clear_instrument_extra();
  InstrumentExtraCase instrument_extra_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
 private:
  class _Internal;
  void set_has_extra_bond();
  void set_has_extra_future();

  inline bool has_instrument_extra() const;
  inline void clear_has_instrument_extra();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_rub_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* deal_commission_;
    int64_t lots_requested_;
    union InstrumentExtraUnion {
      constexpr InstrumentExtraUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* extra_bond_;
      ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* extra_future_;
    } instrument_extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradesStreamRequest

// repeated string accounts = 1;
inline int TradesStreamRequest::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int TradesStreamRequest::accounts_size() const {
  return _internal_accounts_size();
}
inline void TradesStreamRequest::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline std::string* TradesStreamRequest::add_accounts() {
  std::string* _s = _internal_add_accounts();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
  return _s;
}
inline const std::string& TradesStreamRequest::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const std::string& TradesStreamRequest::accounts(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
  return _internal_accounts(index);
}
inline std::string* TradesStreamRequest::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline void TradesStreamRequest::set_accounts(int index, const std::string& value) {
  _impl_.accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::set_accounts(int index, std::string&& value) {
  _impl_.accounts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::set_accounts(int index, const char* value, size_t size) {
  _impl_.accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline std::string* TradesStreamRequest::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline void TradesStreamRequest::add_accounts(const std::string& value) {
  _impl_.accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(std::string&& value) {
  _impl_.accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline void TradesStreamRequest::add_accounts(const char* value, size_t size) {
  _impl_.accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TradesStreamRequest::accounts() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
  return _impl_.accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TradesStreamRequest::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts)
  return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// TradesStreamResponse

// .tinkoff.public_.invest.api.contract.v1.OrderTrades order_trades = 1;
inline bool TradesStreamResponse::_internal_has_order_trades() const {
  return payload_case() == kOrderTrades;
}
inline bool TradesStreamResponse::has_order_trades() const {
  return _internal_has_order_trades();
}
inline void TradesStreamResponse::set_has_order_trades() {
  _impl_._oneof_case_[0] = kOrderTrades;
}
inline void TradesStreamResponse::clear_order_trades() {
  if (_internal_has_order_trades()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_trades_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::release_order_trades() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.order_trades)
  if (_internal_has_order_trades()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::OrderTrades* temp = _impl_.payload_.order_trades_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.order_trades_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& TradesStreamResponse::_internal_order_trades() const {
  return _internal_has_order_trades()
      ? *_impl_.payload_.order_trades_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::OrderTrades&>(::tinkoff::public_::invest::api::contract::v1::_OrderTrades_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& TradesStreamResponse::order_trades() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.order_trades)
  return _internal_order_trades();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::unsafe_arena_release_order_trades() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.order_trades)
  if (_internal_has_order_trades()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::OrderTrades* temp = _impl_.payload_.order_trades_;
    _impl_.payload_.order_trades_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TradesStreamResponse::unsafe_arena_set_allocated_order_trades(::tinkoff::public_::invest::api::contract::v1::OrderTrades* order_trades) {
  clear_payload();
  if (order_trades) {
    set_has_order_trades();
    _impl_.payload_.order_trades_ = order_trades;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.order_trades)
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::_internal_mutable_order_trades() {
  if (!_internal_has_order_trades()) {
    clear_payload();
    set_has_order_trades();
    _impl_.payload_.order_trades_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderTrades >(GetArenaForAllocation());
  }
  return _impl_.payload_.order_trades_;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrades* TradesStreamResponse::mutable_order_trades() {
  ::tinkoff::public_::invest::api::contract::v1::OrderTrades* _msg = _internal_mutable_order_trades();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.order_trades)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.Ping ping = 2;
inline bool TradesStreamResponse::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline bool TradesStreamResponse::has_ping() const {
  return _internal_has_ping();
}
inline void TradesStreamResponse::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::release_ping() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::Ping* temp = _impl_.payload_.ping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& TradesStreamResponse::_internal_ping() const {
  return _internal_has_ping()
      ? *_impl_.payload_.ping_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::Ping&>(::tinkoff::public_::invest::api::contract::v1::_Ping_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& TradesStreamResponse::ping() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.ping)
  return _internal_ping();
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::Ping* temp = _impl_.payload_.ping_;
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TradesStreamResponse::unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  clear_payload();
  if (ping) {
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.ping)
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_payload();
    set_has_ping();
    _impl_.payload_.ping_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Ping >(GetArenaForAllocation());
  }
  return _impl_.payload_.ping_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* TradesStreamResponse::mutable_ping() {
  ::tinkoff::public_::invest::api::contract::v1::Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.ping)
  return _msg;
}

inline bool TradesStreamResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void TradesStreamResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline TradesStreamResponse::PayloadCase TradesStreamResponse::payload_case() const {
  return TradesStreamResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OrderTrades

// string order_id = 1;
inline void OrderTrades::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& OrderTrades::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrades.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderTrades::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderTrades.order_id)
}
inline std::string* OrderTrades::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrades.order_id)
  return _s;
}
inline const std::string& OrderTrades::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void OrderTrades::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderTrades::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderTrades::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrades.order_id)
  return _impl_.order_id_.Release();
}
inline void OrderTrades::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrades.order_id)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool OrderTrades::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool OrderTrades::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderTrades::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderTrades::created_at() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrades.created_at)
  return _internal_created_at();
}
inline void OrderTrades::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrades.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrades::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrades::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrades.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrades::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrades::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrades.created_at)
  return _msg;
}
inline void OrderTrades::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrades.created_at)
}

// .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 3;
inline void OrderTrades::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderTrades::_internal_direction() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderDirection >(_impl_.direction_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderTrades::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrades.direction)
  return _internal_direction();
}
inline void OrderTrades::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  
  _impl_.direction_ = value;
}
inline void OrderTrades::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderTrades.direction)
}

// string figi = 4;
inline void OrderTrades::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& OrderTrades::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrades.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderTrades::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderTrades.figi)
}
inline std::string* OrderTrades::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrades.figi)
  return _s;
}
inline const std::string& OrderTrades::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void OrderTrades::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderTrades::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderTrades::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrades.figi)
  return _impl_.figi_.Release();
}
inline void OrderTrades::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrades.figi)
}

// repeated .tinkoff.public_.invest.api.contract.v1.OrderTrade trades = 5;
inline int OrderTrades::_internal_trades_size() const {
  return _impl_.trades_.size();
}
inline int OrderTrades::trades_size() const {
  return _internal_trades_size();
}
inline void OrderTrades::clear_trades() {
  _impl_.trades_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrade* OrderTrades::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrades.trades)
  return _impl_.trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderTrade >*
OrderTrades::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.OrderTrades.trades)
  return &_impl_.trades_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderTrade& OrderTrades::_internal_trades(int index) const {
  return _impl_.trades_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderTrade& OrderTrades::trades(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrades.trades)
  return _internal_trades(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrade* OrderTrades::_internal_add_trades() {
  return _impl_.trades_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderTrade* OrderTrades::add_trades() {
  ::tinkoff::public_::invest::api::contract::v1::OrderTrade* _add = _internal_add_trades();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.OrderTrades.trades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderTrade >&
OrderTrades::trades() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.OrderTrades.trades)
  return _impl_.trades_;
}

// string account_id = 6;
inline void OrderTrades::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderTrades::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrades.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderTrades::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderTrades.account_id)
}
inline std::string* OrderTrades::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrades.account_id)
  return _s;
}
inline const std::string& OrderTrades::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderTrades::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderTrades::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderTrades::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrades.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderTrades::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrades.account_id)
}

// string instrument_uid = 7;
inline void OrderTrades::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OrderTrades::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrades.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderTrades::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderTrades.instrument_uid)
}
inline std::string* OrderTrades::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrades.instrument_uid)
  return _s;
}
inline const std::string& OrderTrades::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void OrderTrades::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderTrades::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderTrades::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrades.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void OrderTrades::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrades.instrument_uid)
}

// -------------------------------------------------------------------

// OrderTrade

// .google.protobuf.Timestamp date_time = 1;
inline bool OrderTrade::_internal_has_date_time() const {
  return this != internal_default_instance() && _impl_.date_time_ != nullptr;
}
inline bool OrderTrade::has_date_time() const {
  return _internal_has_date_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderTrade::_internal_date_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.date_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderTrade::date_time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrade.date_time)
  return _internal_date_time();
}
inline void OrderTrade::unsafe_arena_set_allocated_date_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_time_);
  }
  _impl_.date_time_ = date_time;
  if (date_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrade.date_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrade::release_date_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_time_;
  _impl_.date_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrade::unsafe_arena_release_date_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrade.date_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_time_;
  _impl_.date_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrade::_internal_mutable_date_time() {
  
  if (_impl_.date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.date_time_ = p;
  }
  return _impl_.date_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderTrade::mutable_date_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_date_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrade.date_time)
  return _msg;
}
inline void OrderTrade::set_allocated_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_time_);
  }
  if (date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_time));
    if (message_arena != submessage_arena) {
      date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_time_ = date_time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrade.date_time)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
inline bool OrderTrade::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OrderTrade::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OrderTrade::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OrderTrade::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrade.price)
  return _internal_price();
}
inline void OrderTrade::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrade.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrade.price)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OrderTrade::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrade.price)
  return _msg;
}
inline void OrderTrade::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrade.price)
}

// int64 quantity = 3;
inline void OrderTrade::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t OrderTrade::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t OrderTrade::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrade.quantity)
  return _internal_quantity();
}
inline void OrderTrade::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void OrderTrade::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderTrade.quantity)
}

// string trade_id = 4;
inline void OrderTrade::clear_trade_id() {
  _impl_.trade_id_.ClearToEmpty();
}
inline const std::string& OrderTrade::trade_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderTrade.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderTrade::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderTrade.trade_id)
}
inline std::string* OrderTrade::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderTrade.trade_id)
  return _s;
}
inline const std::string& OrderTrade::_internal_trade_id() const {
  return _impl_.trade_id_.Get();
}
inline void OrderTrade::_internal_set_trade_id(const std::string& value) {
  
  _impl_.trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderTrade::_internal_mutable_trade_id() {
  
  return _impl_.trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderTrade::release_trade_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderTrade.trade_id)
  return _impl_.trade_id_.Release();
}
inline void OrderTrade::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  _impl_.trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trade_id_.IsDefault()) {
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderTrade.trade_id)
}

// -------------------------------------------------------------------

// PostOrderRequest

// optional string figi = 1 [deprecated = true];
inline bool PostOrderRequest::_internal_has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PostOrderRequest::has_figi() const {
  return _internal_has_figi();
}
inline void PostOrderRequest::clear_figi() {
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PostOrderRequest::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderRequest::set_figi(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.figi)
}
inline std::string* PostOrderRequest::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.figi)
  return _s;
}
inline const std::string& PostOrderRequest::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void PostOrderRequest::_internal_set_figi(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderRequest::_internal_mutable_figi() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderRequest::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.figi)
  if (!_internal_has_figi()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.figi_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PostOrderRequest::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.figi)
}

// int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
inline void PostOrderRequest::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t PostOrderRequest::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t PostOrderRequest::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.quantity)
  return _internal_quantity();
}
inline void PostOrderRequest::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void PostOrderRequest::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.quantity)
}

// optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
inline bool PostOrderRequest::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline bool PostOrderRequest::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderRequest::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderRequest::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.price)
  return _internal_price();
}
inline void PostOrderRequest::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::release_price() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.price)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::_internal_mutable_price() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderRequest::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.price)
  return _msg;
}
inline void PostOrderRequest::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.price)
}

// .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 4 [(.google.api.field_behavior) = REQUIRED];
inline void PostOrderRequest::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderRequest::_internal_direction() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderDirection >(_impl_.direction_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderRequest::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.direction)
  return _internal_direction();
}
inline void PostOrderRequest::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  
  _impl_.direction_ = value;
}
inline void PostOrderRequest::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.direction)
}

// string account_id = 5 [(.google.api.field_behavior) = REQUIRED];
inline void PostOrderRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PostOrderRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.account_id)
}
inline std::string* PostOrderRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.account_id)
  return _s;
}
inline const std::string& PostOrderRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void PostOrderRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void PostOrderRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 6 [(.google.api.field_behavior) = REQUIRED];
inline void PostOrderRequest::clear_order_type() {
  _impl_.order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderRequest::_internal_order_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderType >(_impl_.order_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderRequest::order_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_type)
  return _internal_order_type();
}
inline void PostOrderRequest::_internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
  
  _impl_.order_type_ = value;
}
inline void PostOrderRequest::set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_type)
}

// string order_id = 7 [(.google.api.field_behavior) = REQUIRED];
inline void PostOrderRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& PostOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_id)
}
inline std::string* PostOrderRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_id)
  return _s;
}
inline const std::string& PostOrderRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void PostOrderRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void PostOrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_id)
}

// string instrument_id = 8;
inline void PostOrderRequest::clear_instrument_id() {
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& PostOrderRequest::instrument_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderRequest::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.instrument_id)
}
inline std::string* PostOrderRequest::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.instrument_id)
  return _s;
}
inline const std::string& PostOrderRequest::_internal_instrument_id() const {
  return _impl_.instrument_id_.Get();
}
inline void PostOrderRequest::_internal_set_instrument_id(const std::string& value) {
  
  _impl_.instrument_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderRequest::_internal_mutable_instrument_id() {
  
  return _impl_.instrument_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderRequest::release_instrument_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void PostOrderRequest::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_id_.SetAllocated(instrument_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.instrument_id)
}

// .tinkoff.public_.invest.api.contract.v1.TimeInForceType time_in_force = 9;
inline void PostOrderRequest::clear_time_in_force() {
  _impl_.time_in_force_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::TimeInForceType PostOrderRequest::_internal_time_in_force() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::TimeInForceType >(_impl_.time_in_force_);
}
inline ::tinkoff::public_::invest::api::contract::v1::TimeInForceType PostOrderRequest::time_in_force() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.time_in_force)
  return _internal_time_in_force();
}
inline void PostOrderRequest::_internal_set_time_in_force(::tinkoff::public_::invest::api::contract::v1::TimeInForceType value) {
  
  _impl_.time_in_force_ = value;
}
inline void PostOrderRequest::set_time_in_force(::tinkoff::public_::invest::api::contract::v1::TimeInForceType value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.time_in_force)
}

// .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 10;
inline void PostOrderRequest::clear_price_type() {
  _impl_.price_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType PostOrderRequest::_internal_price_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::PriceType >(_impl_.price_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType PostOrderRequest::price_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.price_type)
  return _internal_price_type();
}
inline void PostOrderRequest::_internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  
  _impl_.price_type_ = value;
}
inline void PostOrderRequest::set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderRequest.price_type)
}

// -------------------------------------------------------------------

// PostOrderResponse

// string order_id = 1;
inline void PostOrderResponse::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderResponse::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_id)
}
inline std::string* PostOrderResponse::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_id)
  return _s;
}
inline const std::string& PostOrderResponse::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void PostOrderResponse::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderResponse::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderResponse::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_id)
  return _impl_.order_id_.Release();
}
inline void PostOrderResponse::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_id)
}

// .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
inline void PostOrderResponse::clear_execution_report_status() {
  _impl_.execution_report_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus PostOrderResponse::_internal_execution_report_status() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus >(_impl_.execution_report_status_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus PostOrderResponse::execution_report_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.execution_report_status)
  return _internal_execution_report_status();
}
inline void PostOrderResponse::_internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
  
  _impl_.execution_report_status_ = value;
}
inline void PostOrderResponse::set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
  _internal_set_execution_report_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.execution_report_status)
}

// int64 lots_requested = 3;
inline void PostOrderResponse::clear_lots_requested() {
  _impl_.lots_requested_ = int64_t{0};
}
inline int64_t PostOrderResponse::_internal_lots_requested() const {
  return _impl_.lots_requested_;
}
inline int64_t PostOrderResponse::lots_requested() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.lots_requested)
  return _internal_lots_requested();
}
inline void PostOrderResponse::_internal_set_lots_requested(int64_t value) {
  
  _impl_.lots_requested_ = value;
}
inline void PostOrderResponse::set_lots_requested(int64_t value) {
  _internal_set_lots_requested(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.lots_requested)
}

// int64 lots_executed = 4;
inline void PostOrderResponse::clear_lots_executed() {
  _impl_.lots_executed_ = int64_t{0};
}
inline int64_t PostOrderResponse::_internal_lots_executed() const {
  return _impl_.lots_executed_;
}
inline int64_t PostOrderResponse::lots_executed() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.lots_executed)
  return _internal_lots_executed();
}
inline void PostOrderResponse::_internal_set_lots_executed(int64_t value) {
  
  _impl_.lots_executed_ = value;
}
inline void PostOrderResponse::set_lots_executed(int64_t value) {
  _internal_set_lots_executed(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.lots_executed)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
inline bool PostOrderResponse::_internal_has_initial_order_price() const {
  return this != internal_default_instance() && _impl_.initial_order_price_ != nullptr;
}
inline bool PostOrderResponse::has_initial_order_price() const {
  return _internal_has_initial_order_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_initial_order_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_order_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::initial_order_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price)
  return _internal_initial_order_price();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_order_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_price_);
  }
  _impl_.initial_order_price_ = initial_order_price;
  if (initial_order_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_initial_order_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_price_;
  _impl_.initial_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_initial_order_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_price_;
  _impl_.initial_order_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_initial_order_price() {
  
  if (_impl_.initial_order_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_order_price_ = p;
  }
  return _impl_.initial_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_initial_order_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_order_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price)
  return _msg;
}
inline void PostOrderResponse::set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_price_);
  }
  if (initial_order_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_order_price));
    if (message_arena != submessage_arena) {
      initial_order_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_order_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_order_price_ = initial_order_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
inline bool PostOrderResponse::_internal_has_executed_order_price() const {
  return this != internal_default_instance() && _impl_.executed_order_price_ != nullptr;
}
inline bool PostOrderResponse::has_executed_order_price() const {
  return _internal_has_executed_order_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_executed_order_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_order_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::executed_order_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_order_price)
  return _internal_executed_order_price();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_executed_order_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_order_price_);
  }
  _impl_.executed_order_price_ = executed_order_price;
  if (executed_order_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_executed_order_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_order_price_;
  _impl_.executed_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_executed_order_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_order_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_order_price_;
  _impl_.executed_order_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_executed_order_price() {
  
  if (_impl_.executed_order_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.executed_order_price_ = p;
  }
  return _impl_.executed_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_executed_order_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_order_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_order_price)
  return _msg;
}
inline void PostOrderResponse::set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_order_price_);
  }
  if (executed_order_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executed_order_price));
    if (message_arena != submessage_arena) {
      executed_order_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executed_order_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.executed_order_price_ = executed_order_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_order_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
inline bool PostOrderResponse::_internal_has_total_order_amount() const {
  return this != internal_default_instance() && _impl_.total_order_amount_ != nullptr;
}
inline bool PostOrderResponse::has_total_order_amount() const {
  return _internal_has_total_order_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_total_order_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_order_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::total_order_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.total_order_amount)
  return _internal_total_order_amount();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_total_order_amount(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  _impl_.total_order_amount_ = total_order_amount;
  if (total_order_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.total_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_total_order_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_total_order_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.total_order_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_total_order_amount() {
  
  if (_impl_.total_order_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_order_amount_ = p;
  }
  return _impl_.total_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_total_order_amount() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_order_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.total_order_amount)
  return _msg;
}
inline void PostOrderResponse::set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  if (total_order_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_order_amount));
    if (message_arena != submessage_arena) {
      total_order_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_order_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_order_amount_ = total_order_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.total_order_amount)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 8;
inline bool PostOrderResponse::_internal_has_initial_commission() const {
  return this != internal_default_instance() && _impl_.initial_commission_ != nullptr;
}
inline bool PostOrderResponse::has_initial_commission() const {
  return _internal_has_initial_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_initial_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::initial_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_commission)
  return _internal_initial_commission();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_commission_);
  }
  _impl_.initial_commission_ = initial_commission;
  if (initial_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_initial_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_commission_;
  _impl_.initial_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_initial_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_commission_;
  _impl_.initial_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_initial_commission() {
  
  if (_impl_.initial_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_commission_ = p;
  }
  return _impl_.initial_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_initial_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_commission)
  return _msg;
}
inline void PostOrderResponse::set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_commission_);
  }
  if (initial_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_commission));
    if (message_arena != submessage_arena) {
      initial_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_commission_ = initial_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 9;
inline bool PostOrderResponse::_internal_has_executed_commission() const {
  return this != internal_default_instance() && _impl_.executed_commission_ != nullptr;
}
inline bool PostOrderResponse::has_executed_commission() const {
  return _internal_has_executed_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_executed_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::executed_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_commission)
  return _internal_executed_commission();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_executed_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_);
  }
  _impl_.executed_commission_ = executed_commission;
  if (executed_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_executed_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
  _impl_.executed_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_executed_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
  _impl_.executed_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_executed_commission() {
  
  if (_impl_.executed_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.executed_commission_ = p;
  }
  return _impl_.executed_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_executed_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_commission)
  return _msg;
}
inline void PostOrderResponse::set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_);
  }
  if (executed_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executed_commission));
    if (message_arena != submessage_arena) {
      executed_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executed_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.executed_commission_ = executed_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.executed_commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 10;
inline bool PostOrderResponse::_internal_has_aci_value() const {
  return this != internal_default_instance() && _impl_.aci_value_ != nullptr;
}
inline bool PostOrderResponse::has_aci_value() const {
  return _internal_has_aci_value();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_aci_value() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.aci_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::aci_value() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.aci_value)
  return _internal_aci_value();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_aci_value(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aci_value_);
  }
  _impl_.aci_value_ = aci_value;
  if (aci_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.aci_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_aci_value() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_aci_value() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.aci_value)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_aci_value() {
  
  if (_impl_.aci_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.aci_value_ = p;
  }
  return _impl_.aci_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_aci_value() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_aci_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.aci_value)
  return _msg;
}
inline void PostOrderResponse::set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aci_value_);
  }
  if (aci_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aci_value));
    if (message_arena != submessage_arena) {
      aci_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aci_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aci_value_ = aci_value;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.aci_value)
}

// string figi = 11;
inline void PostOrderResponse::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderResponse::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.figi)
}
inline std::string* PostOrderResponse::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.figi)
  return _s;
}
inline const std::string& PostOrderResponse::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void PostOrderResponse::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderResponse::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderResponse::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.figi)
  return _impl_.figi_.Release();
}
inline void PostOrderResponse::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.figi)
}

// .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
inline void PostOrderResponse::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderResponse::_internal_direction() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderDirection >(_impl_.direction_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection PostOrderResponse::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.direction)
  return _internal_direction();
}
inline void PostOrderResponse::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  
  _impl_.direction_ = value;
}
inline void PostOrderResponse::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.direction)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
inline bool PostOrderResponse::_internal_has_initial_security_price() const {
  return this != internal_default_instance() && _impl_.initial_security_price_ != nullptr;
}
inline bool PostOrderResponse::has_initial_security_price() const {
  return _internal_has_initial_security_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::_internal_initial_security_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_security_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PostOrderResponse::initial_security_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_security_price)
  return _internal_initial_security_price();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_security_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_security_price_);
  }
  _impl_.initial_security_price_ = initial_security_price;
  if (initial_security_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_security_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::release_initial_security_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_security_price_;
  _impl_.initial_security_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::unsafe_arena_release_initial_security_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_security_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_security_price_;
  _impl_.initial_security_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::_internal_mutable_initial_security_price() {
  
  if (_impl_.initial_security_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_security_price_ = p;
  }
  return _impl_.initial_security_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PostOrderResponse::mutable_initial_security_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_security_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_security_price)
  return _msg;
}
inline void PostOrderResponse::set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_security_price_);
  }
  if (initial_security_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_security_price));
    if (message_arena != submessage_arena) {
      initial_security_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_security_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_security_price_ = initial_security_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_security_price)
}

// .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 14;
inline void PostOrderResponse::clear_order_type() {
  _impl_.order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderResponse::_internal_order_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderType >(_impl_.order_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType PostOrderResponse::order_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_type)
  return _internal_order_type();
}
inline void PostOrderResponse::_internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
  
  _impl_.order_type_ = value;
}
inline void PostOrderResponse::set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_type)
}

// string message = 15;
inline void PostOrderResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::message() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.message)
}
inline std::string* PostOrderResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.message)
  return _s;
}
inline const std::string& PostOrderResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void PostOrderResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderResponse::release_message() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.message)
  return _impl_.message_.Release();
}
inline void PostOrderResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.message)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation initial_order_price_pt = 16;
inline bool PostOrderResponse::_internal_has_initial_order_price_pt() const {
  return this != internal_default_instance() && _impl_.initial_order_price_pt_ != nullptr;
}
inline bool PostOrderResponse::has_initial_order_price_pt() const {
  return _internal_has_initial_order_price_pt();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderResponse::_internal_initial_order_price_pt() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.initial_order_price_pt_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PostOrderResponse::initial_order_price_pt() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
  return _internal_initial_order_price_pt();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_initial_order_price_pt(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* initial_order_price_pt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_price_pt_);
  }
  _impl_.initial_order_price_pt_ = initial_order_price_pt;
  if (initial_order_price_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::release_initial_order_price_pt() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.initial_order_price_pt_;
  _impl_.initial_order_price_pt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::unsafe_arena_release_initial_order_price_pt() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.initial_order_price_pt_;
  _impl_.initial_order_price_pt_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::_internal_mutable_initial_order_price_pt() {
  
  if (_impl_.initial_order_price_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.initial_order_price_pt_ = p;
  }
  return _impl_.initial_order_price_pt_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PostOrderResponse::mutable_initial_order_price_pt() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_initial_order_price_pt();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
  return _msg;
}
inline void PostOrderResponse::set_allocated_initial_order_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* initial_order_price_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_price_pt_);
  }
  if (initial_order_price_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_order_price_pt));
    if (message_arena != submessage_arena) {
      initial_order_price_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_order_price_pt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_order_price_pt_ = initial_order_price_pt;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt)
}

// string instrument_uid = 17;
inline void PostOrderResponse::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderResponse::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.instrument_uid)
}
inline std::string* PostOrderResponse::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.instrument_uid)
  return _s;
}
inline const std::string& PostOrderResponse::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void PostOrderResponse::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderResponse::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderResponse::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void PostOrderResponse::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.instrument_uid)
}

// string order_request_id = 20;
inline void PostOrderResponse::clear_order_request_id() {
  _impl_.order_request_id_.ClearToEmpty();
}
inline const std::string& PostOrderResponse::order_request_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_request_id)
  return _internal_order_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostOrderResponse::set_order_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_request_id)
}
inline std::string* PostOrderResponse::mutable_order_request_id() {
  std::string* _s = _internal_mutable_order_request_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_request_id)
  return _s;
}
inline const std::string& PostOrderResponse::_internal_order_request_id() const {
  return _impl_.order_request_id_.Get();
}
inline void PostOrderResponse::_internal_set_order_request_id(const std::string& value) {
  
  _impl_.order_request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PostOrderResponse::_internal_mutable_order_request_id() {
  
  return _impl_.order_request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PostOrderResponse::release_order_request_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_request_id)
  return _impl_.order_request_id_.Release();
}
inline void PostOrderResponse::set_allocated_order_request_id(std::string* order_request_id) {
  if (order_request_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_request_id_.SetAllocated(order_request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_request_id_.IsDefault()) {
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_request_id)
}

// .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
inline bool PostOrderResponse::_internal_has_response_metadata() const {
  return this != internal_default_instance() && _impl_.response_metadata_ != nullptr;
}
inline bool PostOrderResponse::has_response_metadata() const {
  return _internal_has_response_metadata();
}
inline const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& PostOrderResponse::_internal_response_metadata() const {
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* p = _impl_.response_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata&>(
      ::tinkoff::public_::invest::api::contract::v1::_ResponseMetadata_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& PostOrderResponse::response_metadata() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.response_metadata)
  return _internal_response_metadata();
}
inline void PostOrderResponse::unsafe_arena_set_allocated_response_metadata(
    ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_metadata_);
  }
  _impl_.response_metadata_ = response_metadata;
  if (response_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.response_metadata)
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostOrderResponse::release_response_metadata() {
  
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* temp = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostOrderResponse::unsafe_arena_release_response_metadata() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.response_metadata)
  
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* temp = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostOrderResponse::_internal_mutable_response_metadata() {
  
  if (_impl_.response_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::ResponseMetadata>(GetArenaForAllocation());
    _impl_.response_metadata_ = p;
  }
  return _impl_.response_metadata_;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* PostOrderResponse::mutable_response_metadata() {
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* _msg = _internal_mutable_response_metadata();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.response_metadata)
  return _msg;
}
inline void PostOrderResponse::set_allocated_response_metadata(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_metadata_);
  }
  if (response_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_metadata));
    if (message_arena != submessage_arena) {
      response_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_metadata_ = response_metadata;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PostOrderResponse.response_metadata)
}

// -------------------------------------------------------------------

// CancelOrderRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CancelOrderRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& CancelOrderRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelOrderRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.account_id)
}
inline std::string* CancelOrderRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.account_id)
  return _s;
}
inline const std::string& CancelOrderRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void CancelOrderRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelOrderRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CancelOrderRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void CancelOrderRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.account_id)
}

// string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CancelOrderRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& CancelOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelOrderRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.order_id)
}
inline std::string* CancelOrderRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.order_id)
  return _s;
}
inline const std::string& CancelOrderRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void CancelOrderRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelOrderRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CancelOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void CancelOrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.order_id)
}

// -------------------------------------------------------------------

// CancelOrderResponse

// .google.protobuf.Timestamp time = 1;
inline bool CancelOrderResponse::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool CancelOrderResponse::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CancelOrderResponse::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CancelOrderResponse::time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.time)
  return _internal_time();
}
inline void CancelOrderResponse::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelOrderResponse::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelOrderResponse::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelOrderResponse::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CancelOrderResponse::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.time)
  return _msg;
}
inline void CancelOrderResponse::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.time)
}

// .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
inline bool CancelOrderResponse::_internal_has_response_metadata() const {
  return this != internal_default_instance() && _impl_.response_metadata_ != nullptr;
}
inline bool CancelOrderResponse::has_response_metadata() const {
  return _internal_has_response_metadata();
}
inline const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& CancelOrderResponse::_internal_response_metadata() const {
  const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* p = _impl_.response_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata&>(
      ::tinkoff::public_::invest::api::contract::v1::_ResponseMetadata_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& CancelOrderResponse::response_metadata() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.response_metadata)
  return _internal_response_metadata();
}
inline void CancelOrderResponse::unsafe_arena_set_allocated_response_metadata(
    ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_metadata_);
  }
  _impl_.response_metadata_ = response_metadata;
  if (response_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.response_metadata)
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* CancelOrderResponse::release_response_metadata() {
  
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* temp = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* CancelOrderResponse::unsafe_arena_release_response_metadata() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.response_metadata)
  
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* temp = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* CancelOrderResponse::_internal_mutable_response_metadata() {
  
  if (_impl_.response_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::ResponseMetadata>(GetArenaForAllocation());
    _impl_.response_metadata_ = p;
  }
  return _impl_.response_metadata_;
}
inline ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* CancelOrderResponse::mutable_response_metadata() {
  ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* _msg = _internal_mutable_response_metadata();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.response_metadata)
  return _msg;
}
inline void CancelOrderResponse::set_allocated_response_metadata(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata* response_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_metadata_);
  }
  if (response_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_metadata));
    if (message_arena != submessage_arena) {
      response_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_metadata_ = response_metadata;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse.response_metadata)
}

// -------------------------------------------------------------------

// GetOrderStateRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetOrderStateRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetOrderStateRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderStateRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.account_id)
}
inline std::string* GetOrderStateRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.account_id)
  return _s;
}
inline const std::string& GetOrderStateRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GetOrderStateRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrderStateRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrderStateRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GetOrderStateRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.account_id)
}

// string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void GetOrderStateRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& GetOrderStateRequest::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderStateRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.order_id)
}
inline std::string* GetOrderStateRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.order_id)
  return _s;
}
inline const std::string& GetOrderStateRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void GetOrderStateRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrderStateRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrderStateRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void GetOrderStateRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.order_id)
}

// .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 3;
inline void GetOrderStateRequest::clear_price_type() {
  _impl_.price_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType GetOrderStateRequest::_internal_price_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::PriceType >(_impl_.price_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType GetOrderStateRequest::price_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.price_type)
  return _internal_price_type();
}
inline void GetOrderStateRequest::_internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  
  _impl_.price_type_ = value;
}
inline void GetOrderStateRequest::set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.price_type)
}

// -------------------------------------------------------------------

// GetOrdersRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetOrdersRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetOrdersRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrdersRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest.account_id)
}
inline std::string* GetOrdersRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest.account_id)
  return _s;
}
inline const std::string& GetOrdersRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GetOrdersRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrdersRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrdersRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GetOrdersRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest.account_id)
}

// -------------------------------------------------------------------

// GetOrdersResponse

// repeated .tinkoff.public_.invest.api.contract.v1.OrderState orders = 1;
inline int GetOrdersResponse::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int GetOrdersResponse::orders_size() const {
  return _internal_orders_size();
}
inline void GetOrdersResponse::clear_orders() {
  _impl_.orders_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderState* GetOrdersResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderState >*
GetOrdersResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse.orders)
  return &_impl_.orders_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderState& GetOrdersResponse::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderState& GetOrdersResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse.orders)
  return _internal_orders(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderState* GetOrdersResponse::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderState* GetOrdersResponse::add_orders() {
  ::tinkoff::public_::invest::api::contract::v1::OrderState* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderState >&
GetOrdersResponse::orders() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse.orders)
  return _impl_.orders_;
}

// -------------------------------------------------------------------

// OrderState

// string order_id = 1;
inline void OrderState::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& OrderState::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.order_id)
}
inline std::string* OrderState::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.order_id)
  return _s;
}
inline const std::string& OrderState::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void OrderState::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderState::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.order_id)
  return _impl_.order_id_.Release();
}
inline void OrderState::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.order_id)
}

// .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
inline void OrderState::clear_execution_report_status() {
  _impl_.execution_report_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus OrderState::_internal_execution_report_status() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus >(_impl_.execution_report_status_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus OrderState::execution_report_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.execution_report_status)
  return _internal_execution_report_status();
}
inline void OrderState::_internal_set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
  
  _impl_.execution_report_status_ = value;
}
inline void OrderState::set_execution_report_status(::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus value) {
  _internal_set_execution_report_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.execution_report_status)
}

// int64 lots_requested = 3;
inline void OrderState::clear_lots_requested() {
  _impl_.lots_requested_ = int64_t{0};
}
inline int64_t OrderState::_internal_lots_requested() const {
  return _impl_.lots_requested_;
}
inline int64_t OrderState::lots_requested() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.lots_requested)
  return _internal_lots_requested();
}
inline void OrderState::_internal_set_lots_requested(int64_t value) {
  
  _impl_.lots_requested_ = value;
}
inline void OrderState::set_lots_requested(int64_t value) {
  _internal_set_lots_requested(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.lots_requested)
}

// int64 lots_executed = 4;
inline void OrderState::clear_lots_executed() {
  _impl_.lots_executed_ = int64_t{0};
}
inline int64_t OrderState::_internal_lots_executed() const {
  return _impl_.lots_executed_;
}
inline int64_t OrderState::lots_executed() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.lots_executed)
  return _internal_lots_executed();
}
inline void OrderState::_internal_set_lots_executed(int64_t value) {
  
  _impl_.lots_executed_ = value;
}
inline void OrderState::set_lots_executed(int64_t value) {
  _internal_set_lots_executed(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.lots_executed)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
inline bool OrderState::_internal_has_initial_order_price() const {
  return this != internal_default_instance() && _impl_.initial_order_price_ != nullptr;
}
inline bool OrderState::has_initial_order_price() const {
  return _internal_has_initial_order_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_initial_order_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_order_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::initial_order_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.initial_order_price)
  return _internal_initial_order_price();
}
inline void OrderState::unsafe_arena_set_allocated_initial_order_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_price_);
  }
  _impl_.initial_order_price_ = initial_order_price;
  if (initial_order_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.initial_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_initial_order_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_price_;
  _impl_.initial_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_initial_order_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.initial_order_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_price_;
  _impl_.initial_order_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_initial_order_price() {
  
  if (_impl_.initial_order_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_order_price_ = p;
  }
  return _impl_.initial_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_initial_order_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_order_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.initial_order_price)
  return _msg;
}
inline void OrderState::set_allocated_initial_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_price_);
  }
  if (initial_order_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_order_price));
    if (message_arena != submessage_arena) {
      initial_order_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_order_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_order_price_ = initial_order_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.initial_order_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
inline bool OrderState::_internal_has_executed_order_price() const {
  return this != internal_default_instance() && _impl_.executed_order_price_ != nullptr;
}
inline bool OrderState::has_executed_order_price() const {
  return _internal_has_executed_order_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_executed_order_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_order_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::executed_order_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.executed_order_price)
  return _internal_executed_order_price();
}
inline void OrderState::unsafe_arena_set_allocated_executed_order_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_order_price_);
  }
  _impl_.executed_order_price_ = executed_order_price;
  if (executed_order_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.executed_order_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_executed_order_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_order_price_;
  _impl_.executed_order_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_executed_order_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.executed_order_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_order_price_;
  _impl_.executed_order_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_executed_order_price() {
  
  if (_impl_.executed_order_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.executed_order_price_ = p;
  }
  return _impl_.executed_order_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_executed_order_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_order_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.executed_order_price)
  return _msg;
}
inline void OrderState::set_allocated_executed_order_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_order_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_order_price_);
  }
  if (executed_order_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executed_order_price));
    if (message_arena != submessage_arena) {
      executed_order_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executed_order_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.executed_order_price_ = executed_order_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.executed_order_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
inline bool OrderState::_internal_has_total_order_amount() const {
  return this != internal_default_instance() && _impl_.total_order_amount_ != nullptr;
}
inline bool OrderState::has_total_order_amount() const {
  return _internal_has_total_order_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_total_order_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_order_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::total_order_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.total_order_amount)
  return _internal_total_order_amount();
}
inline void OrderState::unsafe_arena_set_allocated_total_order_amount(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  _impl_.total_order_amount_ = total_order_amount;
  if (total_order_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.total_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_total_order_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_total_order_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.total_order_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_total_order_amount() {
  
  if (_impl_.total_order_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_order_amount_ = p;
  }
  return _impl_.total_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_total_order_amount() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_order_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.total_order_amount)
  return _msg;
}
inline void OrderState::set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  if (total_order_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_order_amount));
    if (message_arena != submessage_arena) {
      total_order_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_order_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_order_amount_ = total_order_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.total_order_amount)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 8;
inline bool OrderState::_internal_has_average_position_price() const {
  return this != internal_default_instance() && _impl_.average_position_price_ != nullptr;
}
inline bool OrderState::has_average_position_price() const {
  return _internal_has_average_position_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_average_position_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::average_position_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.average_position_price)
  return _internal_average_position_price();
}
inline void OrderState::unsafe_arena_set_allocated_average_position_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_);
  }
  _impl_.average_position_price_ = average_position_price;
  if (average_position_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.average_position_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_average_position_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
  _impl_.average_position_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_average_position_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.average_position_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
  _impl_.average_position_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_average_position_price() {
  
  if (_impl_.average_position_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.average_position_price_ = p;
  }
  return _impl_.average_position_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_average_position_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.average_position_price)
  return _msg;
}
inline void OrderState::set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_);
  }
  if (average_position_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(average_position_price));
    if (message_arena != submessage_arena) {
      average_position_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_position_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.average_position_price_ = average_position_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.average_position_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 9;
inline bool OrderState::_internal_has_initial_commission() const {
  return this != internal_default_instance() && _impl_.initial_commission_ != nullptr;
}
inline bool OrderState::has_initial_commission() const {
  return _internal_has_initial_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_initial_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::initial_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.initial_commission)
  return _internal_initial_commission();
}
inline void OrderState::unsafe_arena_set_allocated_initial_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_commission_);
  }
  _impl_.initial_commission_ = initial_commission;
  if (initial_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.initial_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_initial_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_commission_;
  _impl_.initial_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_initial_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.initial_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_commission_;
  _impl_.initial_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_initial_commission() {
  
  if (_impl_.initial_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_commission_ = p;
  }
  return _impl_.initial_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_initial_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.initial_commission)
  return _msg;
}
inline void OrderState::set_allocated_initial_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_commission_);
  }
  if (initial_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_commission));
    if (message_arena != submessage_arena) {
      initial_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_commission_ = initial_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.initial_commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 10;
inline bool OrderState::_internal_has_executed_commission() const {
  return this != internal_default_instance() && _impl_.executed_commission_ != nullptr;
}
inline bool OrderState::has_executed_commission() const {
  return _internal_has_executed_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_executed_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::executed_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.executed_commission)
  return _internal_executed_commission();
}
inline void OrderState::unsafe_arena_set_allocated_executed_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_);
  }
  _impl_.executed_commission_ = executed_commission;
  if (executed_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.executed_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_executed_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
  _impl_.executed_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_executed_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.executed_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
  _impl_.executed_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_executed_commission() {
  
  if (_impl_.executed_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.executed_commission_ = p;
  }
  return _impl_.executed_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_executed_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.executed_commission)
  return _msg;
}
inline void OrderState::set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_);
  }
  if (executed_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executed_commission));
    if (message_arena != submessage_arena) {
      executed_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executed_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.executed_commission_ = executed_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.executed_commission)
}

// string figi = 11;
inline void OrderState::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& OrderState::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.figi)
}
inline std::string* OrderState::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.figi)
  return _s;
}
inline const std::string& OrderState::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void OrderState::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderState::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.figi)
  return _impl_.figi_.Release();
}
inline void OrderState::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.figi)
}

// .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
inline void OrderState::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderState::_internal_direction() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderDirection >(_impl_.direction_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection OrderState::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.direction)
  return _internal_direction();
}
inline void OrderState::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  
  _impl_.direction_ = value;
}
inline void OrderState::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.direction)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
inline bool OrderState::_internal_has_initial_security_price() const {
  return this != internal_default_instance() && _impl_.initial_security_price_ != nullptr;
}
inline bool OrderState::has_initial_security_price() const {
  return _internal_has_initial_security_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_initial_security_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_security_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::initial_security_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.initial_security_price)
  return _internal_initial_security_price();
}
inline void OrderState::unsafe_arena_set_allocated_initial_security_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_security_price_);
  }
  _impl_.initial_security_price_ = initial_security_price;
  if (initial_security_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.initial_security_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_initial_security_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_security_price_;
  _impl_.initial_security_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_initial_security_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.initial_security_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_security_price_;
  _impl_.initial_security_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_initial_security_price() {
  
  if (_impl_.initial_security_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_security_price_ = p;
  }
  return _impl_.initial_security_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_initial_security_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_security_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.initial_security_price)
  return _msg;
}
inline void OrderState::set_allocated_initial_security_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_security_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_security_price_);
  }
  if (initial_security_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_security_price));
    if (message_arena != submessage_arena) {
      initial_security_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_security_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_security_price_ = initial_security_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.initial_security_price)
}

// repeated .tinkoff.public_.invest.api.contract.v1.OrderStage stages = 14;
inline int OrderState::_internal_stages_size() const {
  return _impl_.stages_.size();
}
inline int OrderState::stages_size() const {
  return _internal_stages_size();
}
inline void OrderState::clear_stages() {
  _impl_.stages_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderStage* OrderState::mutable_stages(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.stages)
  return _impl_.stages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderStage >*
OrderState::mutable_stages() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.OrderState.stages)
  return &_impl_.stages_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderStage& OrderState::_internal_stages(int index) const {
  return _impl_.stages_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OrderStage& OrderState::stages(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.stages)
  return _internal_stages(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderStage* OrderState::_internal_add_stages() {
  return _impl_.stages_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderStage* OrderState::add_stages() {
  ::tinkoff::public_::invest::api::contract::v1::OrderStage* _add = _internal_add_stages();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.OrderState.stages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OrderStage >&
OrderState::stages() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.OrderState.stages)
  return _impl_.stages_;
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 15;
inline bool OrderState::_internal_has_service_commission() const {
  return this != internal_default_instance() && _impl_.service_commission_ != nullptr;
}
inline bool OrderState::has_service_commission() const {
  return _internal_has_service_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::_internal_service_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.service_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderState::service_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.service_commission)
  return _internal_service_commission();
}
inline void OrderState::unsafe_arena_set_allocated_service_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_commission_);
  }
  _impl_.service_commission_ = service_commission;
  if (service_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.service_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::release_service_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.service_commission_;
  _impl_.service_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::unsafe_arena_release_service_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.service_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.service_commission_;
  _impl_.service_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::_internal_mutable_service_commission() {
  
  if (_impl_.service_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.service_commission_ = p;
  }
  return _impl_.service_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderState::mutable_service_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_service_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.service_commission)
  return _msg;
}
inline void OrderState::set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_commission_);
  }
  if (service_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_commission));
    if (message_arena != submessage_arena) {
      service_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_commission_ = service_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.service_commission)
}

// string currency = 16;
inline void OrderState::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& OrderState::currency() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_currency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.currency)
}
inline std::string* OrderState::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.currency)
  return _s;
}
inline const std::string& OrderState::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void OrderState::_internal_set_currency(const std::string& value) {
  
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_currency() {
  
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderState::release_currency() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.currency)
  return _impl_.currency_.Release();
}
inline void OrderState::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.currency)
}

// .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 17;
inline void OrderState::clear_order_type() {
  _impl_.order_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType OrderState::_internal_order_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderType >(_impl_.order_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderType OrderState::order_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.order_type)
  return _internal_order_type();
}
inline void OrderState::_internal_set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
  
  _impl_.order_type_ = value;
}
inline void OrderState::set_order_type(::tinkoff::public_::invest::api::contract::v1::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.order_type)
}

// .google.protobuf.Timestamp order_date = 18;
inline bool OrderState::_internal_has_order_date() const {
  return this != internal_default_instance() && _impl_.order_date_ != nullptr;
}
inline bool OrderState::has_order_date() const {
  return _internal_has_order_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderState::_internal_order_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.order_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderState::order_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.order_date)
  return _internal_order_date();
}
inline void OrderState::unsafe_arena_set_allocated_order_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* order_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_date_);
  }
  _impl_.order_date_ = order_date;
  if (order_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.order_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderState::release_order_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.order_date_;
  _impl_.order_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderState::unsafe_arena_release_order_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.order_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.order_date_;
  _impl_.order_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderState::_internal_mutable_order_date() {
  
  if (_impl_.order_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.order_date_ = p;
  }
  return _impl_.order_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderState::mutable_order_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_order_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.order_date)
  return _msg;
}
inline void OrderState::set_allocated_order_date(::PROTOBUF_NAMESPACE_ID::Timestamp* order_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_date_);
  }
  if (order_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_date));
    if (message_arena != submessage_arena) {
      order_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_date_ = order_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.order_date)
}

// string instrument_uid = 19;
inline void OrderState::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OrderState::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.instrument_uid)
}
inline std::string* OrderState::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.instrument_uid)
  return _s;
}
inline const std::string& OrderState::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void OrderState::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderState::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void OrderState::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.instrument_uid)
}

// string order_request_id = 20;
inline void OrderState::clear_order_request_id() {
  _impl_.order_request_id_.ClearToEmpty();
}
inline const std::string& OrderState::order_request_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderState.order_request_id)
  return _internal_order_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_order_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderState.order_request_id)
}
inline std::string* OrderState::mutable_order_request_id() {
  std::string* _s = _internal_mutable_order_request_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderState.order_request_id)
  return _s;
}
inline const std::string& OrderState::_internal_order_request_id() const {
  return _impl_.order_request_id_.Get();
}
inline void OrderState::_internal_set_order_request_id(const std::string& value) {
  
  _impl_.order_request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_order_request_id() {
  
  return _impl_.order_request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderState::release_order_request_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderState.order_request_id)
  return _impl_.order_request_id_.Release();
}
inline void OrderState::set_allocated_order_request_id(std::string* order_request_id) {
  if (order_request_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_request_id_.SetAllocated(order_request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_request_id_.IsDefault()) {
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderState.order_request_id)
}

// -------------------------------------------------------------------

// OrderStage

// .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 1;
inline bool OrderStage::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OrderStage::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderStage::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OrderStage::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderStage.price)
  return _internal_price();
}
inline void OrderStage::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderStage.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderStage.price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OrderStage::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderStage.price)
  return _msg;
}
inline void OrderStage::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderStage.price)
}

// int64 quantity = 2;
inline void OrderStage::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t OrderStage::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t OrderStage::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderStage.quantity)
  return _internal_quantity();
}
inline void OrderStage::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void OrderStage::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderStage.quantity)
}

// string trade_id = 3;
inline void OrderStage::clear_trade_id() {
  _impl_.trade_id_.ClearToEmpty();
}
inline const std::string& OrderStage::trade_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderStage.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderStage::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OrderStage.trade_id)
}
inline std::string* OrderStage::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderStage.trade_id)
  return _s;
}
inline const std::string& OrderStage::_internal_trade_id() const {
  return _impl_.trade_id_.Get();
}
inline void OrderStage::_internal_set_trade_id(const std::string& value) {
  
  _impl_.trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderStage::_internal_mutable_trade_id() {
  
  return _impl_.trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderStage::release_trade_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderStage.trade_id)
  return _impl_.trade_id_.Release();
}
inline void OrderStage::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  _impl_.trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trade_id_.IsDefault()) {
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderStage.trade_id)
}

// .google.protobuf.Timestamp execution_time = 5;
inline bool OrderStage::_internal_has_execution_time() const {
  return this != internal_default_instance() && _impl_.execution_time_ != nullptr;
}
inline bool OrderStage::has_execution_time() const {
  return _internal_has_execution_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderStage::_internal_execution_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.execution_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderStage::execution_time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OrderStage.execution_time)
  return _internal_execution_time();
}
inline void OrderStage::unsafe_arena_set_allocated_execution_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_time_);
  }
  _impl_.execution_time_ = execution_time;
  if (execution_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderStage.execution_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderStage::release_execution_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.execution_time_;
  _impl_.execution_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderStage::unsafe_arena_release_execution_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OrderStage.execution_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.execution_time_;
  _impl_.execution_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderStage::_internal_mutable_execution_time() {
  
  if (_impl_.execution_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.execution_time_ = p;
  }
  return _impl_.execution_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderStage::mutable_execution_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_execution_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OrderStage.execution_time)
  return _msg;
}
inline void OrderStage::set_allocated_execution_time(::PROTOBUF_NAMESPACE_ID::Timestamp* execution_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_time_);
  }
  if (execution_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_time));
    if (message_arena != submessage_arena) {
      execution_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.execution_time_ = execution_time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OrderStage.execution_time)
}

// -------------------------------------------------------------------

// ReplaceOrderRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ReplaceOrderRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& ReplaceOrderRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceOrderRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.account_id)
}
inline std::string* ReplaceOrderRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.account_id)
  return _s;
}
inline const std::string& ReplaceOrderRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void ReplaceOrderRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceOrderRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceOrderRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void ReplaceOrderRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.account_id)
}

// string order_id = 6 [(.google.api.field_behavior) = REQUIRED];
inline void ReplaceOrderRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& ReplaceOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceOrderRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.order_id)
}
inline std::string* ReplaceOrderRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.order_id)
  return _s;
}
inline const std::string& ReplaceOrderRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void ReplaceOrderRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceOrderRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void ReplaceOrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.order_id)
}

// string idempotency_key = 7 [(.google.api.field_behavior) = REQUIRED];
inline void ReplaceOrderRequest::clear_idempotency_key() {
  _impl_.idempotency_key_.ClearToEmpty();
}
inline const std::string& ReplaceOrderRequest::idempotency_key() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
  return _internal_idempotency_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceOrderRequest::set_idempotency_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.idempotency_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
}
inline std::string* ReplaceOrderRequest::mutable_idempotency_key() {
  std::string* _s = _internal_mutable_idempotency_key();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
  return _s;
}
inline const std::string& ReplaceOrderRequest::_internal_idempotency_key() const {
  return _impl_.idempotency_key_.Get();
}
inline void ReplaceOrderRequest::_internal_set_idempotency_key(const std::string& value) {
  
  _impl_.idempotency_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceOrderRequest::_internal_mutable_idempotency_key() {
  
  return _impl_.idempotency_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceOrderRequest::release_idempotency_key() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
  return _impl_.idempotency_key_.Release();
}
inline void ReplaceOrderRequest::set_allocated_idempotency_key(std::string* idempotency_key) {
  if (idempotency_key != nullptr) {
    
  } else {
    
  }
  _impl_.idempotency_key_.SetAllocated(idempotency_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idempotency_key_.IsDefault()) {
    _impl_.idempotency_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key)
}

// int64 quantity = 11 [(.google.api.field_behavior) = REQUIRED];
inline void ReplaceOrderRequest::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t ReplaceOrderRequest::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t ReplaceOrderRequest::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.quantity)
  return _internal_quantity();
}
inline void ReplaceOrderRequest::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void ReplaceOrderRequest::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.quantity)
}

// optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 12;
inline bool ReplaceOrderRequest::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline bool ReplaceOrderRequest::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& ReplaceOrderRequest::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& ReplaceOrderRequest::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.price)
  return _internal_price();
}
inline void ReplaceOrderRequest::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::release_price() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.price)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::_internal_mutable_price() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* ReplaceOrderRequest::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.price)
  return _msg;
}
inline void ReplaceOrderRequest::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.price)
}

// optional .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 13;
inline bool ReplaceOrderRequest::_internal_has_price_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReplaceOrderRequest::has_price_type() const {
  return _internal_has_price_type();
}
inline void ReplaceOrderRequest::clear_price_type() {
  _impl_.price_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType ReplaceOrderRequest::_internal_price_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::PriceType >(_impl_.price_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::PriceType ReplaceOrderRequest::price_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.price_type)
  return _internal_price_type();
}
inline void ReplaceOrderRequest::_internal_set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.price_type_ = value;
}
inline void ReplaceOrderRequest::set_price_type(::tinkoff::public_::invest::api::contract::v1::PriceType value) {
  _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.price_type)
}

// -------------------------------------------------------------------

// GetMaxLotsRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetMaxLotsRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetMaxLotsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMaxLotsRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.account_id)
}
inline std::string* GetMaxLotsRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.account_id)
  return _s;
}
inline const std::string& GetMaxLotsRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GetMaxLotsRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMaxLotsRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMaxLotsRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GetMaxLotsRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.account_id)
}

// string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void GetMaxLotsRequest::clear_instrument_id() {
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetMaxLotsRequest::instrument_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMaxLotsRequest::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.instrument_id)
}
inline std::string* GetMaxLotsRequest::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.instrument_id)
  return _s;
}
inline const std::string& GetMaxLotsRequest::_internal_instrument_id() const {
  return _impl_.instrument_id_.Get();
}
inline void GetMaxLotsRequest::_internal_set_instrument_id(const std::string& value) {
  
  _impl_.instrument_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMaxLotsRequest::_internal_mutable_instrument_id() {
  
  return _impl_.instrument_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMaxLotsRequest::release_instrument_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetMaxLotsRequest::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_id_.SetAllocated(instrument_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.instrument_id)
}

// optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
inline bool GetMaxLotsRequest::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline bool GetMaxLotsRequest::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetMaxLotsRequest::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetMaxLotsRequest::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.price)
  return _internal_price();
}
inline void GetMaxLotsRequest::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsRequest::release_price() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsRequest::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.price)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsRequest::_internal_mutable_price() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsRequest::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.price)
  return _msg;
}
inline void GetMaxLotsRequest::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.price)
}

// -------------------------------------------------------------------

// GetMaxLotsResponse_BuyLimitsView

// .tinkoff.public_.invest.api.contract.v1.Quotation buy_money_amount = 1;
inline bool GetMaxLotsResponse_BuyLimitsView::_internal_has_buy_money_amount() const {
  return this != internal_default_instance() && _impl_.buy_money_amount_ != nullptr;
}
inline bool GetMaxLotsResponse_BuyLimitsView::has_buy_money_amount() const {
  return _internal_has_buy_money_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetMaxLotsResponse_BuyLimitsView::_internal_buy_money_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.buy_money_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetMaxLotsResponse_BuyLimitsView::buy_money_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_money_amount)
  return _internal_buy_money_amount();
}
inline void GetMaxLotsResponse_BuyLimitsView::unsafe_arena_set_allocated_buy_money_amount(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* buy_money_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buy_money_amount_);
  }
  _impl_.buy_money_amount_ = buy_money_amount;
  if (buy_money_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_money_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsResponse_BuyLimitsView::release_buy_money_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.buy_money_amount_;
  _impl_.buy_money_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsResponse_BuyLimitsView::unsafe_arena_release_buy_money_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_money_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.buy_money_amount_;
  _impl_.buy_money_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsResponse_BuyLimitsView::_internal_mutable_buy_money_amount() {
  
  if (_impl_.buy_money_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.buy_money_amount_ = p;
  }
  return _impl_.buy_money_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetMaxLotsResponse_BuyLimitsView::mutable_buy_money_amount() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_buy_money_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_money_amount)
  return _msg;
}
inline void GetMaxLotsResponse_BuyLimitsView::set_allocated_buy_money_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* buy_money_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buy_money_amount_);
  }
  if (buy_money_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buy_money_amount));
    if (message_arena != submessage_arena) {
      buy_money_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buy_money_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buy_money_amount_ = buy_money_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_money_amount)
}

// int64 buy_max_lots = 2;
inline void GetMaxLotsResponse_BuyLimitsView::clear_buy_max_lots() {
  _impl_.buy_max_lots_ = int64_t{0};
}
inline int64_t GetMaxLotsResponse_BuyLimitsView::_internal_buy_max_lots() const {
  return _impl_.buy_max_lots_;
}
inline int64_t GetMaxLotsResponse_BuyLimitsView::buy_max_lots() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_max_lots)
  return _internal_buy_max_lots();
}
inline void GetMaxLotsResponse_BuyLimitsView::_internal_set_buy_max_lots(int64_t value) {
  
  _impl_.buy_max_lots_ = value;
}
inline void GetMaxLotsResponse_BuyLimitsView::set_buy_max_lots(int64_t value) {
  _internal_set_buy_max_lots(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_max_lots)
}

// int64 buy_max_market_lots = 3;
inline void GetMaxLotsResponse_BuyLimitsView::clear_buy_max_market_lots() {
  _impl_.buy_max_market_lots_ = int64_t{0};
}
inline int64_t GetMaxLotsResponse_BuyLimitsView::_internal_buy_max_market_lots() const {
  return _impl_.buy_max_market_lots_;
}
inline int64_t GetMaxLotsResponse_BuyLimitsView::buy_max_market_lots() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_max_market_lots)
  return _internal_buy_max_market_lots();
}
inline void GetMaxLotsResponse_BuyLimitsView::_internal_set_buy_max_market_lots(int64_t value) {
  
  _impl_.buy_max_market_lots_ = value;
}
inline void GetMaxLotsResponse_BuyLimitsView::set_buy_max_market_lots(int64_t value) {
  _internal_set_buy_max_market_lots(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_max_market_lots)
}

// -------------------------------------------------------------------

// GetMaxLotsResponse_SellLimitsView

// int64 sell_max_lots = 1;
inline void GetMaxLotsResponse_SellLimitsView::clear_sell_max_lots() {
  _impl_.sell_max_lots_ = int64_t{0};
}
inline int64_t GetMaxLotsResponse_SellLimitsView::_internal_sell_max_lots() const {
  return _impl_.sell_max_lots_;
}
inline int64_t GetMaxLotsResponse_SellLimitsView::sell_max_lots() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView.sell_max_lots)
  return _internal_sell_max_lots();
}
inline void GetMaxLotsResponse_SellLimitsView::_internal_set_sell_max_lots(int64_t value) {
  
  _impl_.sell_max_lots_ = value;
}
inline void GetMaxLotsResponse_SellLimitsView::set_sell_max_lots(int64_t value) {
  _internal_set_sell_max_lots(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView.sell_max_lots)
}

// -------------------------------------------------------------------

// GetMaxLotsResponse

// string currency = 1;
inline void GetMaxLotsResponse::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& GetMaxLotsResponse::currency() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMaxLotsResponse::set_currency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.currency)
}
inline std::string* GetMaxLotsResponse::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.currency)
  return _s;
}
inline const std::string& GetMaxLotsResponse::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void GetMaxLotsResponse::_internal_set_currency(const std::string& value) {
  
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMaxLotsResponse::_internal_mutable_currency() {
  
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMaxLotsResponse::release_currency() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.currency)
  return _impl_.currency_.Release();
}
inline void GetMaxLotsResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.currency)
}

// .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_limits = 2;
inline bool GetMaxLotsResponse::_internal_has_buy_limits() const {
  return this != internal_default_instance() && _impl_.buy_limits_ != nullptr;
}
inline bool GetMaxLotsResponse::has_buy_limits() const {
  return _internal_has_buy_limits();
}
inline void GetMaxLotsResponse::clear_buy_limits() {
  if (GetArenaForAllocation() == nullptr && _impl_.buy_limits_ != nullptr) {
    delete _impl_.buy_limits_;
  }
  _impl_.buy_limits_ = nullptr;
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& GetMaxLotsResponse::_internal_buy_limits() const {
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* p = _impl_.buy_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView&>(
      ::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsResponse_BuyLimitsView_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& GetMaxLotsResponse::buy_limits() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_limits)
  return _internal_buy_limits();
}
inline void GetMaxLotsResponse::unsafe_arena_set_allocated_buy_limits(
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buy_limits_);
  }
  _impl_.buy_limits_ = buy_limits;
  if (buy_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_limits)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::release_buy_limits() {
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* temp = _impl_.buy_limits_;
  _impl_.buy_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::unsafe_arena_release_buy_limits() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_limits)
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* temp = _impl_.buy_limits_;
  _impl_.buy_limits_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::_internal_mutable_buy_limits() {
  
  if (_impl_.buy_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView>(GetArenaForAllocation());
    _impl_.buy_limits_ = p;
  }
  return _impl_.buy_limits_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::mutable_buy_limits() {
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* _msg = _internal_mutable_buy_limits();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_limits)
  return _msg;
}
inline void GetMaxLotsResponse::set_allocated_buy_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buy_limits_;
  }
  if (buy_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buy_limits);
    if (message_arena != submessage_arena) {
      buy_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buy_limits, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buy_limits_ = buy_limits;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_limits)
}

// .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_margin_limits = 3;
inline bool GetMaxLotsResponse::_internal_has_buy_margin_limits() const {
  return this != internal_default_instance() && _impl_.buy_margin_limits_ != nullptr;
}
inline bool GetMaxLotsResponse::has_buy_margin_limits() const {
  return _internal_has_buy_margin_limits();
}
inline void GetMaxLotsResponse::clear_buy_margin_limits() {
  if (GetArenaForAllocation() == nullptr && _impl_.buy_margin_limits_ != nullptr) {
    delete _impl_.buy_margin_limits_;
  }
  _impl_.buy_margin_limits_ = nullptr;
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& GetMaxLotsResponse::_internal_buy_margin_limits() const {
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* p = _impl_.buy_margin_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView&>(
      ::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsResponse_BuyLimitsView_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& GetMaxLotsResponse::buy_margin_limits() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_margin_limits)
  return _internal_buy_margin_limits();
}
inline void GetMaxLotsResponse::unsafe_arena_set_allocated_buy_margin_limits(
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_margin_limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buy_margin_limits_);
  }
  _impl_.buy_margin_limits_ = buy_margin_limits;
  if (buy_margin_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_margin_limits)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::release_buy_margin_limits() {
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* temp = _impl_.buy_margin_limits_;
  _impl_.buy_margin_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::unsafe_arena_release_buy_margin_limits() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_margin_limits)
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* temp = _impl_.buy_margin_limits_;
  _impl_.buy_margin_limits_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::_internal_mutable_buy_margin_limits() {
  
  if (_impl_.buy_margin_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView>(GetArenaForAllocation());
    _impl_.buy_margin_limits_ = p;
  }
  return _impl_.buy_margin_limits_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* GetMaxLotsResponse::mutable_buy_margin_limits() {
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* _msg = _internal_mutable_buy_margin_limits();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_margin_limits)
  return _msg;
}
inline void GetMaxLotsResponse::set_allocated_buy_margin_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView* buy_margin_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buy_margin_limits_;
  }
  if (buy_margin_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buy_margin_limits);
    if (message_arena != submessage_arena) {
      buy_margin_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buy_margin_limits, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buy_margin_limits_ = buy_margin_limits;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.buy_margin_limits)
}

// .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_limits = 4;
inline bool GetMaxLotsResponse::_internal_has_sell_limits() const {
  return this != internal_default_instance() && _impl_.sell_limits_ != nullptr;
}
inline bool GetMaxLotsResponse::has_sell_limits() const {
  return _internal_has_sell_limits();
}
inline void GetMaxLotsResponse::clear_sell_limits() {
  if (GetArenaForAllocation() == nullptr && _impl_.sell_limits_ != nullptr) {
    delete _impl_.sell_limits_;
  }
  _impl_.sell_limits_ = nullptr;
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& GetMaxLotsResponse::_internal_sell_limits() const {
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* p = _impl_.sell_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView&>(
      ::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsResponse_SellLimitsView_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& GetMaxLotsResponse::sell_limits() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_limits)
  return _internal_sell_limits();
}
inline void GetMaxLotsResponse::unsafe_arena_set_allocated_sell_limits(
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sell_limits_);
  }
  _impl_.sell_limits_ = sell_limits;
  if (sell_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_limits)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::release_sell_limits() {
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* temp = _impl_.sell_limits_;
  _impl_.sell_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::unsafe_arena_release_sell_limits() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_limits)
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* temp = _impl_.sell_limits_;
  _impl_.sell_limits_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::_internal_mutable_sell_limits() {
  
  if (_impl_.sell_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView>(GetArenaForAllocation());
    _impl_.sell_limits_ = p;
  }
  return _impl_.sell_limits_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::mutable_sell_limits() {
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* _msg = _internal_mutable_sell_limits();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_limits)
  return _msg;
}
inline void GetMaxLotsResponse::set_allocated_sell_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sell_limits_;
  }
  if (sell_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sell_limits);
    if (message_arena != submessage_arena) {
      sell_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sell_limits, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sell_limits_ = sell_limits;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_limits)
}

// .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_margin_limits = 5;
inline bool GetMaxLotsResponse::_internal_has_sell_margin_limits() const {
  return this != internal_default_instance() && _impl_.sell_margin_limits_ != nullptr;
}
inline bool GetMaxLotsResponse::has_sell_margin_limits() const {
  return _internal_has_sell_margin_limits();
}
inline void GetMaxLotsResponse::clear_sell_margin_limits() {
  if (GetArenaForAllocation() == nullptr && _impl_.sell_margin_limits_ != nullptr) {
    delete _impl_.sell_margin_limits_;
  }
  _impl_.sell_margin_limits_ = nullptr;
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& GetMaxLotsResponse::_internal_sell_margin_limits() const {
  const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* p = _impl_.sell_margin_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView&>(
      ::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsResponse_SellLimitsView_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& GetMaxLotsResponse::sell_margin_limits() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_margin_limits)
  return _internal_sell_margin_limits();
}
inline void GetMaxLotsResponse::unsafe_arena_set_allocated_sell_margin_limits(
    ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_margin_limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sell_margin_limits_);
  }
  _impl_.sell_margin_limits_ = sell_margin_limits;
  if (sell_margin_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_margin_limits)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::release_sell_margin_limits() {
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* temp = _impl_.sell_margin_limits_;
  _impl_.sell_margin_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::unsafe_arena_release_sell_margin_limits() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_margin_limits)
  
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* temp = _impl_.sell_margin_limits_;
  _impl_.sell_margin_limits_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::_internal_mutable_sell_margin_limits() {
  
  if (_impl_.sell_margin_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView>(GetArenaForAllocation());
    _impl_.sell_margin_limits_ = p;
  }
  return _impl_.sell_margin_limits_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* GetMaxLotsResponse::mutable_sell_margin_limits() {
  ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* _msg = _internal_mutable_sell_margin_limits();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_margin_limits)
  return _msg;
}
inline void GetMaxLotsResponse::set_allocated_sell_margin_limits(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView* sell_margin_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sell_margin_limits_;
  }
  if (sell_margin_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sell_margin_limits);
    if (message_arena != submessage_arena) {
      sell_margin_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sell_margin_limits, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sell_margin_limits_ = sell_margin_limits;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.sell_margin_limits)
}

// -------------------------------------------------------------------

// GetOrderPriceRequest

// string account_id = 1;
inline void GetOrderPriceRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetOrderPriceRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderPriceRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.account_id)
}
inline std::string* GetOrderPriceRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.account_id)
  return _s;
}
inline const std::string& GetOrderPriceRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GetOrderPriceRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrderPriceRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrderPriceRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GetOrderPriceRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.account_id)
}

// string instrument_id = 2;
inline void GetOrderPriceRequest::clear_instrument_id() {
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetOrderPriceRequest::instrument_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderPriceRequest::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.instrument_id)
}
inline std::string* GetOrderPriceRequest::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.instrument_id)
  return _s;
}
inline const std::string& GetOrderPriceRequest::_internal_instrument_id() const {
  return _impl_.instrument_id_.Get();
}
inline void GetOrderPriceRequest::_internal_set_instrument_id(const std::string& value) {
  
  _impl_.instrument_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrderPriceRequest::_internal_mutable_instrument_id() {
  
  return _impl_.instrument_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrderPriceRequest::release_instrument_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetOrderPriceRequest::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_id_.SetAllocated(instrument_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.instrument_id)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
inline bool GetOrderPriceRequest::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool GetOrderPriceRequest::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderPriceRequest::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderPriceRequest::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.price)
  return _internal_price();
}
inline void GetOrderPriceRequest::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceRequest::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceRequest::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.price)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceRequest::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceRequest::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.price)
  return _msg;
}
inline void GetOrderPriceRequest::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::Quotation* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.price)
}

// .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
inline void GetOrderPriceRequest::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection GetOrderPriceRequest::_internal_direction() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderDirection >(_impl_.direction_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OrderDirection GetOrderPriceRequest::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.direction)
  return _internal_direction();
}
inline void GetOrderPriceRequest::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  
  _impl_.direction_ = value;
}
inline void GetOrderPriceRequest::set_direction(::tinkoff::public_::invest::api::contract::v1::OrderDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.direction)
}

// int64 quantity = 13;
inline void GetOrderPriceRequest::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t GetOrderPriceRequest::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t GetOrderPriceRequest::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.quantity)
  return _internal_quantity();
}
inline void GetOrderPriceRequest::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void GetOrderPriceRequest::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.quantity)
}

// -------------------------------------------------------------------

// GetOrderPriceResponse_ExtraBond

// .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 2;
inline bool GetOrderPriceResponse_ExtraBond::_internal_has_aci_value() const {
  return this != internal_default_instance() && _impl_.aci_value_ != nullptr;
}
inline bool GetOrderPriceResponse_ExtraBond::has_aci_value() const {
  return _internal_has_aci_value();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse_ExtraBond::_internal_aci_value() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.aci_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse_ExtraBond::aci_value() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.aci_value)
  return _internal_aci_value();
}
inline void GetOrderPriceResponse_ExtraBond::unsafe_arena_set_allocated_aci_value(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aci_value_);
  }
  _impl_.aci_value_ = aci_value;
  if (aci_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.aci_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraBond::release_aci_value() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraBond::unsafe_arena_release_aci_value() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.aci_value)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraBond::_internal_mutable_aci_value() {
  
  if (_impl_.aci_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.aci_value_ = p;
  }
  return _impl_.aci_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraBond::mutable_aci_value() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_aci_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.aci_value)
  return _msg;
}
inline void GetOrderPriceResponse_ExtraBond::set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aci_value_);
  }
  if (aci_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aci_value));
    if (message_arena != submessage_arena) {
      aci_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aci_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aci_value_ = aci_value;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.aci_value)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation nominal_conversion_rate = 3;
inline bool GetOrderPriceResponse_ExtraBond::_internal_has_nominal_conversion_rate() const {
  return this != internal_default_instance() && _impl_.nominal_conversion_rate_ != nullptr;
}
inline bool GetOrderPriceResponse_ExtraBond::has_nominal_conversion_rate() const {
  return _internal_has_nominal_conversion_rate();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderPriceResponse_ExtraBond::_internal_nominal_conversion_rate() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.nominal_conversion_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderPriceResponse_ExtraBond::nominal_conversion_rate() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.nominal_conversion_rate)
  return _internal_nominal_conversion_rate();
}
inline void GetOrderPriceResponse_ExtraBond::unsafe_arena_set_allocated_nominal_conversion_rate(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_conversion_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nominal_conversion_rate_);
  }
  _impl_.nominal_conversion_rate_ = nominal_conversion_rate;
  if (nominal_conversion_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.nominal_conversion_rate)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceResponse_ExtraBond::release_nominal_conversion_rate() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_conversion_rate_;
  _impl_.nominal_conversion_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceResponse_ExtraBond::unsafe_arena_release_nominal_conversion_rate() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.nominal_conversion_rate)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_conversion_rate_;
  _impl_.nominal_conversion_rate_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceResponse_ExtraBond::_internal_mutable_nominal_conversion_rate() {
  
  if (_impl_.nominal_conversion_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.nominal_conversion_rate_ = p;
  }
  return _impl_.nominal_conversion_rate_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetOrderPriceResponse_ExtraBond::mutable_nominal_conversion_rate() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_nominal_conversion_rate();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.nominal_conversion_rate)
  return _msg;
}
inline void GetOrderPriceResponse_ExtraBond::set_allocated_nominal_conversion_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_conversion_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nominal_conversion_rate_);
  }
  if (nominal_conversion_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nominal_conversion_rate));
    if (message_arena != submessage_arena) {
      nominal_conversion_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nominal_conversion_rate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nominal_conversion_rate_ = nominal_conversion_rate;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.nominal_conversion_rate)
}

// -------------------------------------------------------------------

// GetOrderPriceResponse_ExtraFuture

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin = 2;
inline bool GetOrderPriceResponse_ExtraFuture::_internal_has_initial_margin() const {
  return this != internal_default_instance() && _impl_.initial_margin_ != nullptr;
}
inline bool GetOrderPriceResponse_ExtraFuture::has_initial_margin() const {
  return _internal_has_initial_margin();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse_ExtraFuture::_internal_initial_margin() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_margin_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse_ExtraFuture::initial_margin() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture.initial_margin)
  return _internal_initial_margin();
}
inline void GetOrderPriceResponse_ExtraFuture::unsafe_arena_set_allocated_initial_margin(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_margin_);
  }
  _impl_.initial_margin_ = initial_margin;
  if (initial_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture.initial_margin)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraFuture::release_initial_margin() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_margin_;
  _impl_.initial_margin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraFuture::unsafe_arena_release_initial_margin() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture.initial_margin)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_margin_;
  _impl_.initial_margin_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraFuture::_internal_mutable_initial_margin() {
  
  if (_impl_.initial_margin_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_margin_ = p;
  }
  return _impl_.initial_margin_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse_ExtraFuture::mutable_initial_margin() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_margin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture.initial_margin)
  return _msg;
}
inline void GetOrderPriceResponse_ExtraFuture::set_allocated_initial_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_margin_);
  }
  if (initial_margin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_margin));
    if (message_arena != submessage_arena) {
      initial_margin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_margin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_margin_ = initial_margin;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture.initial_margin)
}

// -------------------------------------------------------------------

// GetOrderPriceResponse

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 1;
inline bool GetOrderPriceResponse::_internal_has_total_order_amount() const {
  return this != internal_default_instance() && _impl_.total_order_amount_ != nullptr;
}
inline bool GetOrderPriceResponse::has_total_order_amount() const {
  return _internal_has_total_order_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::_internal_total_order_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_order_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::total_order_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.total_order_amount)
  return _internal_total_order_amount();
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_total_order_amount(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  _impl_.total_order_amount_ = total_order_amount;
  if (total_order_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.total_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::release_total_order_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::unsafe_arena_release_total_order_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.total_order_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::_internal_mutable_total_order_amount() {
  
  if (_impl_.total_order_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_order_amount_ = p;
  }
  return _impl_.total_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::mutable_total_order_amount() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_order_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.total_order_amount)
  return _msg;
}
inline void GetOrderPriceResponse::set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  if (total_order_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_order_amount));
    if (message_arena != submessage_arena) {
      total_order_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_order_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_order_amount_ = total_order_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.total_order_amount)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_amount = 5;
inline bool GetOrderPriceResponse::_internal_has_initial_order_amount() const {
  return this != internal_default_instance() && _impl_.initial_order_amount_ != nullptr;
}
inline bool GetOrderPriceResponse::has_initial_order_amount() const {
  return _internal_has_initial_order_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::_internal_initial_order_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_order_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::initial_order_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.initial_order_amount)
  return _internal_initial_order_amount();
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_initial_order_amount(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_amount_);
  }
  _impl_.initial_order_amount_ = initial_order_amount;
  if (initial_order_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.initial_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::release_initial_order_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_amount_;
  _impl_.initial_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::unsafe_arena_release_initial_order_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.initial_order_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_order_amount_;
  _impl_.initial_order_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::_internal_mutable_initial_order_amount() {
  
  if (_impl_.initial_order_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.initial_order_amount_ = p;
  }
  return _impl_.initial_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::mutable_initial_order_amount() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_order_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.initial_order_amount)
  return _msg;
}
inline void GetOrderPriceResponse::set_allocated_initial_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_order_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_order_amount_);
  }
  if (initial_order_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_order_amount));
    if (message_arena != submessage_arena) {
      initial_order_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_order_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_order_amount_ = initial_order_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.initial_order_amount)
}

// int64 lots_requested = 3;
inline void GetOrderPriceResponse::clear_lots_requested() {
  _impl_.lots_requested_ = int64_t{0};
}
inline int64_t GetOrderPriceResponse::_internal_lots_requested() const {
  return _impl_.lots_requested_;
}
inline int64_t GetOrderPriceResponse::lots_requested() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.lots_requested)
  return _internal_lots_requested();
}
inline void GetOrderPriceResponse::_internal_set_lots_requested(int64_t value) {
  
  _impl_.lots_requested_ = value;
}
inline void GetOrderPriceResponse::set_lots_requested(int64_t value) {
  _internal_set_lots_requested(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.lots_requested)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 7;
inline bool GetOrderPriceResponse::_internal_has_executed_commission() const {
  return this != internal_default_instance() && _impl_.executed_commission_ != nullptr;
}
inline bool GetOrderPriceResponse::has_executed_commission() const {
  return _internal_has_executed_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::_internal_executed_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::executed_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission)
  return _internal_executed_commission();
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_executed_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_);
  }
  _impl_.executed_commission_ = executed_commission;
  if (executed_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::release_executed_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
  _impl_.executed_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::unsafe_arena_release_executed_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_;
  _impl_.executed_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::_internal_mutable_executed_commission() {
  
  if (_impl_.executed_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.executed_commission_ = p;
  }
  return _impl_.executed_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::mutable_executed_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission)
  return _msg;
}
inline void GetOrderPriceResponse::set_allocated_executed_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_);
  }
  if (executed_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executed_commission));
    if (message_arena != submessage_arena) {
      executed_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executed_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.executed_commission_ = executed_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission_rub = 8;
inline bool GetOrderPriceResponse::_internal_has_executed_commission_rub() const {
  return this != internal_default_instance() && _impl_.executed_commission_rub_ != nullptr;
}
inline bool GetOrderPriceResponse::has_executed_commission_rub() const {
  return _internal_has_executed_commission_rub();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::_internal_executed_commission_rub() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.executed_commission_rub_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::executed_commission_rub() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission_rub)
  return _internal_executed_commission_rub();
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_executed_commission_rub(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_rub) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_rub_);
  }
  _impl_.executed_commission_rub_ = executed_commission_rub;
  if (executed_commission_rub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission_rub)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::release_executed_commission_rub() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_rub_;
  _impl_.executed_commission_rub_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::unsafe_arena_release_executed_commission_rub() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission_rub)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.executed_commission_rub_;
  _impl_.executed_commission_rub_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::_internal_mutable_executed_commission_rub() {
  
  if (_impl_.executed_commission_rub_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.executed_commission_rub_ = p;
  }
  return _impl_.executed_commission_rub_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::mutable_executed_commission_rub() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_executed_commission_rub();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission_rub)
  return _msg;
}
inline void GetOrderPriceResponse::set_allocated_executed_commission_rub(::tinkoff::public_::invest::api::contract::v1::MoneyValue* executed_commission_rub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executed_commission_rub_);
  }
  if (executed_commission_rub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executed_commission_rub));
    if (message_arena != submessage_arena) {
      executed_commission_rub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executed_commission_rub, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.executed_commission_rub_ = executed_commission_rub;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.executed_commission_rub)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 9;
inline bool GetOrderPriceResponse::_internal_has_service_commission() const {
  return this != internal_default_instance() && _impl_.service_commission_ != nullptr;
}
inline bool GetOrderPriceResponse::has_service_commission() const {
  return _internal_has_service_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::_internal_service_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.service_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::service_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.service_commission)
  return _internal_service_commission();
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_service_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_commission_);
  }
  _impl_.service_commission_ = service_commission;
  if (service_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.service_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::release_service_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.service_commission_;
  _impl_.service_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::unsafe_arena_release_service_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.service_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.service_commission_;
  _impl_.service_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::_internal_mutable_service_commission() {
  
  if (_impl_.service_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.service_commission_ = p;
  }
  return _impl_.service_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::mutable_service_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_service_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.service_commission)
  return _msg;
}
inline void GetOrderPriceResponse::set_allocated_service_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* service_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_commission_);
  }
  if (service_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_commission));
    if (message_arena != submessage_arena) {
      service_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_commission_ = service_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.service_commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue deal_commission = 10;
inline bool GetOrderPriceResponse::_internal_has_deal_commission() const {
  return this != internal_default_instance() && _impl_.deal_commission_ != nullptr;
}
inline bool GetOrderPriceResponse::has_deal_commission() const {
  return _internal_has_deal_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::_internal_deal_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.deal_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetOrderPriceResponse::deal_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.deal_commission)
  return _internal_deal_commission();
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_deal_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* deal_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deal_commission_);
  }
  _impl_.deal_commission_ = deal_commission;
  if (deal_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.deal_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::release_deal_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.deal_commission_;
  _impl_.deal_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::unsafe_arena_release_deal_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.deal_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.deal_commission_;
  _impl_.deal_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::_internal_mutable_deal_commission() {
  
  if (_impl_.deal_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.deal_commission_ = p;
  }
  return _impl_.deal_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetOrderPriceResponse::mutable_deal_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_deal_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.deal_commission)
  return _msg;
}
inline void GetOrderPriceResponse::set_allocated_deal_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* deal_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deal_commission_);
  }
  if (deal_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deal_commission));
    if (message_arena != submessage_arena) {
      deal_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deal_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.deal_commission_ = deal_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.deal_commission)
}

// .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond extra_bond = 12;
inline bool GetOrderPriceResponse::_internal_has_extra_bond() const {
  return instrument_extra_case() == kExtraBond;
}
inline bool GetOrderPriceResponse::has_extra_bond() const {
  return _internal_has_extra_bond();
}
inline void GetOrderPriceResponse::set_has_extra_bond() {
  _impl_._oneof_case_[0] = kExtraBond;
}
inline void GetOrderPriceResponse::clear_extra_bond() {
  if (_internal_has_extra_bond()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.instrument_extra_.extra_bond_;
    }
    clear_has_instrument_extra();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* GetOrderPriceResponse::release_extra_bond() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_bond)
  if (_internal_has_extra_bond()) {
    clear_has_instrument_extra();
    ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* temp = _impl_.instrument_extra_.extra_bond_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.instrument_extra_.extra_bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond& GetOrderPriceResponse::_internal_extra_bond() const {
  return _internal_has_extra_bond()
      ? *_impl_.instrument_extra_.extra_bond_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond&>(::tinkoff::public_::invest::api::contract::v1::_GetOrderPriceResponse_ExtraBond_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond& GetOrderPriceResponse::extra_bond() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_bond)
  return _internal_extra_bond();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* GetOrderPriceResponse::unsafe_arena_release_extra_bond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_bond)
  if (_internal_has_extra_bond()) {
    clear_has_instrument_extra();
    ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* temp = _impl_.instrument_extra_.extra_bond_;
    _impl_.instrument_extra_.extra_bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_extra_bond(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* extra_bond) {
  clear_instrument_extra();
  if (extra_bond) {
    set_has_extra_bond();
    _impl_.instrument_extra_.extra_bond_ = extra_bond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_bond)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* GetOrderPriceResponse::_internal_mutable_extra_bond() {
  if (!_internal_has_extra_bond()) {
    clear_instrument_extra();
    set_has_extra_bond();
    _impl_.instrument_extra_.extra_bond_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond >(GetArenaForAllocation());
  }
  return _impl_.instrument_extra_.extra_bond_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* GetOrderPriceResponse::mutable_extra_bond() {
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* _msg = _internal_mutable_extra_bond();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_bond)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture extra_future = 13;
inline bool GetOrderPriceResponse::_internal_has_extra_future() const {
  return instrument_extra_case() == kExtraFuture;
}
inline bool GetOrderPriceResponse::has_extra_future() const {
  return _internal_has_extra_future();
}
inline void GetOrderPriceResponse::set_has_extra_future() {
  _impl_._oneof_case_[0] = kExtraFuture;
}
inline void GetOrderPriceResponse::clear_extra_future() {
  if (_internal_has_extra_future()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.instrument_extra_.extra_future_;
    }
    clear_has_instrument_extra();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* GetOrderPriceResponse::release_extra_future() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_future)
  if (_internal_has_extra_future()) {
    clear_has_instrument_extra();
    ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* temp = _impl_.instrument_extra_.extra_future_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.instrument_extra_.extra_future_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture& GetOrderPriceResponse::_internal_extra_future() const {
  return _internal_has_extra_future()
      ? *_impl_.instrument_extra_.extra_future_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture&>(::tinkoff::public_::invest::api::contract::v1::_GetOrderPriceResponse_ExtraFuture_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture& GetOrderPriceResponse::extra_future() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_future)
  return _internal_extra_future();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* GetOrderPriceResponse::unsafe_arena_release_extra_future() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_future)
  if (_internal_has_extra_future()) {
    clear_has_instrument_extra();
    ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* temp = _impl_.instrument_extra_.extra_future_;
    _impl_.instrument_extra_.extra_future_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetOrderPriceResponse::unsafe_arena_set_allocated_extra_future(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* extra_future) {
  clear_instrument_extra();
  if (extra_future) {
    set_has_extra_future();
    _impl_.instrument_extra_.extra_future_ = extra_future;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_future)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* GetOrderPriceResponse::_internal_mutable_extra_future() {
  if (!_internal_has_extra_future()) {
    clear_instrument_extra();
    set_has_extra_future();
    _impl_.instrument_extra_.extra_future_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture >(GetArenaForAllocation());
  }
  return _impl_.instrument_extra_.extra_future_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* GetOrderPriceResponse::mutable_extra_future() {
  ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* _msg = _internal_mutable_extra_future();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_future)
  return _msg;
}

inline bool GetOrderPriceResponse::has_instrument_extra() const {
  return instrument_extra_case() != INSTRUMENT_EXTRA_NOT_SET;
}
inline void GetOrderPriceResponse::clear_has_instrument_extra() {
  _impl_._oneof_case_[0] = INSTRUMENT_EXTRA_NOT_SET;
}
inline GetOrderPriceResponse::InstrumentExtraCase GetOrderPriceResponse::instrument_extra_case() const {
  return GetOrderPriceResponse::InstrumentExtraCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::OrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::OrderDirection>() {
  return ::tinkoff::public_::invest::api::contract::v1::OrderDirection_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::OrderType>() {
  return ::tinkoff::public_::invest::api::contract::v1::OrderType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus>() {
  return ::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::TimeInForceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::TimeInForceType>() {
  return ::tinkoff::public_::invest::api::contract::v1::TimeInForceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_orders_2eproto
