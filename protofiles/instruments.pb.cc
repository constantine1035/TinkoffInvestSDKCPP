// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruments.proto

#include "instruments.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

inline constexpr InstrumentsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentsRequest::InstrumentsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentsRequestDefaultTypeInternal() {}
  union {
    InstrumentsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentsRequestDefaultTypeInternal _InstrumentsRequest_default_instance_;

inline constexpr InstrumentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentIdType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentRequest::InstrumentRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentRequestDefaultTypeInternal() {}
  union {
    InstrumentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentRequestDefaultTypeInternal _InstrumentRequest_default_instance_;

inline constexpr InstrumentLink::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentLink::InstrumentLink(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentLinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentLinkDefaultTypeInternal() {}
  union {
    InstrumentLink _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentLinkDefaultTypeInternal _InstrumentLink_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR IndicativesRequest::IndicativesRequest(::_pbi::ConstantInitialized) {}
struct IndicativesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativesRequestDefaultTypeInternal() {}
  union {
    IndicativesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativesRequestDefaultTypeInternal _IndicativesRequest_default_instance_;

inline constexpr IndicativeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        buy_available_flag_{false},
        sell_available_flag_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IndicativeResponse::IndicativeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IndicativeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativeResponseDefaultTypeInternal() {}
  union {
    IndicativeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativeResponseDefaultTypeInternal _IndicativeResponse_default_instance_;

inline constexpr GetFuturesMarginRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetFuturesMarginRequest::GetFuturesMarginRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetFuturesMarginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFuturesMarginRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFuturesMarginRequestDefaultTypeInternal() {}
  union {
    GetFuturesMarginRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFuturesMarginRequestDefaultTypeInternal _GetFuturesMarginRequest_default_instance_;

inline constexpr GetForecastRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastRequest::GetForecastRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetForecastRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastRequestDefaultTypeInternal() {}
  union {
    GetForecastRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastRequestDefaultTypeInternal _GetForecastRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetFavoritesRequest::GetFavoritesRequest(::_pbi::ConstantInitialized) {}
struct GetFavoritesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFavoritesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFavoritesRequestDefaultTypeInternal() {}
  union {
    GetFavoritesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFavoritesRequestDefaultTypeInternal _GetFavoritesRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetCountriesRequest::GetCountriesRequest(::_pbi::ConstantInitialized) {}
struct GetCountriesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCountriesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCountriesRequestDefaultTypeInternal() {}
  union {
    GetCountriesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCountriesRequestDefaultTypeInternal _GetCountriesRequest_default_instance_;

inline constexpr GetBrandRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBrandRequest::GetBrandRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBrandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandRequestDefaultTypeInternal() {}
  union {
    GetBrandRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandRequestDefaultTypeInternal _GetBrandRequest_default_instance_;

inline constexpr GetAssetFundamentalsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : assets_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAssetFundamentalsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsRequestDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsRequestDefaultTypeInternal _GetAssetFundamentalsRequest_default_instance_;

inline constexpr FindInstrumentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        query_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        api_trade_available_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR FindInstrumentRequest::FindInstrumentRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FindInstrumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindInstrumentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindInstrumentRequestDefaultTypeInternal() {}
  union {
    FindInstrumentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindInstrumentRequestDefaultTypeInternal _FindInstrumentRequest_default_instance_;

inline constexpr FilterOptionsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        basic_asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR FilterOptionsRequest::FilterOptionsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FilterOptionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterOptionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterOptionsRequestDefaultTypeInternal() {}
  union {
    FilterOptionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterOptionsRequestDefaultTypeInternal _FilterOptionsRequest_default_instance_;

inline constexpr FavoriteInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        otc_flag_{false},
        api_trade_available_flag_{false},
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FavoriteInstrument::FavoriteInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FavoriteInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FavoriteInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FavoriteInstrumentDefaultTypeInternal() {}
  union {
    FavoriteInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FavoriteInstrumentDefaultTypeInternal _FavoriteInstrument_default_instance_;

inline constexpr EditFavoritesRequestInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EditFavoritesRequestInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesRequestInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesRequestInstrumentDefaultTypeInternal() {}
  union {
    EditFavoritesRequestInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesRequestInstrumentDefaultTypeInternal _EditFavoritesRequestInstrument_default_instance_;

inline constexpr CountryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : alfa_two_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        alfa_three_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_brief_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CountryResponse::CountryResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CountryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountryResponseDefaultTypeInternal() {}
  union {
    CountryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountryResponseDefaultTypeInternal _CountryResponse_default_instance_;

inline constexpr Brand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        company_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Brand::Brand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BrandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrandDefaultTypeInternal() {}
  union {
    Brand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrandDefaultTypeInternal _Brand_default_instance_;

inline constexpr AssetsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AssetsRequest::AssetsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetsRequestDefaultTypeInternal() {}
  union {
    AssetsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetsRequestDefaultTypeInternal _AssetsRequest_default_instance_;

inline constexpr AssetRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetRequest::AssetRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetRequestDefaultTypeInternal() {}
  union {
    AssetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetRequestDefaultTypeInternal _AssetRequest_default_instance_;

inline constexpr AssetCurrency::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : base_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetCurrency::AssetCurrency(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetCurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetCurrencyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetCurrencyDefaultTypeInternal() {}
  union {
    AssetCurrency _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetCurrencyDefaultTypeInternal _AssetCurrency_default_instance_;

inline constexpr TradingSchedulesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TradingSchedulesRequest::TradingSchedulesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradingSchedulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingSchedulesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingSchedulesRequestDefaultTypeInternal() {}
  union {
    TradingSchedulesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingSchedulesRequestDefaultTypeInternal _TradingSchedulesRequest_default_instance_;

inline constexpr TradingInterval_TimeInterval::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        start_ts_{nullptr},
        end_ts_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TradingInterval_TimeInterval::TradingInterval_TimeInterval(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradingInterval_TimeIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingInterval_TimeIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingInterval_TimeIntervalDefaultTypeInternal() {}
  union {
    TradingInterval_TimeInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingInterval_TimeIntervalDefaultTypeInternal _TradingInterval_TimeInterval_default_instance_;

inline constexpr Share::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        ipo_date_{nullptr},
        nominal_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        issue_size_{::int64_t{0}},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        issue_size_plan_{::int64_t{0}},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        share_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::ShareType >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        div_yield_flag_{false},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        liquidity_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Share::Share(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareDefaultTypeInternal() {}
  union {
    Share _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareDefaultTypeInternal _Share_default_instance_;

inline constexpr Option::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        settlement_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        brand_{nullptr},
        basic_asset_size_{nullptr},
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        min_price_increment_{nullptr},
        strike_price_{nullptr},
        expiration_date_{nullptr},
        first_trade_date_{nullptr},
        last_trade_date_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        direction_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionDirection >(0)},
        payment_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionPaymentType >(0)},
        style_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionStyle >(0)},
        settlement_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionSettlementType >(0)},
        lot_{0},
        short_enabled_flag_{false},
        for_iis_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        api_trade_available_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Option::Option(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionDefaultTypeInternal() {}
  union {
    Option _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionDefaultTypeInternal _Option_default_instance_;

inline constexpr InstrumentShort::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentShort::InstrumentShort(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentShortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentShortDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentShortDefaultTypeInternal() {}
  union {
    InstrumentShort _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentShortDefaultTypeInternal _InstrumentShort_default_instance_;

inline constexpr Instrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        lot_{0},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Instrument::Instrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentDefaultTypeInternal() {}
  union {
    Instrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentDefaultTypeInternal _Instrument_default_instance_;

inline constexpr IndicativesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IndicativesResponse::IndicativesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IndicativesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativesResponseDefaultTypeInternal() {}
  union {
    IndicativesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativesResponseDefaultTypeInternal _IndicativesResponse_default_instance_;

inline constexpr GetFuturesMarginResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        initial_margin_on_buy_{nullptr},
        initial_margin_on_sell_{nullptr},
        min_price_increment_{nullptr},
        min_price_increment_amount_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetFuturesMarginResponse::GetFuturesMarginResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetFuturesMarginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFuturesMarginResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFuturesMarginResponseDefaultTypeInternal() {}
  union {
    GetFuturesMarginResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFuturesMarginResponseDefaultTypeInternal _GetFuturesMarginResponse_default_instance_;

inline constexpr GetForecastResponse_TargetItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        company_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        show_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        recommendation_date_{nullptr},
        current_price_{nullptr},
        target_price_{nullptr},
        price_change_{nullptr},
        price_change_rel_{nullptr},
        recommendation_{static_cast< ::tinkoff::public_::invest::api::contract::v1::Recommendation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetForecastResponse_TargetItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponse_TargetItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponse_TargetItemDefaultTypeInternal() {}
  union {
    GetForecastResponse_TargetItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponse_TargetItemDefaultTypeInternal _GetForecastResponse_TargetItem_default_instance_;

inline constexpr GetForecastResponse_ConsensusItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_price_{nullptr},
        consensus_{nullptr},
        min_target_{nullptr},
        max_target_{nullptr},
        price_change_{nullptr},
        price_change_rel_{nullptr},
        recommendation_{static_cast< ::tinkoff::public_::invest::api::contract::v1::Recommendation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetForecastResponse_ConsensusItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponse_ConsensusItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponse_ConsensusItemDefaultTypeInternal() {}
  union {
    GetForecastResponse_ConsensusItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponse_ConsensusItemDefaultTypeInternal _GetForecastResponse_ConsensusItem_default_instance_;

inline constexpr GetFavoritesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : favorite_instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetFavoritesResponse::GetFavoritesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetFavoritesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFavoritesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFavoritesResponseDefaultTypeInternal() {}
  union {
    GetFavoritesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFavoritesResponseDefaultTypeInternal _GetFavoritesResponse_default_instance_;

inline constexpr GetDividendsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetDividendsRequest::GetDividendsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetDividendsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsRequestDefaultTypeInternal() {}
  union {
    GetDividendsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsRequestDefaultTypeInternal _GetDividendsRequest_default_instance_;

inline constexpr GetCountriesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : countries_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetCountriesResponse::GetCountriesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetCountriesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCountriesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCountriesResponseDefaultTypeInternal() {}
  union {
    GetCountriesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCountriesResponseDefaultTypeInternal _GetCountriesResponse_default_instance_;

inline constexpr GetConsensusForecastsResponse_ConsensusForecastsItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_{nullptr},
        best_target_price_{nullptr},
        best_target_low_{nullptr},
        best_target_high_{nullptr},
        prognosis_date_{nullptr},
        total_buy_recommend_{0},
        total_hold_recommend_{0},
        total_sell_recommend_{0},
        consensus_{static_cast< ::tinkoff::public_::invest::api::contract::v1::Recommendation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal() {}
  union {
    GetConsensusForecastsResponse_ConsensusForecastsItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal _GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_;

inline constexpr GetConsensusForecastsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        paging_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetConsensusForecastsRequest::GetConsensusForecastsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetConsensusForecastsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsRequestDefaultTypeInternal() {}
  union {
    GetConsensusForecastsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsRequestDefaultTypeInternal _GetConsensusForecastsRequest_default_instance_;

inline constexpr GetBrandsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        brands_{},
        paging_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetBrandsResponse::GetBrandsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBrandsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandsResponseDefaultTypeInternal() {}
  union {
    GetBrandsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandsResponseDefaultTypeInternal _GetBrandsResponse_default_instance_;

inline constexpr GetBrandsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        paging_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetBrandsRequest::GetBrandsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBrandsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandsRequestDefaultTypeInternal() {}
  union {
    GetBrandsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandsRequestDefaultTypeInternal _GetBrandsRequest_default_instance_;

inline constexpr GetBondEventsResponse_BondEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        execution_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        operation_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        note_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        convert_to_fin_tool_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_date_{nullptr},
        event_total_vol_{nullptr},
        fix_date_{nullptr},
        rate_date_{nullptr},
        default_date_{nullptr},
        real_pay_date_{nullptr},
        pay_date_{nullptr},
        pay_one_bond_{nullptr},
        money_flow_val_{nullptr},
        value_{nullptr},
        coupon_start_date_{nullptr},
        coupon_end_date_{nullptr},
        coupon_interest_rate_{nullptr},
        event_number_{0},
        event_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType >(0)},
        coupon_period_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBondEventsResponse_BondEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsResponse_BondEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsResponse_BondEventDefaultTypeInternal() {}
  union {
    GetBondEventsResponse_BondEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsResponse_BondEventDefaultTypeInternal _GetBondEventsResponse_BondEvent_default_instance_;

inline constexpr GetBondEventsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondEventsRequest::GetBondEventsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBondEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsRequestDefaultTypeInternal() {}
  union {
    GetBondEventsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsRequestDefaultTypeInternal _GetBondEventsRequest_default_instance_;

inline constexpr GetBondCouponsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondCouponsRequest::GetBondCouponsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBondCouponsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondCouponsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondCouponsRequestDefaultTypeInternal() {}
  union {
    GetBondCouponsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondCouponsRequestDefaultTypeInternal _GetBondCouponsRequest_default_instance_;

inline constexpr GetAssetReportsResponse_GetAssetReportsEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        report_date_{nullptr},
        created_at_{nullptr},
        period_year_{0},
        period_num_{0},
        period_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal() {}
  union {
    GetAssetReportsResponse_GetAssetReportsEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal _GetAssetReportsResponse_GetAssetReportsEvent_default_instance_;

inline constexpr GetAssetReportsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetReportsRequest::GetAssetReportsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAssetReportsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsRequestDefaultTypeInternal() {}
  union {
    GetAssetReportsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsRequestDefaultTypeInternal _GetAssetReportsRequest_default_instance_;

inline constexpr GetAssetFundamentalsResponse_StatisticResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        domicile_indicator_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ex_dividend_date_{nullptr},
        fiscal_period_start_date_{nullptr},
        fiscal_period_end_date_{nullptr},
        market_capitalization_{0},
        high_price_last_52_weeks_{0},
        low_price_last_52_weeks_{0},
        average_daily_volume_last_10_days_{0},
        average_daily_volume_last_4_weeks_{0},
        beta_{0},
        free_float_{0},
        forward_annual_dividend_yield_{0},
        shares_outstanding_{0},
        revenue_ttm_{0},
        ebitda_ttm_{0},
        net_income_ttm_{0},
        eps_ttm_{0},
        diluted_eps_ttm_{0},
        free_cash_flow_ttm_{0},
        five_year_annual_revenue_growth_rate_{0},
        three_year_annual_revenue_growth_rate_{0},
        pe_ratio_ttm_{0},
        price_to_sales_ttm_{0},
        price_to_book_ttm_{0},
        price_to_free_cash_flow_ttm_{0},
        total_enterprise_value_mrq_{0},
        ev_to_ebitda_mrq_{0},
        net_margin_mrq_{0},
        net_interest_margin_mrq_{0},
        roe_{0},
        roa_{0},
        roic_{0},
        total_debt_mrq_{0},
        total_debt_to_equity_mrq_{0},
        total_debt_to_ebitda_mrq_{0},
        free_cash_flow_to_price_{0},
        net_debt_to_ebitda_{0},
        current_ratio_mrq_{0},
        fixed_charge_coverage_ratio_fy_{0},
        dividend_yield_daily_ttm_{0},
        dividend_rate_ttm_{0},
        dividends_per_share_{0},
        five_years_average_dividend_yield_{0},
        five_year_annual_dividend_growth_rate_{0},
        dividend_payout_ratio_fy_{0},
        buy_back_ttm_{0},
        one_year_annual_revenue_growth_rate_{0},
        adr_to_common_share_ratio_{0},
        number_of_employees_{0},
        revenue_change_five_years_{0},
        eps_change_five_years_{0},
        ebitda_change_five_years_{0},
        total_debt_change_five_years_{0},
        ev_to_sales_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsResponse_StatisticResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal _GetAssetFundamentalsResponse_StatisticResponse_default_instance_;

inline constexpr GetAccruedInterestsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetAccruedInterestsRequest::GetAccruedInterestsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAccruedInterestsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccruedInterestsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccruedInterestsRequestDefaultTypeInternal() {}
  union {
    GetAccruedInterestsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccruedInterestsRequestDefaultTypeInternal _GetAccruedInterestsRequest_default_instance_;

inline constexpr Future::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        futures_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        first_trade_date_{nullptr},
        last_trade_date_{nullptr},
        basic_asset_size_{nullptr},
        expiration_date_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        initial_margin_on_buy_{nullptr},
        initial_margin_on_sell_{nullptr},
        min_price_increment_amount_{nullptr},
        brand_{nullptr},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Future::Future(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FutureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FutureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FutureDefaultTypeInternal() {}
  union {
    Future _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FutureDefaultTypeInternal _Future_default_instance_;

inline constexpr Etf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        focus_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rebalancing_freq_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        fixed_commission_{nullptr},
        released_date_{nullptr},
        num_shares_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        liquidity_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Etf::Etf(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfDefaultTypeInternal() {}
  union {
    Etf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfDefaultTypeInternal _Etf_default_instance_;

inline constexpr EditFavoritesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : favorite_instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EditFavoritesResponse::EditFavoritesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EditFavoritesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesResponseDefaultTypeInternal() {}
  union {
    EditFavoritesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesResponseDefaultTypeInternal _EditFavoritesResponse_default_instance_;

inline constexpr EditFavoritesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        action_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EditFavoritesRequest::EditFavoritesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EditFavoritesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesRequestDefaultTypeInternal() {}
  union {
    EditFavoritesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesRequestDefaultTypeInternal _EditFavoritesRequest_default_instance_;

inline constexpr Dividend::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dividend_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        regularity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dividend_net_{nullptr},
        payment_date_{nullptr},
        declared_date_{nullptr},
        last_buy_date_{nullptr},
        record_date_{nullptr},
        close_price_{nullptr},
        yield_value_{nullptr},
        created_at_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Dividend::Dividend(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DividendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DividendDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DividendDefaultTypeInternal() {}
  union {
    Dividend _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DividendDefaultTypeInternal _Dividend_default_instance_;

inline constexpr Currency::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        iso_currency_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        nominal_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Currency::Currency(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyDefaultTypeInternal() {}
  union {
    Currency _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyDefaultTypeInternal _Currency_default_instance_;

inline constexpr Coupon::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coupon_date_{nullptr},
        fix_date_{nullptr},
        pay_one_bond_{nullptr},
        coupon_start_date_{nullptr},
        coupon_end_date_{nullptr},
        coupon_number_{::int64_t{0}},
        coupon_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::CouponType >(0)},
        coupon_period_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Coupon::Coupon(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CouponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CouponDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CouponDefaultTypeInternal() {}
  union {
    Coupon _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CouponDefaultTypeInternal _Coupon_default_instance_;

inline constexpr Bond::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        maturity_date_{nullptr},
        nominal_{nullptr},
        initial_nominal_{nullptr},
        state_reg_date_{nullptr},
        placement_date_{nullptr},
        placement_price_{nullptr},
        aci_value_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        lot_{0},
        coupon_quantity_per_year_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        issue_size_{::int64_t{0}},
        issue_size_plan_{::int64_t{0}},
        floating_coupon_flag_{false},
        perpetual_flag_{false},
        amortization_flag_{false},
        api_trade_available_flag_{false},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        subordinated_flag_{false},
        liquidity_flag_{false},
        risk_level_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RiskLevel >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Bond::Bond(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondDefaultTypeInternal() {}
  union {
    Bond _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondDefaultTypeInternal _Bond_default_instance_;

inline constexpr AssetStructuredProduct::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        borrow_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        logic_portfolio_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_{nullptr},
        safety_barrier_{nullptr},
        maturity_date_{nullptr},
        issue_size_plan_{nullptr},
        issue_size_{nullptr},
        placement_date_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::StructuredProductType >(0)},
        asset_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::AssetType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AssetStructuredProduct::AssetStructuredProduct(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetStructuredProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetStructuredProductDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetStructuredProductDefaultTypeInternal() {}
  union {
    AssetStructuredProduct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetStructuredProductDefaultTypeInternal _AssetStructuredProduct_default_instance_;

inline constexpr AssetShare::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        preferred_share_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        repres_isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_size_{nullptr},
        nominal_{nullptr},
        dividend_rate_{nullptr},
        ipo_date_{nullptr},
        registry_date_{nullptr},
        placement_date_{nullptr},
        issue_size_plan_{nullptr},
        total_float_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::ShareType >(0)},
        div_yield_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AssetShare::AssetShare(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetShareDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetShareDefaultTypeInternal() {}
  union {
    AssetShare _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetShareDefaultTypeInternal _AssetShare_default_instance_;

inline constexpr AssetInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : links_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetInstrument::AssetInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetInstrumentDefaultTypeInternal() {}
  union {
    AssetInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetInstrumentDefaultTypeInternal _AssetInstrument_default_instance_;

inline constexpr AssetEtf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rebalancing_dates_{},
        payment_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rebalancing_freq_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        management_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        focus_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_company_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        inav_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rebalancing_plan_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tax_rate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_expense_{nullptr},
        hurdle_rate_{nullptr},
        performance_fee_{nullptr},
        fixed_commission_{nullptr},
        buy_premium_{nullptr},
        sell_discount_{nullptr},
        num_share_{nullptr},
        released_date_{nullptr},
        index_recovery_period_{nullptr},
        expense_commission_{nullptr},
        primary_index_tracking_error_{nullptr},
        nominal_{nullptr},
        watermark_flag_{false},
        rebalancing_flag_{false},
        leveraged_flag_{false},
        ucits_flag_{false},
        div_yield_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AssetEtf::AssetEtf(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetEtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetEtfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetEtfDefaultTypeInternal() {}
  union {
    AssetEtf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetEtfDefaultTypeInternal _AssetEtf_default_instance_;

inline constexpr AssetClearingCertificate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AssetClearingCertificate::AssetClearingCertificate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetClearingCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetClearingCertificateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetClearingCertificateDefaultTypeInternal() {}
  union {
    AssetClearingCertificate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetClearingCertificateDefaultTypeInternal _AssetClearingCertificate_default_instance_;

inline constexpr AssetBond::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        borrow_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interest_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        return_condition_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_nominal_{nullptr},
        issue_size_{nullptr},
        nominal_{nullptr},
        maturity_date_{nullptr},
        state_reg_date_{nullptr},
        placement_date_{nullptr},
        placement_price_{nullptr},
        issue_size_plan_{nullptr},
        coupon_quantity_per_year_{0},
        indexed_nominal_flag_{false},
        subordinated_flag_{false},
        collateral_flag_{false},
        tax_free_flag_{false},
        amortization_flag_{false},
        floating_coupon_flag_{false},
        perpetual_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AssetBond::AssetBond(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetBondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetBondDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetBondDefaultTypeInternal() {}
  union {
    AssetBond _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetBondDefaultTypeInternal _AssetBond_default_instance_;

inline constexpr AccruedInterest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        date_{nullptr},
        value_{nullptr},
        value_percent_{nullptr},
        nominal_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AccruedInterest::AccruedInterest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AccruedInterestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccruedInterestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccruedInterestDefaultTypeInternal() {}
  union {
    AccruedInterest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccruedInterestDefaultTypeInternal _AccruedInterest_default_instance_;

inline constexpr TradingInterval::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interval_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TradingInterval::TradingInterval(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradingIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingIntervalDefaultTypeInternal() {}
  union {
    TradingInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingIntervalDefaultTypeInternal _TradingInterval_default_instance_;

inline constexpr SharesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SharesResponse::SharesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SharesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharesResponseDefaultTypeInternal() {}
  union {
    SharesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharesResponseDefaultTypeInternal _SharesResponse_default_instance_;

inline constexpr ShareResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ShareResponse::ShareResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ShareResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareResponseDefaultTypeInternal() {}
  union {
    ShareResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareResponseDefaultTypeInternal _ShareResponse_default_instance_;

inline constexpr OptionsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OptionsResponse::OptionsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OptionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionsResponseDefaultTypeInternal() {}
  union {
    OptionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionsResponseDefaultTypeInternal _OptionsResponse_default_instance_;

inline constexpr OptionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR OptionResponse::OptionResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionResponseDefaultTypeInternal() {}
  union {
    OptionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionResponseDefaultTypeInternal _OptionResponse_default_instance_;

inline constexpr InstrumentResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentResponse::InstrumentResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentResponseDefaultTypeInternal() {}
  union {
    InstrumentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentResponseDefaultTypeInternal _InstrumentResponse_default_instance_;

inline constexpr GetForecastResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        targets_{},
        consensus_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastResponse::GetForecastResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetForecastResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponseDefaultTypeInternal() {}
  union {
    GetForecastResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponseDefaultTypeInternal _GetForecastResponse_default_instance_;

inline constexpr GetDividendsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : dividends_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetDividendsResponse::GetDividendsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetDividendsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsResponseDefaultTypeInternal() {}
  union {
    GetDividendsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsResponseDefaultTypeInternal _GetDividendsResponse_default_instance_;

inline constexpr GetConsensusForecastsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        items_{},
        page_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetConsensusForecastsResponse::GetConsensusForecastsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetConsensusForecastsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsResponseDefaultTypeInternal() {}
  union {
    GetConsensusForecastsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsResponseDefaultTypeInternal _GetConsensusForecastsResponse_default_instance_;

inline constexpr GetBondEventsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : events_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondEventsResponse::GetBondEventsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBondEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsResponseDefaultTypeInternal() {}
  union {
    GetBondEventsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsResponseDefaultTypeInternal _GetBondEventsResponse_default_instance_;

inline constexpr GetBondCouponsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : events_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondCouponsResponse::GetBondCouponsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetBondCouponsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondCouponsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondCouponsResponseDefaultTypeInternal() {}
  union {
    GetBondCouponsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondCouponsResponseDefaultTypeInternal _GetBondCouponsResponse_default_instance_;

inline constexpr GetAssetReportsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : events_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetReportsResponse::GetAssetReportsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAssetReportsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsResponseDefaultTypeInternal() {}
  union {
    GetAssetReportsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsResponseDefaultTypeInternal _GetAssetReportsResponse_default_instance_;

inline constexpr GetAssetFundamentalsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : fundamentals_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAssetFundamentalsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsResponseDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsResponseDefaultTypeInternal _GetAssetFundamentalsResponse_default_instance_;

inline constexpr GetAccruedInterestsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : accrued_interests_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAccruedInterestsResponse::GetAccruedInterestsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetAccruedInterestsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccruedInterestsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccruedInterestsResponseDefaultTypeInternal() {}
  union {
    GetAccruedInterestsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccruedInterestsResponseDefaultTypeInternal _GetAccruedInterestsResponse_default_instance_;

inline constexpr FuturesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FuturesResponse::FuturesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FuturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuturesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuturesResponseDefaultTypeInternal() {}
  union {
    FuturesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuturesResponseDefaultTypeInternal _FuturesResponse_default_instance_;

inline constexpr FutureResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FutureResponse::FutureResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FutureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FutureResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FutureResponseDefaultTypeInternal() {}
  union {
    FutureResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FutureResponseDefaultTypeInternal _FutureResponse_default_instance_;

inline constexpr FindInstrumentResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FindInstrumentResponse::FindInstrumentResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FindInstrumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindInstrumentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindInstrumentResponseDefaultTypeInternal() {}
  union {
    FindInstrumentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindInstrumentResponseDefaultTypeInternal _FindInstrumentResponse_default_instance_;

inline constexpr EtfsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EtfsResponse::EtfsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EtfsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfsResponseDefaultTypeInternal() {}
  union {
    EtfsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfsResponseDefaultTypeInternal _EtfsResponse_default_instance_;

inline constexpr EtfResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EtfResponse::EtfResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EtfResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfResponseDefaultTypeInternal() {}
  union {
    EtfResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfResponseDefaultTypeInternal _EtfResponse_default_instance_;

inline constexpr CurrencyResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CurrencyResponse::CurrencyResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CurrencyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyResponseDefaultTypeInternal() {}
  union {
    CurrencyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyResponseDefaultTypeInternal _CurrencyResponse_default_instance_;

inline constexpr CurrenciesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CurrenciesResponse::CurrenciesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CurrenciesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrenciesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrenciesResponseDefaultTypeInternal() {}
  union {
    CurrenciesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrenciesResponseDefaultTypeInternal _CurrenciesResponse_default_instance_;

inline constexpr BondsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BondsResponse::BondsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BondsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondsResponseDefaultTypeInternal() {}
  union {
    BondsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondsResponseDefaultTypeInternal _BondsResponse_default_instance_;

inline constexpr BondResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BondResponse::BondResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BondResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondResponseDefaultTypeInternal() {}
  union {
    BondResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondResponseDefaultTypeInternal _BondResponse_default_instance_;

inline constexpr AssetSecurity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        ext_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AssetSecurity::AssetSecurity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetSecurityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetSecurityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetSecurityDefaultTypeInternal() {}
  union {
    AssetSecurity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetSecurityDefaultTypeInternal _AssetSecurity_default_instance_;

inline constexpr Asset::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::AssetType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Asset::Asset(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetDefaultTypeInternal _Asset_default_instance_;

inline constexpr TradingDay::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        intervals_{},
        date_{nullptr},
        start_time_{nullptr},
        end_time_{nullptr},
        opening_auction_start_time_{nullptr},
        closing_auction_end_time_{nullptr},
        evening_opening_auction_start_time_{nullptr},
        evening_start_time_{nullptr},
        evening_end_time_{nullptr},
        clearing_start_time_{nullptr},
        clearing_end_time_{nullptr},
        premarket_start_time_{nullptr},
        premarket_end_time_{nullptr},
        closing_auction_start_time_{nullptr},
        opening_auction_end_time_{nullptr},
        is_trading_day_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TradingDay::TradingDay(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradingDayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingDayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingDayDefaultTypeInternal() {}
  union {
    TradingDay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingDayDefaultTypeInternal _TradingDay_default_instance_;

inline constexpr AssetsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : assets_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetsResponse::AssetsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetsResponseDefaultTypeInternal() {}
  union {
    AssetsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetsResponseDefaultTypeInternal _AssetsResponse_default_instance_;

inline constexpr AssetFull::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        required_tests_{},
        instruments_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_brief_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        gos_reg_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cfi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_nsd_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        br_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        br_code_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deleted_at_{nullptr},
        brand_{nullptr},
        updated_at_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::AssetType >(0)},
        ext_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AssetFull::AssetFull(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetFullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetFullDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetFullDefaultTypeInternal() {}
  union {
    AssetFull _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetFullDefaultTypeInternal _AssetFull_default_instance_;

inline constexpr TradingSchedule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : days_{},
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradingSchedule::TradingSchedule(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradingScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingScheduleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingScheduleDefaultTypeInternal() {}
  union {
    TradingSchedule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingScheduleDefaultTypeInternal _TradingSchedule_default_instance_;

inline constexpr AssetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        asset_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AssetResponse::AssetResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AssetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetResponseDefaultTypeInternal() {}
  union {
    AssetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetResponseDefaultTypeInternal _AssetResponse_default_instance_;

inline constexpr TradingSchedulesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exchanges_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradingSchedulesResponse::TradingSchedulesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradingSchedulesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingSchedulesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingSchedulesResponseDefaultTypeInternal() {}
  union {
    TradingSchedulesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingSchedulesResponseDefaultTypeInternal _TradingSchedulesResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_instruments_2eproto[90];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_instruments_2eproto[16];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_instruments_2eproto = nullptr;
const ::uint32_t TableStruct_instruments_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.to_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, _impl_.exchanges_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _impl_.days_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.is_trading_day_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.opening_auction_start_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.closing_auction_end_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_opening_auction_start_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_start_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_end_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.clearing_start_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.clearing_end_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.premarket_start_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.premarket_end_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.closing_auction_start_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.opening_auction_end_time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.intervals_),
    0,
    ~0u,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.id_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.id_),
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _impl_.instrument_status_),
    0,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_.basic_asset_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_.basic_asset_position_uid_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _impl_.instrument_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondsResponse, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.instrument_id_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.type_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_number_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_total_vol_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.fix_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.rate_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.default_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.real_pay_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.pay_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.pay_one_bond_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.money_flow_val_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.execution_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.note_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.convert_to_fin_tool_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_start_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_end_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_period_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_interest_rate_),
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    ~0u,
    ~0u,
    9,
    ~0u,
    ~0u,
    10,
    11,
    ~0u,
    12,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_number_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.fix_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.pay_one_bond_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_start_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_end_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_period_),
    ~0u,
    0,
    ~0u,
    1,
    2,
    ~0u,
    3,
    4,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _impl_.instrument_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _impl_.instrument_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfsResponse, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _impl_.instrument_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FuturesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FuturesResponse, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _impl_.instrument_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionsResponse, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.real_exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.payment_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.style_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.settlement_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.settlement_currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.asset_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.country_of_risk_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.brand_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.lot_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_size_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.klong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.kshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dlong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dlong_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dshort_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.strike_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.expiration_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_trade_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.last_trade_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.short_enabled_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.sell_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.blocked_tca_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.api_trade_available_flag_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _impl_.instrument_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SharesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SharesResponse, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.lot_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.klong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.kshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dlong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dlong_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dshort_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.short_enabled_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.coupon_quantity_per_year_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.maturity_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.initial_nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.state_reg_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.placement_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.placement_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.aci_value_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.country_of_risk_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_size_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_size_plan_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.sell_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.floating_coupon_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.perpetual_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.amortization_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.real_exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.asset_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.blocked_tca_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.subordinated_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.liquidity_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.risk_level_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.brand_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    13,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    14,
    15,
    ~0u,
    16,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.lot_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.klong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.kshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dlong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dlong_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dshort_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.short_enabled_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.country_of_risk_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.sell_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.iso_currency_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.real_exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.blocked_tca_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.brand_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    6,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    7,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    8,
    9,
    10,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.lot_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.klong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.kshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dlong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dlong_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dshort_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.short_enabled_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.fixed_commission_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.focus_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.released_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.num_shares_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.country_of_risk_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.rebalancing_freq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.sell_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.real_exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.asset_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.blocked_tca_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.liquidity_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.brand_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    6,
    ~0u,
    7,
    8,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    9,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    10,
    11,
    12,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.lot_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.klong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.kshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dlong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dlong_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dshort_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.short_enabled_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_trade_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.last_trade_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.futures_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.asset_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_size_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.country_of_risk_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.expiration_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.sell_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.real_exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.blocked_tca_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.initial_margin_on_buy_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.initial_margin_on_sell_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.min_price_increment_amount_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.brand_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    6,
    7,
    ~0u,
    ~0u,
    ~0u,
    8,
    ~0u,
    ~0u,
    ~0u,
    9,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    10,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    11,
    12,
    13,
    14,
    15,
    16,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.lot_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.klong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.kshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dlong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dlong_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dshort_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.short_enabled_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.ipo_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.issue_size_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.country_of_risk_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.issue_size_plan_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.sell_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.div_yield_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.share_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.real_exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.asset_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.blocked_tca_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.liquidity_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.brand_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    6,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    7,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    8,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    9,
    10,
    11,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.instrument_id_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, _impl_.accrued_interests_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.value_percent_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.nominal_),
    0,
    1,
    2,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.initial_margin_on_buy_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.initial_margin_on_sell_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.min_price_increment_amount_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _impl_.instrument_),
    0,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.lot_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.klong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.kshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dlong_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dshort_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dlong_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dshort_min_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.short_enabled_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.country_of_risk_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.instrument_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.sell_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.real_exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.asset_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.blocked_tca_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.instrument_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.brand_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    6,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    7,
    8,
    9,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.instrument_id_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, _impl_.dividends_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.dividend_net_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.payment_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.declared_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.last_buy_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.dividend_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.record_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.regularity_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.close_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.yield_value_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.created_at_),
    0,
    1,
    2,
    3,
    ~0u,
    4,
    ~0u,
    5,
    6,
    7,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _impl_.asset_),
    0,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _impl_.instrument_type_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsResponse, _impl_.assets_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.name_brief_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.deleted_at_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.required_tests_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.gos_reg_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.cfi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.code_nsd_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.brand_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.updated_at_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.br_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.br_code_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.ext_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetCurrency, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetCurrency, _impl_.base_currency_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.instrument_kind_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.ext_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_size_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.nominal_currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.primary_index_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.dividend_rate_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.preferred_share_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.ipo_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.registry_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.div_yield_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.placement_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.repres_isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_size_plan_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.total_float_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    2,
    ~0u,
    3,
    4,
    ~0u,
    ~0u,
    5,
    ~0u,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.current_nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.borrow_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_size_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.nominal_currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.interest_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.coupon_quantity_per_year_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.indexed_nominal_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.subordinated_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.collateral_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.tax_free_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.amortization_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.floating_coupon_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.perpetual_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.maturity_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.return_condition_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.state_reg_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.placement_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.placement_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_size_plan_),
    0,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    3,
    ~0u,
    4,
    5,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.borrow_name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.nominal_currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.logic_portfolio_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.asset_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.basic_asset_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.safety_barrier_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.maturity_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_size_plan_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_size_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.placement_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_kind_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.total_expense_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.hurdle_rate_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.performance_fee_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.fixed_commission_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.payment_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.watermark_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.buy_premium_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.sell_discount_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_freq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.management_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.focus_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.leveraged_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.num_share_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.ucits_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.released_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_description_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_company_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.index_recovery_period_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.inav_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.div_yield_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.expense_commission_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_tracking_error_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_plan_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.tax_rate_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_dates_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.issue_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.nominal_currency_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    6,
    ~0u,
    7,
    ~0u,
    ~0u,
    ~0u,
    8,
    ~0u,
    ~0u,
    9,
    10,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    11,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_.nominal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_.nominal_currency_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.company_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.country_of_risk_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.country_of_risk_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.instrument_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.links_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.instrument_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.position_uid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _impl_.instrument_uid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, _impl_.favorite_instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.instrument_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.otc_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.instrument_kind_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _impl_.action_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_.instrument_id_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, _impl_.favorite_instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, _impl_.countries_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, _impl_.instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.instrument_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.exchange_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.buy_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.sell_available_flag_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.alfa_two_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.alfa_three_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.name_brief_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.query_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.instrument_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.api_trade_available_flag_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.isin_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.class_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.instrument_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.position_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.instrument_kind_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.for_iis_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.first_1min_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.first_1day_candle_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.for_qual_investor_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.weekend_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.blocked_tca_flag_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _impl_.paging_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_.brands_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_.paging_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, _impl_.assets_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.asset_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.market_capitalization_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.high_price_last_52_weeks_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.low_price_last_52_weeks_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_10_days_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_4_weeks_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.beta_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_float_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.forward_annual_dividend_yield_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.shares_outstanding_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_income_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.diluted_eps_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_revenue_growth_rate_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.three_year_annual_revenue_growth_rate_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.pe_ratio_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_sales_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_book_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_free_cash_flow_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_enterprise_value_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_ebitda_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_margin_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_interest_margin_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roe_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roa_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roic_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_equity_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_ebitda_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_to_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_debt_to_ebitda_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.current_ratio_mrq_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fixed_charge_coverage_ratio_fy_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_yield_daily_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_rate_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividends_per_share_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_years_average_dividend_yield_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_dividend_growth_rate_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_payout_ratio_fy_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.buy_back_ttm_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.one_year_annual_revenue_growth_rate_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.domicile_indicator_code_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.adr_to_common_share_ratio_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.number_of_employees_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_start_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_end_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_change_five_years_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_change_five_years_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_change_five_years_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_change_five_years_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, _impl_.fundamentals_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.to_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.created_at_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _impl_.paging_),
    0,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.asset_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_low_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_high_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.prognosis_date_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    4,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_.items_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_.page_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.company_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.recommendation_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.recommendation_date_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.current_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.target_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.price_change_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.price_change_rel_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.show_name_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    2,
    3,
    4,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.recommendation_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.currency_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.current_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.consensus_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.min_target_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.max_target_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.price_change_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.price_change_rel_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_.targets_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_.consensus_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_.end_ts_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_.interval_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest)},
        {14, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse)},
        {23, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedule)},
        {33, 57, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingDay)},
        {73, 84, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest)},
        {87, 96, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest)},
        {97, 107, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest)},
        {109, 118, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BondResponse)},
        {119, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BondsResponse)},
        {128, 140, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest)},
        {144, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse)},
        {153, 165, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest)},
        {169, 198, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent)},
        {219, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse)},
        {228, 245, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Coupon)},
        {254, 263, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse)},
        {264, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse)},
        {273, 282, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EtfResponse)},
        {283, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EtfsResponse)},
        {292, 301, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FutureResponse)},
        {302, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FuturesResponse)},
        {311, 320, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OptionResponse)},
        {321, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OptionsResponse)},
        {330, 383, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Option)},
        {428, 437, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::ShareResponse)},
        {438, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SharesResponse)},
        {447, 507, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Bond)},
        {559, 602, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Currency)},
        {637, 686, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Etf)},
        {727, 779, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Future)},
        {823, 873, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Share)},
        {915, 927, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest)},
        {931, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse)},
        {940, 952, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AccruedInterest)},
        {956, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest)},
        {966, 978, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse)},
        {982, 991, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse)},
        {992, 1036, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Instrument)},
        {1072, 1084, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest)},
        {1088, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse)},
        {1097, 1115, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Dividend)},
        {1125, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetRequest)},
        {1134, 1143, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetResponse)},
        {1144, 1153, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetsRequest)},
        {1154, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetsResponse)},
        {1163, 1190, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetFull)},
        {1208, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Asset)},
        {1220, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetCurrency)},
        {1229, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetSecurity)},
        {1246, 1269, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetShare)},
        {1284, 1313, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetBond)},
        {1334, 1355, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct)},
        {1368, 1407, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetEtf)},
        {1438, 1448, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate)},
        {1450, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Brand)},
        {1466, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetInstrument)},
        {1482, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentLink)},
        {1492, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest)},
        {1500, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse)},
        {1509, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument)},
        {1527, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest)},
        {1537, 1547, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument)},
        {1549, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse)},
        {1558, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest)},
        {1566, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse)},
        {1575, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativesRequest)},
        {1583, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse)},
        {1592, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse)},
        {1610, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CountryResponse)},
        {1622, 1633, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest)},
        {1636, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse)},
        {1645, 1669, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentShort)},
        {1685, 1694, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest)},
        {1695, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest)},
        {1704, 1714, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse)},
        {1716, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest)},
        {1725, 1789, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse)},
        {1845, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse)},
        {1854, 1865, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest)},
        {1868, 1882, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent)},
        {1888, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse)},
        {1897, 1906, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest)},
        {1907, 1927, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem)},
        {1939, 1949, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse)},
        {1951, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest)},
        {1960, 1979, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem)},
        {1990, 2008, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem)},
        {2018, 2028, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse)},
        {2030, 2040, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval)},
        {2042, 2052, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingInterval)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tinkoff::public_::invest::api::contract::v1::_TradingSchedulesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingSchedulesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingSchedule_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingDay_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FilterOptionsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_BondResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_BondsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondCouponsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondCouponsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsResponse_BondEvent_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Coupon_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CurrencyResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CurrenciesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EtfResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EtfsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FutureResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FuturesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_OptionResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_OptionsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Option_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_ShareResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SharesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Bond_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Currency_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Etf_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Future_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Share_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAccruedInterestsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAccruedInterestsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AccruedInterest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFuturesMarginRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFuturesMarginResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Instrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetDividendsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetDividendsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Dividend_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetFull_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Asset_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetCurrency_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetSecurity_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetShare_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetBond_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetStructuredProduct_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetEtf_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetClearingCertificate_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Brand_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentLink_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFavoritesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFavoritesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FavoriteInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesRequestInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetCountriesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetCountriesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_IndicativesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_IndicativesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_IndicativeResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CountryResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FindInstrumentRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FindInstrumentResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentShort_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBrandsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBrandRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBrandsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsResponse_StatisticResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsResponse_GetAssetReportsEvent_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_TargetItem_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_ConsensusItem_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingInterval_TimeInterval_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingInterval_default_instance_._instance,
};
const char descriptor_table_protodef_instruments_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021instruments.proto\022&tinkoff.public_.inv"
    "est.api.contract.v1\032\037google/protobuf/tim"
    "estamp.proto\032\014common.proto\032\037google/api/f"
    "ield_behavior.proto\"\251\001\n\027TradingSchedules"
    "Request\022\025\n\010exchange\030\001 \001(\tH\000\210\001\001\022-\n\004from\030\002"
    " \001(\0132\032.google.protobuf.TimestampH\001\210\001\001\022+\n"
    "\002to\030\003 \001(\0132\032.google.protobuf.TimestampH\002\210"
    "\001\001B\013\n\t_exchangeB\007\n\005_fromB\005\n\003_to\"f\n\030Tradi"
    "ngSchedulesResponse\022J\n\texchanges\030\001 \003(\01327"
    ".tinkoff.public_.invest.api.contract.v1."
    "TradingSchedule\"e\n\017TradingSchedule\022\020\n\010ex"
    "change\030\001 \001(\t\022@\n\004days\030\002 \003(\01322.tinkoff.pub"
    "lic_.invest.api.contract.v1.TradingDay\"\230"
    "\007\n\nTradingDay\022(\n\004date\030\001 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\026\n\016is_trading_day\030\002 \001(\010\022"
    ".\n\nstart_time\030\003 \001(\0132\032.google.protobuf.Ti"
    "mestamp\022,\n\010end_time\030\004 \001(\0132\032.google.proto"
    "buf.Timestamp\022>\n\032opening_auction_start_t"
    "ime\030\007 \001(\0132\032.google.protobuf.Timestamp\022<\n"
    "\030closing_auction_end_time\030\010 \001(\0132\032.google"
    ".protobuf.Timestamp\022F\n\"evening_opening_a"
    "uction_start_time\030\t \001(\0132\032.google.protobu"
    "f.Timestamp\0226\n\022evening_start_time\030\n \001(\0132"
    "\032.google.protobuf.Timestamp\0224\n\020evening_e"
    "nd_time\030\013 \001(\0132\032.google.protobuf.Timestam"
    "p\0227\n\023clearing_start_time\030\014 \001(\0132\032.google."
    "protobuf.Timestamp\0225\n\021clearing_end_time\030"
    "\r \001(\0132\032.google.protobuf.Timestamp\0228\n\024pre"
    "market_start_time\030\016 \001(\0132\032.google.protobu"
    "f.Timestamp\0226\n\022premarket_end_time\030\017 \001(\0132"
    "\032.google.protobuf.Timestamp\022>\n\032closing_a"
    "uction_start_time\030\020 \001(\0132\032.google.protobu"
    "f.Timestamp\022<\n\030opening_auction_end_time\030"
    "\021 \001(\0132\032.google.protobuf.Timestamp\022J\n\tint"
    "ervals\030\022 \003(\01327.tinkoff.public_.invest.ap"
    "i.contract.v1.TradingIntervalJ\004\010\005\020\006J\004\010\006\020"
    "\007\"\236\001\n\021InstrumentRequest\022O\n\007id_type\030\001 \001(\016"
    "28.tinkoff.public_.invest.api.contract.v"
    "1.InstrumentIdTypeB\004\342A\001\002\022\027\n\nclass_code\030\002"
    " \001(\tH\000\210\001\001\022\020\n\002id\030\003 \001(\tB\004\342A\001\002B\r\n\013_class_co"
    "de\"\204\001\n\022InstrumentsRequest\022X\n\021instrument_"
    "status\030\001 \001(\01628.tinkoff.public_.invest.ap"
    "i.contract.v1.InstrumentStatusH\000\210\001\001B\024\n\022_"
    "instrument_status\"\214\001\n\024FilterOptionsReque"
    "st\022\034\n\017basic_asset_uid\030\001 \001(\tH\000\210\001\001\022%\n\030basi"
    "c_asset_position_uid\030\002 \001(\tH\001\210\001\001B\022\n\020_basi"
    "c_asset_uidB\033\n\031_basic_asset_position_uid"
    "\"P\n\014BondResponse\022@\n\ninstrument\030\001 \001(\0132,.t"
    "inkoff.public_.invest.api.contract.v1.Bo"
    "nd\"R\n\rBondsResponse\022A\n\013instruments\030\001 \003(\013"
    "2,.tinkoff.public_.invest.api.contract.v"
    "1.Bond\"\262\001\n\025GetBondCouponsRequest\022\020\n\004figi"
    "\030\001 \001(\tB\002\030\001\022-\n\004from\030\002 \001(\0132\032.google.protob"
    "uf.TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.google.p"
    "rotobuf.TimestampH\001\210\001\001\022\033\n\rinstrument_id\030"
    "\004 \001(\tB\004\342A\001\002B\007\n\005_fromB\005\n\003_to\"X\n\026GetBondCo"
    "uponsResponse\022>\n\006events\030\001 \003(\0132..tinkoff."
    "public_.invest.api.contract.v1.Coupon\"\360\002"
    "\n\024GetBondEventsRequest\022-\n\004from\030\002 \001(\0132\032.g"
    "oogle.protobuf.TimestampH\000\210\001\001\022+\n\002to\030\003 \001("
    "\0132\032.google.protobuf.TimestampH\001\210\001\001\022\033\n\rin"
    "strument_id\030\004 \001(\tB\004\342A\001\002\022T\n\004type\030\005 \001(\0162F."
    "tinkoff.public_.invest.api.contract.v1.G"
    "etBondEventsRequest.EventType\"y\n\tEventTy"
    "pe\022\032\n\026EVENT_TYPE_UNSPECIFIED\020\000\022\022\n\016EVENT_"
    "TYPE_CPN\020\001\022\023\n\017EVENT_TYPE_CALL\020\002\022\022\n\016EVENT"
    "_TYPE_MTY\020\003\022\023\n\017EVENT_TYPE_CONV\020\004B\007\n\005_fro"
    "mB\005\n\003_to\"\370\010\n\025GetBondEventsResponse\022W\n\006ev"
    "ents\030\001 \003(\0132G.tinkoff.public_.invest.api."
    "contract.v1.GetBondEventsResponse.BondEv"
    "ent\032\205\010\n\tBondEvent\022\025\n\rinstrument_id\030\002 \001(\t"
    "\022\024\n\014event_number\030\003 \001(\005\022.\n\nevent_date\030\004 \001"
    "(\0132\032.google.protobuf.Timestamp\022Z\n\nevent_"
    "type\030\005 \001(\0162F.tinkoff.public_.invest.api."
    "contract.v1.GetBondEventsRequest.EventTy"
    "pe\022J\n\017event_total_vol\030\006 \001(\01321.tinkoff.pu"
    "blic_.invest.api.contract.v1.Quotation\022,"
    "\n\010fix_date\030\007 \001(\0132\032.google.protobuf.Times"
    "tamp\022-\n\trate_date\030\010 \001(\0132\032.google.protobu"
    "f.Timestamp\0220\n\014default_date\030\t \001(\0132\032.goog"
    "le.protobuf.Timestamp\0221\n\rreal_pay_date\030\n"
    " \001(\0132\032.google.protobuf.Timestamp\022,\n\010pay_"
    "date\030\013 \001(\0132\032.google.protobuf.Timestamp\022H"
    "\n\014pay_one_bond\030\014 \001(\01322.tinkoff.public_.i"
    "nvest.api.contract.v1.MoneyValue\022J\n\016mone"
    "y_flow_val\030\r \001(\01322.tinkoff.public_.inves"
    "t.api.contract.v1.MoneyValue\022\021\n\texecutio"
    "n\030\016 \001(\t\022\026\n\016operation_type\030\017 \001(\t\022@\n\005value"
    "\030\020 \001(\01321.tinkoff.public_.invest.api.cont"
    "ract.v1.Quotation\022\014\n\004note\030\021 \001(\t\022\036\n\026conve"
    "rt_to_fin_tool_id\030\022 \001(\t\0225\n\021coupon_start_"
    "date\030\023 \001(\0132\032.google.protobuf.Timestamp\0223"
    "\n\017coupon_end_date\030\024 \001(\0132\032.google.protobu"
    "f.Timestamp\022\025\n\rcoupon_period\030\025 \001(\005\022O\n\024co"
    "upon_interest_rate\030\026 \001(\01321.tinkoff.publi"
    "c_.invest.api.contract.v1.Quotation\"\242\003\n\006"
    "Coupon\022\014\n\004figi\030\001 \001(\t\022/\n\013coupon_date\030\002 \001("
    "\0132\032.google.protobuf.Timestamp\022\025\n\rcoupon_"
    "number\030\003 \001(\003\022,\n\010fix_date\030\004 \001(\0132\032.google."
    "protobuf.Timestamp\022H\n\014pay_one_bond\030\005 \001(\013"
    "22.tinkoff.public_.invest.api.contract.v"
    "1.MoneyValue\022G\n\013coupon_type\030\006 \001(\01622.tink"
    "off.public_.invest.api.contract.v1.Coupo"
    "nType\0225\n\021coupon_start_date\030\007 \001(\0132\032.googl"
    "e.protobuf.Timestamp\0223\n\017coupon_end_date\030"
    "\010 \001(\0132\032.google.protobuf.Timestamp\022\025\n\rcou"
    "pon_period\030\t \001(\005\"X\n\020CurrencyResponse\022D\n\n"
    "instrument\030\001 \001(\01320.tinkoff.public_.inves"
    "t.api.contract.v1.Currency\"[\n\022Currencies"
    "Response\022E\n\013instruments\030\001 \003(\01320.tinkoff."
    "public_.invest.api.contract.v1.Currency\""
    "N\n\013EtfResponse\022\?\n\ninstrument\030\001 \001(\0132+.tin"
    "koff.public_.invest.api.contract.v1.Etf\""
    "P\n\014EtfsResponse\022@\n\013instruments\030\001 \003(\0132+.t"
    "inkoff.public_.invest.api.contract.v1.Et"
    "f\"T\n\016FutureResponse\022B\n\ninstrument\030\001 \001(\0132"
    "..tinkoff.public_.invest.api.contract.v1"
    ".Future\"V\n\017FuturesResponse\022C\n\013instrument"
    "s\030\001 \003(\0132..tinkoff.public_.invest.api.con"
    "tract.v1.Future\"T\n\016OptionResponse\022B\n\nins"
    "trument\030\001 \001(\0132..tinkoff.public_.invest.a"
    "pi.contract.v1.Option\"V\n\017OptionsResponse"
    "\022C\n\013instruments\030\001 \003(\0132..tinkoff.public_."
    "invest.api.contract.v1.Option\"\377\017\n\006Option"
    "\022\013\n\003uid\030\001 \001(\t\022\024\n\014position_uid\030\002 \001(\t\022\016\n\006t"
    "icker\030\003 \001(\t\022\022\n\nclass_code\030\004 \001(\t\022 \n\030basic"
    "_asset_position_uid\030\005 \001(\t\022U\n\016trading_sta"
    "tus\030\025 \001(\0162=.tinkoff.public_.invest.api.c"
    "ontract.v1.SecurityTradingStatus\022K\n\rreal"
    "_exchange\030\037 \001(\01624.tinkoff.public_.invest"
    ".api.contract.v1.RealExchange\022J\n\tdirecti"
    "on\030) \001(\01627.tinkoff.public_.invest.api.co"
    "ntract.v1.OptionDirection\022O\n\014payment_typ"
    "e\030* \001(\01629.tinkoff.public_.invest.api.con"
    "tract.v1.OptionPaymentType\022B\n\005style\030+ \001("
    "\01623.tinkoff.public_.invest.api.contract."
    "v1.OptionStyle\022U\n\017settlement_type\030, \001(\0162"
    "<.tinkoff.public_.invest.api.contract.v1"
    ".OptionSettlementType\022\014\n\004name\030e \001(\t\022\020\n\010c"
    "urrency\030o \001(\t\022\033\n\023settlement_currency\030p \001"
    "(\t\022\023\n\nasset_type\030\203\001 \001(\t\022\024\n\013basic_asset\030\204"
    "\001 \001(\t\022\021\n\010exchange\030\215\001 \001(\t\022\030\n\017country_of_r"
    "isk\030\227\001 \001(\t\022\035\n\024country_of_risk_name\030\230\001 \001("
    "\t\022\017\n\006sector\030\241\001 \001(\t\022A\n\005brand\030\242\001 \001(\01321.tin"
    "koff.public_.invest.api.contract.v1.Bran"
    "dData\022\014\n\003lot\030\311\001 \001(\005\022L\n\020basic_asset_size\030"
    "\323\001 \001(\01321.tinkoff.public_.invest.api.cont"
    "ract.v1.Quotation\022A\n\005klong\030\335\001 \001(\01321.tink"
    "off.public_.invest.api.contract.v1.Quota"
    "tion\022B\n\006kshort\030\336\001 \001(\01321.tinkoff.public_."
    "invest.api.contract.v1.Quotation\022A\n\005dlon"
    "g\030\337\001 \001(\01321.tinkoff.public_.invest.api.co"
    "ntract.v1.Quotation\022B\n\006dshort\030\340\001 \001(\01321.t"
    "inkoff.public_.invest.api.contract.v1.Qu"
    "otation\022E\n\tdlong_min\030\341\001 \001(\01321.tinkoff.pu"
    "blic_.invest.api.contract.v1.Quotation\022F"
    "\n\ndshort_min\030\342\001 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\022O\n\023min_pr"
    "ice_increment\030\347\001 \001(\01321.tinkoff.public_.i"
    "nvest.api.contract.v1.Quotation\022I\n\014strik"
    "e_price\030\361\001 \001(\01322.tinkoff.public_.invest."
    "api.contract.v1.MoneyValue\0224\n\017expiration"
    "_date\030\255\002 \001(\0132\032.google.protobuf.Timestamp"
    "\0225\n\020first_trade_date\030\267\002 \001(\0132\032.google.pro"
    "tobuf.Timestamp\0224\n\017last_trade_date\030\270\002 \001("
    "\0132\032.google.protobuf.Timestamp\022;\n\026first_1"
    "min_candle_date\030\301\002 \001(\0132\032.google.protobuf"
    ".Timestamp\022;\n\026first_1day_candle_date\030\302\002 "
    "\001(\0132\032.google.protobuf.Timestamp\022\033\n\022short"
    "_enabled_flag\030\221\003 \001(\010\022\025\n\014for_iis_flag\030\222\003 "
    "\001(\010\022\021\n\010otc_flag\030\223\003 \001(\010\022\033\n\022buy_available_"
    "flag\030\224\003 \001(\010\022\034\n\023sell_available_flag\030\225\003 \001("
    "\010\022\037\n\026for_qual_investor_flag\030\226\003 \001(\010\022\025\n\014we"
    "ekend_flag\030\227\003 \001(\010\022\031\n\020blocked_tca_flag\030\230\003"
    " \001(\010\022!\n\030api_trade_available_flag\030\231\003 \001(\010\""
    "R\n\rShareResponse\022A\n\ninstrument\030\001 \001(\0132-.t"
    "inkoff.public_.invest.api.contract.v1.Sh"
    "are\"T\n\016SharesResponse\022B\n\013instruments\030\001 \003"
    "(\0132-.tinkoff.public_.invest.api.contract"
    ".v1.Share\"\245\020\n\004Bond\022\014\n\004figi\030\001 \001(\t\022\016\n\006tick"
    "er\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004isin\030\004 \001"
    "(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030\006 \001(\t\022@\n\005klo"
    "ng\030\007 \001(\01321.tinkoff.public_.invest.api.co"
    "ntract.v1.Quotation\022A\n\006kshort\030\010 \001(\01321.ti"
    "nkoff.public_.invest.api.contract.v1.Quo"
    "tation\022@\n\005dlong\030\t \001(\01321.tinkoff.public_."
    "invest.api.contract.v1.Quotation\022A\n\006dsho"
    "rt\030\n \001(\01321.tinkoff.public_.invest.api.co"
    "ntract.v1.Quotation\022D\n\tdlong_min\030\013 \001(\01321"
    ".tinkoff.public_.invest.api.contract.v1."
    "Quotation\022E\n\ndshort_min\030\014 \001(\01321.tinkoff."
    "public_.invest.api.contract.v1.Quotation"
    "\022\032\n\022short_enabled_flag\030\r \001(\010\022\014\n\004name\030\017 \001"
    "(\t\022\020\n\010exchange\030\020 \001(\t\022 \n\030coupon_quantity_"
    "per_year\030\021 \001(\005\0221\n\rmaturity_date\030\022 \001(\0132\032."
    "google.protobuf.Timestamp\022C\n\007nominal\030\023 \001"
    "(\01322.tinkoff.public_.invest.api.contract"
    ".v1.MoneyValue\022K\n\017initial_nominal\030\024 \001(\0132"
    "2.tinkoff.public_.invest.api.contract.v1"
    ".MoneyValue\0222\n\016state_reg_date\030\025 \001(\0132\032.go"
    "ogle.protobuf.Timestamp\0222\n\016placement_dat"
    "e\030\026 \001(\0132\032.google.protobuf.Timestamp\022K\n\017p"
    "lacement_price\030\027 \001(\01322.tinkoff.public_.i"
    "nvest.api.contract.v1.MoneyValue\022E\n\taci_"
    "value\030\030 \001(\01322.tinkoff.public_.invest.api"
    ".contract.v1.MoneyValue\022\027\n\017country_of_ri"
    "sk\030\031 \001(\t\022\034\n\024country_of_risk_name\030\032 \001(\t\022\016"
    "\n\006sector\030\033 \001(\t\022\022\n\nissue_kind\030\034 \001(\t\022\022\n\nis"
    "sue_size\030\035 \001(\003\022\027\n\017issue_size_plan\030\036 \001(\003\022"
    "U\n\016trading_status\030\037 \001(\0162=.tinkoff.public"
    "_.invest.api.contract.v1.SecurityTrading"
    "Status\022\020\n\010otc_flag\030  \001(\010\022\032\n\022buy_availabl"
    "e_flag\030! \001(\010\022\033\n\023sell_available_flag\030\" \001("
    "\010\022\034\n\024floating_coupon_flag\030# \001(\010\022\026\n\016perpe"
    "tual_flag\030$ \001(\010\022\031\n\021amortization_flag\030% \001"
    "(\010\022N\n\023min_price_increment\030& \001(\01321.tinkof"
    "f.public_.invest.api.contract.v1.Quotati"
    "on\022 \n\030api_trade_available_flag\030\' \001(\010\022\013\n\003"
    "uid\030( \001(\t\022K\n\rreal_exchange\030) \001(\01624.tinko"
    "ff.public_.invest.api.contract.v1.RealEx"
    "change\022\024\n\014position_uid\030* \001(\t\022\021\n\tasset_ui"
    "d\030+ \001(\t\022\024\n\014for_iis_flag\0303 \001(\010\022\036\n\026for_qua"
    "l_investor_flag\0304 \001(\010\022\024\n\014weekend_flag\0305 "
    "\001(\010\022\030\n\020blocked_tca_flag\0306 \001(\010\022\031\n\021subordi"
    "nated_flag\0307 \001(\010\022\026\n\016liquidity_flag\0308 \001(\010"
    "\022:\n\026first_1min_candle_date\030= \001(\0132\032.googl"
    "e.protobuf.Timestamp\022:\n\026first_1day_candl"
    "e_date\030> \001(\0132\032.google.protobuf.Timestamp"
    "\022E\n\nrisk_level\030\? \001(\01621.tinkoff.public_.i"
    "nvest.api.contract.v1.RiskLevel\022@\n\005brand"
    "\030@ \001(\01321.tinkoff.public_.invest.api.cont"
    "ract.v1.BrandData\"\367\n\n\010Currency\022\014\n\004figi\030\001"
    " \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t"
    "\022\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030"
    "\006 \001(\t\022@\n\005klong\030\007 \001(\01321.tinkoff.public_.i"
    "nvest.api.contract.v1.Quotation\022A\n\006kshor"
    "t\030\010 \001(\01321.tinkoff.public_.invest.api.con"
    "tract.v1.Quotation\022@\n\005dlong\030\t \001(\01321.tink"
    "off.public_.invest.api.contract.v1.Quota"
    "tion\022A\n\006dshort\030\n \001(\01321.tinkoff.public_.i"
    "nvest.api.contract.v1.Quotation\022D\n\tdlong"
    "_min\030\013 \001(\01321.tinkoff.public_.invest.api."
    "contract.v1.Quotation\022E\n\ndshort_min\030\014 \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\022\032\n\022short_enabled_flag\030\r \001(\010"
    "\022\014\n\004name\030\017 \001(\t\022\020\n\010exchange\030\020 \001(\t\022C\n\007nomi"
    "nal\030\021 \001(\01322.tinkoff.public_.invest.api.c"
    "ontract.v1.MoneyValue\022\027\n\017country_of_risk"
    "\030\022 \001(\t\022\034\n\024country_of_risk_name\030\023 \001(\t\022U\n\016"
    "trading_status\030\024 \001(\0162=.tinkoff.public_.i"
    "nvest.api.contract.v1.SecurityTradingSta"
    "tus\022\020\n\010otc_flag\030\025 \001(\010\022\032\n\022buy_available_f"
    "lag\030\026 \001(\010\022\033\n\023sell_available_flag\030\027 \001(\010\022\031"
    "\n\021iso_currency_name\030\030 \001(\t\022N\n\023min_price_i"
    "ncrement\030\031 \001(\01321.tinkoff.public_.invest."
    "api.contract.v1.Quotation\022 \n\030api_trade_a"
    "vailable_flag\030\032 \001(\010\022\013\n\003uid\030\033 \001(\t\022K\n\rreal"
    "_exchange\030\034 \001(\01624.tinkoff.public_.invest"
    ".api.contract.v1.RealExchange\022\024\n\014positio"
    "n_uid\030\035 \001(\t\022\024\n\014for_iis_flag\030) \001(\010\022\036\n\026for"
    "_qual_investor_flag\0304 \001(\010\022\024\n\014weekend_fla"
    "g\0305 \001(\010\022\030\n\020blocked_tca_flag\0306 \001(\010\022:\n\026fir"
    "st_1min_candle_date\0308 \001(\0132\032.google.proto"
    "buf.Timestamp\022:\n\026first_1day_candle_date\030"
    "9 \001(\0132\032.google.protobuf.Timestamp\022@\n\005bra"
    "nd\030< \001(\01321.tinkoff.public_.invest.api.co"
    "ntract.v1.BrandData\"\302\014\n\003Etf\022\014\n\004figi\030\001 \001("
    "\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n"
    "\004isin\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030\006 \001"
    "(\t\022@\n\005klong\030\007 \001(\01321.tinkoff.public_.inve"
    "st.api.contract.v1.Quotation\022A\n\006kshort\030\010"
    " \001(\01321.tinkoff.public_.invest.api.contra"
    "ct.v1.Quotation\022@\n\005dlong\030\t \001(\01321.tinkoff"
    ".public_.invest.api.contract.v1.Quotatio"
    "n\022A\n\006dshort\030\n \001(\01321.tinkoff.public_.inve"
    "st.api.contract.v1.Quotation\022D\n\tdlong_mi"
    "n\030\013 \001(\01321.tinkoff.public_.invest.api.con"
    "tract.v1.Quotation\022E\n\ndshort_min\030\014 \001(\01321"
    ".tinkoff.public_.invest.api.contract.v1."
    "Quotation\022\032\n\022short_enabled_flag\030\r \001(\010\022\014\n"
    "\004name\030\017 \001(\t\022\020\n\010exchange\030\020 \001(\t\022K\n\020fixed_c"
    "ommission\030\021 \001(\01321.tinkoff.public_.invest"
    ".api.contract.v1.Quotation\022\022\n\nfocus_type"
    "\030\022 \001(\t\0221\n\rreleased_date\030\023 \001(\0132\032.google.p"
    "rotobuf.Timestamp\022E\n\nnum_shares\030\024 \001(\01321."
    "tinkoff.public_.invest.api.contract.v1.Q"
    "uotation\022\027\n\017country_of_risk\030\025 \001(\t\022\034\n\024cou"
    "ntry_of_risk_name\030\026 \001(\t\022\016\n\006sector\030\027 \001(\t\022"
    "\030\n\020rebalancing_freq\030\030 \001(\t\022U\n\016trading_sta"
    "tus\030\031 \001(\0162=.tinkoff.public_.invest.api.c"
    "ontract.v1.SecurityTradingStatus\022\020\n\010otc_"
    "flag\030\032 \001(\010\022\032\n\022buy_available_flag\030\033 \001(\010\022\033"
    "\n\023sell_available_flag\030\034 \001(\010\022N\n\023min_price"
    "_increment\030\035 \001(\01321.tinkoff.public_.inves"
    "t.api.contract.v1.Quotation\022 \n\030api_trade"
    "_available_flag\030\036 \001(\010\022\013\n\003uid\030\037 \001(\t\022K\n\rre"
    "al_exchange\030  \001(\01624.tinkoff.public_.inve"
    "st.api.contract.v1.RealExchange\022\024\n\014posit"
    "ion_uid\030! \001(\t\022\021\n\tasset_uid\030\" \001(\t\022\024\n\014for_"
    "iis_flag\030) \001(\010\022\036\n\026for_qual_investor_flag"
    "\030* \001(\010\022\024\n\014weekend_flag\030+ \001(\010\022\030\n\020blocked_"
    "tca_flag\030, \001(\010\022\026\n\016liquidity_flag\030- \001(\010\022:"
    "\n\026first_1min_candle_date\0308 \001(\0132\032.google."
    "protobuf.Timestamp\022:\n\026first_1day_candle_"
    "date\0309 \001(\0132\032.google.protobuf.Timestamp\022@"
    "\n\005brand\030< \001(\01321.tinkoff.public_.invest.a"
    "pi.contract.v1.BrandData\"\343\016\n\006Future\022\014\n\004f"
    "igi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030"
    "\003 \001(\t\022\013\n\003lot\030\004 \001(\005\022\020\n\010currency\030\005 \001(\t\022@\n\005"
    "klong\030\006 \001(\01321.tinkoff.public_.invest.api"
    ".contract.v1.Quotation\022A\n\006kshort\030\007 \001(\01321"
    ".tinkoff.public_.invest.api.contract.v1."
    "Quotation\022@\n\005dlong\030\010 \001(\01321.tinkoff.publi"
    "c_.invest.api.contract.v1.Quotation\022A\n\006d"
    "short\030\t \001(\01321.tinkoff.public_.invest.api"
    ".contract.v1.Quotation\022D\n\tdlong_min\030\n \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\022E\n\ndshort_min\030\013 \001(\01321.tinko"
    "ff.public_.invest.api.contract.v1.Quotat"
    "ion\022\032\n\022short_enabled_flag\030\014 \001(\010\022\014\n\004name\030"
    "\r \001(\t\022\020\n\010exchange\030\016 \001(\t\0224\n\020first_trade_d"
    "ate\030\017 \001(\0132\032.google.protobuf.Timestamp\0223\n"
    "\017last_trade_date\030\020 \001(\0132\032.google.protobuf"
    ".Timestamp\022\024\n\014futures_type\030\021 \001(\t\022\022\n\nasse"
    "t_type\030\022 \001(\t\022\023\n\013basic_asset\030\023 \001(\t\022K\n\020bas"
    "ic_asset_size\030\024 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\022\027\n\017countr"
    "y_of_risk\030\025 \001(\t\022\034\n\024country_of_risk_name\030"
    "\026 \001(\t\022\016\n\006sector\030\027 \001(\t\0223\n\017expiration_date"
    "\030\030 \001(\0132\032.google.protobuf.Timestamp\022U\n\016tr"
    "ading_status\030\031 \001(\0162=.tinkoff.public_.inv"
    "est.api.contract.v1.SecurityTradingStatu"
    "s\022\020\n\010otc_flag\030\032 \001(\010\022\032\n\022buy_available_fla"
    "g\030\033 \001(\010\022\033\n\023sell_available_flag\030\034 \001(\010\022N\n\023"
    "min_price_increment\030\035 \001(\01321.tinkoff.publ"
    "ic_.invest.api.contract.v1.Quotation\022 \n\030"
    "api_trade_available_flag\030\036 \001(\010\022\013\n\003uid\030\037 "
    "\001(\t\022K\n\rreal_exchange\030  \001(\01624.tinkoff.pub"
    "lic_.invest.api.contract.v1.RealExchange"
    "\022\024\n\014position_uid\030! \001(\t\022 \n\030basic_asset_po"
    "sition_uid\030\" \001(\t\022\024\n\014for_iis_flag\030) \001(\010\022\036"
    "\n\026for_qual_investor_flag\030* \001(\010\022\024\n\014weeken"
    "d_flag\030+ \001(\010\022\030\n\020blocked_tca_flag\030, \001(\010\022:"
    "\n\026first_1min_candle_date\0308 \001(\0132\032.google."
    "protobuf.Timestamp\022:\n\026first_1day_candle_"
    "date\0309 \001(\0132\032.google.protobuf.Timestamp\022Q"
    "\n\025initial_margin_on_buy\030= \001(\01322.tinkoff."
    "public_.invest.api.contract.v1.MoneyValu"
    "e\022R\n\026initial_margin_on_sell\030> \001(\01322.tink"
    "off.public_.invest.api.contract.v1.Money"
    "Value\022U\n\032min_price_increment_amount\030\? \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\022@\n\005brand\030@ \001(\01321.tinkoff.pu"
    "blic_.invest.api.contract.v1.BrandData\"\316"
    "\014\n\005Share\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022"
    "\n\nclass_code\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030"
    "\005 \001(\005\022\020\n\010currency\030\006 \001(\t\022@\n\005klong\030\007 \001(\01321"
    ".tinkoff.public_.invest.api.contract.v1."
    "Quotation\022A\n\006kshort\030\010 \001(\01321.tinkoff.publ"
    "ic_.invest.api.contract.v1.Quotation\022@\n\005"
    "dlong\030\t \001(\01321.tinkoff.public_.invest.api"
    ".contract.v1.Quotation\022A\n\006dshort\030\n \001(\01321"
    ".tinkoff.public_.invest.api.contract.v1."
    "Quotation\022D\n\tdlong_min\030\013 \001(\01321.tinkoff.p"
    "ublic_.invest.api.contract.v1.Quotation\022"
    "E\n\ndshort_min\030\014 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\022\032\n\022short_"
    "enabled_flag\030\r \001(\010\022\014\n\004name\030\017 \001(\t\022\020\n\010exch"
    "ange\030\020 \001(\t\022,\n\010ipo_date\030\021 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022\022\n\nissue_size\030\022 \001(\003\022\027\n\017"
    "country_of_risk\030\023 \001(\t\022\034\n\024country_of_risk"
    "_name\030\024 \001(\t\022\016\n\006sector\030\025 \001(\t\022\027\n\017issue_siz"
    "e_plan\030\026 \001(\003\022C\n\007nominal\030\027 \001(\01322.tinkoff."
    "public_.invest.api.contract.v1.MoneyValu"
    "e\022U\n\016trading_status\030\031 \001(\0162=.tinkoff.publ"
    "ic_.invest.api.contract.v1.SecurityTradi"
    "ngStatus\022\020\n\010otc_flag\030\032 \001(\010\022\032\n\022buy_availa"
    "ble_flag\030\033 \001(\010\022\033\n\023sell_available_flag\030\034 "
    "\001(\010\022\026\n\016div_yield_flag\030\035 \001(\010\022E\n\nshare_typ"
    "e\030\036 \001(\01621.tinkoff.public_.invest.api.con"
    "tract.v1.ShareType\022N\n\023min_price_incremen"
    "t\030\037 \001(\01321.tinkoff.public_.invest.api.con"
    "tract.v1.Quotation\022 \n\030api_trade_availabl"
    "e_flag\030  \001(\010\022\013\n\003uid\030! \001(\t\022K\n\rreal_exchan"
    "ge\030\" \001(\01624.tinkoff.public_.invest.api.co"
    "ntract.v1.RealExchange\022\024\n\014position_uid\030#"
    " \001(\t\022\021\n\tasset_uid\030$ \001(\t\022\024\n\014for_iis_flag\030"
    ". \001(\010\022\036\n\026for_qual_investor_flag\030/ \001(\010\022\024\n"
    "\014weekend_flag\0300 \001(\010\022\030\n\020blocked_tca_flag\030"
    "1 \001(\010\022\026\n\016liquidity_flag\0302 \001(\010\022:\n\026first_1"
    "min_candle_date\0308 \001(\0132\032.google.protobuf."
    "Timestamp\022:\n\026first_1day_candle_date\0309 \001("
    "\0132\032.google.protobuf.Timestamp\022@\n\005brand\030<"
    " \001(\01321.tinkoff.public_.invest.api.contra"
    "ct.v1.BrandData\"\251\001\n\032GetAccruedInterestsR"
    "equest\022\020\n\004figi\030\001 \001(\tB\002\030\001\022.\n\004from\030\002 \001(\0132\032"
    ".google.protobuf.TimestampB\004\342A\001\002\022,\n\002to\030\003"
    " \001(\0132\032.google.protobuf.TimestampB\004\342A\001\002\022\033"
    "\n\rinstrument_id\030\004 \001(\tB\004\342A\001\002\"q\n\033GetAccrue"
    "dInterestsResponse\022R\n\021accrued_interests\030"
    "\001 \003(\01327.tinkoff.public_.invest.api.contr"
    "act.v1.AccruedInterest\"\213\002\n\017AccruedIntere"
    "st\022(\n\004date\030\001 \001(\0132\032.google.protobuf.Times"
    "tamp\022@\n\005value\030\002 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\022H\n\rvalue_"
    "percent\030\003 \001(\01321.tinkoff.public_.invest.a"
    "pi.contract.v1.Quotation\022B\n\007nominal\030\004 \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\"H\n\027GetFuturesMarginRequest\022"
    "\020\n\004figi\030\001 \001(\tB\002\030\001\022\033\n\rinstrument_id\030\004 \001(\t"
    "B\004\342A\001\002\"\350\002\n\030GetFuturesMarginResponse\022Q\n\025i"
    "nitial_margin_on_buy\030\001 \001(\01322.tinkoff.pub"
    "lic_.invest.api.contract.v1.MoneyValue\022R"
    "\n\026initial_margin_on_sell\030\002 \001(\01322.tinkoff"
    ".public_.invest.api.contract.v1.MoneyVal"
    "ue\022N\n\023min_price_increment\030\003 \001(\01321.tinkof"
    "f.public_.invest.api.contract.v1.Quotati"
    "on\022U\n\032min_price_increment_amount\030\004 \001(\01321"
    ".tinkoff.public_.invest.api.contract.v1."
    "Quotation\"\\\n\022InstrumentResponse\022F\n\ninstr"
    "ument\030\001 \001(\01322.tinkoff.public_.invest.api"
    ".contract.v1.Instrument\"\226\013\n\nInstrument\022\014"
    "\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_co"
    "de\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010c"
    "urrency\030\006 \001(\t\022@\n\005klong\030\007 \001(\01321.tinkoff.p"
    "ublic_.invest.api.contract.v1.Quotation\022"
    "A\n\006kshort\030\010 \001(\01321.tinkoff.public_.invest"
    ".api.contract.v1.Quotation\022@\n\005dlong\030\t \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\022A\n\006dshort\030\n \001(\01321.tinkoff.p"
    "ublic_.invest.api.contract.v1.Quotation\022"
    "D\n\tdlong_min\030\013 \001(\01321.tinkoff.public_.inv"
    "est.api.contract.v1.Quotation\022E\n\ndshort_"
    "min\030\014 \001(\01321.tinkoff.public_.invest.api.c"
    "ontract.v1.Quotation\022\032\n\022short_enabled_fl"
    "ag\030\r \001(\010\022\014\n\004name\030\016 \001(\t\022\020\n\010exchange\030\017 \001(\t"
    "\022\027\n\017country_of_risk\030\020 \001(\t\022\034\n\024country_of_"
    "risk_name\030\021 \001(\t\022\027\n\017instrument_type\030\022 \001(\t"
    "\022U\n\016trading_status\030\023 \001(\0162=.tinkoff.publi"
    "c_.invest.api.contract.v1.SecurityTradin"
    "gStatus\022\020\n\010otc_flag\030\024 \001(\010\022\032\n\022buy_availab"
    "le_flag\030\025 \001(\010\022\033\n\023sell_available_flag\030\026 \001"
    "(\010\022N\n\023min_price_increment\030\027 \001(\01321.tinkof"
    "f.public_.invest.api.contract.v1.Quotati"
    "on\022 \n\030api_trade_available_flag\030\030 \001(\010\022\013\n\003"
    "uid\030\031 \001(\t\022K\n\rreal_exchange\030\032 \001(\01624.tinko"
    "ff.public_.invest.api.contract.v1.RealEx"
    "change\022\024\n\014position_uid\030\033 \001(\t\022\021\n\tasset_ui"
    "d\030\034 \001(\t\022\024\n\014for_iis_flag\030$ \001(\010\022\036\n\026for_qua"
    "l_investor_flag\030% \001(\010\022\024\n\014weekend_flag\030& "
    "\001(\010\022\030\n\020blocked_tca_flag\030\' \001(\010\022O\n\017instrum"
    "ent_kind\030( \001(\01626.tinkoff.public_.invest."
    "api.contract.v1.InstrumentType\022:\n\026first_"
    "1min_candle_date\0308 \001(\0132\032.google.protobuf"
    ".Timestamp\022:\n\026first_1day_candle_date\0309 \001"
    "(\0132\032.google.protobuf.Timestamp\022@\n\005brand\030"
    "< \001(\01321.tinkoff.public_.invest.api.contr"
    "act.v1.BrandData\"\260\001\n\023GetDividendsRequest"
    "\022\020\n\004figi\030\001 \001(\tB\002\030\001\022-\n\004from\030\002 \001(\0132\032.googl"
    "e.protobuf.TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032."
    "google.protobuf.TimestampH\001\210\001\001\022\033\n\rinstru"
    "ment_id\030\004 \001(\tB\004\342A\001\002B\007\n\005_fromB\005\n\003_to\"[\n\024G"
    "etDividendsResponse\022C\n\tdividends\030\001 \003(\01320"
    ".tinkoff.public_.invest.api.contract.v1."
    "Dividend\"\211\004\n\010Dividend\022H\n\014dividend_net\030\001 "
    "\001(\01322.tinkoff.public_.invest.api.contrac"
    "t.v1.MoneyValue\0220\n\014payment_date\030\002 \001(\0132\032."
    "google.protobuf.Timestamp\0221\n\rdeclared_da"
    "te\030\003 \001(\0132\032.google.protobuf.Timestamp\0221\n\r"
    "last_buy_date\030\004 \001(\0132\032.google.protobuf.Ti"
    "mestamp\022\025\n\rdividend_type\030\005 \001(\t\022/\n\013record"
    "_date\030\006 \001(\0132\032.google.protobuf.Timestamp\022"
    "\022\n\nregularity\030\007 \001(\t\022G\n\013close_price\030\010 \001(\013"
    "22.tinkoff.public_.invest.api.contract.v"
    "1.MoneyValue\022F\n\013yield_value\030\t \001(\01321.tink"
    "off.public_.invest.api.contract.v1.Quota"
    "tion\022.\n\ncreated_at\030\n \001(\0132\032.google.protob"
    "uf.Timestamp\" \n\014AssetRequest\022\020\n\002id\030\001 \001(\t"
    "B\004\342A\001\002\"Q\n\rAssetResponse\022@\n\005asset\030\001 \001(\01321"
    ".tinkoff.public_.invest.api.contract.v1."
    "AssetFull\"y\n\rAssetsRequest\022T\n\017instrument"
    "_type\030\001 \001(\01626.tinkoff.public_.invest.api"
    ".contract.v1.InstrumentTypeH\000\210\001\001B\022\n\020_ins"
    "trument_type\"O\n\016AssetsResponse\022=\n\006assets"
    "\030\001 \003(\0132-.tinkoff.public_.invest.api.cont"
    "ract.v1.Asset\"\235\005\n\tAssetFull\022\013\n\003uid\030\001 \001(\t"
    "\022\?\n\004type\030\002 \001(\01621.tinkoff.public_.invest."
    "api.contract.v1.AssetType\022\014\n\004name\030\003 \001(\t\022"
    "\022\n\nname_brief\030\004 \001(\t\022\023\n\013description\030\005 \001(\t"
    "\022.\n\ndeleted_at\030\006 \001(\0132\032.google.protobuf.T"
    "imestamp\022\026\n\016required_tests\030\007 \003(\t\022I\n\010curr"
    "ency\030\010 \001(\01325.tinkoff.public_.invest.api."
    "contract.v1.AssetCurrencyH\000\022I\n\010security\030"
    "\t \001(\01325.tinkoff.public_.invest.api.contr"
    "act.v1.AssetSecurityH\000\022\024\n\014gos_reg_code\030\n"
    " \001(\t\022\013\n\003cfi\030\013 \001(\t\022\020\n\010code_nsd\030\014 \001(\t\022\016\n\006s"
    "tatus\030\r \001(\t\022<\n\005brand\030\016 \001(\0132-.tinkoff.pub"
    "lic_.invest.api.contract.v1.Brand\022.\n\nupd"
    "ated_at\030\017 \001(\0132\032.google.protobuf.Timestam"
    "p\022\017\n\007br_code\030\020 \001(\t\022\024\n\014br_code_name\030\021 \001(\t"
    "\022L\n\013instruments\030\022 \003(\01327.tinkoff.public_."
    "invest.api.contract.v1.AssetInstrumentB\005"
    "\n\003ext\"\261\001\n\005Asset\022\013\n\003uid\030\001 \001(\t\022\?\n\004type\030\002 \001"
    "(\01621.tinkoff.public_.invest.api.contract"
    ".v1.AssetType\022\014\n\004name\030\003 \001(\t\022L\n\013instrumen"
    "ts\030\004 \003(\01327.tinkoff.public_.invest.api.co"
    "ntract.v1.AssetInstrument\"&\n\rAssetCurren"
    "cy\022\025\n\rbase_currency\030\001 \001(\t\"\374\003\n\rAssetSecur"
    "ity\022\014\n\004isin\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022O\n\017instr"
    "ument_kind\030\n \001(\01626.tinkoff.public_.inves"
    "t.api.contract.v1.InstrumentType\022C\n\005shar"
    "e\030\003 \001(\01322.tinkoff.public_.invest.api.con"
    "tract.v1.AssetShareH\000\022A\n\004bond\030\004 \001(\01321.ti"
    "nkoff.public_.invest.api.contract.v1.Ass"
    "etBondH\000\022L\n\002sp\030\005 \001(\0132>.tinkoff.public_.i"
    "nvest.api.contract.v1.AssetStructuredPro"
    "ductH\000\022\?\n\003etf\030\006 \001(\01320.tinkoff.public_.in"
    "vest.api.contract.v1.AssetEtfH\000\022`\n\024clear"
    "ing_certificate\030\007 \001(\0132@.tinkoff.public_."
    "invest.api.contract.v1.AssetClearingCert"
    "ificateH\000B\005\n\003ext\"\333\005\n\nAssetShare\022\?\n\004type\030"
    "\001 \001(\01621.tinkoff.public_.invest.api.contr"
    "act.v1.ShareType\022E\n\nissue_size\030\002 \001(\01321.t"
    "inkoff.public_.invest.api.contract.v1.Qu"
    "otation\022B\n\007nominal\030\003 \001(\01321.tinkoff.publi"
    "c_.invest.api.contract.v1.Quotation\022\030\n\020n"
    "ominal_currency\030\004 \001(\t\022\025\n\rprimary_index\030\005"
    " \001(\t\022H\n\rdividend_rate\030\006 \001(\01321.tinkoff.pu"
    "blic_.invest.api.contract.v1.Quotation\022\034"
    "\n\024preferred_share_type\030\007 \001(\t\022,\n\010ipo_date"
    "\030\010 \001(\0132\032.google.protobuf.Timestamp\0221\n\rre"
    "gistry_date\030\t \001(\0132\032.google.protobuf.Time"
    "stamp\022\026\n\016div_yield_flag\030\n \001(\010\022\022\n\nissue_k"
    "ind\030\013 \001(\t\0222\n\016placement_date\030\014 \001(\0132\032.goog"
    "le.protobuf.Timestamp\022\023\n\013repres_isin\030\r \001"
    "(\t\022J\n\017issue_size_plan\030\016 \001(\01321.tinkoff.pu"
    "blic_.invest.api.contract.v1.Quotation\022F"
    "\n\013total_float\030\017 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\"\345\006\n\tAsset"
    "Bond\022J\n\017current_nominal\030\001 \001(\01321.tinkoff."
    "public_.invest.api.contract.v1.Quotation"
    "\022\023\n\013borrow_name\030\002 \001(\t\022E\n\nissue_size\030\003 \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\022B\n\007nominal\030\004 \001(\01321.tinkoff."
    "public_.invest.api.contract.v1.Quotation"
    "\022\030\n\020nominal_currency\030\005 \001(\t\022\022\n\nissue_kind"
    "\030\006 \001(\t\022\025\n\rinterest_kind\030\007 \001(\t\022 \n\030coupon_"
    "quantity_per_year\030\010 \001(\005\022\034\n\024indexed_nomin"
    "al_flag\030\t \001(\010\022\031\n\021subordinated_flag\030\n \001(\010"
    "\022\027\n\017collateral_flag\030\013 \001(\010\022\025\n\rtax_free_fl"
    "ag\030\014 \001(\010\022\031\n\021amortization_flag\030\r \001(\010\022\034\n\024f"
    "loating_coupon_flag\030\016 \001(\010\022\026\n\016perpetual_f"
    "lag\030\017 \001(\010\0221\n\rmaturity_date\030\020 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022\030\n\020return_condition"
    "\030\021 \001(\t\0222\n\016state_reg_date\030\022 \001(\0132\032.google."
    "protobuf.Timestamp\0222\n\016placement_date\030\023 \001"
    "(\0132\032.google.protobuf.Timestamp\022J\n\017placem"
    "ent_price\030\024 \001(\01321.tinkoff.public_.invest"
    ".api.contract.v1.Quotation\022J\n\017issue_size"
    "_plan\030\025 \001(\01321.tinkoff.public_.invest.api"
    ".contract.v1.Quotation\"\246\005\n\026AssetStructur"
    "edProduct\022\023\n\013borrow_name\030\001 \001(\t\022B\n\007nomina"
    "l\030\002 \001(\01321.tinkoff.public_.invest.api.con"
    "tract.v1.Quotation\022\030\n\020nominal_currency\030\003"
    " \001(\t\022K\n\004type\030\004 \001(\0162=.tinkoff.public_.inv"
    "est.api.contract.v1.StructuredProductTyp"
    "e\022\027\n\017logic_portfolio\030\005 \001(\t\022E\n\nasset_type"
    "\030\006 \001(\01621.tinkoff.public_.invest.api.cont"
    "ract.v1.AssetType\022\023\n\013basic_asset\030\007 \001(\t\022I"
    "\n\016safety_barrier\030\010 \001(\01321.tinkoff.public_"
    ".invest.api.contract.v1.Quotation\0221\n\rmat"
    "urity_date\030\t \001(\0132\032.google.protobuf.Times"
    "tamp\022J\n\017issue_size_plan\030\n \001(\01321.tinkoff."
    "public_.invest.api.contract.v1.Quotation"
    "\022E\n\nissue_size\030\013 \001(\01321.tinkoff.public_.i"
    "nvest.api.contract.v1.Quotation\0222\n\016place"
    "ment_date\030\014 \001(\0132\032.google.protobuf.Timest"
    "amp\022\022\n\nissue_kind\030\r \001(\t\"\343\n\n\010AssetEtf\022H\n\r"
    "total_expense\030\001 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\022F\n\013hurdle"
    "_rate\030\002 \001(\01321.tinkoff.public_.invest.api"
    ".contract.v1.Quotation\022J\n\017performance_fe"
    "e\030\003 \001(\01321.tinkoff.public_.invest.api.con"
    "tract.v1.Quotation\022K\n\020fixed_commission\030\004"
    " \001(\01321.tinkoff.public_.invest.api.contra"
    "ct.v1.Quotation\022\024\n\014payment_type\030\005 \001(\t\022\026\n"
    "\016watermark_flag\030\006 \001(\010\022F\n\013buy_premium\030\007 \001"
    "(\01321.tinkoff.public_.invest.api.contract"
    ".v1.Quotation\022H\n\rsell_discount\030\010 \001(\01321.t"
    "inkoff.public_.invest.api.contract.v1.Qu"
    "otation\022\030\n\020rebalancing_flag\030\t \001(\010\022\030\n\020reb"
    "alancing_freq\030\n \001(\t\022\027\n\017management_type\030\013"
    " \001(\t\022\025\n\rprimary_index\030\014 \001(\t\022\022\n\nfocus_typ"
    "e\030\r \001(\t\022\026\n\016leveraged_flag\030\016 \001(\010\022D\n\tnum_s"
    "hare\030\017 \001(\01321.tinkoff.public_.invest.api."
    "contract.v1.Quotation\022\022\n\nucits_flag\030\020 \001("
    "\010\0221\n\rreleased_date\030\021 \001(\0132\032.google.protob"
    "uf.Timestamp\022\023\n\013description\030\022 \001(\t\022!\n\031pri"
    "mary_index_description\030\023 \001(\t\022\035\n\025primary_"
    "index_company\030\024 \001(\t\022P\n\025index_recovery_pe"
    "riod\030\025 \001(\01321.tinkoff.public_.invest.api."
    "contract.v1.Quotation\022\021\n\tinav_code\030\026 \001(\t"
    "\022\026\n\016div_yield_flag\030\027 \001(\010\022M\n\022expense_comm"
    "ission\030\030 \001(\01321.tinkoff.public_.invest.ap"
    "i.contract.v1.Quotation\022W\n\034primary_index"
    "_tracking_error\030\031 \001(\01321.tinkoff.public_."
    "invest.api.contract.v1.Quotation\022\030\n\020reba"
    "lancing_plan\030\032 \001(\t\022\020\n\010tax_rate\030\033 \001(\t\0225\n\021"
    "rebalancing_dates\030\034 \003(\0132\032.google.protobu"
    "f.Timestamp\022\022\n\nissue_kind\030\035 \001(\t\022B\n\007nomin"
    "al\030\036 \001(\01321.tinkoff.public_.invest.api.co"
    "ntract.v1.Quotation\022\030\n\020nominal_currency\030"
    "\037 \001(\t\"x\n\030AssetClearingCertificate\022B\n\007nom"
    "inal\030\001 \001(\01321.tinkoff.public_.invest.api."
    "contract.v1.Quotation\022\030\n\020nominal_currenc"
    "y\030\002 \001(\t\"\235\001\n\005Brand\022\013\n\003uid\030\001 \001(\t\022\014\n\004name\030\002"
    " \001(\t\022\023\n\013description\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022"
    "\017\n\007company\030\005 \001(\t\022\016\n\006sector\030\006 \001(\t\022\027\n\017coun"
    "try_of_risk\030\007 \001(\t\022\034\n\024country_of_risk_nam"
    "e\030\010 \001(\t\"\227\002\n\017AssetInstrument\022\013\n\003uid\030\001 \001(\t"
    "\022\014\n\004figi\030\002 \001(\t\022\027\n\017instrument_type\030\003 \001(\t\022"
    "\016\n\006ticker\030\004 \001(\t\022\022\n\nclass_code\030\005 \001(\t\022E\n\005l"
    "inks\030\006 \003(\01326.tinkoff.public_.invest.api."
    "contract.v1.InstrumentLink\022O\n\017instrument"
    "_kind\030\n \001(\01626.tinkoff.public_.invest.api"
    ".contract.v1.InstrumentType\022\024\n\014position_"
    "uid\030\013 \001(\t\"6\n\016InstrumentLink\022\014\n\004type\030\001 \001("
    "\t\022\026\n\016instrument_uid\030\002 \001(\t\"\025\n\023GetFavorite"
    "sRequest\"p\n\024GetFavoritesResponse\022X\n\024favo"
    "rite_instruments\030\001 \003(\0132:.tinkoff.public_"
    ".invest.api.contract.v1.FavoriteInstrume"
    "nt\"\215\002\n\022FavoriteInstrument\022\014\n\004figi\030\001 \001(\t\022"
    "\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004i"
    "sin\030\004 \001(\t\022\027\n\017instrument_type\030\013 \001(\t\022\014\n\004na"
    "me\030\014 \001(\t\022\013\n\003uid\030\r \001(\t\022\020\n\010otc_flag\030\020 \001(\010\022"
    " \n\030api_trade_available_flag\030\021 \001(\010\022O\n\017ins"
    "trument_kind\030\022 \001(\01626.tinkoff.public_.inv"
    "est.api.contract.v1.InstrumentType\"\325\001\n\024E"
    "ditFavoritesRequest\022a\n\013instruments\030\001 \003(\013"
    "2F.tinkoff.public_.invest.api.contract.v"
    "1.EditFavoritesRequestInstrumentB\004\342A\001\002\022Z"
    "\n\013action_type\030\006 \001(\0162\?.tinkoff.public_.in"
    "vest.api.contract.v1.EditFavoritesAction"
    "TypeB\004\342A\001\002\"]\n\036EditFavoritesRequestInstru"
    "ment\022\025\n\004figi\030\001 \001(\tB\002\030\001H\000\210\001\001\022\033\n\rinstrumen"
    "t_id\030\002 \001(\tB\004\342A\001\002B\007\n\005_figi\"q\n\025EditFavorit"
    "esResponse\022X\n\024favorite_instruments\030\001 \003(\013"
    "2:.tinkoff.public_.invest.api.contract.v"
    "1.FavoriteInstrument\"\025\n\023GetCountriesRequ"
    "est\"b\n\024GetCountriesResponse\022J\n\tcountries"
    "\030\001 \003(\01327.tinkoff.public_.invest.api.cont"
    "ract.v1.CountryResponse\"\024\n\022IndicativesRe"
    "quest\"f\n\023IndicativesResponse\022O\n\013instrume"
    "nts\030\001 \003(\0132:.tinkoff.public_.invest.api.c"
    "ontract.v1.IndicativeResponse\"\221\002\n\022Indica"
    "tiveResponse\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001"
    "(\t\022\022\n\nclass_code\030\003 \001(\t\022\020\n\010currency\030\004 \001(\t"
    "\022O\n\017instrument_kind\030\n \001(\01626.tinkoff.publ"
    "ic_.invest.api.contract.v1.InstrumentTyp"
    "e\022\014\n\004name\030\014 \001(\t\022\020\n\010exchange\030\r \001(\t\022\013\n\003uid"
    "\030\016 \001(\t\022\033\n\022buy_available_flag\030\224\003 \001(\010\022\034\n\023s"
    "ell_available_flag\030\225\003 \001(\010\"Y\n\017CountryResp"
    "onse\022\020\n\010alfa_two\030\001 \001(\t\022\022\n\nalfa_three\030\002 \001"
    "(\t\022\014\n\004name\030\003 \001(\t\022\022\n\nname_brief\030\004 \001(\t\"\332\001\n"
    "\025FindInstrumentRequest\022\023\n\005query\030\001 \001(\tB\004\342"
    "A\001\002\022T\n\017instrument_kind\030\002 \001(\01626.tinkoff.p"
    "ublic_.invest.api.contract.v1.Instrument"
    "TypeH\000\210\001\001\022%\n\030api_trade_available_flag\030\003 "
    "\001(\010H\001\210\001\001B\022\n\020_instrument_kindB\033\n\031_api_tra"
    "de_available_flag\"f\n\026FindInstrumentRespo"
    "nse\022L\n\013instruments\030\001 \003(\01327.tinkoff.publi"
    "c_.invest.api.contract.v1.InstrumentShor"
    "t\"\354\003\n\017InstrumentShort\022\014\n\004isin\030\001 \001(\t\022\014\n\004f"
    "igi\030\002 \001(\t\022\016\n\006ticker\030\003 \001(\t\022\022\n\nclass_code\030"
    "\004 \001(\t\022\027\n\017instrument_type\030\005 \001(\t\022\014\n\004name\030\006"
    " \001(\t\022\013\n\003uid\030\007 \001(\t\022\024\n\014position_uid\030\010 \001(\t\022"
    "O\n\017instrument_kind\030\n \001(\01626.tinkoff.publi"
    "c_.invest.api.contract.v1.InstrumentType"
    "\022 \n\030api_trade_available_flag\030\013 \001(\010\022\024\n\014fo"
    "r_iis_flag\030\014 \001(\010\022:\n\026first_1min_candle_da"
    "te\030\032 \001(\0132\032.google.protobuf.Timestamp\022:\n\026"
    "first_1day_candle_date\030\033 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022\036\n\026for_qual_investor_fl"
    "ag\030\034 \001(\010\022\024\n\014weekend_flag\030\035 \001(\010\022\030\n\020blocke"
    "d_tca_flag\030\036 \001(\010\"P\n\020GetBrandsRequest\022<\n\006"
    "paging\030\001 \001(\0132,.tinkoff.public_.invest.ap"
    "i.contract.v1.Page\"#\n\017GetBrandRequest\022\020\n"
    "\002id\030\001 \001(\tB\004\342A\001\002\"\230\001\n\021GetBrandsResponse\022=\n"
    "\006brands\030\001 \003(\0132-.tinkoff.public_.invest.a"
    "pi.contract.v1.Brand\022D\n\006paging\030\002 \001(\01324.t"
    "inkoff.public_.invest.api.contract.v1.Pa"
    "geResponse\"3\n\033GetAssetFundamentalsReques"
    "t\022\024\n\006assets\030\001 \003(\tB\004\342A\001\002\"\376\016\n\034GetAssetFund"
    "amentalsResponse\022l\n\014fundamentals\030\001 \003(\0132V"
    ".tinkoff.public_.invest.api.contract.v1."
    "GetAssetFundamentalsResponse.StatisticRe"
    "sponse\032\357\r\n\021StatisticResponse\022\021\n\tasset_ui"
    "d\030\001 \001(\t\022\020\n\010currency\030\002 \001(\t\022\035\n\025market_capi"
    "talization\030\003 \001(\001\022 \n\030high_price_last_52_w"
    "eeks\030\004 \001(\001\022\037\n\027low_price_last_52_weeks\030\005 "
    "\001(\001\022)\n!average_daily_volume_last_10_days"
    "\030\006 \001(\001\022)\n!average_daily_volume_last_4_we"
    "eks\030\007 \001(\001\022\014\n\004beta\030\010 \001(\001\022\022\n\nfree_float\030\t "
    "\001(\001\022%\n\035forward_annual_dividend_yield\030\n \001"
    "(\001\022\032\n\022shares_outstanding\030\013 \001(\001\022\023\n\013revenu"
    "e_ttm\030\014 \001(\001\022\022\n\nebitda_ttm\030\r \001(\001\022\026\n\016net_i"
    "ncome_ttm\030\016 \001(\001\022\017\n\007eps_ttm\030\017 \001(\001\022\027\n\017dilu"
    "ted_eps_ttm\030\020 \001(\001\022\032\n\022free_cash_flow_ttm\030"
    "\021 \001(\001\022,\n$five_year_annual_revenue_growth"
    "_rate\030\022 \001(\001\022-\n%three_year_annual_revenue"
    "_growth_rate\030\023 \001(\001\022\024\n\014pe_ratio_ttm\030\024 \001(\001"
    "\022\032\n\022price_to_sales_ttm\030\025 \001(\001\022\031\n\021price_to"
    "_book_ttm\030\026 \001(\001\022#\n\033price_to_free_cash_fl"
    "ow_ttm\030\027 \001(\001\022\"\n\032total_enterprise_value_m"
    "rq\030\030 \001(\001\022\030\n\020ev_to_ebitda_mrq\030\031 \001(\001\022\026\n\016ne"
    "t_margin_mrq\030\032 \001(\001\022\037\n\027net_interest_margi"
    "n_mrq\030\033 \001(\001\022\013\n\003roe\030\034 \001(\001\022\013\n\003roa\030\035 \001(\001\022\014\n"
    "\004roic\030\036 \001(\001\022\026\n\016total_debt_mrq\030\037 \001(\001\022 \n\030t"
    "otal_debt_to_equity_mrq\030  \001(\001\022 \n\030total_d"
    "ebt_to_ebitda_mrq\030! \001(\001\022\037\n\027free_cash_flo"
    "w_to_price\030\" \001(\001\022\032\n\022net_debt_to_ebitda\030#"
    " \001(\001\022\031\n\021current_ratio_mrq\030$ \001(\001\022&\n\036fixed"
    "_charge_coverage_ratio_fy\030% \001(\001\022 \n\030divid"
    "end_yield_daily_ttm\030& \001(\001\022\031\n\021dividend_ra"
    "te_ttm\030\' \001(\001\022\033\n\023dividends_per_share\030( \001("
    "\001\022)\n!five_years_average_dividend_yield\030)"
    " \001(\001\022-\n%five_year_annual_dividend_growth"
    "_rate\030* \001(\001\022 \n\030dividend_payout_ratio_fy\030"
    "+ \001(\001\022\024\n\014buy_back_ttm\030, \001(\001\022+\n#one_year_"
    "annual_revenue_growth_rate\030- \001(\001\022\037\n\027domi"
    "cile_indicator_code\030. \001(\t\022!\n\031adr_to_comm"
    "on_share_ratio\030/ \001(\001\022\033\n\023number_of_employ"
    "ees\0300 \001(\001\0224\n\020ex_dividend_date\0301 \001(\0132\032.go"
    "ogle.protobuf.Timestamp\022<\n\030fiscal_period"
    "_start_date\0302 \001(\0132\032.google.protobuf.Time"
    "stamp\022:\n\026fiscal_period_end_date\0303 \001(\0132\032."
    "google.protobuf.Timestamp\022!\n\031revenue_cha"
    "nge_five_years\0305 \001(\001\022\035\n\025eps_change_five_"
    "years\0306 \001(\001\022 \n\030ebitda_change_five_years\030"
    "7 \001(\001\022$\n\034total_debt_change_five_years\0308 "
    "\001(\001\022\023\n\013ev_to_sales\0309 \001(\001\"\241\001\n\026GetAssetRep"
    "ortsRequest\022\033\n\rinstrument_id\030\001 \001(\tB\004\342A\001\002"
    "\022-\n\004from\030\002 \001(\0132\032.google.protobuf.Timesta"
    "mpH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.google.protobuf.Ti"
    "mestampH\001\210\001\001B\007\n\005_fromB\005\n\003_to\"\251\004\n\027GetAsse"
    "tReportsResponse\022d\n\006events\030\001 \003(\0132T.tinko"
    "ff.public_.invest.api.contract.v1.GetAss"
    "etReportsResponse.GetAssetReportsEvent\032\243"
    "\002\n\024GetAssetReportsEvent\022\025\n\rinstrument_id"
    "\030\001 \001(\t\022/\n\013report_date\030\002 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\023\n\013period_year\030\003 \001(\005\022\022\n\n"
    "period_num\030\004 \001(\005\022j\n\013period_type\030\005 \001(\0162U."
    "tinkoff.public_.invest.api.contract.v1.G"
    "etAssetReportsResponse.AssetReportPeriod"
    "Type\022.\n\ncreated_at\030\006 \001(\0132\032.google.protob"
    "uf.Timestamp\"\201\001\n\025AssetReportPeriodType\022\033"
    "\n\027PERIOD_TYPE_UNSPECIFIED\020\000\022\027\n\023PERIOD_TY"
    "PE_QUARTER\020\001\022\032\n\026PERIOD_TYPE_SEMIANNUAL\020\002"
    "\022\026\n\022PERIOD_TYPE_ANNUAL\020\003\"l\n\034GetConsensus"
    "ForecastsRequest\022A\n\006paging\030\001 \001(\0132,.tinko"
    "ff.public_.invest.api.contract.v1.PageH\000"
    "\210\001\001B\t\n\007_paging\"\214\006\n\035GetConsensusForecasts"
    "Response\022k\n\005items\030\001 \003(\0132\\.tinkoff.public"
    "_.invest.api.contract.v1.GetConsensusFor"
    "ecastsResponse.ConsensusForecastsItem\022B\n"
    "\004page\030\002 \001(\01324.tinkoff.public_.invest.api"
    ".contract.v1.PageResponse\032\271\004\n\026ConsensusF"
    "orecastsItem\022\013\n\003uid\030\001 \001(\t\022\021\n\tasset_uid\030\002"
    " \001(\t\022.\n\ncreated_at\030\003 \001(\0132\032.google.protob"
    "uf.Timestamp\022L\n\021best_target_price\030\004 \001(\0132"
    "1.tinkoff.public_.invest.api.contract.v1"
    ".Quotation\022J\n\017best_target_low\030\005 \001(\01321.ti"
    "nkoff.public_.invest.api.contract.v1.Quo"
    "tation\022K\n\020best_target_high\030\006 \001(\01321.tinko"
    "ff.public_.invest.api.contract.v1.Quotat"
    "ion\022\033\n\023total_buy_recommend\030\007 \001(\005\022\034\n\024tota"
    "l_hold_recommend\030\010 \001(\005\022\034\n\024total_sell_rec"
    "ommend\030\t \001(\005\022\020\n\010currency\030\n \001(\t\022I\n\tconsen"
    "sus\030\013 \001(\01626.tinkoff.public_.invest.api.c"
    "ontract.v1.Recommendation\0222\n\016prognosis_d"
    "ate\030\014 \001(\0132\032.google.protobuf.Timestamp\"+\n"
    "\022GetForecastRequest\022\025\n\rinstrument_id\030\001 \001"
    "(\t\"\245\n\n\023GetForecastResponse\022W\n\007targets\030\001 "
    "\003(\0132F.tinkoff.public_.invest.api.contrac"
    "t.v1.GetForecastResponse.TargetItem\022\\\n\tc"
    "onsensus\030\002 \001(\0132I.tinkoff.public_.invest."
    "api.contract.v1.GetForecastResponse.Cons"
    "ensusItem\032\221\004\n\nTargetItem\022\013\n\003uid\030\001 \001(\t\022\016\n"
    "\006ticker\030\002 \001(\t\022\017\n\007company\030\003 \001(\t\022N\n\016recomm"
    "endation\030\004 \001(\01626.tinkoff.public_.invest."
    "api.contract.v1.Recommendation\0227\n\023recomm"
    "endation_date\030\005 \001(\0132\032.google.protobuf.Ti"
    "mestamp\022\020\n\010currency\030\006 \001(\t\022H\n\rcurrent_pri"
    "ce\030\007 \001(\01321.tinkoff.public_.invest.api.co"
    "ntract.v1.Quotation\022G\n\014target_price\030\010 \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\022G\n\014price_change\030\t \001(\01321.tin"
    "koff.public_.invest.api.contract.v1.Quot"
    "ation\022K\n\020price_change_rel\030\n \001(\01321.tinkof"
    "f.public_.invest.api.contract.v1.Quotati"
    "on\022\021\n\tshow_name\030\013 \001(\t\032\302\004\n\rConsensusItem\022"
    "\013\n\003uid\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022N\n\016recommen"
    "dation\030\003 \001(\01626.tinkoff.public_.invest.ap"
    "i.contract.v1.Recommendation\022\020\n\010currency"
    "\030\004 \001(\t\022H\n\rcurrent_price\030\005 \001(\01321.tinkoff."
    "public_.invest.api.contract.v1.Quotation"
    "\022D\n\tconsensus\030\006 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\022E\n\nmin_ta"
    "rget\030\007 \001(\01321.tinkoff.public_.invest.api."
    "contract.v1.Quotation\022E\n\nmax_target\030\010 \001("
    "\01321.tinkoff.public_.invest.api.contract."
    "v1.Quotation\022G\n\014price_change\030\t \001(\01321.tin"
    "koff.public_.invest.api.contract.v1.Quot"
    "ation\022K\n\020price_change_rel\030\n \001(\01321.tinkof"
    "f.public_.invest.api.contract.v1.Quotati"
    "on\"\341\001\n\017TradingInterval\022\014\n\004type\030\001 \001(\t\022V\n\010"
    "interval\030\002 \001(\0132D.tinkoff.public_.invest."
    "api.contract.v1.TradingInterval.TimeInte"
    "rval\032h\n\014TimeInterval\022,\n\010start_ts\030\001 \001(\0132\032"
    ".google.protobuf.Timestamp\022*\n\006end_ts\030\002 \001"
    "(\0132\032.google.protobuf.Timestamp*\327\001\n\nCoupo"
    "nType\022\033\n\027COUPON_TYPE_UNSPECIFIED\020\000\022\030\n\024CO"
    "UPON_TYPE_CONSTANT\020\001\022\030\n\024COUPON_TYPE_FLOA"
    "TING\020\002\022\030\n\024COUPON_TYPE_DISCOUNT\020\003\022\030\n\024COUP"
    "ON_TYPE_MORTGAGE\020\004\022\023\n\017COUPON_TYPE_FIX\020\005\022"
    "\030\n\024COUPON_TYPE_VARIABLE\020\006\022\025\n\021COUPON_TYPE"
    "_OTHER\020\007*h\n\017OptionDirection\022 \n\034OPTION_DI"
    "RECTION_UNSPECIFIED\020\000\022\030\n\024OPTION_DIRECTIO"
    "N_PUT\020\001\022\031\n\025OPTION_DIRECTION_CALL\020\002*{\n\021Op"
    "tionPaymentType\022#\n\037OPTION_PAYMENT_TYPE_U"
    "NSPECIFIED\020\000\022\037\n\033OPTION_PAYMENT_TYPE_PREM"
    "IUM\020\001\022 \n\034OPTION_PAYMENT_TYPE_MARGINAL\020\002*"
    "a\n\013OptionStyle\022\034\n\030OPTION_STYLE_UNSPECIFI"
    "ED\020\000\022\031\n\025OPTION_STYLE_AMERICAN\020\001\022\031\n\025OPTIO"
    "N_STYLE_EUROPEAN\020\002*\225\001\n\024OptionSettlementT"
    "ype\022%\n!OPTION_EXECUTION_TYPE_UNSPECIFIED"
    "\020\000\022+\n\'OPTION_EXECUTION_TYPE_PHYSICAL_DEL"
    "IVERY\020\001\022)\n%OPTION_EXECUTION_TYPE_CASH_SE"
    "TTLEMENT\020\002*\256\001\n\020InstrumentIdType\022\035\n\031INSTR"
    "UMENT_ID_UNSPECIFIED\020\000\022\033\n\027INSTRUMENT_ID_"
    "TYPE_FIGI\020\001\022\035\n\031INSTRUMENT_ID_TYPE_TICKER"
    "\020\002\022\032\n\026INSTRUMENT_ID_TYPE_UID\020\003\022#\n\037INSTRU"
    "MENT_ID_TYPE_POSITION_UID\020\004*l\n\020Instrumen"
    "tStatus\022!\n\035INSTRUMENT_STATUS_UNSPECIFIED"
    "\020\000\022\032\n\026INSTRUMENT_STATUS_BASE\020\001\022\031\n\025INSTRU"
    "MENT_STATUS_ALL\020\002*\345\001\n\tShareType\022\032\n\026SHARE"
    "_TYPE_UNSPECIFIED\020\000\022\025\n\021SHARE_TYPE_COMMON"
    "\020\001\022\030\n\024SHARE_TYPE_PREFERRED\020\002\022\022\n\016SHARE_TY"
    "PE_ADR\020\003\022\022\n\016SHARE_TYPE_GDR\020\004\022\022\n\016SHARE_TY"
    "PE_MLP\020\005\022\032\n\026SHARE_TYPE_NY_REG_SHRS\020\006\022\036\n\032"
    "SHARE_TYPE_CLOSED_END_FUND\020\007\022\023\n\017SHARE_TY"
    "PE_REIT\020\010*\211\001\n\tAssetType\022\032\n\026ASSET_TYPE_UN"
    "SPECIFIED\020\000\022\027\n\023ASSET_TYPE_CURRENCY\020\001\022\030\n\024"
    "ASSET_TYPE_COMMODITY\020\002\022\024\n\020ASSET_TYPE_IND"
    "EX\020\003\022\027\n\023ASSET_TYPE_SECURITY\020\004*f\n\025Structu"
    "redProductType\022\027\n\023SP_TYPE_UNSPECIFIED\020\000\022"
    "\027\n\023SP_TYPE_DELIVERABLE\020\001\022\033\n\027SP_TYPE_NON_"
    "DELIVERABLE\020\002*\215\001\n\027EditFavoritesActionTyp"
    "e\022*\n&EDIT_FAVORITES_ACTION_TYPE_UNSPECIF"
    "IED\020\000\022\"\n\036EDIT_FAVORITES_ACTION_TYPE_ADD\020"
    "\001\022\"\n\036EDIT_FAVORITES_ACTION_TYPE_DEL\020\002*s\n"
    "\014RealExchange\022\035\n\031REAL_EXCHANGE_UNSPECIFI"
    "ED\020\000\022\026\n\022REAL_EXCHANGE_MOEX\020\001\022\025\n\021REAL_EXC"
    "HANGE_RTS\020\002\022\025\n\021REAL_EXCHANGE_OTC\020\003*z\n\016Re"
    "commendation\022\036\n\032RECOMMENDATION_UNSPECIFI"
    "ED\020\000\022\026\n\022RECOMMENDATION_BUY\020\001\022\027\n\023RECOMMEN"
    "DATION_HOLD\020\002\022\027\n\023RECOMMENDATION_SELL\020\003*i"
    "\n\tRiskLevel\022\032\n\026RISK_LEVEL_UNSPECIFIED\020\000\022"
    "\022\n\016RISK_LEVEL_LOW\020\001\022\027\n\023RISK_LEVEL_MODERA"
    "TE\020\002\022\023\n\017RISK_LEVEL_HIGH\020\0032\263#\n\022Instrument"
    "sService\022\225\001\n\020TradingSchedules\022\?.tinkoff."
    "public_.invest.api.contract.v1.TradingSc"
    "hedulesRequest\032@.tinkoff.public_.invest."
    "api.contract.v1.TradingSchedulesResponse"
    "\022y\n\006BondBy\0229.tinkoff.public_.invest.api."
    "contract.v1.InstrumentRequest\0324.tinkoff."
    "public_.invest.api.contract.v1.BondRespo"
    "nse\022z\n\005Bonds\022:.tinkoff.public_.invest.ap"
    "i.contract.v1.InstrumentsRequest\0325.tinko"
    "ff.public_.invest.api.contract.v1.BondsR"
    "esponse\022\217\001\n\016GetBondCoupons\022=.tinkoff.pub"
    "lic_.invest.api.contract.v1.GetBondCoupo"
    "nsRequest\032>.tinkoff.public_.invest.api.c"
    "ontract.v1.GetBondCouponsResponse\022\214\001\n\rGe"
    "tBondEvents\022<.tinkoff.public_.invest.api"
    ".contract.v1.GetBondEventsRequest\032=.tink"
    "off.public_.invest.api.contract.v1.GetBo"
    "ndEventsResponse\022\201\001\n\nCurrencyBy\0229.tinkof"
    "f.public_.invest.api.contract.v1.Instrum"
    "entRequest\0328.tinkoff.public_.invest.api."
    "contract.v1.CurrencyResponse\022\204\001\n\nCurrenc"
    "ies\022:.tinkoff.public_.invest.api.contrac"
    "t.v1.InstrumentsRequest\032:.tinkoff.public"
    "_.invest.api.contract.v1.CurrenciesRespo"
    "nse\022w\n\005EtfBy\0229.tinkoff.public_.invest.ap"
    "i.contract.v1.InstrumentRequest\0323.tinkof"
    "f.public_.invest.api.contract.v1.EtfResp"
    "onse\022x\n\004Etfs\022:.tinkoff.public_.invest.ap"
    "i.contract.v1.InstrumentsRequest\0324.tinko"
    "ff.public_.invest.api.contract.v1.EtfsRe"
    "sponse\022}\n\010FutureBy\0229.tinkoff.public_.inv"
    "est.api.contract.v1.InstrumentRequest\0326."
    "tinkoff.public_.invest.api.contract.v1.F"
    "utureResponse\022~\n\007Futures\022:.tinkoff.publi"
    "c_.invest.api.contract.v1.InstrumentsReq"
    "uest\0327.tinkoff.public_.invest.api.contra"
    "ct.v1.FuturesResponse\022}\n\010OptionBy\0229.tink"
    "off.public_.invest.api.contract.v1.Instr"
    "umentRequest\0326.tinkoff.public_.invest.ap"
    "i.contract.v1.OptionResponse\022\203\001\n\007Options"
    "\022:.tinkoff.public_.invest.api.contract.v"
    "1.InstrumentsRequest\0327.tinkoff.public_.i"
    "nvest.api.contract.v1.OptionsResponse\"\003\210"
    "\002\001\022\202\001\n\tOptionsBy\022<.tinkoff.public_.inves"
    "t.api.contract.v1.FilterOptionsRequest\0327"
    ".tinkoff.public_.invest.api.contract.v1."
    "OptionsResponse\022{\n\007ShareBy\0229.tinkoff.pub"
    "lic_.invest.api.contract.v1.InstrumentRe"
    "quest\0325.tinkoff.public_.invest.api.contr"
    "act.v1.ShareResponse\022|\n\006Shares\022:.tinkoff"
    ".public_.invest.api.contract.v1.Instrume"
    "ntsRequest\0326.tinkoff.public_.invest.api."
    "contract.v1.SharesResponse\022\206\001\n\013Indicativ"
    "es\022:.tinkoff.public_.invest.api.contract"
    ".v1.IndicativesRequest\032;.tinkoff.public_"
    ".invest.api.contract.v1.IndicativesRespo"
    "nse\022\236\001\n\023GetAccruedInterests\022B.tinkoff.pu"
    "blic_.invest.api.contract.v1.GetAccruedI"
    "nterestsRequest\032C.tinkoff.public_.invest"
    ".api.contract.v1.GetAccruedInterestsResp"
    "onse\022\225\001\n\020GetFuturesMargin\022\?.tinkoff.publ"
    "ic_.invest.api.contract.v1.GetFuturesMar"
    "ginRequest\032@.tinkoff.public_.invest.api."
    "contract.v1.GetFuturesMarginResponse\022\210\001\n"
    "\017GetInstrumentBy\0229.tinkoff.public_.inves"
    "t.api.contract.v1.InstrumentRequest\032:.ti"
    "nkoff.public_.invest.api.contract.v1.Ins"
    "trumentResponse\022\211\001\n\014GetDividends\022;.tinko"
    "ff.public_.invest.api.contract.v1.GetDiv"
    "idendsRequest\032<.tinkoff.public_.invest.a"
    "pi.contract.v1.GetDividendsResponse\022y\n\nG"
    "etAssetBy\0224.tinkoff.public_.invest.api.c"
    "ontract.v1.AssetRequest\0325.tinkoff.public"
    "_.invest.api.contract.v1.AssetResponse\022z"
    "\n\tGetAssets\0225.tinkoff.public_.invest.api"
    ".contract.v1.AssetsRequest\0326.tinkoff.pub"
    "lic_.invest.api.contract.v1.AssetsRespon"
    "se\022\211\001\n\014GetFavorites\022;.tinkoff.public_.in"
    "vest.api.contract.v1.GetFavoritesRequest"
    "\032<.tinkoff.public_.invest.api.contract.v"
    "1.GetFavoritesResponse\022\214\001\n\rEditFavorites"
    "\022<.tinkoff.public_.invest.api.contract.v"
    "1.EditFavoritesRequest\032=.tinkoff.public_"
    ".invest.api.contract.v1.EditFavoritesRes"
    "ponse\022\211\001\n\014GetCountries\022;.tinkoff.public_"
    ".invest.api.contract.v1.GetCountriesRequ"
    "est\032<.tinkoff.public_.invest.api.contrac"
    "t.v1.GetCountriesResponse\022\217\001\n\016FindInstru"
    "ment\022=.tinkoff.public_.invest.api.contra"
    "ct.v1.FindInstrumentRequest\032>.tinkoff.pu"
    "blic_.invest.api.contract.v1.FindInstrum"
    "entResponse\022\200\001\n\tGetBrands\0228.tinkoff.publ"
    "ic_.invest.api.contract.v1.GetBrandsRequ"
    "est\0329.tinkoff.public_.invest.api.contrac"
    "t.v1.GetBrandsResponse\022t\n\nGetBrandBy\0227.t"
    "inkoff.public_.invest.api.contract.v1.Ge"
    "tBrandRequest\032-.tinkoff.public_.invest.a"
    "pi.contract.v1.Brand\022\241\001\n\024GetAssetFundame"
    "ntals\022C.tinkoff.public_.invest.api.contr"
    "act.v1.GetAssetFundamentalsRequest\032D.tin"
    "koff.public_.invest.api.contract.v1.GetA"
    "ssetFundamentalsResponse\022\222\001\n\017GetAssetRep"
    "orts\022>.tinkoff.public_.invest.api.contra"
    "ct.v1.GetAssetReportsRequest\032\?.tinkoff.p"
    "ublic_.invest.api.contract.v1.GetAssetRe"
    "portsResponse\022\244\001\n\025GetConsensusForecasts\022"
    "D.tinkoff.public_.invest.api.contract.v1"
    ".GetConsensusForecastsRequest\032E.tinkoff."
    "public_.invest.api.contract.v1.GetConsen"
    "susForecastsResponse\022\210\001\n\rGetForecastBy\022:"
    ".tinkoff.public_.invest.api.contract.v1."
    "GetForecastRequest\032;.tinkoff.public_.inv"
    "est.api.contract.v1.GetForecastResponseB"
    "a\n\034ru.tinkoff.piapi.contract.v1P\001Z\014./;in"
    "vestapi\242\002\005TIAPI\252\002\024Tinkoff.InvestApi.V1\312\002"
    "\021Tinkoff\\Invest\\V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_instruments_2eproto_deps[3] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_instruments_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_instruments_2eproto = {
    false,
    false,
    39426,
    descriptor_table_protodef_instruments_2eproto,
    "instruments.proto",
    &descriptor_table_instruments_2eproto_once,
    descriptor_table_instruments_2eproto_deps,
    3,
    90,
    schemas,
    file_default_instances,
    TableStruct_instruments_2eproto::offsets,
    file_level_metadata_instruments_2eproto,
    file_level_enum_descriptors_instruments_2eproto,
    file_level_service_descriptors_instruments_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_instruments_2eproto_getter() {
  return &descriptor_table_instruments_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_instruments_2eproto(&descriptor_table_instruments_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::google::protobuf::EnumDescriptor* GetBondEventsRequest_EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GetBondEventsRequest_EventType_internal_data_[] = {
    327680u, 0u, };
bool GetBondEventsRequest_EventType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_UNSPECIFIED;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CPN;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CALL;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_MTY;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CONV;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EventType_MIN;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EventType_MAX;
constexpr int GetBondEventsRequest::EventType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GetAssetReportsResponse_AssetReportPeriodType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t GetAssetReportsResponse_AssetReportPeriodType_internal_data_[] = {
    262144u, 0u, };
bool GetAssetReportsResponse_AssetReportPeriodType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_UNSPECIFIED;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_QUARTER;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_SEMIANNUAL;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_ANNUAL;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::AssetReportPeriodType_MIN;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::AssetReportPeriodType_MAX;
constexpr int GetAssetReportsResponse::AssetReportPeriodType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CouponType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t CouponType_internal_data_[] = {
    524288u, 0u, };
bool CouponType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* OptionDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t OptionDirection_internal_data_[] = {
    196608u, 0u, };
bool OptionDirection_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* OptionPaymentType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t OptionPaymentType_internal_data_[] = {
    196608u, 0u, };
bool OptionPaymentType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* OptionStyle_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t OptionStyle_internal_data_[] = {
    196608u, 0u, };
bool OptionStyle_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* OptionSettlementType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t OptionSettlementType_internal_data_[] = {
    196608u, 0u, };
bool OptionSettlementType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* InstrumentIdType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t InstrumentIdType_internal_data_[] = {
    327680u, 0u, };
bool InstrumentIdType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* InstrumentStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t InstrumentStatus_internal_data_[] = {
    196608u, 0u, };
bool InstrumentStatus_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* ShareType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t ShareType_internal_data_[] = {
    589824u, 0u, };
bool ShareType_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* AssetType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t AssetType_internal_data_[] = {
    327680u, 0u, };
bool AssetType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* StructuredProductType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[11];
}
PROTOBUF_CONSTINIT const uint32_t StructuredProductType_internal_data_[] = {
    196608u, 0u, };
bool StructuredProductType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* EditFavoritesActionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[12];
}
PROTOBUF_CONSTINIT const uint32_t EditFavoritesActionType_internal_data_[] = {
    196608u, 0u, };
bool EditFavoritesActionType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* RealExchange_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[13];
}
PROTOBUF_CONSTINIT const uint32_t RealExchange_internal_data_[] = {
    262144u, 0u, };
bool RealExchange_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* Recommendation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[14];
}
PROTOBUF_CONSTINIT const uint32_t Recommendation_internal_data_[] = {
    262144u, 0u, };
bool Recommendation_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RiskLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[15];
}
PROTOBUF_CONSTINIT const uint32_t RiskLevel_internal_data_[] = {
    262144u, 0u, };
bool RiskLevel_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class TradingSchedulesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingSchedulesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_._has_bits_);
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& from(const TradingSchedulesRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& to(const TradingSchedulesRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& TradingSchedulesRequest::_Internal::from(const TradingSchedulesRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& TradingSchedulesRequest::_Internal::to(const TradingSchedulesRequest* msg) {
  return *msg->_impl_.to_;
}
void TradingSchedulesRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TradingSchedulesRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TradingSchedulesRequest::TradingSchedulesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exchange_(arena, from.exchange_) {}

TradingSchedulesRequest::TradingSchedulesRequest(
    ::google::protobuf::Arena* arena,
    const TradingSchedulesRequest& from)
    : ::google::protobuf::Message(arena) {
  TradingSchedulesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        exchange_(arena) {}

inline void TradingSchedulesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
TradingSchedulesRequest::~TradingSchedulesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradingSchedulesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.exchange_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradingSchedulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradingSchedulesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 79, 2> TradingSchedulesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TradingSchedulesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string exchange = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.exchange_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 1, PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string exchange = 1;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.exchange_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.from_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.to_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\76\10\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest"
    "exchange"
  }},
};

::uint8_t* TradingSchedulesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .google.protobuf.Timestamp from = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  return target;
}

::size_t TradingSchedulesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string exchange = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_exchange());
    }

    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradingSchedulesRequest::_class_data_ = {
    TradingSchedulesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradingSchedulesRequest::GetClassData() const {
  return &_class_data_;
}

void TradingSchedulesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradingSchedulesRequest*>(&to_msg);
  auto& from = static_cast<const TradingSchedulesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedulesRequest::CopyFrom(const TradingSchedulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradingSchedulesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradingSchedulesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradingSchedulesRequest::InternalSwap(TradingSchedulesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.to_)
      + sizeof(TradingSchedulesRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata TradingSchedulesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[0]);
}
// ===================================================================

class TradingSchedulesResponse::_Internal {
 public:
};

TradingSchedulesResponse::TradingSchedulesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : exchanges_{visibility, arena, from.exchanges_},
        _cached_size_{0} {}

TradingSchedulesResponse::TradingSchedulesResponse(
    ::google::protobuf::Arena* arena,
    const TradingSchedulesResponse& from)
    : ::google::protobuf::Message(arena) {
  TradingSchedulesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exchanges_{visibility, arena},
        _cached_size_{0} {}

inline void TradingSchedulesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TradingSchedulesResponse::~TradingSchedulesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradingSchedulesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradingSchedulesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchanges_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradingSchedulesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TradingSchedulesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TradingSchedulesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSchedulesResponse, _impl_.exchanges_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesResponse, _impl_.exchanges_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>()},
  }}, {{
  }},
};

::uint8_t* TradingSchedulesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exchanges_size()); i < n; i++) {
    const auto& repfield = this->_internal_exchanges().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  return target;
}

::size_t TradingSchedulesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
  total_size += 1UL * this->_internal_exchanges_size();
  for (const auto& msg : this->_internal_exchanges()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradingSchedulesResponse::_class_data_ = {
    TradingSchedulesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradingSchedulesResponse::GetClassData() const {
  return &_class_data_;
}

void TradingSchedulesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradingSchedulesResponse*>(&to_msg);
  auto& from = static_cast<const TradingSchedulesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exchanges()->MergeFrom(
      from._internal_exchanges());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedulesResponse::CopyFrom(const TradingSchedulesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradingSchedulesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradingSchedulesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradingSchedulesResponse::InternalSwap(TradingSchedulesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exchanges_.InternalSwap(&other->_impl_.exchanges_);
}

::google::protobuf::Metadata TradingSchedulesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[1]);
}
// ===================================================================

class TradingSchedule::_Internal {
 public:
};

TradingSchedule::TradingSchedule(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : days_{visibility, arena, from.days_},
        exchange_(arena, from.exchange_),
        _cached_size_{0} {}

TradingSchedule::TradingSchedule(
    ::google::protobuf::Arena* arena,
    const TradingSchedule& from)
    : ::google::protobuf::Message(arena) {
  TradingSchedule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : days_{visibility, arena},
        exchange_(arena),
        _cached_size_{0} {}

inline void TradingSchedule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TradingSchedule::~TradingSchedule() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradingSchedule::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.exchange_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradingSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.days_.Clear();
  _impl_.exchange_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradingSchedule::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 71, 2> TradingSchedule::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TradingSchedule_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.days_)}},
    // string exchange = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.exchange_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string exchange = 1;
    {PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.exchange_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
    {PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.days_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingDay>()},
  }}, {{
    "\66\10\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.TradingSchedule"
    "exchange"
  }},
};

::uint8_t* TradingSchedule::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_days_size()); i < n; i++) {
    const auto& repfield = this->_internal_days().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  return target;
}

::size_t TradingSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
  total_size += 1UL * this->_internal_days_size();
  for (const auto& msg : this->_internal_days()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradingSchedule::_class_data_ = {
    TradingSchedule::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradingSchedule::GetClassData() const {
  return &_class_data_;
}

void TradingSchedule::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradingSchedule*>(&to_msg);
  auto& from = static_cast<const TradingSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_days()->MergeFrom(
      from._internal_days());
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedule::CopyFrom(const TradingSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradingSchedule::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradingSchedule::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradingSchedule::InternalSwap(TradingSchedule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.days_.InternalSwap(&other->_impl_.days_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
}

::google::protobuf::Metadata TradingSchedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[2]);
}
// ===================================================================

class TradingDay::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingDay>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradingDay, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& date(const TradingDay* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& start_time(const TradingDay* msg);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& end_time(const TradingDay* msg);
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& opening_auction_start_time(const TradingDay* msg);
  static void set_has_opening_auction_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& closing_auction_end_time(const TradingDay* msg);
  static void set_has_closing_auction_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& evening_opening_auction_start_time(const TradingDay* msg);
  static void set_has_evening_opening_auction_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Timestamp& evening_start_time(const TradingDay* msg);
  static void set_has_evening_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::Timestamp& evening_end_time(const TradingDay* msg);
  static void set_has_evening_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::google::protobuf::Timestamp& clearing_start_time(const TradingDay* msg);
  static void set_has_clearing_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::google::protobuf::Timestamp& clearing_end_time(const TradingDay* msg);
  static void set_has_clearing_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::google::protobuf::Timestamp& premarket_start_time(const TradingDay* msg);
  static void set_has_premarket_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::google::protobuf::Timestamp& premarket_end_time(const TradingDay* msg);
  static void set_has_premarket_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::google::protobuf::Timestamp& closing_auction_start_time(const TradingDay* msg);
  static void set_has_closing_auction_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::google::protobuf::Timestamp& opening_auction_end_time(const TradingDay* msg);
  static void set_has_opening_auction_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::google::protobuf::Timestamp& TradingDay::_Internal::date(const TradingDay* msg) {
  return *msg->_impl_.date_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::start_time(const TradingDay* msg) {
  return *msg->_impl_.start_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::end_time(const TradingDay* msg) {
  return *msg->_impl_.end_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::opening_auction_start_time(const TradingDay* msg) {
  return *msg->_impl_.opening_auction_start_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::closing_auction_end_time(const TradingDay* msg) {
  return *msg->_impl_.closing_auction_end_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::evening_opening_auction_start_time(const TradingDay* msg) {
  return *msg->_impl_.evening_opening_auction_start_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::evening_start_time(const TradingDay* msg) {
  return *msg->_impl_.evening_start_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::evening_end_time(const TradingDay* msg) {
  return *msg->_impl_.evening_end_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::clearing_start_time(const TradingDay* msg) {
  return *msg->_impl_.clearing_start_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::clearing_end_time(const TradingDay* msg) {
  return *msg->_impl_.clearing_end_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::premarket_start_time(const TradingDay* msg) {
  return *msg->_impl_.premarket_start_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::premarket_end_time(const TradingDay* msg) {
  return *msg->_impl_.premarket_end_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::closing_auction_start_time(const TradingDay* msg) {
  return *msg->_impl_.closing_auction_start_time_;
}
const ::google::protobuf::Timestamp& TradingDay::_Internal::opening_auction_end_time(const TradingDay* msg) {
  return *msg->_impl_.opening_auction_end_time_;
}
void TradingDay::clear_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TradingDay::clear_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TradingDay::clear_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TradingDay::clear_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.opening_auction_start_time_ != nullptr) _impl_.opening_auction_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TradingDay::clear_closing_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.closing_auction_end_time_ != nullptr) _impl_.closing_auction_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TradingDay::clear_evening_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.evening_opening_auction_start_time_ != nullptr) _impl_.evening_opening_auction_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void TradingDay::clear_evening_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.evening_start_time_ != nullptr) _impl_.evening_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void TradingDay::clear_evening_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.evening_end_time_ != nullptr) _impl_.evening_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void TradingDay::clear_clearing_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.clearing_start_time_ != nullptr) _impl_.clearing_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void TradingDay::clear_clearing_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.clearing_end_time_ != nullptr) _impl_.clearing_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void TradingDay::clear_premarket_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.premarket_start_time_ != nullptr) _impl_.premarket_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void TradingDay::clear_premarket_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.premarket_end_time_ != nullptr) _impl_.premarket_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void TradingDay::clear_closing_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.closing_auction_start_time_ != nullptr) _impl_.closing_auction_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void TradingDay::clear_opening_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.opening_auction_end_time_ != nullptr) _impl_.opening_auction_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
TradingDay::TradingDay(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingDay)
}
inline PROTOBUF_NDEBUG_INLINE TradingDay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        intervals_{visibility, arena, from.intervals_} {}

TradingDay::TradingDay(
    ::google::protobuf::Arena* arena,
    const TradingDay& from)
    : ::google::protobuf::Message(arena) {
  TradingDay* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.date_)
                : nullptr;
  _impl_.start_time_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.start_time_)
                : nullptr;
  _impl_.end_time_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.end_time_)
                : nullptr;
  _impl_.opening_auction_start_time_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.opening_auction_start_time_)
                : nullptr;
  _impl_.closing_auction_end_time_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.closing_auction_end_time_)
                : nullptr;
  _impl_.evening_opening_auction_start_time_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.evening_opening_auction_start_time_)
                : nullptr;
  _impl_.evening_start_time_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.evening_start_time_)
                : nullptr;
  _impl_.evening_end_time_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.evening_end_time_)
                : nullptr;
  _impl_.clearing_start_time_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.clearing_start_time_)
                : nullptr;
  _impl_.clearing_end_time_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.clearing_end_time_)
                : nullptr;
  _impl_.premarket_start_time_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.premarket_start_time_)
                : nullptr;
  _impl_.premarket_end_time_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.premarket_end_time_)
                : nullptr;
  _impl_.closing_auction_start_time_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.closing_auction_start_time_)
                : nullptr;
  _impl_.opening_auction_end_time_ = (cached_has_bits & 0x00002000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.opening_auction_end_time_)
                : nullptr;
  _impl_.is_trading_day_ = from._impl_.is_trading_day_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingDay)
}
inline PROTOBUF_NDEBUG_INLINE TradingDay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        intervals_{visibility, arena} {}

inline void TradingDay::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_),
           0,
           offsetof(Impl_, is_trading_day_) -
               offsetof(Impl_, date_) +
               sizeof(Impl_::is_trading_day_));
}
TradingDay::~TradingDay() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingDay)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradingDay::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.date_;
  delete _impl_.start_time_;
  delete _impl_.end_time_;
  delete _impl_.opening_auction_start_time_;
  delete _impl_.closing_auction_end_time_;
  delete _impl_.evening_opening_auction_start_time_;
  delete _impl_.evening_start_time_;
  delete _impl_.evening_end_time_;
  delete _impl_.clearing_start_time_;
  delete _impl_.clearing_end_time_;
  delete _impl_.premarket_start_time_;
  delete _impl_.premarket_end_time_;
  delete _impl_.closing_auction_start_time_;
  delete _impl_.opening_auction_end_time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradingDay::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intervals_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.opening_auction_start_time_ != nullptr);
      _impl_.opening_auction_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.closing_auction_end_time_ != nullptr);
      _impl_.closing_auction_end_time_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.evening_opening_auction_start_time_ != nullptr);
      _impl_.evening_opening_auction_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.evening_start_time_ != nullptr);
      _impl_.evening_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.evening_end_time_ != nullptr);
      _impl_.evening_end_time_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.clearing_start_time_ != nullptr);
      _impl_.clearing_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.clearing_end_time_ != nullptr);
      _impl_.clearing_end_time_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.premarket_start_time_ != nullptr);
      _impl_.premarket_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.premarket_end_time_ != nullptr);
      _impl_.premarket_end_time_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.closing_auction_start_time_ != nullptr);
      _impl_.closing_auction_start_time_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.opening_auction_end_time_ != nullptr);
      _impl_.opening_auction_end_time_->Clear();
    }
  }
  _impl_.is_trading_day_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradingDay::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 15, 0, 2> TradingDay::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingDay, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    15,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TradingDay_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp date = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.date_)}},
    // bool is_trading_day = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TradingDay, _impl_.is_trading_day_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.is_trading_day_)}},
    // .google.protobuf.Timestamp start_time = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.start_time_)}},
    // .google.protobuf.Timestamp end_time = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.end_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp opening_auction_start_time = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_start_time_)}},
    // .google.protobuf.Timestamp closing_auction_end_time = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_end_time_)}},
    // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 5, 5, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_opening_auction_start_time_)}},
    // .google.protobuf.Timestamp evening_start_time = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 6, 6, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_start_time_)}},
    // .google.protobuf.Timestamp evening_end_time = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 7, 7, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_end_time_)}},
    // .google.protobuf.Timestamp clearing_start_time = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 8, 8, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_start_time_)}},
    // .google.protobuf.Timestamp clearing_end_time = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 9, 9, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_end_time_)}},
    // .google.protobuf.Timestamp premarket_start_time = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 10, 10, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_start_time_)}},
    // .google.protobuf.Timestamp premarket_end_time = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 11, 11, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_end_time_)}},
    // .google.protobuf.Timestamp closing_auction_start_time = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 12, 12, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_start_time_)}},
    // .google.protobuf.Timestamp opening_auction_end_time = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 13, 13, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_end_time_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
    {::_pbi::TcParser::FastMtR2,
     {402, 63, 14, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.intervals_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp date = 1;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_trading_day = 2;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.is_trading_day_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp start_time = 3;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.start_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_time = 4;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.end_time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp opening_auction_start_time = 7;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_start_time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp closing_auction_end_time = 8;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_end_time_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_opening_auction_start_time_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp evening_start_time = 10;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_start_time_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp evening_end_time = 11;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_end_time_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp clearing_start_time = 12;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_start_time_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp clearing_end_time = 13;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_end_time_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp premarket_start_time = 14;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_start_time_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp premarket_end_time = 15;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_end_time_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp closing_auction_start_time = 16;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_start_time_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp opening_auction_end_time = 17;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_end_time_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.intervals_), -1, 14,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingInterval>()},
  }}, {{
  }},
};

::uint8_t* TradingDay::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // bool is_trading_day = 2;
  if (this->_internal_is_trading_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_trading_day(), target);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp opening_auction_start_time = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::opening_auction_start_time(this),
        _Internal::opening_auction_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp closing_auction_end_time = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::closing_auction_end_time(this),
        _Internal::closing_auction_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::evening_opening_auction_start_time(this),
        _Internal::evening_opening_auction_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp evening_start_time = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::evening_start_time(this),
        _Internal::evening_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp evening_end_time = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::evening_end_time(this),
        _Internal::evening_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp clearing_start_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::clearing_start_time(this),
        _Internal::clearing_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp clearing_end_time = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::clearing_end_time(this),
        _Internal::clearing_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp premarket_start_time = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::premarket_start_time(this),
        _Internal::premarket_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp premarket_end_time = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, _Internal::premarket_end_time(this),
        _Internal::premarket_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp closing_auction_start_time = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, _Internal::closing_auction_start_time(this),
        _Internal::closing_auction_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp opening_auction_end_time = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, _Internal::opening_auction_end_time(this),
        _Internal::opening_auction_end_time(this).GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intervals_size()); i < n; i++) {
    const auto& repfield = this->_internal_intervals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingDay)
  return target;
}

::size_t TradingDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
  total_size += 2UL * this->_internal_intervals_size();
  for (const auto& msg : this->_internal_intervals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .google.protobuf.Timestamp date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.date_);
    }

    // .google.protobuf.Timestamp start_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.start_time_);
    }

    // .google.protobuf.Timestamp end_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.end_time_);
    }

    // .google.protobuf.Timestamp opening_auction_start_time = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.opening_auction_start_time_);
    }

    // .google.protobuf.Timestamp closing_auction_end_time = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.closing_auction_end_time_);
    }

    // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.evening_opening_auction_start_time_);
    }

    // .google.protobuf.Timestamp evening_start_time = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.evening_start_time_);
    }

    // .google.protobuf.Timestamp evening_end_time = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.evening_end_time_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // .google.protobuf.Timestamp clearing_start_time = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.clearing_start_time_);
    }

    // .google.protobuf.Timestamp clearing_end_time = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.clearing_end_time_);
    }

    // .google.protobuf.Timestamp premarket_start_time = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.premarket_start_time_);
    }

    // .google.protobuf.Timestamp premarket_end_time = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.premarket_end_time_);
    }

    // .google.protobuf.Timestamp closing_auction_start_time = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.closing_auction_start_time_);
    }

    // .google.protobuf.Timestamp opening_auction_end_time = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.opening_auction_end_time_);
    }

  }
  // bool is_trading_day = 2;
  if (this->_internal_is_trading_day() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradingDay::_class_data_ = {
    TradingDay::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradingDay::GetClassData() const {
  return &_class_data_;
}

void TradingDay::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradingDay*>(&to_msg);
  auto& from = static_cast<const TradingDay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_intervals()->MergeFrom(
      from._internal_intervals());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_start_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_end_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_opening_auction_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_opening_auction_start_time());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_closing_auction_end_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_closing_auction_end_time());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_evening_opening_auction_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_evening_opening_auction_start_time());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_evening_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_evening_start_time());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_evening_end_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_evening_end_time());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_clearing_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_clearing_start_time());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_clearing_end_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_clearing_end_time());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_premarket_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_premarket_start_time());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_premarket_end_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_premarket_end_time());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_closing_auction_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_closing_auction_start_time());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_opening_auction_end_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_opening_auction_end_time());
    }
  }
  if (from._internal_is_trading_day() != 0) {
    _this->_internal_set_is_trading_day(from._internal_is_trading_day());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingDay::CopyFrom(const TradingDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradingDay::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradingDay::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradingDay::InternalSwap(TradingDay* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.intervals_.InternalSwap(&other->_impl_.intervals_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.is_trading_day_)
      + sizeof(TradingDay::_impl_.is_trading_day_)
      - PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::google::protobuf::Metadata TradingDay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[3]);
}
// ===================================================================

class InstrumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_._has_bits_);
  static void set_has_class_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InstrumentRequest::InstrumentRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        class_code_(arena, from.class_code_),
        id_(arena, from.id_) {}

InstrumentRequest::InstrumentRequest(
    ::google::protobuf::Arena* arena,
    const InstrumentRequest& from)
    : ::google::protobuf::Message(arena) {
  InstrumentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.id_type_ = from._impl_.id_type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        class_code_(arena),
        id_(arena) {}

inline void InstrumentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_type_ = {};
}
InstrumentRequest::~InstrumentRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.class_code_.Destroy();
  _impl_.id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstrumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.class_code_.ClearNonDefaultToEmpty();
  }
  _impl_.id_.ClearToEmpty();
  _impl_.id_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InstrumentRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 77, 2> InstrumentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InstrumentRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentRequest, _impl_.id_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_type_)}},
    // optional string class_code = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.class_code_)}},
    // string id = 3 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string class_code = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.class_code_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string id = 3 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\70\0\12\2\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.InstrumentRequest"
    "class_code"
    "id"
  }},
};

::uint8_t* InstrumentRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_id_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_id_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string class_code = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string id = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  return target;
}

::size_t InstrumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string class_code = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string id = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_id_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_id_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InstrumentRequest::_class_data_ = {
    InstrumentRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InstrumentRequest::GetClassData() const {
  return &_class_data_;
}

void InstrumentRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InstrumentRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_id_type() != 0) {
    _this->_internal_set_id_type(from._internal_id_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentRequest::CopyFrom(const InstrumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstrumentRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstrumentRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstrumentRequest::InternalSwap(InstrumentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  swap(_impl_.id_type_, other->_impl_.id_type_);
}

::google::protobuf::Metadata InstrumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[4]);
}
// ===================================================================

class InstrumentsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_._has_bits_);
  static void set_has_instrument_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InstrumentsRequest::InstrumentsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
}
InstrumentsRequest::InstrumentsRequest(
    ::google::protobuf::Arena* arena, const InstrumentsRequest& from)
    : InstrumentsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE InstrumentsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InstrumentsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_status_ = {};
}
InstrumentsRequest::~InstrumentsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstrumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InstrumentsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> InstrumentsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InstrumentsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentsRequest, _impl_.instrument_status_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* InstrumentsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_instrument_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  return target;
}

::size_t InstrumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InstrumentsRequest::_class_data_ = {
    InstrumentsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InstrumentsRequest::GetClassData() const {
  return &_class_data_;
}

void InstrumentsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InstrumentsRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_instrument_status(from._internal_instrument_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentsRequest::CopyFrom(const InstrumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstrumentsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstrumentsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstrumentsRequest::InternalSwap(InstrumentsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_status_, other->_impl_.instrument_status_);
}

::google::protobuf::Metadata InstrumentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[5]);
}
// ===================================================================

class FilterOptionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterOptionsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_._has_bits_);
  static void set_has_basic_asset_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_basic_asset_position_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FilterOptionsRequest::FilterOptionsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
}
inline PROTOBUF_NDEBUG_INLINE FilterOptionsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        basic_asset_uid_(arena, from.basic_asset_uid_),
        basic_asset_position_uid_(arena, from.basic_asset_position_uid_) {}

FilterOptionsRequest::FilterOptionsRequest(
    ::google::protobuf::Arena* arena,
    const FilterOptionsRequest& from)
    : ::google::protobuf::Message(arena) {
  FilterOptionsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
}
inline PROTOBUF_NDEBUG_INLINE FilterOptionsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        basic_asset_uid_(arena),
        basic_asset_position_uid_(arena) {}

inline void FilterOptionsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FilterOptionsRequest::~FilterOptionsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FilterOptionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.basic_asset_uid_.Destroy();
  _impl_.basic_asset_position_uid_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FilterOptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.basic_asset_uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.basic_asset_position_uid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FilterOptionsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 107, 2> FilterOptionsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FilterOptionsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string basic_asset_position_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_position_uid_)}},
    // optional string basic_asset_uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_uid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string basic_asset_uid = 1;
    {PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_uid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string basic_asset_position_uid = 2;
    {PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_position_uid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\73\17\30\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest"
    "basic_asset_uid"
    "basic_asset_position_uid"
  }},
};

::uint8_t* FilterOptionsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string basic_asset_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_basic_asset_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string basic_asset_position_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_basic_asset_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  return target;
}

::size_t FilterOptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string basic_asset_uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_basic_asset_uid());
    }

    // optional string basic_asset_position_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_basic_asset_position_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FilterOptionsRequest::_class_data_ = {
    FilterOptionsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FilterOptionsRequest::GetClassData() const {
  return &_class_data_;
}

void FilterOptionsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FilterOptionsRequest*>(&to_msg);
  auto& from = static_cast<const FilterOptionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_basic_asset_uid(from._internal_basic_asset_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FilterOptionsRequest::CopyFrom(const FilterOptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FilterOptionsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FilterOptionsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FilterOptionsRequest::InternalSwap(FilterOptionsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_uid_, &other->_impl_.basic_asset_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_position_uid_, &other->_impl_.basic_asset_position_uid_, arena);
}

::google::protobuf::Metadata FilterOptionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[6]);
}
// ===================================================================

class BondResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BondResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BondResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Bond& instrument(const BondResponse* msg);
  static void set_has_instrument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Bond& BondResponse::_Internal::instrument(const BondResponse* msg) {
  return *msg->_impl_.instrument_;
}
BondResponse::BondResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BondResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BondResponse::BondResponse(
    ::google::protobuf::Arena* arena,
    const BondResponse& from)
    : ::google::protobuf::Message(arena) {
  BondResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Bond>(arena, *from._impl_.instrument_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BondResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BondResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
BondResponse::~BondResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BondResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BondResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.instrument_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BondResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BondResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BondResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BondResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BondResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BondResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
    {PROTOBUF_FIELD_OFFSET(BondResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Bond>()},
  }}, {{
  }},
};

::uint8_t* BondResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BondResponse)
  return target;
}

::size_t BondResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BondResponse::_class_data_ = {
    BondResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BondResponse::GetClassData() const {
  return &_class_data_;
}

void BondResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BondResponse*>(&to_msg);
  auto& from = static_cast<const BondResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Bond::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BondResponse::CopyFrom(const BondResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BondResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BondResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BondResponse::InternalSwap(BondResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata BondResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[7]);
}
// ===================================================================

class BondsResponse::_Internal {
 public:
};

BondsResponse::BondsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BondsResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

BondsResponse::BondsResponse(
    ::google::protobuf::Arena* arena,
    const BondsResponse& from)
    : ::google::protobuf::Message(arena) {
  BondsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BondsResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void BondsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
BondsResponse::~BondsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BondsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BondsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BondsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BondsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BondsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BondsResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
    {PROTOBUF_FIELD_OFFSET(BondsResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Bond>()},
  }}, {{
  }},
};

::uint8_t* BondsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  return target;
}

::size_t BondsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BondsResponse::_class_data_ = {
    BondsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BondsResponse::GetClassData() const {
  return &_class_data_;
}

void BondsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BondsResponse*>(&to_msg);
  auto& from = static_cast<const BondsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BondsResponse::CopyFrom(const BondsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BondsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BondsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BondsResponse::InternalSwap(BondsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata BondsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[8]);
}
// ===================================================================

class GetBondCouponsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBondCouponsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& from(const GetBondCouponsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& to(const GetBondCouponsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& GetBondCouponsRequest::_Internal::from(const GetBondCouponsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetBondCouponsRequest::_Internal::to(const GetBondCouponsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetBondCouponsRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondCouponsRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetBondCouponsRequest::GetBondCouponsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetBondCouponsRequest::GetBondCouponsRequest(
    ::google::protobuf::Arena* arena,
    const GetBondCouponsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetBondCouponsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetBondCouponsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetBondCouponsRequest::~GetBondCouponsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBondCouponsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBondCouponsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBondCouponsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 86, 2> GetBondCouponsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetBondCouponsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.figi_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\74\4\0\0\15\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetBondCouponsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Timestamp from = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  return target;
}

::size_t GetBondCouponsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBondCouponsRequest::_class_data_ = {
    GetBondCouponsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBondCouponsRequest::GetClassData() const {
  return &_class_data_;
}

void GetBondCouponsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBondCouponsRequest*>(&to_msg);
  auto& from = static_cast<const GetBondCouponsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondCouponsRequest::CopyFrom(const GetBondCouponsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBondCouponsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBondCouponsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBondCouponsRequest::InternalSwap(GetBondCouponsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.to_)
      + sizeof(GetBondCouponsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetBondCouponsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[9]);
}
// ===================================================================

class GetBondCouponsResponse::_Internal {
 public:
};

GetBondCouponsResponse::GetBondCouponsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : events_{visibility, arena, from.events_},
        _cached_size_{0} {}

GetBondCouponsResponse::GetBondCouponsResponse(
    ::google::protobuf::Arena* arena,
    const GetBondCouponsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetBondCouponsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : events_{visibility, arena},
        _cached_size_{0} {}

inline void GetBondCouponsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetBondCouponsResponse::~GetBondCouponsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBondCouponsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBondCouponsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBondCouponsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetBondCouponsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetBondCouponsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsResponse, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsResponse, _impl_.events_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Coupon>()},
  }}, {{
  }},
};

::uint8_t* GetBondCouponsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  return target;
}

::size_t GetBondCouponsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBondCouponsResponse::_class_data_ = {
    GetBondCouponsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBondCouponsResponse::GetClassData() const {
  return &_class_data_;
}

void GetBondCouponsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBondCouponsResponse*>(&to_msg);
  auto& from = static_cast<const GetBondCouponsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondCouponsResponse::CopyFrom(const GetBondCouponsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBondCouponsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBondCouponsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBondCouponsResponse::InternalSwap(GetBondCouponsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::google::protobuf::Metadata GetBondCouponsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[10]);
}
// ===================================================================

class GetBondEventsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBondEventsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& from(const GetBondEventsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& to(const GetBondEventsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& GetBondEventsRequest::_Internal::from(const GetBondEventsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetBondEventsRequest::_Internal::to(const GetBondEventsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetBondEventsRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondEventsRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetBondEventsRequest::GetBondEventsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_) {}

GetBondEventsRequest::GetBondEventsRequest(
    ::google::protobuf::Arena* arena,
    const GetBondEventsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetBondEventsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena) {}

inline void GetBondEventsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::type_));
}
GetBondEventsRequest::~GetBondEventsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBondEventsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrument_id_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBondEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBondEventsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 81, 2> GetBondEventsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967265,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetBondEventsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.instrument_id_)}},
    // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetBondEventsRequest, _impl_.type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.type_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\73\0\0\15\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest"
    "instrument_id"
  }},
};

::uint8_t* GetBondEventsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Timestamp from = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  return target;
}

::size_t GetBondEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBondEventsRequest::_class_data_ = {
    GetBondEventsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBondEventsRequest::GetClassData() const {
  return &_class_data_;
}

void GetBondEventsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBondEventsRequest*>(&to_msg);
  auto& from = static_cast<const GetBondEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsRequest::CopyFrom(const GetBondEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBondEventsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBondEventsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBondEventsRequest::InternalSwap(GetBondEventsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.type_)
      + sizeof(GetBondEventsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetBondEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[11]);
}
// ===================================================================

class GetBondEventsResponse_BondEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBondEventsResponse_BondEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& event_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_event_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& event_total_vol(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_event_total_vol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& fix_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_fix_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& rate_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_rate_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& default_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_default_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& real_pay_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_real_pay_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Timestamp& pay_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_pay_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& pay_one_bond(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_pay_one_bond(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& money_flow_val(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_money_flow_val(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& value(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::google::protobuf::Timestamp& coupon_start_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_coupon_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::google::protobuf::Timestamp& coupon_end_date(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_coupon_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& coupon_interest_rate(const GetBondEventsResponse_BondEvent* msg);
  static void set_has_coupon_interest_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::event_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.event_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::_Internal::event_total_vol(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.event_total_vol_;
}
const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::fix_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.fix_date_;
}
const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::rate_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.rate_date_;
}
const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::default_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.default_date_;
}
const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::real_pay_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.real_pay_date_;
}
const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::pay_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.pay_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetBondEventsResponse_BondEvent::_Internal::pay_one_bond(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.pay_one_bond_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetBondEventsResponse_BondEvent::_Internal::money_flow_val(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.money_flow_val_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::_Internal::value(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.value_;
}
const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::coupon_start_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.coupon_start_date_;
}
const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_Internal::coupon_end_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.coupon_end_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::_Internal::coupon_interest_rate(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.coupon_interest_rate_;
}
void GetBondEventsResponse_BondEvent::clear_event_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.event_date_ != nullptr) _impl_.event_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondEventsResponse_BondEvent::clear_event_total_vol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.event_total_vol_ != nullptr) _impl_.event_total_vol_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetBondEventsResponse_BondEvent::clear_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fix_date_ != nullptr) _impl_.fix_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetBondEventsResponse_BondEvent::clear_rate_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rate_date_ != nullptr) _impl_.rate_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetBondEventsResponse_BondEvent::clear_default_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.default_date_ != nullptr) _impl_.default_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GetBondEventsResponse_BondEvent::clear_real_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.real_pay_date_ != nullptr) _impl_.real_pay_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void GetBondEventsResponse_BondEvent::clear_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pay_date_ != nullptr) _impl_.pay_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void GetBondEventsResponse_BondEvent::clear_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pay_one_bond_ != nullptr) _impl_.pay_one_bond_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void GetBondEventsResponse_BondEvent::clear_money_flow_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.money_flow_val_ != nullptr) _impl_.money_flow_val_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void GetBondEventsResponse_BondEvent::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void GetBondEventsResponse_BondEvent::clear_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.coupon_start_date_ != nullptr) _impl_.coupon_start_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void GetBondEventsResponse_BondEvent::clear_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.coupon_end_date_ != nullptr) _impl_.coupon_end_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void GetBondEventsResponse_BondEvent::clear_coupon_interest_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.coupon_interest_rate_ != nullptr) _impl_.coupon_interest_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse_BondEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_),
        execution_(arena, from.execution_),
        operation_type_(arena, from.operation_type_),
        note_(arena, from.note_),
        convert_to_fin_tool_id_(arena, from.convert_to_fin_tool_id_) {}

GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(
    ::google::protobuf::Arena* arena,
    const GetBondEventsResponse_BondEvent& from)
    : ::google::protobuf::Message(arena) {
  GetBondEventsResponse_BondEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.event_date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.event_date_)
                : nullptr;
  _impl_.event_total_vol_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.event_total_vol_)
                : nullptr;
  _impl_.fix_date_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.fix_date_)
                : nullptr;
  _impl_.rate_date_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.rate_date_)
                : nullptr;
  _impl_.default_date_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.default_date_)
                : nullptr;
  _impl_.real_pay_date_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.real_pay_date_)
                : nullptr;
  _impl_.pay_date_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.pay_date_)
                : nullptr;
  _impl_.pay_one_bond_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.pay_one_bond_)
                : nullptr;
  _impl_.money_flow_val_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.money_flow_val_)
                : nullptr;
  _impl_.value_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.value_)
                : nullptr;
  _impl_.coupon_start_date_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_start_date_)
                : nullptr;
  _impl_.coupon_end_date_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_end_date_)
                : nullptr;
  _impl_.coupon_interest_rate_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.coupon_interest_rate_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, event_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, event_number_),
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, event_number_) +
               sizeof(Impl_::coupon_period_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse_BondEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena),
        execution_(arena),
        operation_type_(arena),
        note_(arena),
        convert_to_fin_tool_id_(arena) {}

inline void GetBondEventsResponse_BondEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, event_date_),
           0,
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, event_date_) +
               sizeof(Impl_::coupon_period_));
}
GetBondEventsResponse_BondEvent::~GetBondEventsResponse_BondEvent() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBondEventsResponse_BondEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrument_id_.Destroy();
  _impl_.execution_.Destroy();
  _impl_.operation_type_.Destroy();
  _impl_.note_.Destroy();
  _impl_.convert_to_fin_tool_id_.Destroy();
  delete _impl_.event_date_;
  delete _impl_.event_total_vol_;
  delete _impl_.fix_date_;
  delete _impl_.rate_date_;
  delete _impl_.default_date_;
  delete _impl_.real_pay_date_;
  delete _impl_.pay_date_;
  delete _impl_.pay_one_bond_;
  delete _impl_.money_flow_val_;
  delete _impl_.value_;
  delete _impl_.coupon_start_date_;
  delete _impl_.coupon_end_date_;
  delete _impl_.coupon_interest_rate_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBondEventsResponse_BondEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _impl_.execution_.ClearToEmpty();
  _impl_.operation_type_.ClearToEmpty();
  _impl_.note_.ClearToEmpty();
  _impl_.convert_to_fin_tool_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.event_date_ != nullptr);
      _impl_.event_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.event_total_vol_ != nullptr);
      _impl_.event_total_vol_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.fix_date_ != nullptr);
      _impl_.fix_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.rate_date_ != nullptr);
      _impl_.rate_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.default_date_ != nullptr);
      _impl_.default_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.real_pay_date_ != nullptr);
      _impl_.real_pay_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.pay_date_ != nullptr);
      _impl_.pay_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.pay_one_bond_ != nullptr);
      _impl_.pay_one_bond_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.money_flow_val_ != nullptr);
      _impl_.money_flow_val_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.coupon_start_date_ != nullptr);
      _impl_.coupon_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.coupon_end_date_ != nullptr);
      _impl_.coupon_end_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.coupon_interest_rate_ != nullptr);
      _impl_.coupon_interest_rate_->Clear();
    }
  }
  ::memset(&_impl_.event_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.coupon_period_) -
      reinterpret_cast<char*>(&_impl_.event_number_)) + sizeof(_impl_.coupon_period_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBondEventsResponse_BondEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 13, 157, 2> GetBondEventsResponse_BondEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772993,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetBondEventsResponse_BondEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.instrument_id_)}},
    // int32 event_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetBondEventsResponse_BondEvent, _impl_.event_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_number_)}},
    // .google.protobuf.Timestamp event_date = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetBondEventsResponse_BondEvent, _impl_.event_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_type_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_total_vol_)}},
    // .google.protobuf.Timestamp fix_date = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.fix_date_)}},
    // .google.protobuf.Timestamp rate_date = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.rate_date_)}},
    // .google.protobuf.Timestamp default_date = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.default_date_)}},
    // .google.protobuf.Timestamp real_pay_date = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 5, 5, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.real_pay_date_)}},
    // .google.protobuf.Timestamp pay_date = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 6, 6, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 7, 7, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_one_bond_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 8, 8, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.money_flow_val_)}},
    // string execution = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.execution_)}},
    // string operation_type = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.operation_type_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 9, 9, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.value_)}},
    // string note = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.note_)}},
    // string convert_to_fin_tool_id = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.convert_to_fin_tool_id_)}},
    // .google.protobuf.Timestamp coupon_start_date = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 10, 10, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_start_date_)}},
    // .google.protobuf.Timestamp coupon_end_date = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 11, 11, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_end_date_)}},
    // int32 coupon_period = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_period_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 12, 12, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_interest_rate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 2;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 event_number = 3;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp event_date = 4;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_total_vol_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp fix_date = 7;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.fix_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp rate_date = 8;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.rate_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp default_date = 9;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.default_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp real_pay_date = 10;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.real_pay_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp pay_date = 11;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_one_bond_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.money_flow_val_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string execution = 14;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.execution_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string operation_type = 15;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.operation_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.value_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string note = 17;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.note_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string convert_to_fin_tool_id = 18;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.convert_to_fin_tool_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp coupon_start_date = 19;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_start_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp coupon_end_date = 20;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_end_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 coupon_period = 21;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_period_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_interest_rate_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\106\15\0\0\0\0\0\0\0\0\0\0\0\11\16\0\4\26\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent"
    "instrument_id"
    "execution"
    "operation_type"
    "note"
    "convert_to_fin_tool_id"
  }},
};

::uint8_t* GetBondEventsResponse_BondEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 event_number = 3;
  if (this->_internal_event_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_event_number(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp event_date = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::event_date(this),
        _Internal::event_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_event_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::event_total_vol(this),
        _Internal::event_total_vol(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp fix_date = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::fix_date(this),
        _Internal::fix_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp rate_date = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::rate_date(this),
        _Internal::rate_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp default_date = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::default_date(this),
        _Internal::default_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp real_pay_date = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::real_pay_date(this),
        _Internal::real_pay_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp pay_date = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::pay_date(this),
        _Internal::pay_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::pay_one_bond(this),
        _Internal::pay_one_bond(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::money_flow_val(this),
        _Internal::money_flow_val(this).GetCachedSize(), target, stream);
  }

  // string execution = 14;
  if (!this->_internal_execution().empty()) {
    const std::string& _s = this->_internal_execution();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string operation_type = 15;
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // string note = 17;
  if (!this->_internal_note().empty()) {
    const std::string& _s = this->_internal_note();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // string convert_to_fin_tool_id = 18;
  if (!this->_internal_convert_to_fin_tool_id().empty()) {
    const std::string& _s = this->_internal_convert_to_fin_tool_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // .google.protobuf.Timestamp coupon_start_date = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, _Internal::coupon_start_date(this),
        _Internal::coupon_start_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp coupon_end_date = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, _Internal::coupon_end_date(this),
        _Internal::coupon_end_date(this).GetCachedSize(), target, stream);
  }

  // int32 coupon_period = 21;
  if (this->_internal_coupon_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        21, this->_internal_coupon_period(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        22, _Internal::coupon_interest_rate(this),
        _Internal::coupon_interest_rate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  return target;
}

::size_t GetBondEventsResponse_BondEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  // string execution = 14;
  if (!this->_internal_execution().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_execution());
  }

  // string operation_type = 15;
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // string note = 17;
  if (!this->_internal_note().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_note());
  }

  // string convert_to_fin_tool_id = 18;
  if (!this->_internal_convert_to_fin_tool_id().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_convert_to_fin_tool_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .google.protobuf.Timestamp event_date = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_total_vol_);
    }

    // .google.protobuf.Timestamp fix_date = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fix_date_);
    }

    // .google.protobuf.Timestamp rate_date = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rate_date_);
    }

    // .google.protobuf.Timestamp default_date = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.default_date_);
    }

    // .google.protobuf.Timestamp real_pay_date = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.real_pay_date_);
    }

    // .google.protobuf.Timestamp pay_date = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pay_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pay_one_bond_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.money_flow_val_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
    }

    // .google.protobuf.Timestamp coupon_start_date = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.coupon_start_date_);
    }

    // .google.protobuf.Timestamp coupon_end_date = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.coupon_end_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.coupon_interest_rate_);
    }

  }
  // int32 event_number = 3;
  if (this->_internal_event_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_event_number());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  // int32 coupon_period = 21;
  if (this->_internal_coupon_period() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_coupon_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBondEventsResponse_BondEvent::_class_data_ = {
    GetBondEventsResponse_BondEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBondEventsResponse_BondEvent::GetClassData() const {
  return &_class_data_;
}

void GetBondEventsResponse_BondEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBondEventsResponse_BondEvent*>(&to_msg);
  auto& from = static_cast<const GetBondEventsResponse_BondEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!from._internal_execution().empty()) {
    _this->_internal_set_execution(from._internal_execution());
  }
  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (!from._internal_note().empty()) {
    _this->_internal_set_note(from._internal_note());
  }
  if (!from._internal_convert_to_fin_tool_id().empty()) {
    _this->_internal_set_convert_to_fin_tool_id(from._internal_convert_to_fin_tool_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_event_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_event_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_event_total_vol()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_event_total_vol());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_fix_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_fix_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rate_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_rate_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_default_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_default_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_real_pay_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_real_pay_date());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_pay_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_pay_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_pay_one_bond()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_pay_one_bond());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_money_flow_val()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_money_flow_val());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_value()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_coupon_start_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_coupon_start_date());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_coupon_end_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_coupon_end_date());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_coupon_interest_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_coupon_interest_rate());
    }
  }
  if (from._internal_event_number() != 0) {
    _this->_internal_set_event_number(from._internal_event_number());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_coupon_period() != 0) {
    _this->_internal_set_coupon_period(from._internal_coupon_period());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsResponse_BondEvent::CopyFrom(const GetBondEventsResponse_BondEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBondEventsResponse_BondEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBondEventsResponse_BondEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBondEventsResponse_BondEvent::InternalSwap(GetBondEventsResponse_BondEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_, &other->_impl_.execution_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, &other->_impl_.operation_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.note_, &other->_impl_.note_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.convert_to_fin_tool_id_, &other->_impl_.convert_to_fin_tool_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_period_)
      + sizeof(GetBondEventsResponse_BondEvent::_impl_.coupon_period_)
      - PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_date_)>(
          reinterpret_cast<char*>(&_impl_.event_date_),
          reinterpret_cast<char*>(&other->_impl_.event_date_));
}

::google::protobuf::Metadata GetBondEventsResponse_BondEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[12]);
}
// ===================================================================

class GetBondEventsResponse::_Internal {
 public:
};

GetBondEventsResponse::GetBondEventsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : events_{visibility, arena, from.events_},
        _cached_size_{0} {}

GetBondEventsResponse::GetBondEventsResponse(
    ::google::protobuf::Arena* arena,
    const GetBondEventsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetBondEventsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : events_{visibility, arena},
        _cached_size_{0} {}

inline void GetBondEventsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetBondEventsResponse::~GetBondEventsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBondEventsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBondEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBondEventsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetBondEventsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetBondEventsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse, _impl_.events_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>()},
  }}, {{
  }},
};

::uint8_t* GetBondEventsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  return target;
}

::size_t GetBondEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBondEventsResponse::_class_data_ = {
    GetBondEventsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBondEventsResponse::GetClassData() const {
  return &_class_data_;
}

void GetBondEventsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBondEventsResponse*>(&to_msg);
  auto& from = static_cast<const GetBondEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsResponse::CopyFrom(const GetBondEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBondEventsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBondEventsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBondEventsResponse::InternalSwap(GetBondEventsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::google::protobuf::Metadata GetBondEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[13]);
}
// ===================================================================

class Coupon::_Internal {
 public:
  using HasBits = decltype(std::declval<Coupon>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Coupon, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& coupon_date(const Coupon* msg);
  static void set_has_coupon_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& fix_date(const Coupon* msg);
  static void set_has_fix_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& pay_one_bond(const Coupon* msg);
  static void set_has_pay_one_bond(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& coupon_start_date(const Coupon* msg);
  static void set_has_coupon_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& coupon_end_date(const Coupon* msg);
  static void set_has_coupon_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::google::protobuf::Timestamp& Coupon::_Internal::coupon_date(const Coupon* msg) {
  return *msg->_impl_.coupon_date_;
}
const ::google::protobuf::Timestamp& Coupon::_Internal::fix_date(const Coupon* msg) {
  return *msg->_impl_.fix_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Coupon::_Internal::pay_one_bond(const Coupon* msg) {
  return *msg->_impl_.pay_one_bond_;
}
const ::google::protobuf::Timestamp& Coupon::_Internal::coupon_start_date(const Coupon* msg) {
  return *msg->_impl_.coupon_start_date_;
}
const ::google::protobuf::Timestamp& Coupon::_Internal::coupon_end_date(const Coupon* msg) {
  return *msg->_impl_.coupon_end_date_;
}
void Coupon::clear_coupon_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.coupon_date_ != nullptr) _impl_.coupon_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Coupon::clear_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fix_date_ != nullptr) _impl_.fix_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Coupon::clear_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pay_one_bond_ != nullptr) _impl_.pay_one_bond_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Coupon::clear_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.coupon_start_date_ != nullptr) _impl_.coupon_start_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Coupon::clear_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.coupon_end_date_ != nullptr) _impl_.coupon_end_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Coupon::Coupon(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Coupon)
}
inline PROTOBUF_NDEBUG_INLINE Coupon::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_) {}

Coupon::Coupon(
    ::google::protobuf::Arena* arena,
    const Coupon& from)
    : ::google::protobuf::Message(arena) {
  Coupon* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.coupon_date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_date_)
                : nullptr;
  _impl_.fix_date_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.fix_date_)
                : nullptr;
  _impl_.pay_one_bond_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.pay_one_bond_)
                : nullptr;
  _impl_.coupon_start_date_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_start_date_)
                : nullptr;
  _impl_.coupon_end_date_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_end_date_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, coupon_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, coupon_number_),
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, coupon_number_) +
               sizeof(Impl_::coupon_period_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Coupon)
}
inline PROTOBUF_NDEBUG_INLINE Coupon::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena) {}

inline void Coupon::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, coupon_date_),
           0,
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, coupon_date_) +
               sizeof(Impl_::coupon_period_));
}
Coupon::~Coupon() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Coupon)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Coupon::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  delete _impl_.coupon_date_;
  delete _impl_.fix_date_;
  delete _impl_.pay_one_bond_;
  delete _impl_.coupon_start_date_;
  delete _impl_.coupon_end_date_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Coupon::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.coupon_date_ != nullptr);
      _impl_.coupon_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fix_date_ != nullptr);
      _impl_.fix_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.pay_one_bond_ != nullptr);
      _impl_.pay_one_bond_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.coupon_start_date_ != nullptr);
      _impl_.coupon_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.coupon_end_date_ != nullptr);
      _impl_.coupon_end_date_->Clear();
    }
  }
  ::memset(&_impl_.coupon_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.coupon_period_) -
      reinterpret_cast<char*>(&_impl_.coupon_number_)) + sizeof(_impl_.coupon_period_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Coupon::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 66, 2> Coupon::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Coupon, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Coupon_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.figi_)}},
    // .google.protobuf.Timestamp coupon_date = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_date_)}},
    // int64 coupon_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Coupon, _impl_.coupon_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_number_)}},
    // .google.protobuf.Timestamp fix_date = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.fix_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.pay_one_bond_)}},
    // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Coupon, _impl_.coupon_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_type_)}},
    // .google.protobuf.Timestamp coupon_start_date = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_start_date_)}},
    // .google.protobuf.Timestamp coupon_end_date = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_end_date_)}},
    // int32 coupon_period = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Coupon, _impl_.coupon_period_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_period_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp coupon_date = 2;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 coupon_number = 3;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp fix_date = 4;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.fix_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.pay_one_bond_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp coupon_start_date = 7;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_start_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp coupon_end_date = 8;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_end_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 coupon_period = 9;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_period_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\55\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Coupon"
    "figi"
  }},
};

::uint8_t* Coupon::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Coupon.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp coupon_date = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::coupon_date(this),
        _Internal::coupon_date(this).GetCachedSize(), target, stream);
  }

  // int64 coupon_number = 3;
  if (this->_internal_coupon_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_coupon_number(), target);
  }

  // .google.protobuf.Timestamp fix_date = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::fix_date(this),
        _Internal::fix_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::pay_one_bond(this),
        _Internal::pay_one_bond(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
  if (this->_internal_coupon_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_coupon_type(), target);
  }

  // .google.protobuf.Timestamp coupon_start_date = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::coupon_start_date(this),
        _Internal::coupon_start_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp coupon_end_date = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::coupon_end_date(this),
        _Internal::coupon_end_date(this).GetCachedSize(), target, stream);
  }

  // int32 coupon_period = 9;
  if (this->_internal_coupon_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_coupon_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Coupon)
  return target;
}

::size_t Coupon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .google.protobuf.Timestamp coupon_date = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.coupon_date_);
    }

    // .google.protobuf.Timestamp fix_date = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fix_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pay_one_bond_);
    }

    // .google.protobuf.Timestamp coupon_start_date = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.coupon_start_date_);
    }

    // .google.protobuf.Timestamp coupon_end_date = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.coupon_end_date_);
    }

  }
  // int64 coupon_number = 3;
  if (this->_internal_coupon_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_coupon_number());
  }

  // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
  if (this->_internal_coupon_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_coupon_type());
  }

  // int32 coupon_period = 9;
  if (this->_internal_coupon_period() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_coupon_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Coupon::_class_data_ = {
    Coupon::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Coupon::GetClassData() const {
  return &_class_data_;
}

void Coupon::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Coupon*>(&to_msg);
  auto& from = static_cast<const Coupon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coupon_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_coupon_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fix_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_fix_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pay_one_bond()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_pay_one_bond());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_coupon_start_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_coupon_start_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_coupon_end_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_coupon_end_date());
    }
  }
  if (from._internal_coupon_number() != 0) {
    _this->_internal_set_coupon_number(from._internal_coupon_number());
  }
  if (from._internal_coupon_type() != 0) {
    _this->_internal_set_coupon_type(from._internal_coupon_type());
  }
  if (from._internal_coupon_period() != 0) {
    _this->_internal_set_coupon_period(from._internal_coupon_period());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Coupon::CopyFrom(const Coupon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Coupon::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Coupon::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Coupon::InternalSwap(Coupon* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_period_)
      + sizeof(Coupon::_impl_.coupon_period_)
      - PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_date_)>(
          reinterpret_cast<char*>(&_impl_.coupon_date_),
          reinterpret_cast<char*>(&other->_impl_.coupon_date_));
}

::google::protobuf::Metadata Coupon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[14]);
}
// ===================================================================

class CurrencyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrencyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Currency& instrument(const CurrencyResponse* msg);
  static void set_has_instrument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Currency& CurrencyResponse::_Internal::instrument(const CurrencyResponse* msg) {
  return *msg->_impl_.instrument_;
}
CurrencyResponse::CurrencyResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrencyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CurrencyResponse::CurrencyResponse(
    ::google::protobuf::Arena* arena,
    const CurrencyResponse& from)
    : ::google::protobuf::Message(arena) {
  CurrencyResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Currency>(arena, *from._impl_.instrument_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrencyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CurrencyResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
CurrencyResponse::~CurrencyResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CurrencyResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.instrument_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CurrencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CurrencyResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CurrencyResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CurrencyResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
    {PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Currency>()},
  }}, {{
  }},
};

::uint8_t* CurrencyResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  return target;
}

::size_t CurrencyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CurrencyResponse::_class_data_ = {
    CurrencyResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CurrencyResponse::GetClassData() const {
  return &_class_data_;
}

void CurrencyResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CurrencyResponse*>(&to_msg);
  auto& from = static_cast<const CurrencyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Currency::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyResponse::CopyFrom(const CurrencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CurrencyResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CurrencyResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CurrencyResponse::InternalSwap(CurrencyResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata CurrencyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[15]);
}
// ===================================================================

class CurrenciesResponse::_Internal {
 public:
};

CurrenciesResponse::CurrenciesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrenciesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

CurrenciesResponse::CurrenciesResponse(
    ::google::protobuf::Arena* arena,
    const CurrenciesResponse& from)
    : ::google::protobuf::Message(arena) {
  CurrenciesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrenciesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void CurrenciesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CurrenciesResponse::~CurrenciesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CurrenciesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CurrenciesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CurrenciesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CurrenciesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CurrenciesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CurrenciesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
    {PROTOBUF_FIELD_OFFSET(CurrenciesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Currency>()},
  }}, {{
  }},
};

::uint8_t* CurrenciesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  return target;
}

::size_t CurrenciesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CurrenciesResponse::_class_data_ = {
    CurrenciesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CurrenciesResponse::GetClassData() const {
  return &_class_data_;
}

void CurrenciesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CurrenciesResponse*>(&to_msg);
  auto& from = static_cast<const CurrenciesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CurrenciesResponse::CopyFrom(const CurrenciesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CurrenciesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CurrenciesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CurrenciesResponse::InternalSwap(CurrenciesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata CurrenciesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[16]);
}
// ===================================================================

class EtfResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EtfResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Etf& instrument(const EtfResponse* msg);
  static void set_has_instrument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Etf& EtfResponse::_Internal::instrument(const EtfResponse* msg) {
  return *msg->_impl_.instrument_;
}
EtfResponse::EtfResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EtfResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EtfResponse::EtfResponse(
    ::google::protobuf::Arena* arena,
    const EtfResponse& from)
    : ::google::protobuf::Message(arena) {
  EtfResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Etf>(arena, *from._impl_.instrument_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EtfResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EtfResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
EtfResponse::~EtfResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EtfResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.instrument_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EtfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EtfResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EtfResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EtfResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
    {PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Etf>()},
  }}, {{
  }},
};

::uint8_t* EtfResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  return target;
}

::size_t EtfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EtfResponse::_class_data_ = {
    EtfResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EtfResponse::GetClassData() const {
  return &_class_data_;
}

void EtfResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EtfResponse*>(&to_msg);
  auto& from = static_cast<const EtfResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Etf::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EtfResponse::CopyFrom(const EtfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EtfResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EtfResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EtfResponse::InternalSwap(EtfResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata EtfResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[17]);
}
// ===================================================================

class EtfsResponse::_Internal {
 public:
};

EtfsResponse::EtfsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

EtfsResponse::EtfsResponse(
    ::google::protobuf::Arena* arena,
    const EtfsResponse& from)
    : ::google::protobuf::Message(arena) {
  EtfsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void EtfsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EtfsResponse::~EtfsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EtfsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EtfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EtfsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EtfsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EtfsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EtfsResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
    {PROTOBUF_FIELD_OFFSET(EtfsResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Etf>()},
  }}, {{
  }},
};

::uint8_t* EtfsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  return target;
}

::size_t EtfsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EtfsResponse::_class_data_ = {
    EtfsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EtfsResponse::GetClassData() const {
  return &_class_data_;
}

void EtfsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EtfsResponse*>(&to_msg);
  auto& from = static_cast<const EtfsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EtfsResponse::CopyFrom(const EtfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EtfsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EtfsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EtfsResponse::InternalSwap(EtfsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata EtfsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[18]);
}
// ===================================================================

class FutureResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FutureResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Future& instrument(const FutureResponse* msg);
  static void set_has_instrument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Future& FutureResponse::_Internal::instrument(const FutureResponse* msg) {
  return *msg->_impl_.instrument_;
}
FutureResponse::FutureResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FutureResponse)
}
inline PROTOBUF_NDEBUG_INLINE FutureResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FutureResponse::FutureResponse(
    ::google::protobuf::Arena* arena,
    const FutureResponse& from)
    : ::google::protobuf::Message(arena) {
  FutureResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Future>(arena, *from._impl_.instrument_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FutureResponse)
}
inline PROTOBUF_NDEBUG_INLINE FutureResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FutureResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
FutureResponse::~FutureResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FutureResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.instrument_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FutureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FutureResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FutureResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FutureResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
    {PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Future>()},
  }}, {{
  }},
};

::uint8_t* FutureResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  return target;
}

::size_t FutureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FutureResponse::_class_data_ = {
    FutureResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FutureResponse::GetClassData() const {
  return &_class_data_;
}

void FutureResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FutureResponse*>(&to_msg);
  auto& from = static_cast<const FutureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Future::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FutureResponse::CopyFrom(const FutureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FutureResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FutureResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FutureResponse::InternalSwap(FutureResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata FutureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[19]);
}
// ===================================================================

class FuturesResponse::_Internal {
 public:
};

FuturesResponse::FuturesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
}
inline PROTOBUF_NDEBUG_INLINE FuturesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

FuturesResponse::FuturesResponse(
    ::google::protobuf::Arena* arena,
    const FuturesResponse& from)
    : ::google::protobuf::Message(arena) {
  FuturesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
}
inline PROTOBUF_NDEBUG_INLINE FuturesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void FuturesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FuturesResponse::~FuturesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FuturesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FuturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FuturesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FuturesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FuturesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FuturesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
    {PROTOBUF_FIELD_OFFSET(FuturesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Future>()},
  }}, {{
  }},
};

::uint8_t* FuturesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  return target;
}

::size_t FuturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FuturesResponse::_class_data_ = {
    FuturesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FuturesResponse::GetClassData() const {
  return &_class_data_;
}

void FuturesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FuturesResponse*>(&to_msg);
  auto& from = static_cast<const FuturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FuturesResponse::CopyFrom(const FuturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FuturesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FuturesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FuturesResponse::InternalSwap(FuturesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata FuturesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[20]);
}
// ===================================================================

class OptionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Option& instrument(const OptionResponse* msg);
  static void set_has_instrument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Option& OptionResponse::_Internal::instrument(const OptionResponse* msg) {
  return *msg->_impl_.instrument_;
}
OptionResponse::OptionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OptionResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

OptionResponse::OptionResponse(
    ::google::protobuf::Arena* arena,
    const OptionResponse& from)
    : ::google::protobuf::Message(arena) {
  OptionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Option>(arena, *from._impl_.instrument_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OptionResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OptionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
OptionResponse::~OptionResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OptionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.instrument_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OptionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> OptionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OptionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
    {PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Option>()},
  }}, {{
  }},
};

::uint8_t* OptionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  return target;
}

::size_t OptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OptionResponse::_class_data_ = {
    OptionResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OptionResponse::GetClassData() const {
  return &_class_data_;
}

void OptionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OptionResponse*>(&to_msg);
  auto& from = static_cast<const OptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Option::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OptionResponse::CopyFrom(const OptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OptionResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OptionResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OptionResponse::InternalSwap(OptionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata OptionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[21]);
}
// ===================================================================

class OptionsResponse::_Internal {
 public:
};

OptionsResponse::OptionsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

OptionsResponse::OptionsResponse(
    ::google::protobuf::Arena* arena,
    const OptionsResponse& from)
    : ::google::protobuf::Message(arena) {
  OptionsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void OptionsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OptionsResponse::~OptionsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OptionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OptionsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> OptionsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OptionsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OptionsResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
    {PROTOBUF_FIELD_OFFSET(OptionsResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Option>()},
  }}, {{
  }},
};

::uint8_t* OptionsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  return target;
}

::size_t OptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OptionsResponse::_class_data_ = {
    OptionsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OptionsResponse::GetClassData() const {
  return &_class_data_;
}

void OptionsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OptionsResponse*>(&to_msg);
  auto& from = static_cast<const OptionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OptionsResponse::CopyFrom(const OptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OptionsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OptionsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OptionsResponse::InternalSwap(OptionsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata OptionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[22]);
}
// ===================================================================

class Option::_Internal {
 public:
  using HasBits = decltype(std::declval<Option>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Option, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Option* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& basic_asset_size(const Option* msg);
  static void set_has_basic_asset_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Option* msg);
  static void set_has_klong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Option* msg);
  static void set_has_kshort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Option* msg);
  static void set_has_dlong(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Option* msg);
  static void set_has_dshort(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Option* msg);
  static void set_has_dlong_min(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Option* msg);
  static void set_has_dshort_min(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Option* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& strike_price(const Option* msg);
  static void set_has_strike_price(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::google::protobuf::Timestamp& expiration_date(const Option* msg);
  static void set_has_expiration_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::google::protobuf::Timestamp& first_trade_date(const Option* msg);
  static void set_has_first_trade_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::google::protobuf::Timestamp& last_trade_date(const Option* msg);
  static void set_has_last_trade_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const Option* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const Option* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::BrandData& Option::_Internal::brand(const Option* msg) {
  return *msg->_impl_.brand_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::basic_asset_size(const Option* msg) {
  return *msg->_impl_.basic_asset_size_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::klong(const Option* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::kshort(const Option* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::dlong(const Option* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::dshort(const Option* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::dlong_min(const Option* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::dshort_min(const Option* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_Internal::min_price_increment(const Option* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Option::_Internal::strike_price(const Option* msg) {
  return *msg->_impl_.strike_price_;
}
const ::google::protobuf::Timestamp& Option::_Internal::expiration_date(const Option* msg) {
  return *msg->_impl_.expiration_date_;
}
const ::google::protobuf::Timestamp& Option::_Internal::first_trade_date(const Option* msg) {
  return *msg->_impl_.first_trade_date_;
}
const ::google::protobuf::Timestamp& Option::_Internal::last_trade_date(const Option* msg) {
  return *msg->_impl_.last_trade_date_;
}
const ::google::protobuf::Timestamp& Option::_Internal::first_1min_candle_date(const Option* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& Option::_Internal::first_1day_candle_date(const Option* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
void Option::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Option::clear_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.basic_asset_size_ != nullptr) _impl_.basic_asset_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Option::clear_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Option::clear_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Option::clear_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Option::clear_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Option::clear_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Option::clear_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Option::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Option::clear_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.strike_price_ != nullptr) _impl_.strike_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Option::clear_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.expiration_date_ != nullptr) _impl_.expiration_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Option::clear_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_trade_date_ != nullptr) _impl_.first_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Option::clear_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_trade_date_ != nullptr) _impl_.last_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Option::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Option::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
Option::Option(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Option)
}
inline PROTOBUF_NDEBUG_INLINE Option::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        basic_asset_position_uid_(arena, from.basic_asset_position_uid_),
        name_(arena, from.name_),
        currency_(arena, from.currency_),
        settlement_currency_(arena, from.settlement_currency_),
        asset_type_(arena, from.asset_type_),
        basic_asset_(arena, from.basic_asset_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_) {}

Option::Option(
    ::google::protobuf::Arena* arena,
    const Option& from)
    : ::google::protobuf::Message(arena) {
  Option* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.brand_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_)
                : nullptr;
  _impl_.basic_asset_size_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.basic_asset_size_)
                : nullptr;
  _impl_.klong_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_)
                : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_)
                : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_)
                : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_)
                : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_)
                : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.strike_price_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.strike_price_)
                : nullptr;
  _impl_.expiration_date_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.expiration_date_)
                : nullptr;
  _impl_.first_trade_date_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_trade_date_)
                : nullptr;
  _impl_.last_trade_date_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_trade_date_)
                : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00002000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00004000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trading_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, trading_status_),
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, trading_status_) +
               sizeof(Impl_::api_trade_available_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Option)
}
inline PROTOBUF_NDEBUG_INLINE Option::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        position_uid_(arena),
        ticker_(arena),
        class_code_(arena),
        basic_asset_position_uid_(arena),
        name_(arena),
        currency_(arena),
        settlement_currency_(arena),
        asset_type_(arena),
        basic_asset_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena) {}

inline void Option::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, brand_),
           0,
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, brand_) +
               sizeof(Impl_::api_trade_available_flag_));
}
Option::~Option() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Option)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Option::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.basic_asset_position_uid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.settlement_currency_.Destroy();
  _impl_.asset_type_.Destroy();
  _impl_.basic_asset_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  delete _impl_.brand_;
  delete _impl_.basic_asset_size_;
  delete _impl_.klong_;
  delete _impl_.kshort_;
  delete _impl_.dlong_;
  delete _impl_.dshort_;
  delete _impl_.dlong_min_;
  delete _impl_.dshort_min_;
  delete _impl_.min_price_increment_;
  delete _impl_.strike_price_;
  delete _impl_.expiration_date_;
  delete _impl_.first_trade_date_;
  delete _impl_.last_trade_date_;
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Option::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Option)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.basic_asset_position_uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.settlement_currency_.ClearToEmpty();
  _impl_.asset_type_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.basic_asset_size_ != nullptr);
      _impl_.basic_asset_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.strike_price_ != nullptr);
      _impl_.strike_price_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.expiration_date_ != nullptr);
      _impl_.expiration_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.first_trade_date_ != nullptr);
      _impl_.first_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.last_trade_date_ != nullptr);
      _impl_.last_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
  }
  ::memset(&_impl_.trading_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
      reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.api_trade_available_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Option::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 45, 15, 250, 53> Option::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Option, _impl_._has_bits_),
    0, // no _extensions_
    409, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3220176864,  // skipmap
    offsetof(decltype(_table_), field_entries),
    45,  // num_field_entries
    15,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Option_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.uid_)}},
    // string position_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.position_uid_)}},
    // string ticker = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.ticker_)}},
    // string class_code = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.class_code_)}},
    // string basic_asset_position_uid = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string settlement_currency = 112;
    {::_pbi::TcParser::FastUS2,
     {1922, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_currency_)}},
    // string sector = 161;
    {::_pbi::TcParser::FastUS2,
     {2698, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.sector_)}},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
    {::_pbi::TcParser::FastMtS2,
     {2706, 0, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.brand_)}},
    // string asset_type = 131;
    {::_pbi::TcParser::FastUS2,
     {2202, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.asset_type_)}},
    // string basic_asset = 132;
    {::_pbi::TcParser::FastUS2,
     {2210, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.trading_status_)}},
    // bool for_qual_investor_flag = 406;
    {::_pbi::TcParser::FastV8S2,
     {6576, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.for_qual_investor_flag_)}},
    // string country_of_risk = 151;
    {::_pbi::TcParser::FastUS2,
     {2490, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 152;
    {::_pbi::TcParser::FastUS2,
     {2498, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_name_)}},
    // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
    {::_pbi::TcParser::FastV32S2,
     {712, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.direction_)}},
    // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
    {::_pbi::TcParser::FastV32S2,
     {720, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.payment_type_)}},
    // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
    {::_pbi::TcParser::FastV32S2,
     {728, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.style_)}},
    // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
    {::_pbi::TcParser::FastV32S2,
     {736, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_type_)}},
    // string exchange = 141;
    {::_pbi::TcParser::FastUS2,
     {2282, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.exchange_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
    {::_pbi::TcParser::FastMtS2,
     {3570, 3, 3, PROTOBUF_FIELD_OFFSET(Option, _impl_.kshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.real_exchange_)}},
  }}, {{
    41, 0, 24,
    65520, 7, 65535, 11, 65535, 11, 61439, 11, 65343, 12, 62463, 14,
    16367, 16, 64767, 19, 65535, 21, 65535, 21, 64510, 21, 48143, 23,
    65279, 30, 65535, 31, 65535, 31, 65535, 31, 16367, 31, 64767, 34,
    65535, 36, 65535, 36, 65535, 36, 65535, 36, 255, 36, 65534, 44,
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string position_uid = 2;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 3;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 4;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset_position_uid = 5;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.payment_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.style_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 101;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currency = 111;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string settlement_currency = 112;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_type = 131;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.asset_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset = 132;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 141;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk = 151;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 152;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 161;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.brand_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 lot = 201;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_size_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.klong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.kshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dlong_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dshort_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dlong_min_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dshort_min_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.strike_price_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp expiration_date = 301;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.expiration_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_trade_date = 311;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.first_trade_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_trade_date = 312;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.last_trade_date_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1min_candle_date = 321;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 322;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 401;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_iis_flag = 402;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool otc_flag = 403;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 404;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 405;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 406;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 407;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 408;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool api_trade_available_flag = 409;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\55\3\14\6\12\30\0\0\0\0\0\0\4\10\23\12\13\10\17\24\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Option"
    "uid"
    "position_uid"
    "ticker"
    "class_code"
    "basic_asset_position_uid"
    "name"
    "currency"
    "settlement_currency"
    "asset_type"
    "basic_asset"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
  }},
};

::uint8_t* Option::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Option)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string position_uid = 2;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.position_uid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.class_code");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string basic_asset_position_uid = 5;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    const std::string& _s = this->_internal_basic_asset_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        21, this->_internal_trading_status(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        31, this->_internal_real_exchange(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        41, this->_internal_direction(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
  if (this->_internal_payment_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        42, this->_internal_payment_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        43, this->_internal_style(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
  if (this->_internal_settlement_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        44, this->_internal_settlement_type(), target);
  }

  // string name = 101;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.name");
    target = stream->WriteStringMaybeAliased(101, _s, target);
  }

  // string currency = 111;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.currency");
    target = stream->WriteStringMaybeAliased(111, _s, target);
  }

  // string settlement_currency = 112;
  if (!this->_internal_settlement_currency().empty()) {
    const std::string& _s = this->_internal_settlement_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.settlement_currency");
    target = stream->WriteStringMaybeAliased(112, _s, target);
  }

  // string asset_type = 131;
  if (!this->_internal_asset_type().empty()) {
    const std::string& _s = this->_internal_asset_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.asset_type");
    target = stream->WriteStringMaybeAliased(131, _s, target);
  }

  // string basic_asset = 132;
  if (!this->_internal_basic_asset().empty()) {
    const std::string& _s = this->_internal_basic_asset();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.basic_asset");
    target = stream->WriteStringMaybeAliased(132, _s, target);
  }

  // string exchange = 141;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.exchange");
    target = stream->WriteStringMaybeAliased(141, _s, target);
  }

  // string country_of_risk = 151;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.country_of_risk");
    target = stream->WriteStringMaybeAliased(151, _s, target);
  }

  // string country_of_risk_name = 152;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(152, _s, target);
  }

  // string sector = 161;
  if (!this->_internal_sector().empty()) {
    const std::string& _s = this->_internal_sector();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Option.sector");
    target = stream->WriteStringMaybeAliased(161, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        162, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  // int32 lot = 201;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        201, this->_internal_lot(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        211, _Internal::basic_asset_size(this),
        _Internal::basic_asset_size(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        221, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        222, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        223, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        224, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        225, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        226, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        231, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        241, _Internal::strike_price(this),
        _Internal::strike_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expiration_date = 301;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        301, _Internal::expiration_date(this),
        _Internal::expiration_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_trade_date = 311;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        311, _Internal::first_trade_date(this),
        _Internal::first_trade_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_trade_date = 312;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        312, _Internal::last_trade_date(this),
        _Internal::last_trade_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 321;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        321, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 322;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        322, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 401;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        401, this->_internal_short_enabled_flag(), target);
  }

  // bool for_iis_flag = 402;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        402, this->_internal_for_iis_flag(), target);
  }

  // bool otc_flag = 403;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        403, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        404, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        405, this->_internal_sell_available_flag(), target);
  }

  // bool for_qual_investor_flag = 406;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        406, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 407;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        407, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 408;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        408, this->_internal_blocked_tca_flag(), target);
  }

  // bool api_trade_available_flag = 409;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        409, this->_internal_api_trade_available_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Option)
  return target;
}

::size_t Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Option)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 2;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string basic_asset_position_uid = 5;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_basic_asset_position_uid());
  }

  // string name = 101;
  if (!this->_internal_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string currency = 111;
  if (!this->_internal_currency().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string settlement_currency = 112;
  if (!this->_internal_settlement_currency().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_settlement_currency());
  }

  // string asset_type = 131;
  if (!this->_internal_asset_type().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_type());
  }

  // string basic_asset = 132;
  if (!this->_internal_basic_asset().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_basic_asset());
  }

  // string exchange = 141;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string country_of_risk = 151;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 152;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  // string sector = 161;
  if (!this->_internal_sector().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sector());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.basic_asset_size_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.klong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_min_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.strike_price_);
    }

    // .google.protobuf.Timestamp expiration_date = 301;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expiration_date_);
    }

    // .google.protobuf.Timestamp first_trade_date = 311;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_trade_date_);
    }

    // .google.protobuf.Timestamp last_trade_date = 312;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_trade_date_);
    }

    // .google.protobuf.Timestamp first_1min_candle_date = 321;
    if (cached_has_bits & 0x00002000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

    // .google.protobuf.Timestamp first_1day_candle_date = 322;
    if (cached_has_bits & 0x00004000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
  if (this->_internal_direction() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
  if (this->_internal_payment_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_payment_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
  if (this->_internal_style() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_style());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
  if (this->_internal_settlement_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_settlement_type());
  }

  // int32 lot = 201;
  if (this->_internal_lot() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_lot());
  }

  // bool short_enabled_flag = 401;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 3;
  }

  // bool for_iis_flag = 402;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 3;
  }

  // bool otc_flag = 403;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  // bool for_qual_investor_flag = 406;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 407;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 408;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  // bool api_trade_available_flag = 409;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Option::_class_data_ = {
    Option::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Option::GetClassData() const {
  return &_class_data_;
}

void Option::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Option*>(&to_msg);
  auto& from = static_cast<const Option&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Option)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_settlement_currency().empty()) {
    _this->_internal_set_settlement_currency(from._internal_settlement_currency());
  }
  if (!from._internal_asset_type().empty()) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
          from._internal_brand());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_basic_asset_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_basic_asset_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_klong());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_kshort());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong_min());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort_min());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_strike_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_strike_price());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_expiration_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_expiration_date());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_first_trade_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_trade_date());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_last_trade_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_trade_date());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_payment_type() != 0) {
    _this->_internal_set_payment_type(from._internal_payment_type());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  if (from._internal_settlement_type() != 0) {
    _this->_internal_set_settlement_type(from._internal_settlement_type());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Option::CopyFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Option::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Option::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Option::InternalSwap(Option* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_position_uid_, &other->_impl_.basic_asset_position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_currency_, &other->_impl_.settlement_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_type_, &other->_impl_.asset_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_, &other->_impl_.basic_asset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Option, _impl_.api_trade_available_flag_)
      + sizeof(Option::_impl_.api_trade_available_flag_)
      - PROTOBUF_FIELD_OFFSET(Option, _impl_.brand_)>(
          reinterpret_cast<char*>(&_impl_.brand_),
          reinterpret_cast<char*>(&other->_impl_.brand_));
}

::google::protobuf::Metadata Option::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[23]);
}
// ===================================================================

class ShareResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ShareResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Share& instrument(const ShareResponse* msg);
  static void set_has_instrument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Share& ShareResponse::_Internal::instrument(const ShareResponse* msg) {
  return *msg->_impl_.instrument_;
}
ShareResponse::ShareResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.ShareResponse)
}
inline PROTOBUF_NDEBUG_INLINE ShareResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ShareResponse::ShareResponse(
    ::google::protobuf::Arena* arena,
    const ShareResponse& from)
    : ::google::protobuf::Message(arena) {
  ShareResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Share>(arena, *from._impl_.instrument_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.ShareResponse)
}
inline PROTOBUF_NDEBUG_INLINE ShareResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ShareResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
ShareResponse::~ShareResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ShareResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.instrument_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ShareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ShareResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ShareResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ShareResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
    {PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Share>()},
  }}, {{
  }},
};

::uint8_t* ShareResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  return target;
}

::size_t ShareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ShareResponse::_class_data_ = {
    ShareResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ShareResponse::GetClassData() const {
  return &_class_data_;
}

void ShareResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ShareResponse*>(&to_msg);
  auto& from = static_cast<const ShareResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Share::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ShareResponse::CopyFrom(const ShareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ShareResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ShareResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ShareResponse::InternalSwap(ShareResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata ShareResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[24]);
}
// ===================================================================

class SharesResponse::_Internal {
 public:
};

SharesResponse::SharesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SharesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SharesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

SharesResponse::SharesResponse(
    ::google::protobuf::Arena* arena,
    const SharesResponse& from)
    : ::google::protobuf::Message(arena) {
  SharesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SharesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SharesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void SharesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SharesResponse::~SharesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SharesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SharesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SharesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SharesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SharesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SharesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
    {PROTOBUF_FIELD_OFFSET(SharesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Share>()},
  }}, {{
  }},
};

::uint8_t* SharesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  return target;
}

::size_t SharesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SharesResponse::_class_data_ = {
    SharesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SharesResponse::GetClassData() const {
  return &_class_data_;
}

void SharesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SharesResponse*>(&to_msg);
  auto& from = static_cast<const SharesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SharesResponse::CopyFrom(const SharesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SharesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SharesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SharesResponse::InternalSwap(SharesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata SharesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[25]);
}
// ===================================================================

class Bond::_Internal {
 public:
  using HasBits = decltype(std::declval<Bond>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Bond, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Bond* msg);
  static void set_has_klong(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Bond* msg);
  static void set_has_kshort(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Bond* msg);
  static void set_has_dlong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Bond* msg);
  static void set_has_dshort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Bond* msg);
  static void set_has_dlong_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Bond* msg);
  static void set_has_dshort_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Timestamp& maturity_date(const Bond* msg);
  static void set_has_maturity_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal(const Bond* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_nominal(const Bond* msg);
  static void set_has_initial_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::google::protobuf::Timestamp& state_reg_date(const Bond* msg);
  static void set_has_state_reg_date(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::google::protobuf::Timestamp& placement_date(const Bond* msg);
  static void set_has_placement_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& placement_price(const Bond* msg);
  static void set_has_placement_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value(const Bond* msg);
  static void set_has_aci_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Bond* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const Bond* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const Bond* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Bond* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_Internal::klong(const Bond* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_Internal::kshort(const Bond* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_Internal::dlong(const Bond* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_Internal::dshort(const Bond* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_Internal::dlong_min(const Bond* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_Internal::dshort_min(const Bond* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::google::protobuf::Timestamp& Bond::_Internal::maturity_date(const Bond* msg) {
  return *msg->_impl_.maturity_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_Internal::nominal(const Bond* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_Internal::initial_nominal(const Bond* msg) {
  return *msg->_impl_.initial_nominal_;
}
const ::google::protobuf::Timestamp& Bond::_Internal::state_reg_date(const Bond* msg) {
  return *msg->_impl_.state_reg_date_;
}
const ::google::protobuf::Timestamp& Bond::_Internal::placement_date(const Bond* msg) {
  return *msg->_impl_.placement_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_Internal::placement_price(const Bond* msg) {
  return *msg->_impl_.placement_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_Internal::aci_value(const Bond* msg) {
  return *msg->_impl_.aci_value_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_Internal::min_price_increment(const Bond* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::google::protobuf::Timestamp& Bond::_Internal::first_1min_candle_date(const Bond* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& Bond::_Internal::first_1day_candle_date(const Bond* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData& Bond::_Internal::brand(const Bond* msg) {
  return *msg->_impl_.brand_;
}
void Bond::clear_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Bond::clear_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Bond::clear_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Bond::clear_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Bond::clear_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Bond::clear_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Bond::clear_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.maturity_date_ != nullptr) _impl_.maturity_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Bond::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Bond::clear_initial_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.initial_nominal_ != nullptr) _impl_.initial_nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Bond::clear_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.state_reg_date_ != nullptr) _impl_.state_reg_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Bond::clear_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Bond::clear_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.placement_price_ != nullptr) _impl_.placement_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Bond::clear_aci_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.aci_value_ != nullptr) _impl_.aci_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Bond::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Bond::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void Bond::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void Bond::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
Bond::Bond(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Bond)
}
inline PROTOBUF_NDEBUG_INLINE Bond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        issue_kind_(arena, from.issue_kind_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Bond::Bond(
    ::google::protobuf::Arena* arena,
    const Bond& from)
    : ::google::protobuf::Message(arena) {
  Bond* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_)
                : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_)
                : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_)
                : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_)
                : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_)
                : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_)
                : nullptr;
  _impl_.maturity_date_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.maturity_date_)
                : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.nominal_)
                : nullptr;
  _impl_.initial_nominal_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_nominal_)
                : nullptr;
  _impl_.state_reg_date_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.state_reg_date_)
                : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_)
                : nullptr;
  _impl_.placement_price_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.placement_price_)
                : nullptr;
  _impl_.aci_value_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.aci_value_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00002000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00004000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00008000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00010000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, risk_level_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::risk_level_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Bond)
}
inline PROTOBUF_NDEBUG_INLINE Bond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        issue_kind_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Bond::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, risk_level_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::risk_level_));
}
Bond::~Bond() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Bond)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Bond::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  delete _impl_.klong_;
  delete _impl_.kshort_;
  delete _impl_.dlong_;
  delete _impl_.dshort_;
  delete _impl_.dlong_min_;
  delete _impl_.dshort_min_;
  delete _impl_.maturity_date_;
  delete _impl_.nominal_;
  delete _impl_.initial_nominal_;
  delete _impl_.state_reg_date_;
  delete _impl_.placement_date_;
  delete _impl_.placement_price_;
  delete _impl_.aci_value_;
  delete _impl_.min_price_increment_;
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  delete _impl_.brand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Bond::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Bond)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.maturity_date_ != nullptr);
      _impl_.maturity_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.initial_nominal_ != nullptr);
      _impl_.initial_nominal_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.state_reg_date_ != nullptr);
      _impl_.state_reg_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.placement_price_ != nullptr);
      _impl_.placement_price_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.aci_value_ != nullptr);
      _impl_.aci_value_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    ABSL_DCHECK(_impl_.brand_ != nullptr);
    _impl_.brand_->Clear();
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.risk_level_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.risk_level_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Bond::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 52, 17, 219, 9> Bond::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bond, _impl_._has_bits_),
    0, // no _extensions_
    64, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    8192,  // skipmap
    offsetof(decltype(_table_), field_entries),
    52,  // num_field_entries
    17,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Bond_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Bond, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.klong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Bond, _impl_.kshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_min_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Bond, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.exchange_)}},
    // int32 coupon_quantity_per_year = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.coupon_quantity_per_year_)}},
    // .google.protobuf.Timestamp maturity_date = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 6, 6, PROTOBUF_FIELD_OFFSET(Bond, _impl_.maturity_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 7, 7, PROTOBUF_FIELD_OFFSET(Bond, _impl_.nominal_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 8, 8, PROTOBUF_FIELD_OFFSET(Bond, _impl_.initial_nominal_)}},
    // .google.protobuf.Timestamp state_reg_date = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 9, 9, PROTOBUF_FIELD_OFFSET(Bond, _impl_.state_reg_date_)}},
    // .google.protobuf.Timestamp placement_date = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 10, 10, PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 11, 11, PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 12, 12, PROTOBUF_FIELD_OFFSET(Bond, _impl_.aci_value_)}},
    // string country_of_risk = 25;
    {::_pbi::TcParser::FastUS2,
     {458, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_name_)}},
    // string sector = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.sector_)}},
    // string issue_kind = 28;
    {::_pbi::TcParser::FastUS2,
     {482, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_kind_)}},
    // int64 issue_size = 29;
    {::_pbi::TcParser::FastV64S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_)}},
    // int64 issue_size_plan = 30;
    {::_pbi::TcParser::FastV64S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_plan_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.trading_status_)}},
  }}, {{
    33, 0, 2,
    63488, 31, 3843, 42,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 coupon_quantity_per_year = 17;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.coupon_quantity_per_year_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp maturity_date = 18;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.maturity_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.nominal_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.initial_nominal_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp state_reg_date = 21;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.state_reg_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp placement_date = 22;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_price_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.aci_value_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 25;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 26;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 27;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string issue_kind = 28;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 issue_size = 29;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 issue_size_plan = 30;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_plan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 32;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 33;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 34;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool floating_coupon_flag = 35;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.floating_coupon_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool perpetual_flag = 36;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.perpetual_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool amortization_flag = 37;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.amortization_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 39;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 40;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 42;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 43;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 51;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 52;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 53;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 54;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool subordinated_flag = 55;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.subordinated_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool liquidity_flag = 56;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.liquidity_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 61;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 62;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.risk_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.brand_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
  }}, {{
    "\53\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\0\0\0\0\0\0\0\17\24\6\12\0\0\0\0\0\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Bond"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "issue_kind"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

::uint8_t* Bond::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Bond)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.isin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.currency");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.name");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.exchange");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // int32 coupon_quantity_per_year = 17;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_coupon_quantity_per_year(), target);
  }

  // .google.protobuf.Timestamp maturity_date = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, _Internal::maturity_date(this),
        _Internal::maturity_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, _Internal::initial_nominal(this),
        _Internal::initial_nominal(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp state_reg_date = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::state_reg_date(this),
        _Internal::state_reg_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp placement_date = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        22, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        23, _Internal::placement_price(this),
        _Internal::placement_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, _Internal::aci_value(this),
        _Internal::aci_value(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 25;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk");
    target = stream->WriteStringMaybeAliased(25, _s, target);
  }

  // string country_of_risk_name = 26;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(26, _s, target);
  }

  // string sector = 27;
  if (!this->_internal_sector().empty()) {
    const std::string& _s = this->_internal_sector();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.sector");
    target = stream->WriteStringMaybeAliased(27, _s, target);
  }

  // string issue_kind = 28;
  if (!this->_internal_issue_kind().empty()) {
    const std::string& _s = this->_internal_issue_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.issue_kind");
    target = stream->WriteStringMaybeAliased(28, _s, target);
  }

  // int64 issue_size = 29;
  if (this->_internal_issue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        29, this->_internal_issue_size(), target);
  }

  // int64 issue_size_plan = 30;
  if (this->_internal_issue_size_plan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        30, this->_internal_issue_size_plan(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        31, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 32;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        32, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 33;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        33, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 34;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        34, this->_internal_sell_available_flag(), target);
  }

  // bool floating_coupon_flag = 35;
  if (this->_internal_floating_coupon_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        35, this->_internal_floating_coupon_flag(), target);
  }

  // bool perpetual_flag = 36;
  if (this->_internal_perpetual_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        36, this->_internal_perpetual_flag(), target);
  }

  // bool amortization_flag = 37;
  if (this->_internal_amortization_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        37, this->_internal_amortization_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        38, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 39;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        39, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 40;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.uid");
    target = stream->WriteStringMaybeAliased(40, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        41, this->_internal_real_exchange(), target);
  }

  // string position_uid = 42;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.position_uid");
    target = stream->WriteStringMaybeAliased(42, _s, target);
  }

  // string asset_uid = 43;
  if (!this->_internal_asset_uid().empty()) {
    const std::string& _s = this->_internal_asset_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Bond.asset_uid");
    target = stream->WriteStringMaybeAliased(43, _s, target);
  }

  // bool for_iis_flag = 51;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        51, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        52, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        53, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        54, this->_internal_blocked_tca_flag(), target);
  }

  // bool subordinated_flag = 55;
  if (this->_internal_subordinated_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        55, this->_internal_subordinated_flag(), target);
  }

  // bool liquidity_flag = 56;
  if (this->_internal_liquidity_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        56, this->_internal_liquidity_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 61;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        61, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 62;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        62, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
  if (this->_internal_risk_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        63, this->_internal_risk_level(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        64, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Bond)
  return target;
}

::size_t Bond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Bond)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string country_of_risk = 25;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 26;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  // string sector = 27;
  if (!this->_internal_sector().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sector());
  }

  // string issue_kind = 28;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_issue_kind());
  }

  // string uid = 40;
  if (!this->_internal_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 42;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  // string asset_uid = 43;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.klong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_min_);
    }

    // .google.protobuf.Timestamp maturity_date = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.maturity_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.initial_nominal_);
    }

    // .google.protobuf.Timestamp state_reg_date = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.state_reg_date_);
    }

    // .google.protobuf.Timestamp placement_date = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.placement_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.placement_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.aci_value_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
    if (cached_has_bits & 0x00002000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

    // .google.protobuf.Timestamp first_1min_candle_date = 61;
    if (cached_has_bits & 0x00004000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

    // .google.protobuf.Timestamp first_1day_candle_date = 62;
    if (cached_has_bits & 0x00008000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (cached_has_bits & 0x00010000u) {
    total_size +=
        2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lot());
  }

  // int32 coupon_quantity_per_year = 17;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_coupon_quantity_per_year());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 2;
  }

  // bool otc_flag = 32;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool buy_available_flag = 33;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 34;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // int64 issue_size = 29;
  if (this->_internal_issue_size() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_issue_size());
  }

  // int64 issue_size_plan = 30;
  if (this->_internal_issue_size_plan() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_issue_size_plan());
  }

  // bool floating_coupon_flag = 35;
  if (this->_internal_floating_coupon_flag() != 0) {
    total_size += 3;
  }

  // bool perpetual_flag = 36;
  if (this->_internal_perpetual_flag() != 0) {
    total_size += 3;
  }

  // bool amortization_flag = 37;
  if (this->_internal_amortization_flag() != 0) {
    total_size += 3;
  }

  // bool api_trade_available_flag = 39;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool for_iis_flag = 51;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 3;
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  // bool subordinated_flag = 55;
  if (this->_internal_subordinated_flag() != 0) {
    total_size += 3;
  }

  // bool liquidity_flag = 56;
  if (this->_internal_liquidity_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
  if (this->_internal_risk_level() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_risk_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Bond::_class_data_ = {
    Bond::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Bond::GetClassData() const {
  return &_class_data_;
}

void Bond::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Bond*>(&to_msg);
  auto& from = static_cast<const Bond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Bond)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_klong());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_kshort());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong_min());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort_min());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_maturity_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_maturity_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_nominal());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_initial_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_initial_nominal());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_state_reg_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_state_reg_date());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_placement_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_placement_date());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_placement_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_placement_price());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_aci_value()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_aci_value());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_coupon_quantity_per_year() != 0) {
    _this->_internal_set_coupon_quantity_per_year(from._internal_coupon_quantity_per_year());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_issue_size() != 0) {
    _this->_internal_set_issue_size(from._internal_issue_size());
  }
  if (from._internal_issue_size_plan() != 0) {
    _this->_internal_set_issue_size_plan(from._internal_issue_size_plan());
  }
  if (from._internal_floating_coupon_flag() != 0) {
    _this->_internal_set_floating_coupon_flag(from._internal_floating_coupon_flag());
  }
  if (from._internal_perpetual_flag() != 0) {
    _this->_internal_set_perpetual_flag(from._internal_perpetual_flag());
  }
  if (from._internal_amortization_flag() != 0) {
    _this->_internal_set_amortization_flag(from._internal_amortization_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_subordinated_flag() != 0) {
    _this->_internal_set_subordinated_flag(from._internal_subordinated_flag());
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_internal_set_liquidity_flag(from._internal_liquidity_flag());
  }
  if (from._internal_risk_level() != 0) {
    _this->_internal_set_risk_level(from._internal_risk_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bond::CopyFrom(const Bond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Bond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Bond::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Bond::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Bond::InternalSwap(Bond* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bond, _impl_.risk_level_)
      + sizeof(Bond::_impl_.risk_level_)
      - PROTOBUF_FIELD_OFFSET(Bond, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Bond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[26]);
}
// ===================================================================

class Currency::_Internal {
 public:
  using HasBits = decltype(std::declval<Currency>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Currency, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Currency* msg);
  static void set_has_klong(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Currency* msg);
  static void set_has_kshort(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Currency* msg);
  static void set_has_dlong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Currency* msg);
  static void set_has_dshort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Currency* msg);
  static void set_has_dlong_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Currency* msg);
  static void set_has_dshort_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal(const Currency* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Currency* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const Currency* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const Currency* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Currency* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_Internal::klong(const Currency* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_Internal::kshort(const Currency* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_Internal::dlong(const Currency* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_Internal::dshort(const Currency* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_Internal::dlong_min(const Currency* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_Internal::dshort_min(const Currency* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Currency::_Internal::nominal(const Currency* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_Internal::min_price_increment(const Currency* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::google::protobuf::Timestamp& Currency::_Internal::first_1min_candle_date(const Currency* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& Currency::_Internal::first_1day_candle_date(const Currency* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData& Currency::_Internal::brand(const Currency* msg) {
  return *msg->_impl_.brand_;
}
void Currency::clear_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Currency::clear_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Currency::clear_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Currency::clear_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Currency::clear_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Currency::clear_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Currency::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Currency::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Currency::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Currency::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Currency::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
Currency::Currency(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Currency)
}
inline PROTOBUF_NDEBUG_INLINE Currency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        iso_currency_name_(arena, from.iso_currency_name_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_) {}

Currency::Currency(
    ::google::protobuf::Arena* arena,
    const Currency& from)
    : ::google::protobuf::Message(arena) {
  Currency* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_)
                : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_)
                : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_)
                : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_)
                : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_)
                : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_)
                : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.nominal_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::blocked_tca_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Currency)
}
inline PROTOBUF_NDEBUG_INLINE Currency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        iso_currency_name_(arena),
        uid_(arena),
        position_uid_(arena) {}

inline void Currency::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::blocked_tca_flag_));
}
Currency::~Currency() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Currency)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Currency::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.iso_currency_name_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  delete _impl_.klong_;
  delete _impl_.kshort_;
  delete _impl_.dlong_;
  delete _impl_.dshort_;
  delete _impl_.dlong_min_;
  delete _impl_.dshort_min_;
  delete _impl_.nominal_;
  delete _impl_.min_price_increment_;
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  delete _impl_.brand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Currency)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.iso_currency_name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Currency::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 35, 11, 199, 9> Currency::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Currency, _impl_._has_bits_),
    0, // no _extensions_
    60, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3758104576,  // skipmap
    offsetof(decltype(_table_), field_entries),
    35,  // num_field_entries
    11,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Currency_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Currency, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.klong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Currency, _impl_.kshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_min_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Currency, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.exchange_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 6, 6, PROTOBUF_FIELD_OFFSET(Currency, _impl_.nominal_)}},
    // string country_of_risk = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_name_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.trading_status_)}},
    // bool otc_flag = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.otc_flag_)}},
    // bool buy_available_flag = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.sell_available_flag_)}},
    // string iso_currency_name = 24;
    {::_pbi::TcParser::FastUS2,
     {450, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.iso_currency_name_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 7, 7, PROTOBUF_FIELD_OFFSET(Currency, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.api_trade_available_flag_)}},
    // string uid = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.uid_)}},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.real_exchange_)}},
    // string position_uid = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    41, 0, 2,
    18430, 28, 65526, 33,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.nominal_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 18;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 19;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 21;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 22;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 23;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string iso_currency_name = 24;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.iso_currency_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 27;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 29;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 41;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 52;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 53;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 54;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.brand_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
  }}, {{
    "\57\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\17\24\0\0\0\0\21\0\0\3\0\14\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Currency"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "iso_currency_name"
    "uid"
    "position_uid"
  }},
};

::uint8_t* Currency::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Currency)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.isin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.currency");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.name");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.exchange");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 18;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // string country_of_risk_name = 19;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        20, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 21;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 22;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 23;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_sell_available_flag(), target);
  }

  // string iso_currency_name = 24;
  if (!this->_internal_iso_currency_name().empty()) {
    const std::string& _s = this->_internal_iso_currency_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name");
    target = stream->WriteStringMaybeAliased(24, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        25, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 26;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 27;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.uid");
    target = stream->WriteStringMaybeAliased(27, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        28, this->_internal_real_exchange(), target);
  }

  // string position_uid = 29;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Currency.position_uid");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        41, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        52, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        53, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        54, this->_internal_blocked_tca_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Currency)
  return target;
}

::size_t Currency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Currency)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string country_of_risk = 18;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 19;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  // string iso_currency_name = 24;
  if (!this->_internal_iso_currency_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_iso_currency_name());
  }

  // string uid = 27;
  if (!this->_internal_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 29;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.klong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
    }

  }
  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lot());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 2;
  }

  // bool otc_flag = 21;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool buy_available_flag = 22;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 23;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 26;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 3;
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Currency::_class_data_ = {
    Currency::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Currency::GetClassData() const {
  return &_class_data_;
}

void Currency::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Currency*>(&to_msg);
  auto& from = static_cast<const Currency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Currency)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_iso_currency_name().empty()) {
    _this->_internal_set_iso_currency_name(from._internal_iso_currency_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_klong());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_kshort());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong_min());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort_min());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_nominal());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
          from._internal_brand());
    }
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Currency::CopyFrom(const Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Currency::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Currency::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Currency::InternalSwap(Currency* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iso_currency_name_, &other->_impl_.iso_currency_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Currency, _impl_.blocked_tca_flag_)
      + sizeof(Currency::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(Currency, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Currency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[27]);
}
// ===================================================================

class Etf::_Internal {
 public:
  using HasBits = decltype(std::declval<Etf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Etf, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Etf* msg);
  static void set_has_klong(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Etf* msg);
  static void set_has_kshort(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Etf* msg);
  static void set_has_dlong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Etf* msg);
  static void set_has_dshort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Etf* msg);
  static void set_has_dlong_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Etf* msg);
  static void set_has_dshort_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& fixed_commission(const Etf* msg);
  static void set_has_fixed_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::Timestamp& released_date(const Etf* msg);
  static void set_has_released_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& num_shares(const Etf* msg);
  static void set_has_num_shares(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Etf* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const Etf* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const Etf* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Etf* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::klong(const Etf* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::kshort(const Etf* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::dlong(const Etf* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::dshort(const Etf* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::dlong_min(const Etf* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::dshort_min(const Etf* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::fixed_commission(const Etf* msg) {
  return *msg->_impl_.fixed_commission_;
}
const ::google::protobuf::Timestamp& Etf::_Internal::released_date(const Etf* msg) {
  return *msg->_impl_.released_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::num_shares(const Etf* msg) {
  return *msg->_impl_.num_shares_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_Internal::min_price_increment(const Etf* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::google::protobuf::Timestamp& Etf::_Internal::first_1min_candle_date(const Etf* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& Etf::_Internal::first_1day_candle_date(const Etf* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData& Etf::_Internal::brand(const Etf* msg) {
  return *msg->_impl_.brand_;
}
void Etf::clear_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Etf::clear_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Etf::clear_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Etf::clear_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Etf::clear_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Etf::clear_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Etf::clear_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fixed_commission_ != nullptr) _impl_.fixed_commission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Etf::clear_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.released_date_ != nullptr) _impl_.released_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Etf::clear_num_shares() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.num_shares_ != nullptr) _impl_.num_shares_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Etf::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Etf::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Etf::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Etf::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
Etf::Etf(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Etf)
}
inline PROTOBUF_NDEBUG_INLINE Etf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        focus_type_(arena, from.focus_type_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        rebalancing_freq_(arena, from.rebalancing_freq_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Etf::Etf(
    ::google::protobuf::Arena* arena,
    const Etf& from)
    : ::google::protobuf::Message(arena) {
  Etf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_)
                : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_)
                : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_)
                : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_)
                : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_)
                : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_)
                : nullptr;
  _impl_.fixed_commission_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.fixed_commission_)
                : nullptr;
  _impl_.released_date_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.released_date_)
                : nullptr;
  _impl_.num_shares_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.num_shares_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::liquidity_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Etf)
}
inline PROTOBUF_NDEBUG_INLINE Etf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        focus_type_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        rebalancing_freq_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Etf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::liquidity_flag_));
}
Etf::~Etf() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Etf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Etf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.focus_type_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.rebalancing_freq_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  delete _impl_.klong_;
  delete _impl_.kshort_;
  delete _impl_.dlong_;
  delete _impl_.dshort_;
  delete _impl_.dlong_min_;
  delete _impl_.dshort_min_;
  delete _impl_.fixed_commission_;
  delete _impl_.released_date_;
  delete _impl_.num_shares_;
  delete _impl_.min_price_increment_;
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  delete _impl_.brand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Etf::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Etf)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.focus_type_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.rebalancing_freq_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.fixed_commission_ != nullptr);
      _impl_.fixed_commission_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.released_date_ != nullptr);
      _impl_.released_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.num_shares_ != nullptr);
      _impl_.num_shares_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.liquidity_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Etf::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 41, 13, 226, 9> Etf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Etf, _impl_._has_bits_),
    0, // no _extensions_
    60, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    8192,  // skipmap
    offsetof(decltype(_table_), field_entries),
    41,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Etf_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Etf, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.klong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Etf, _impl_.kshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_min_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Etf, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.exchange_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 6, 6, PROTOBUF_FIELD_OFFSET(Etf, _impl_.fixed_commission_)}},
    // string focus_type = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.focus_type_)}},
    // .google.protobuf.Timestamp released_date = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 7, 7, PROTOBUF_FIELD_OFFSET(Etf, _impl_.released_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 8, 8, PROTOBUF_FIELD_OFFSET(Etf, _impl_.num_shares_)}},
    // string country_of_risk = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_name_)}},
    // string sector = 23;
    {::_pbi::TcParser::FastUS2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.sector_)}},
    // string rebalancing_freq = 24;
    {::_pbi::TcParser::FastUS2,
     {450, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.rebalancing_freq_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.trading_status_)}},
    // bool otc_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.otc_flag_)}},
    // bool buy_available_flag = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.sell_available_flag_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
    {::_pbi::TcParser::FastMtS2,
     {490, 9, 9, PROTOBUF_FIELD_OFFSET(Etf, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.api_trade_available_flag_)}},
    // string uid = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.uid_)}},
  }}, {{
    33, 0, 2,
    57596, 31, 63103, 38,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.fixed_commission_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string focus_type = 18;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.focus_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp released_date = 19;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.released_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.num_shares_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 21;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 22;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 23;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string rebalancing_freq = 24;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.rebalancing_freq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 27;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 28;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 30;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 31;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 33;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 34;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 41;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 42;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 43;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 44;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool liquidity_flag = 45;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.liquidity_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.brand_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
  }}, {{
    "\52\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\12\0\0\17\24\6\20\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Etf"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "focus_type"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "rebalancing_freq"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

::uint8_t* Etf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Etf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.isin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.currency");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.name");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.exchange");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, _Internal::fixed_commission(this),
        _Internal::fixed_commission(this).GetCachedSize(), target, stream);
  }

  // string focus_type = 18;
  if (!this->_internal_focus_type().empty()) {
    const std::string& _s = this->_internal_focus_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.focus_type");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // .google.protobuf.Timestamp released_date = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, _Internal::released_date(this),
        _Internal::released_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, _Internal::num_shares(this),
        _Internal::num_shares(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    const std::string& _s = this->_internal_sector();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.sector");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // string rebalancing_freq = 24;
  if (!this->_internal_rebalancing_freq().empty()) {
    const std::string& _s = this->_internal_rebalancing_freq();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq");
    target = stream->WriteStringMaybeAliased(24, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        25, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        27, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        28, this->_internal_sell_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        29, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.uid");
    target = stream->WriteStringMaybeAliased(31, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        32, this->_internal_real_exchange(), target);
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.position_uid");
    target = stream->WriteStringMaybeAliased(33, _s, target);
  }

  // string asset_uid = 34;
  if (!this->_internal_asset_uid().empty()) {
    const std::string& _s = this->_internal_asset_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Etf.asset_uid");
    target = stream->WriteStringMaybeAliased(34, _s, target);
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        41, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        42, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        43, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        44, this->_internal_blocked_tca_flag(), target);
  }

  // bool liquidity_flag = 45;
  if (this->_internal_liquidity_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        45, this->_internal_liquidity_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Etf)
  return target;
}

::size_t Etf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Etf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string focus_type = 18;
  if (!this->_internal_focus_type().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_focus_type());
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sector());
  }

  // string rebalancing_freq = 24;
  if (!this->_internal_rebalancing_freq().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_rebalancing_freq());
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  // string asset_uid = 34;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.klong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fixed_commission_);
    }

    // .google.protobuf.Timestamp released_date = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.released_date_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.num_shares_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
    }

  }
  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lot());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 2;
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 3;
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  // bool liquidity_flag = 45;
  if (this->_internal_liquidity_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Etf::_class_data_ = {
    Etf::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Etf::GetClassData() const {
  return &_class_data_;
}

void Etf::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Etf*>(&to_msg);
  auto& from = static_cast<const Etf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Etf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_focus_type().empty()) {
    _this->_internal_set_focus_type(from._internal_focus_type());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_internal_set_rebalancing_freq(from._internal_rebalancing_freq());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_klong());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_kshort());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong_min());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort_min());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_fixed_commission()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_fixed_commission());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_released_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_released_date());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_num_shares()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_num_shares());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
          from._internal_brand());
    }
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_internal_set_liquidity_flag(from._internal_liquidity_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Etf::CopyFrom(const Etf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Etf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Etf::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Etf::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Etf::InternalSwap(Etf* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.focus_type_, &other->_impl_.focus_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rebalancing_freq_, &other->_impl_.rebalancing_freq_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Etf, _impl_.liquidity_flag_)
      + sizeof(Etf::_impl_.liquidity_flag_)
      - PROTOBUF_FIELD_OFFSET(Etf, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Etf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[28]);
}
// ===================================================================

class Future::_Internal {
 public:
  using HasBits = decltype(std::declval<Future>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Future, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Future* msg);
  static void set_has_klong(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Future* msg);
  static void set_has_kshort(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Future* msg);
  static void set_has_dlong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Future* msg);
  static void set_has_dshort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Future* msg);
  static void set_has_dlong_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Future* msg);
  static void set_has_dshort_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Timestamp& first_trade_date(const Future* msg);
  static void set_has_first_trade_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::Timestamp& last_trade_date(const Future* msg);
  static void set_has_last_trade_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& basic_asset_size(const Future* msg);
  static void set_has_basic_asset_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::google::protobuf::Timestamp& expiration_date(const Future* msg);
  static void set_has_expiration_date(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Future* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const Future* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const Future* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_buy(const Future* msg);
  static void set_has_initial_margin_on_buy(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_sell(const Future* msg);
  static void set_has_initial_margin_on_sell(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment_amount(const Future* msg);
  static void set_has_min_price_increment_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Future* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::klong(const Future* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::kshort(const Future* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::dlong(const Future* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::dshort(const Future* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::dlong_min(const Future* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::dshort_min(const Future* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::google::protobuf::Timestamp& Future::_Internal::first_trade_date(const Future* msg) {
  return *msg->_impl_.first_trade_date_;
}
const ::google::protobuf::Timestamp& Future::_Internal::last_trade_date(const Future* msg) {
  return *msg->_impl_.last_trade_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::basic_asset_size(const Future* msg) {
  return *msg->_impl_.basic_asset_size_;
}
const ::google::protobuf::Timestamp& Future::_Internal::expiration_date(const Future* msg) {
  return *msg->_impl_.expiration_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::min_price_increment(const Future* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::google::protobuf::Timestamp& Future::_Internal::first_1min_candle_date(const Future* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& Future::_Internal::first_1day_candle_date(const Future* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Future::_Internal::initial_margin_on_buy(const Future* msg) {
  return *msg->_impl_.initial_margin_on_buy_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Future::_Internal::initial_margin_on_sell(const Future* msg) {
  return *msg->_impl_.initial_margin_on_sell_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_Internal::min_price_increment_amount(const Future* msg) {
  return *msg->_impl_.min_price_increment_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData& Future::_Internal::brand(const Future* msg) {
  return *msg->_impl_.brand_;
}
void Future::clear_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Future::clear_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Future::clear_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Future::clear_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Future::clear_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Future::clear_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Future::clear_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_trade_date_ != nullptr) _impl_.first_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Future::clear_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_trade_date_ != nullptr) _impl_.last_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Future::clear_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.basic_asset_size_ != nullptr) _impl_.basic_asset_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Future::clear_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.expiration_date_ != nullptr) _impl_.expiration_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Future::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Future::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Future::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Future::clear_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.initial_margin_on_buy_ != nullptr) _impl_.initial_margin_on_buy_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Future::clear_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.initial_margin_on_sell_ != nullptr) _impl_.initial_margin_on_sell_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void Future::clear_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_amount_ != nullptr) _impl_.min_price_increment_amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void Future::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
Future::Future(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Future)
}
inline PROTOBUF_NDEBUG_INLINE Future::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        futures_type_(arena, from.futures_type_),
        asset_type_(arena, from.asset_type_),
        basic_asset_(arena, from.basic_asset_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        basic_asset_position_uid_(arena, from.basic_asset_position_uid_) {}

Future::Future(
    ::google::protobuf::Arena* arena,
    const Future& from)
    : ::google::protobuf::Message(arena) {
  Future* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_)
                : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_)
                : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_)
                : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_)
                : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_)
                : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_)
                : nullptr;
  _impl_.first_trade_date_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_trade_date_)
                : nullptr;
  _impl_.last_trade_date_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_trade_date_)
                : nullptr;
  _impl_.basic_asset_size_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.basic_asset_size_)
                : nullptr;
  _impl_.expiration_date_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.expiration_date_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  _impl_.initial_margin_on_buy_ = (cached_has_bits & 0x00002000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_buy_)
                : nullptr;
  _impl_.initial_margin_on_sell_ = (cached_has_bits & 0x00004000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_sell_)
                : nullptr;
  _impl_.min_price_increment_amount_ = (cached_has_bits & 0x00008000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_amount_)
                : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00010000u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::blocked_tca_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Future)
}
inline PROTOBUF_NDEBUG_INLINE Future::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        futures_type_(arena),
        asset_type_(arena),
        basic_asset_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        uid_(arena),
        position_uid_(arena),
        basic_asset_position_uid_(arena) {}

inline void Future::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::blocked_tca_flag_));
}
Future::~Future() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Future)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Future::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.futures_type_.Destroy();
  _impl_.asset_type_.Destroy();
  _impl_.basic_asset_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.basic_asset_position_uid_.Destroy();
  delete _impl_.klong_;
  delete _impl_.kshort_;
  delete _impl_.dlong_;
  delete _impl_.dshort_;
  delete _impl_.dlong_min_;
  delete _impl_.dshort_min_;
  delete _impl_.first_trade_date_;
  delete _impl_.last_trade_date_;
  delete _impl_.basic_asset_size_;
  delete _impl_.expiration_date_;
  delete _impl_.min_price_increment_;
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  delete _impl_.initial_margin_on_buy_;
  delete _impl_.initial_margin_on_sell_;
  delete _impl_.min_price_increment_amount_;
  delete _impl_.brand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Future::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Future)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.futures_type_.ClearToEmpty();
  _impl_.asset_type_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.basic_asset_position_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.first_trade_date_ != nullptr);
      _impl_.first_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.last_trade_date_ != nullptr);
      _impl_.last_trade_date_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.basic_asset_size_ != nullptr);
      _impl_.basic_asset_size_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.expiration_date_ != nullptr);
      _impl_.expiration_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.initial_margin_on_buy_ != nullptr);
      _impl_.initial_margin_on_buy_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.initial_margin_on_sell_ != nullptr);
      _impl_.initial_margin_on_sell_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.min_price_increment_amount_ != nullptr);
      _impl_.min_price_increment_amount_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    ABSL_DCHECK(_impl_.brand_ != nullptr);
    _impl_.brand_->Clear();
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Future::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 44, 17, 247, 9> Future::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Future, _impl_._has_bits_),
    0, // no _extensions_
    64, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    44,  // num_field_entries
    17,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Future_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.class_code_)}},
    // int32 lot = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Future, _impl_.lot_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.lot_)}},
    // string currency = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.klong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(Future, _impl_.kshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 4, 4, PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_min_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 5, 5, PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Future, _impl_.short_enabled_flag_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.short_enabled_flag_)}},
    // string name = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.name_)}},
    // string exchange = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.exchange_)}},
    // .google.protobuf.Timestamp first_trade_date = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 6, 6, PROTOBUF_FIELD_OFFSET(Future, _impl_.first_trade_date_)}},
    // .google.protobuf.Timestamp last_trade_date = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 7, 7, PROTOBUF_FIELD_OFFSET(Future, _impl_.last_trade_date_)}},
    // string futures_type = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.futures_type_)}},
    // string asset_type = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.asset_type_)}},
    // string basic_asset = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 8, 8, PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_size_)}},
    // string country_of_risk = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_name_)}},
    // string sector = 23;
    {::_pbi::TcParser::FastUS2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.sector_)}},
    // .google.protobuf.Timestamp expiration_date = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 9, 9, PROTOBUF_FIELD_OFFSET(Future, _impl_.expiration_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.trading_status_)}},
    // bool otc_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.otc_flag_)}},
    // bool buy_available_flag = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.sell_available_flag_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
    {::_pbi::TcParser::FastMtS2,
     {490, 10, 10, PROTOBUF_FIELD_OFFSET(Future, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.api_trade_available_flag_)}},
    // string uid = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.uid_)}},
  }}, {{
    33, 0, 2,
    61692, 32, 3711, 38,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 4;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 5;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 12;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 13;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 14;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp first_trade_date = 15;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.first_trade_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_trade_date = 16;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.last_trade_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string futures_type = 17;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.futures_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_type = 18;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.asset_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset = 19;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_size_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 21;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 22;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 23;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp expiration_date = 24;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.expiration_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 27;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 28;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 30;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 31;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 33;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset_position_uid = 34;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 41;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 42;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 43;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 44;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.initial_margin_on_buy_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.initial_margin_on_sell_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.min_price_increment_amount_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.brand_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
  }}, {{
    "\55\4\6\12\0\10\0\0\0\0\0\0\0\4\10\0\0\14\12\13\0\17\24\6\0\0\0\0\0\0\0\3\0\14\30\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Future"
    "figi"
    "ticker"
    "class_code"
    "currency"
    "name"
    "exchange"
    "futures_type"
    "asset_type"
    "basic_asset"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "uid"
    "position_uid"
    "basic_asset_position_uid"
  }},
};

::uint8_t* Future::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Future)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 lot = 4;
  if (this->_internal_lot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_lot(), target);
  }

  // string currency = 5;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.currency");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 12;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_short_enabled_flag(), target);
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.name");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string exchange = 14;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.exchange");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // .google.protobuf.Timestamp first_trade_date = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, _Internal::first_trade_date(this),
        _Internal::first_trade_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_trade_date = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, _Internal::last_trade_date(this),
        _Internal::last_trade_date(this).GetCachedSize(), target, stream);
  }

  // string futures_type = 17;
  if (!this->_internal_futures_type().empty()) {
    const std::string& _s = this->_internal_futures_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.futures_type");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // string asset_type = 18;
  if (!this->_internal_asset_type().empty()) {
    const std::string& _s = this->_internal_asset_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.asset_type");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // string basic_asset = 19;
  if (!this->_internal_basic_asset().empty()) {
    const std::string& _s = this->_internal_basic_asset();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.basic_asset");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, _Internal::basic_asset_size(this),
        _Internal::basic_asset_size(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.country_of_risk");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    const std::string& _s = this->_internal_sector();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.sector");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // .google.protobuf.Timestamp expiration_date = 24;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, _Internal::expiration_date(this),
        _Internal::expiration_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        25, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        27, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        28, this->_internal_sell_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        29, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.uid");
    target = stream->WriteStringMaybeAliased(31, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        32, this->_internal_real_exchange(), target);
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.position_uid");
    target = stream->WriteStringMaybeAliased(33, _s, target);
  }

  // string basic_asset_position_uid = 34;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    const std::string& _s = this->_internal_basic_asset_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid");
    target = stream->WriteStringMaybeAliased(34, _s, target);
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        41, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        42, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        43, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        44, this->_internal_blocked_tca_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        61, _Internal::initial_margin_on_buy(this),
        _Internal::initial_margin_on_buy(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        62, _Internal::initial_margin_on_sell(this),
        _Internal::initial_margin_on_sell(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        63, _Internal::min_price_increment_amount(this),
        _Internal::min_price_increment_amount(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        64, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Future)
  return target;
}

::size_t Future::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Future)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string currency = 5;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string exchange = 14;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string futures_type = 17;
  if (!this->_internal_futures_type().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_futures_type());
  }

  // string asset_type = 18;
  if (!this->_internal_asset_type().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_type());
  }

  // string basic_asset = 19;
  if (!this->_internal_basic_asset().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_basic_asset());
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sector());
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  // string basic_asset_position_uid = 34;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_basic_asset_position_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.klong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_min_);
    }

    // .google.protobuf.Timestamp first_trade_date = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_trade_date_);
    }

    // .google.protobuf.Timestamp last_trade_date = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_trade_date_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.basic_asset_size_);
    }

    // .google.protobuf.Timestamp expiration_date = 24;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expiration_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
    if (cached_has_bits & 0x00002000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.initial_margin_on_buy_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
    if (cached_has_bits & 0x00004000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.initial_margin_on_sell_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
    if (cached_has_bits & 0x00008000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_amount_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (cached_has_bits & 0x00010000u) {
    total_size +=
        2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
  }

  // int32 lot = 4;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lot());
  }

  // bool short_enabled_flag = 12;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 2;
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 3;
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Future::_class_data_ = {
    Future::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Future::GetClassData() const {
  return &_class_data_;
}

void Future::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Future*>(&to_msg);
  auto& from = static_cast<const Future&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Future)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_futures_type().empty()) {
    _this->_internal_set_futures_type(from._internal_futures_type());
  }
  if (!from._internal_asset_type().empty()) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_klong());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_kshort());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong_min());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort_min());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_first_trade_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_trade_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_last_trade_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_trade_date());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_basic_asset_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_basic_asset_size());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_expiration_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_expiration_date());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_initial_margin_on_buy()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_initial_margin_on_buy());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_initial_margin_on_sell()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_initial_margin_on_sell());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_min_price_increment_amount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment_amount());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Future::CopyFrom(const Future& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Future)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Future::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Future::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Future::InternalSwap(Future* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.futures_type_, &other->_impl_.futures_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_type_, &other->_impl_.asset_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_, &other->_impl_.basic_asset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_position_uid_, &other->_impl_.basic_asset_position_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Future, _impl_.blocked_tca_flag_)
      + sizeof(Future::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(Future, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Future::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[29]);
}
// ===================================================================

class Share::_Internal {
 public:
  using HasBits = decltype(std::declval<Share>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Share, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Share* msg);
  static void set_has_klong(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Share* msg);
  static void set_has_kshort(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Share* msg);
  static void set_has_dlong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Share* msg);
  static void set_has_dshort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Share* msg);
  static void set_has_dlong_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Share* msg);
  static void set_has_dshort_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Timestamp& ipo_date(const Share* msg);
  static void set_has_ipo_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal(const Share* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Share* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const Share* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const Share* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Share* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_Internal::klong(const Share* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_Internal::kshort(const Share* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_Internal::dlong(const Share* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_Internal::dshort(const Share* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_Internal::dlong_min(const Share* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_Internal::dshort_min(const Share* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::google::protobuf::Timestamp& Share::_Internal::ipo_date(const Share* msg) {
  return *msg->_impl_.ipo_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Share::_Internal::nominal(const Share* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_Internal::min_price_increment(const Share* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::google::protobuf::Timestamp& Share::_Internal::first_1min_candle_date(const Share* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& Share::_Internal::first_1day_candle_date(const Share* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData& Share::_Internal::brand(const Share* msg) {
  return *msg->_impl_.brand_;
}
void Share::clear_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Share::clear_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Share::clear_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Share::clear_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Share::clear_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Share::clear_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Share::clear_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ipo_date_ != nullptr) _impl_.ipo_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Share::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Share::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Share::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Share::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Share::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
Share::Share(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Share)
}
inline PROTOBUF_NDEBUG_INLINE Share::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Share::Share(
    ::google::protobuf::Arena* arena,
    const Share& from)
    : ::google::protobuf::Message(arena) {
  Share* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_)
                : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_)
                : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_)
                : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_)
                : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_)
                : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_)
                : nullptr;
  _impl_.ipo_date_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.ipo_date_)
                : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.nominal_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, issue_size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, issue_size_),
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, issue_size_) +
               sizeof(Impl_::liquidity_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Share)
}
inline PROTOBUF_NDEBUG_INLINE Share::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Share::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::liquidity_flag_));
}
Share::~Share() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Share)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Share::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  delete _impl_.klong_;
  delete _impl_.kshort_;
  delete _impl_.dlong_;
  delete _impl_.dshort_;
  delete _impl_.dlong_min_;
  delete _impl_.dshort_min_;
  delete _impl_.ipo_date_;
  delete _impl_.nominal_;
  delete _impl_.min_price_increment_;
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  delete _impl_.brand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Share::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Share)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.ipo_date_ != nullptr);
      _impl_.ipo_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
  }
  ::memset(&_impl_.issue_size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
      reinterpret_cast<char*>(&_impl_.issue_size_)) + sizeof(_impl_.liquidity_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Share::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 42, 12, 202, 9> Share::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Share, _impl_._has_bits_),
    0, // no _extensions_
    60, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    8396800,  // skipmap
    offsetof(decltype(_table_), field_entries),
    42,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Share_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Share, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.klong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Share, _impl_.kshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_min_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Share, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.exchange_)}},
    // .google.protobuf.Timestamp ipo_date = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 6, 6, PROTOBUF_FIELD_OFFSET(Share, _impl_.ipo_date_)}},
    // int64 issue_size = 18;
    {::_pbi::TcParser::FastV64S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_)}},
    // string country_of_risk = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_name_)}},
    // string sector = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.sector_)}},
    // int64 issue_size_plan = 22;
    {::_pbi::TcParser::FastV64S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_plan_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 7, 7, PROTOBUF_FIELD_OFFSET(Share, _impl_.nominal_)}},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {::_pbi::TcParser::FastMtS2,
     {962, 9, 9, PROTOBUF_FIELD_OFFSET(Share, _impl_.first_1min_candle_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.trading_status_)}},
    // bool otc_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.otc_flag_)}},
    // bool buy_available_flag = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.sell_available_flag_)}},
    // bool div_yield_flag = 29;
    {::_pbi::TcParser::FastV8S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.div_yield_flag_)}},
    // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.share_type_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 8, 8, PROTOBUF_FIELD_OFFSET(Share, _impl_.min_price_increment_)}},
  }}, {{
    33, 0, 2,
    8176, 30, 63100, 37,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp ipo_date = 17;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.ipo_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 issue_size = 18;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string country_of_risk = 19;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 20;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 21;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 issue_size_plan = 22;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_plan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.nominal_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 27;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 28;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool div_yield_flag = 29;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.div_yield_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.share_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 32;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 33;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 35;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 36;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 46;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 47;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 48;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 49;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool liquidity_flag = 50;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.liquidity_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.brand_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
  }}, {{
    "\54\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\0\17\24\6\0\0\0\0\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Share"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

::uint8_t* Share::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Share)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.isin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.currency");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.name");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.exchange");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // .google.protobuf.Timestamp ipo_date = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, _Internal::ipo_date(this),
        _Internal::ipo_date(this).GetCachedSize(), target, stream);
  }

  // int64 issue_size = 18;
  if (this->_internal_issue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        18, this->_internal_issue_size(), target);
  }

  // string country_of_risk = 19;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.country_of_risk");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // string country_of_risk_name = 20;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // string sector = 21;
  if (!this->_internal_sector().empty()) {
    const std::string& _s = this->_internal_sector();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.sector");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // int64 issue_size_plan = 22;
  if (this->_internal_issue_size_plan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        22, this->_internal_issue_size_plan(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        23, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        25, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        27, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        28, this->_internal_sell_available_flag(), target);
  }

  // bool div_yield_flag = 29;
  if (this->_internal_div_yield_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        29, this->_internal_div_yield_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
  if (this->_internal_share_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        30, this->_internal_share_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        31, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 32;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        32, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 33;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.uid");
    target = stream->WriteStringMaybeAliased(33, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        34, this->_internal_real_exchange(), target);
  }

  // string position_uid = 35;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.position_uid");
    target = stream->WriteStringMaybeAliased(35, _s, target);
  }

  // string asset_uid = 36;
  if (!this->_internal_asset_uid().empty()) {
    const std::string& _s = this->_internal_asset_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Share.asset_uid");
    target = stream->WriteStringMaybeAliased(36, _s, target);
  }

  // bool for_iis_flag = 46;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        46, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 47;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        47, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 48;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        48, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 49;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        49, this->_internal_blocked_tca_flag(), target);
  }

  // bool liquidity_flag = 50;
  if (this->_internal_liquidity_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        50, this->_internal_liquidity_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Share)
  return target;
}

::size_t Share::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Share)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string country_of_risk = 19;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 20;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  // string sector = 21;
  if (!this->_internal_sector().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sector());
  }

  // string uid = 33;
  if (!this->_internal_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 35;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  // string asset_uid = 36;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.klong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_min_);
    }

    // .google.protobuf.Timestamp ipo_date = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ipo_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
    }

  }
  // int64 issue_size = 18;
  if (this->_internal_issue_size() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_issue_size());
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lot());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 2;
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  // int64 issue_size_plan = 22;
  if (this->_internal_issue_size_plan() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_issue_size_plan());
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
  if (this->_internal_share_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_share_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool div_yield_flag = 29;
  if (this->_internal_div_yield_flag() != 0) {
    total_size += 3;
  }

  // bool api_trade_available_flag = 32;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  // bool for_iis_flag = 46;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 3;
  }

  // bool for_qual_investor_flag = 47;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 48;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 49;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  // bool liquidity_flag = 50;
  if (this->_internal_liquidity_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Share::_class_data_ = {
    Share::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Share::GetClassData() const {
  return &_class_data_;
}

void Share::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Share*>(&to_msg);
  auto& from = static_cast<const Share&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Share)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_klong());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_kshort());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong_min());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort_min());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_ipo_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_ipo_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_nominal());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
          from._internal_brand());
    }
  }
  if (from._internal_issue_size() != 0) {
    _this->_internal_set_issue_size(from._internal_issue_size());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_issue_size_plan() != 0) {
    _this->_internal_set_issue_size_plan(from._internal_issue_size_plan());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_share_type() != 0) {
    _this->_internal_set_share_type(from._internal_share_type());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_internal_set_div_yield_flag(from._internal_div_yield_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_internal_set_liquidity_flag(from._internal_liquidity_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Share::CopyFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Share::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Share::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Share::InternalSwap(Share* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Share, _impl_.liquidity_flag_)
      + sizeof(Share::_impl_.liquidity_flag_)
      - PROTOBUF_FIELD_OFFSET(Share, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Share::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[30]);
}
// ===================================================================

class GetAccruedInterestsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccruedInterestsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& from(const GetAccruedInterestsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& to(const GetAccruedInterestsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& GetAccruedInterestsRequest::_Internal::from(const GetAccruedInterestsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetAccruedInterestsRequest::_Internal::to(const GetAccruedInterestsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetAccruedInterestsRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAccruedInterestsRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetAccruedInterestsRequest::GetAccruedInterestsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetAccruedInterestsRequest::GetAccruedInterestsRequest(
    ::google::protobuf::Arena* arena,
    const GetAccruedInterestsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetAccruedInterestsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetAccruedInterestsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetAccruedInterestsRequest::~GetAccruedInterestsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAccruedInterestsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAccruedInterestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAccruedInterestsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 91, 2> GetAccruedInterestsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetAccruedInterestsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.figi_)}},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.from_)}},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\101\4\0\0\15\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetAccruedInterestsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  return target;
}

::size_t GetAccruedInterestsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAccruedInterestsRequest::_class_data_ = {
    GetAccruedInterestsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAccruedInterestsRequest::GetClassData() const {
  return &_class_data_;
}

void GetAccruedInterestsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAccruedInterestsRequest*>(&to_msg);
  auto& from = static_cast<const GetAccruedInterestsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccruedInterestsRequest::CopyFrom(const GetAccruedInterestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAccruedInterestsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAccruedInterestsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAccruedInterestsRequest::InternalSwap(GetAccruedInterestsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.to_)
      + sizeof(GetAccruedInterestsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetAccruedInterestsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[31]);
}
// ===================================================================

class GetAccruedInterestsResponse::_Internal {
 public:
};

GetAccruedInterestsResponse::GetAccruedInterestsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : accrued_interests_{visibility, arena, from.accrued_interests_},
        _cached_size_{0} {}

GetAccruedInterestsResponse::GetAccruedInterestsResponse(
    ::google::protobuf::Arena* arena,
    const GetAccruedInterestsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetAccruedInterestsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : accrued_interests_{visibility, arena},
        _cached_size_{0} {}

inline void GetAccruedInterestsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAccruedInterestsResponse::~GetAccruedInterestsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAccruedInterestsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAccruedInterestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accrued_interests_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAccruedInterestsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetAccruedInterestsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetAccruedInterestsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsResponse, _impl_.accrued_interests_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsResponse, _impl_.accrued_interests_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>()},
  }}, {{
  }},
};

::uint8_t* GetAccruedInterestsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accrued_interests_size()); i < n; i++) {
    const auto& repfield = this->_internal_accrued_interests().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  return target;
}

::size_t GetAccruedInterestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
  total_size += 1UL * this->_internal_accrued_interests_size();
  for (const auto& msg : this->_internal_accrued_interests()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAccruedInterestsResponse::_class_data_ = {
    GetAccruedInterestsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAccruedInterestsResponse::GetClassData() const {
  return &_class_data_;
}

void GetAccruedInterestsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAccruedInterestsResponse*>(&to_msg);
  auto& from = static_cast<const GetAccruedInterestsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_accrued_interests()->MergeFrom(
      from._internal_accrued_interests());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccruedInterestsResponse::CopyFrom(const GetAccruedInterestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAccruedInterestsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAccruedInterestsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAccruedInterestsResponse::InternalSwap(GetAccruedInterestsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accrued_interests_.InternalSwap(&other->_impl_.accrued_interests_);
}

::google::protobuf::Metadata GetAccruedInterestsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[32]);
}
// ===================================================================

class AccruedInterest::_Internal {
 public:
  using HasBits = decltype(std::declval<AccruedInterest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& date(const AccruedInterest* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& value(const AccruedInterest* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& value_percent(const AccruedInterest* msg);
  static void set_has_value_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AccruedInterest* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::google::protobuf::Timestamp& AccruedInterest::_Internal::date(const AccruedInterest* msg) {
  return *msg->_impl_.date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::_Internal::value(const AccruedInterest* msg) {
  return *msg->_impl_.value_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::_Internal::value_percent(const AccruedInterest* msg) {
  return *msg->_impl_.value_percent_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::_Internal::nominal(const AccruedInterest* msg) {
  return *msg->_impl_.nominal_;
}
void AccruedInterest::clear_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AccruedInterest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AccruedInterest::clear_value_percent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_percent_ != nullptr) _impl_.value_percent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AccruedInterest::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
AccruedInterest::AccruedInterest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
}
inline PROTOBUF_NDEBUG_INLINE AccruedInterest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AccruedInterest::AccruedInterest(
    ::google::protobuf::Arena* arena,
    const AccruedInterest& from)
    : ::google::protobuf::Message(arena) {
  AccruedInterest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.date_)
                : nullptr;
  _impl_.value_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.value_)
                : nullptr;
  _impl_.value_percent_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.value_percent_)
                : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
}
inline PROTOBUF_NDEBUG_INLINE AccruedInterest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AccruedInterest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_),
           0,
           offsetof(Impl_, nominal_) -
               offsetof(Impl_, date_) +
               sizeof(Impl_::nominal_));
}
AccruedInterest::~AccruedInterest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AccruedInterest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.date_;
  delete _impl_.value_;
  delete _impl_.value_percent_;
  delete _impl_.nominal_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AccruedInterest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.value_percent_ != nullptr);
      _impl_.value_percent_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AccruedInterest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> AccruedInterest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AccruedInterest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.nominal_)}},
    // .google.protobuf.Timestamp date = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.date_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_percent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp date = 1;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_percent_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.nominal_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
  }},
};

::uint8_t* AccruedInterest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::value_percent(this),
        _Internal::value_percent(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  return target;
}

::size_t AccruedInterest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .google.protobuf.Timestamp date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_percent_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AccruedInterest::_class_data_ = {
    AccruedInterest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AccruedInterest::GetClassData() const {
  return &_class_data_;
}

void AccruedInterest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AccruedInterest*>(&to_msg);
  auto& from = static_cast<const AccruedInterest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_value_percent()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_value_percent());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_nominal());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccruedInterest::CopyFrom(const AccruedInterest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AccruedInterest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AccruedInterest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AccruedInterest::InternalSwap(AccruedInterest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.nominal_)
      + sizeof(AccruedInterest::_impl_.nominal_)
      - PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::google::protobuf::Metadata AccruedInterest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[33]);
}
// ===================================================================

class GetFuturesMarginRequest::_Internal {
 public:
};

GetFuturesMarginRequest::GetFuturesMarginRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

GetFuturesMarginRequest::GetFuturesMarginRequest(
    ::google::protobuf::Arena* arena,
    const GetFuturesMarginRequest& from)
    : ::google::protobuf::Message(arena) {
  GetFuturesMarginRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_id_(arena),
        _cached_size_{0} {}

inline void GetFuturesMarginRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetFuturesMarginRequest::~GetFuturesMarginRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetFuturesMarginRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetFuturesMarginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetFuturesMarginRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 88, 2> GetFuturesMarginRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967286,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetFuturesMarginRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\76\4\15\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetFuturesMarginRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  return target;
}

::size_t GetFuturesMarginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetFuturesMarginRequest::_class_data_ = {
    GetFuturesMarginRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetFuturesMarginRequest::GetClassData() const {
  return &_class_data_;
}

void GetFuturesMarginRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetFuturesMarginRequest*>(&to_msg);
  auto& from = static_cast<const GetFuturesMarginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetFuturesMarginRequest::CopyFrom(const GetFuturesMarginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetFuturesMarginRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetFuturesMarginRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetFuturesMarginRequest::InternalSwap(GetFuturesMarginRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata GetFuturesMarginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[34]);
}
// ===================================================================

class GetFuturesMarginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFuturesMarginResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_buy(const GetFuturesMarginResponse* msg);
  static void set_has_initial_margin_on_buy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_sell(const GetFuturesMarginResponse* msg);
  static void set_has_initial_margin_on_sell(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const GetFuturesMarginResponse* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment_amount(const GetFuturesMarginResponse* msg);
  static void set_has_min_price_increment_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetFuturesMarginResponse::_Internal::initial_margin_on_buy(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.initial_margin_on_buy_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetFuturesMarginResponse::_Internal::initial_margin_on_sell(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.initial_margin_on_sell_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetFuturesMarginResponse::_Internal::min_price_increment(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetFuturesMarginResponse::_Internal::min_price_increment_amount(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.min_price_increment_amount_;
}
void GetFuturesMarginResponse::clear_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.initial_margin_on_buy_ != nullptr) _impl_.initial_margin_on_buy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetFuturesMarginResponse::clear_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.initial_margin_on_sell_ != nullptr) _impl_.initial_margin_on_sell_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetFuturesMarginResponse::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetFuturesMarginResponse::clear_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_amount_ != nullptr) _impl_.min_price_increment_amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
GetFuturesMarginResponse::GetFuturesMarginResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetFuturesMarginResponse::GetFuturesMarginResponse(
    ::google::protobuf::Arena* arena,
    const GetFuturesMarginResponse& from)
    : ::google::protobuf::Message(arena) {
  GetFuturesMarginResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.initial_margin_on_buy_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_buy_)
                : nullptr;
  _impl_.initial_margin_on_sell_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_sell_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.min_price_increment_amount_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_amount_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetFuturesMarginResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initial_margin_on_buy_),
           0,
           offsetof(Impl_, min_price_increment_amount_) -
               offsetof(Impl_, initial_margin_on_buy_) +
               sizeof(Impl_::min_price_increment_amount_));
}
GetFuturesMarginResponse::~GetFuturesMarginResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetFuturesMarginResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.initial_margin_on_buy_;
  delete _impl_.initial_margin_on_sell_;
  delete _impl_.min_price_increment_;
  delete _impl_.min_price_increment_amount_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetFuturesMarginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.initial_margin_on_buy_ != nullptr);
      _impl_.initial_margin_on_buy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.initial_margin_on_sell_ != nullptr);
      _impl_.initial_margin_on_sell_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.min_price_increment_amount_ != nullptr);
      _impl_.min_price_increment_amount_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetFuturesMarginResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> GetFuturesMarginResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetFuturesMarginResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_amount_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_buy_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_sell_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_buy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_sell_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_amount_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
  }},
};

::uint8_t* GetFuturesMarginResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::initial_margin_on_buy(this),
        _Internal::initial_margin_on_buy(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::initial_margin_on_sell(this),
        _Internal::initial_margin_on_sell(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::min_price_increment_amount(this),
        _Internal::min_price_increment_amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  return target;
}

::size_t GetFuturesMarginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.initial_margin_on_buy_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.initial_margin_on_sell_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_amount_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetFuturesMarginResponse::_class_data_ = {
    GetFuturesMarginResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetFuturesMarginResponse::GetClassData() const {
  return &_class_data_;
}

void GetFuturesMarginResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetFuturesMarginResponse*>(&to_msg);
  auto& from = static_cast<const GetFuturesMarginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_initial_margin_on_buy()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_initial_margin_on_buy());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_initial_margin_on_sell()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_initial_margin_on_sell());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_min_price_increment_amount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment_amount());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetFuturesMarginResponse::CopyFrom(const GetFuturesMarginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetFuturesMarginResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetFuturesMarginResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetFuturesMarginResponse::InternalSwap(GetFuturesMarginResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_amount_)
      + sizeof(GetFuturesMarginResponse::_impl_.min_price_increment_amount_)
      - PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_buy_)>(
          reinterpret_cast<char*>(&_impl_.initial_margin_on_buy_),
          reinterpret_cast<char*>(&other->_impl_.initial_margin_on_buy_));
}

::google::protobuf::Metadata GetFuturesMarginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[35]);
}
// ===================================================================

class InstrumentResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Instrument& instrument(const InstrumentResponse* msg);
  static void set_has_instrument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Instrument& InstrumentResponse::_Internal::instrument(const InstrumentResponse* msg) {
  return *msg->_impl_.instrument_;
}
InstrumentResponse::InstrumentResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

InstrumentResponse::InstrumentResponse(
    ::google::protobuf::Arena* arena,
    const InstrumentResponse& from)
    : ::google::protobuf::Message(arena) {
  InstrumentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Instrument>(arena, *from._impl_.instrument_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InstrumentResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
InstrumentResponse::~InstrumentResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.instrument_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstrumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InstrumentResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> InstrumentResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InstrumentResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Instrument>()},
  }}, {{
  }},
};

::uint8_t* InstrumentResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  return target;
}

::size_t InstrumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InstrumentResponse::_class_data_ = {
    InstrumentResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InstrumentResponse::GetClassData() const {
  return &_class_data_;
}

void InstrumentResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InstrumentResponse*>(&to_msg);
  auto& from = static_cast<const InstrumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentResponse::CopyFrom(const InstrumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstrumentResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstrumentResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstrumentResponse::InternalSwap(InstrumentResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata InstrumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[36]);
}
// ===================================================================

class Instrument::_Internal {
 public:
  using HasBits = decltype(std::declval<Instrument>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Instrument, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Instrument* msg);
  static void set_has_klong(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Instrument* msg);
  static void set_has_kshort(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Instrument* msg);
  static void set_has_dlong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Instrument* msg);
  static void set_has_dshort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Instrument* msg);
  static void set_has_dlong_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Instrument* msg);
  static void set_has_dshort_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Instrument* msg);
  static void set_has_min_price_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const Instrument* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const Instrument* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Instrument* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_Internal::klong(const Instrument* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_Internal::kshort(const Instrument* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_Internal::dlong(const Instrument* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_Internal::dshort(const Instrument* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_Internal::dlong_min(const Instrument* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_Internal::dshort_min(const Instrument* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_Internal::min_price_increment(const Instrument* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::google::protobuf::Timestamp& Instrument::_Internal::first_1min_candle_date(const Instrument* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& Instrument::_Internal::first_1day_candle_date(const Instrument* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData& Instrument::_Internal::brand(const Instrument* msg) {
  return *msg->_impl_.brand_;
}
void Instrument::clear_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Instrument::clear_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Instrument::clear_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Instrument::clear_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Instrument::clear_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Instrument::clear_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Instrument::clear_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Instrument::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Instrument::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Instrument::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
Instrument::Instrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Instrument)
}
inline PROTOBUF_NDEBUG_INLINE Instrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        instrument_type_(arena, from.instrument_type_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Instrument::Instrument(
    ::google::protobuf::Arena* arena,
    const Instrument& from)
    : ::google::protobuf::Message(arena) {
  Instrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_)
                : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_)
                : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_)
                : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_)
                : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_)
                : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_)
                : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_)
                : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::instrument_kind_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Instrument)
}
inline PROTOBUF_NDEBUG_INLINE Instrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        instrument_type_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Instrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::instrument_kind_));
}
Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Instrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Instrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  delete _impl_.klong_;
  delete _impl_.kshort_;
  delete _impl_.dlong_;
  delete _impl_.dshort_;
  delete _impl_.dlong_min_;
  delete _impl_.dshort_min_;
  delete _impl_.min_price_increment_;
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  delete _impl_.brand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instrument_kind_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.instrument_kind_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Instrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 36, 10, 208, 9> Instrument::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Instrument, _impl_._has_bits_),
    0, // no _extensions_
    60, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4026531840,  // skipmap
    offsetof(decltype(_table_), field_entries),
    36,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Instrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Instrument, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.klong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.kshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_min_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Instrument, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.short_enabled_flag_)}},
    // string name = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.name_)}},
    // string exchange = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.exchange_)}},
    // string country_of_risk = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_name_)}},
    // string instrument_type = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_type_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.trading_status_)}},
    // bool otc_flag = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.otc_flag_)}},
    // bool buy_available_flag = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.sell_available_flag_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 6, 6, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 24;
    {::_pbi::TcParser::FastV8S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.api_trade_available_flag_)}},
    // string uid = 25;
    {::_pbi::TcParser::FastUS2,
     {458, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.uid_)}},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.real_exchange_)}},
    // string position_uid = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.position_uid_)}},
    // string asset_uid = 28;
    {::_pbi::TcParser::FastUS2,
     {482, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.asset_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    36, 0, 2,
    65504, 28, 65231, 33,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 14;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 15;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk = 16;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 17;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 18;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 20;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 21;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 22;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 24;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 25;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 27;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 28;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 36;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 37;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 38;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 39;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.brand_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
  }}, {{
    "\61\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\17\24\17\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Instrument"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "instrument_type"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

::uint8_t* Instrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.isin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.currency");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 14;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.name");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string exchange = 15;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.exchange");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string country_of_risk = 16;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // string country_of_risk_name = 17;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // string instrument_type = 18;
  if (!this->_internal_instrument_type().empty()) {
    const std::string& _s = this->_internal_instrument_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        19, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 20;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 21;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 22;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_sell_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        23, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 24;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        24, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 25;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.uid");
    target = stream->WriteStringMaybeAliased(25, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        26, this->_internal_real_exchange(), target);
  }

  // string position_uid = 27;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.position_uid");
    target = stream->WriteStringMaybeAliased(27, _s, target);
  }

  // string asset_uid = 28;
  if (!this->_internal_asset_uid().empty()) {
    const std::string& _s = this->_internal_asset_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid");
    target = stream->WriteStringMaybeAliased(28, _s, target);
  }

  // bool for_iis_flag = 36;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        36, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 37;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        37, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 38;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        38, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 39;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        39, this->_internal_blocked_tca_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        40, this->_internal_instrument_kind(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Instrument)
  return target;
}

::size_t Instrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string name = 14;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string exchange = 15;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string country_of_risk = 16;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 17;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  // string instrument_type = 18;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_type());
  }

  // string uid = 25;
  if (!this->_internal_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 27;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  // string asset_uid = 28;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.klong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dlong_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dshort_min_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_price_increment_);
    }

    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
    }

  }
  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lot());
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 2;
  }

  // bool otc_flag = 20;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool buy_available_flag = 21;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 22;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 24;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  // bool for_iis_flag = 36;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 3;
  }

  // bool for_qual_investor_flag = 37;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 38;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 39;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Instrument::_class_data_ = {
    Instrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Instrument::GetClassData() const {
  return &_class_data_;
}

void Instrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Instrument*>(&to_msg);
  auto& from = static_cast<const Instrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_klong());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_kshort());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dlong_min());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dshort_min());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_price_increment());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
          from._internal_brand());
    }
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Instrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Instrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Instrument::InternalSwap(Instrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_kind_)
      + sizeof(Instrument::_impl_.instrument_kind_)
      - PROTOBUF_FIELD_OFFSET(Instrument, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Instrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[37]);
}
// ===================================================================

class GetDividendsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDividendsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& from(const GetDividendsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& to(const GetDividendsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& GetDividendsRequest::_Internal::from(const GetDividendsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetDividendsRequest::_Internal::to(const GetDividendsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetDividendsRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetDividendsRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetDividendsRequest::GetDividendsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetDividendsRequest::GetDividendsRequest(
    ::google::protobuf::Arena* arena,
    const GetDividendsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetDividendsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetDividendsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetDividendsRequest::~GetDividendsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetDividendsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetDividendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetDividendsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 84, 2> GetDividendsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetDividendsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.figi_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\72\4\0\0\15\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetDividendsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Timestamp from = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  return target;
}

::size_t GetDividendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetDividendsRequest::_class_data_ = {
    GetDividendsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetDividendsRequest::GetClassData() const {
  return &_class_data_;
}

void GetDividendsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsRequest*>(&to_msg);
  auto& from = static_cast<const GetDividendsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsRequest::CopyFrom(const GetDividendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetDividendsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetDividendsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetDividendsRequest::InternalSwap(GetDividendsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.to_)
      + sizeof(GetDividendsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetDividendsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[38]);
}
// ===================================================================

class GetDividendsResponse::_Internal {
 public:
};

GetDividendsResponse::GetDividendsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : dividends_{visibility, arena, from.dividends_},
        _cached_size_{0} {}

GetDividendsResponse::GetDividendsResponse(
    ::google::protobuf::Arena* arena,
    const GetDividendsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetDividendsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : dividends_{visibility, arena},
        _cached_size_{0} {}

inline void GetDividendsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetDividendsResponse::~GetDividendsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetDividendsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetDividendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dividends_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetDividendsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetDividendsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetDividendsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetDividendsResponse, _impl_.dividends_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
    {PROTOBUF_FIELD_OFFSET(GetDividendsResponse, _impl_.dividends_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Dividend>()},
  }}, {{
  }},
};

::uint8_t* GetDividendsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dividends_size()); i < n; i++) {
    const auto& repfield = this->_internal_dividends().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  return target;
}

::size_t GetDividendsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
  total_size += 1UL * this->_internal_dividends_size();
  for (const auto& msg : this->_internal_dividends()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetDividendsResponse::_class_data_ = {
    GetDividendsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetDividendsResponse::GetClassData() const {
  return &_class_data_;
}

void GetDividendsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsResponse*>(&to_msg);
  auto& from = static_cast<const GetDividendsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dividends()->MergeFrom(
      from._internal_dividends());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsResponse::CopyFrom(const GetDividendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetDividendsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetDividendsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetDividendsResponse::InternalSwap(GetDividendsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dividends_.InternalSwap(&other->_impl_.dividends_);
}

::google::protobuf::Metadata GetDividendsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[39]);
}
// ===================================================================

class Dividend::_Internal {
 public:
  using HasBits = decltype(std::declval<Dividend>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Dividend, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& dividend_net(const Dividend* msg);
  static void set_has_dividend_net(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& payment_date(const Dividend* msg);
  static void set_has_payment_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& declared_date(const Dividend* msg);
  static void set_has_declared_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& last_buy_date(const Dividend* msg);
  static void set_has_last_buy_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& record_date(const Dividend* msg);
  static void set_has_record_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& close_price(const Dividend* msg);
  static void set_has_close_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_value(const Dividend* msg);
  static void set_has_yield_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::Timestamp& created_at(const Dividend* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Dividend::_Internal::dividend_net(const Dividend* msg) {
  return *msg->_impl_.dividend_net_;
}
const ::google::protobuf::Timestamp& Dividend::_Internal::payment_date(const Dividend* msg) {
  return *msg->_impl_.payment_date_;
}
const ::google::protobuf::Timestamp& Dividend::_Internal::declared_date(const Dividend* msg) {
  return *msg->_impl_.declared_date_;
}
const ::google::protobuf::Timestamp& Dividend::_Internal::last_buy_date(const Dividend* msg) {
  return *msg->_impl_.last_buy_date_;
}
const ::google::protobuf::Timestamp& Dividend::_Internal::record_date(const Dividend* msg) {
  return *msg->_impl_.record_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Dividend::_Internal::close_price(const Dividend* msg) {
  return *msg->_impl_.close_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Dividend::_Internal::yield_value(const Dividend* msg) {
  return *msg->_impl_.yield_value_;
}
const ::google::protobuf::Timestamp& Dividend::_Internal::created_at(const Dividend* msg) {
  return *msg->_impl_.created_at_;
}
void Dividend::clear_dividend_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dividend_net_ != nullptr) _impl_.dividend_net_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Dividend::clear_payment_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.payment_date_ != nullptr) _impl_.payment_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Dividend::clear_declared_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.declared_date_ != nullptr) _impl_.declared_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Dividend::clear_last_buy_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_buy_date_ != nullptr) _impl_.last_buy_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Dividend::clear_record_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.record_date_ != nullptr) _impl_.record_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Dividend::clear_close_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.close_price_ != nullptr) _impl_.close_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Dividend::clear_yield_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.yield_value_ != nullptr) _impl_.yield_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Dividend::clear_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
Dividend::Dividend(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Dividend)
}
inline PROTOBUF_NDEBUG_INLINE Dividend::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        dividend_type_(arena, from.dividend_type_),
        regularity_(arena, from.regularity_) {}

Dividend::Dividend(
    ::google::protobuf::Arena* arena,
    const Dividend& from)
    : ::google::protobuf::Message(arena) {
  Dividend* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.dividend_net_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.dividend_net_)
                : nullptr;
  _impl_.payment_date_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.payment_date_)
                : nullptr;
  _impl_.declared_date_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.declared_date_)
                : nullptr;
  _impl_.last_buy_date_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_buy_date_)
                : nullptr;
  _impl_.record_date_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.record_date_)
                : nullptr;
  _impl_.close_price_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.close_price_)
                : nullptr;
  _impl_.yield_value_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.yield_value_)
                : nullptr;
  _impl_.created_at_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Dividend)
}
inline PROTOBUF_NDEBUG_INLINE Dividend::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        dividend_type_(arena),
        regularity_(arena) {}

inline void Dividend::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dividend_net_),
           0,
           offsetof(Impl_, created_at_) -
               offsetof(Impl_, dividend_net_) +
               sizeof(Impl_::created_at_));
}
Dividend::~Dividend() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Dividend)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Dividend::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.dividend_type_.Destroy();
  _impl_.regularity_.Destroy();
  delete _impl_.dividend_net_;
  delete _impl_.payment_date_;
  delete _impl_.declared_date_;
  delete _impl_.last_buy_date_;
  delete _impl_.record_date_;
  delete _impl_.close_price_;
  delete _impl_.yield_value_;
  delete _impl_.created_at_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Dividend::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dividend_type_.ClearToEmpty();
  _impl_.regularity_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dividend_net_ != nullptr);
      _impl_.dividend_net_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.payment_date_ != nullptr);
      _impl_.payment_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.declared_date_ != nullptr);
      _impl_.declared_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.last_buy_date_ != nullptr);
      _impl_.last_buy_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.record_date_ != nullptr);
      _impl_.record_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.close_price_ != nullptr);
      _impl_.close_price_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.yield_value_ != nullptr);
      _impl_.yield_value_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Dividend::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 8, 87, 2> Dividend::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Dividend, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Dividend_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_net_)}},
    // .google.protobuf.Timestamp payment_date = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.payment_date_)}},
    // .google.protobuf.Timestamp declared_date = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.declared_date_)}},
    // .google.protobuf.Timestamp last_buy_date = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.last_buy_date_)}},
    // string dividend_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_type_)}},
    // .google.protobuf.Timestamp record_date = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.record_date_)}},
    // string regularity = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.regularity_)}},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 5, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.close_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 6, 6, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.yield_value_)}},
    // .google.protobuf.Timestamp created_at = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 7, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.created_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_net_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp payment_date = 2;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.payment_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp declared_date = 3;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.declared_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_buy_date = 4;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.last_buy_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string dividend_type = 5;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp record_date = 6;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.record_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string regularity = 7;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.regularity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.close_price_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.yield_value_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp created_at = 10;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.created_at_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\57\0\0\0\0\15\0\12\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Dividend"
    "dividend_type"
    "regularity"
  }},
};

::uint8_t* Dividend::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::dividend_net(this),
        _Internal::dividend_net(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp payment_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::payment_date(this),
        _Internal::payment_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp declared_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::declared_date(this),
        _Internal::declared_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_buy_date = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::last_buy_date(this),
        _Internal::last_buy_date(this).GetCachedSize(), target, stream);
  }

  // string dividend_type = 5;
  if (!this->_internal_dividend_type().empty()) {
    const std::string& _s = this->_internal_dividend_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .google.protobuf.Timestamp record_date = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::record_date(this),
        _Internal::record_date(this).GetCachedSize(), target, stream);
  }

  // string regularity = 7;
  if (!this->_internal_regularity().empty()) {
    const std::string& _s = this->_internal_regularity();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Dividend.regularity");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::close_price(this),
        _Internal::close_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::yield_value(this),
        _Internal::yield_value(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Dividend)
  return target;
}

::size_t Dividend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dividend_type = 5;
  if (!this->_internal_dividend_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_dividend_type());
  }

  // string regularity = 7;
  if (!this->_internal_regularity().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_regularity());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dividend_net_);
    }

    // .google.protobuf.Timestamp payment_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payment_date_);
    }

    // .google.protobuf.Timestamp declared_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.declared_date_);
    }

    // .google.protobuf.Timestamp last_buy_date = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_buy_date_);
    }

    // .google.protobuf.Timestamp record_date = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.record_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.close_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.yield_value_);
    }

    // .google.protobuf.Timestamp created_at = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_at_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Dividend::_class_data_ = {
    Dividend::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Dividend::GetClassData() const {
  return &_class_data_;
}

void Dividend::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Dividend*>(&to_msg);
  auto& from = static_cast<const Dividend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dividend_type().empty()) {
    _this->_internal_set_dividend_type(from._internal_dividend_type());
  }
  if (!from._internal_regularity().empty()) {
    _this->_internal_set_regularity(from._internal_regularity());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_dividend_net()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_dividend_net());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_payment_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_payment_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_declared_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_declared_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_last_buy_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_buy_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_record_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_record_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_close_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
          from._internal_close_price());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_yield_value()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_yield_value());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_created_at());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Dividend::CopyFrom(const Dividend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Dividend::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Dividend::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Dividend::InternalSwap(Dividend* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dividend_type_, &other->_impl_.dividend_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.regularity_, &other->_impl_.regularity_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dividend, _impl_.created_at_)
      + sizeof(Dividend::_impl_.created_at_)
      - PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_net_)>(
          reinterpret_cast<char*>(&_impl_.dividend_net_),
          reinterpret_cast<char*>(&other->_impl_.dividend_net_));
}

::google::protobuf::Metadata Dividend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[40]);
}
// ===================================================================

class AssetRequest::_Internal {
 public:
};

AssetRequest::AssetRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetRequest)
}
inline PROTOBUF_NDEBUG_INLINE AssetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : id_(arena, from.id_),
        _cached_size_{0} {}

AssetRequest::AssetRequest(
    ::google::protobuf::Arena* arena,
    const AssetRequest& from)
    : ::google::protobuf::Message(arena) {
  AssetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetRequest)
}
inline PROTOBUF_NDEBUG_INLINE AssetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void AssetRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AssetRequest::~AssetRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 62, 2> AssetRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AssetRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(AssetRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\63\2\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetRequest"
    "id"
  }},
};

::uint8_t* AssetRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetRequest.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  return target;
}

::size_t AssetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetRequest::_class_data_ = {
    AssetRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetRequest::GetClassData() const {
  return &_class_data_;
}

void AssetRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetRequest*>(&to_msg);
  auto& from = static_cast<const AssetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetRequest::CopyFrom(const AssetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetRequest::InternalSwap(AssetRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata AssetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[41]);
}
// ===================================================================

class AssetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetFull& asset(const AssetResponse* msg);
  static void set_has_asset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::AssetFull& AssetResponse::_Internal::asset(const AssetResponse* msg) {
  return *msg->_impl_.asset_;
}
AssetResponse::AssetResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AssetResponse::AssetResponse(
    ::google::protobuf::Arena* arena,
    const AssetResponse& from)
    : ::google::protobuf::Message(arena) {
  AssetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.asset_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetFull>(arena, *from._impl_.asset_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AssetResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.asset_ = {};
}
AssetResponse::~AssetResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.asset_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.asset_ != nullptr);
    _impl_.asset_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AssetResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_.asset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
    {PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_.asset_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetFull>()},
  }}, {{
  }},
};

::uint8_t* AssetResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::asset(this),
        _Internal::asset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  return target;
}

::size_t AssetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.asset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetResponse::_class_data_ = {
    AssetResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetResponse::GetClassData() const {
  return &_class_data_;
}

void AssetResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetResponse*>(&to_msg);
  auto& from = static_cast<const AssetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_asset()->::tinkoff::public_::invest::api::contract::v1::AssetFull::MergeFrom(
        from._internal_asset());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetResponse::CopyFrom(const AssetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetResponse::InternalSwap(AssetResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.asset_, other->_impl_.asset_);
}

::google::protobuf::Metadata AssetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[42]);
}
// ===================================================================

class AssetsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_._has_bits_);
  static void set_has_instrument_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AssetsRequest::AssetsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
}
AssetsRequest::AssetsRequest(
    ::google::protobuf::Arena* arena, const AssetsRequest& from)
    : AssetsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AssetsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AssetsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_type_ = {};
}
AssetsRequest::~AssetsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AssetsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AssetsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetsRequest, _impl_.instrument_type_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
    {PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AssetsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_instrument_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  return target;
}

::size_t AssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetsRequest::_class_data_ = {
    AssetsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetsRequest::GetClassData() const {
  return &_class_data_;
}

void AssetsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetsRequest*>(&to_msg);
  auto& from = static_cast<const AssetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetsRequest::CopyFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetsRequest::InternalSwap(AssetsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_type_, other->_impl_.instrument_type_);
}

::google::protobuf::Metadata AssetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[43]);
}
// ===================================================================

class AssetsResponse::_Internal {
 public:
};

AssetsResponse::AssetsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : assets_{visibility, arena, from.assets_},
        _cached_size_{0} {}

AssetsResponse::AssetsResponse(
    ::google::protobuf::Arena* arena,
    const AssetsResponse& from)
    : ::google::protobuf::Message(arena) {
  AssetsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : assets_{visibility, arena},
        _cached_size_{0} {}

inline void AssetsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AssetsResponse::~AssetsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assets_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AssetsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetsResponse, _impl_.assets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
    {PROTOBUF_FIELD_OFFSET(AssetsResponse, _impl_.assets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Asset>()},
  }}, {{
  }},
};

::uint8_t* AssetsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assets_size()); i < n; i++) {
    const auto& repfield = this->_internal_assets().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  return target;
}

::size_t AssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->_internal_assets()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetsResponse::_class_data_ = {
    AssetsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetsResponse::GetClassData() const {
  return &_class_data_;
}

void AssetsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetsResponse*>(&to_msg);
  auto& from = static_cast<const AssetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_assets()->MergeFrom(
      from._internal_assets());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetsResponse::CopyFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetsResponse::InternalSwap(AssetsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assets_.InternalSwap(&other->_impl_.assets_);
}

::google::protobuf::Metadata AssetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[44]);
}
// ===================================================================

class AssetFull::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetFull>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetFull, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_._oneof_case_);
  static const ::google::protobuf::Timestamp& deleted_at(const AssetFull* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& currency(const AssetFull* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& security(const AssetFull* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Brand& brand(const AssetFull* msg);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& updated_at(const AssetFull* msg);
  static void set_has_updated_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& AssetFull::_Internal::deleted_at(const AssetFull* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& AssetFull::_Internal::currency(const AssetFull* msg) {
  return *msg->_impl_.ext_.currency_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& AssetFull::_Internal::security(const AssetFull* msg) {
  return *msg->_impl_.ext_.security_;
}
const ::tinkoff::public_::invest::api::contract::v1::Brand& AssetFull::_Internal::brand(const AssetFull* msg) {
  return *msg->_impl_.brand_;
}
const ::google::protobuf::Timestamp& AssetFull::_Internal::updated_at(const AssetFull* msg) {
  return *msg->_impl_.updated_at_;
}
void AssetFull::clear_deleted_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetFull::set_allocated_currency(::tinkoff::public_::invest::api::contract::v1::AssetCurrency* currency) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (currency) {
    ::google::protobuf::Arena* submessage_arena = currency->GetArena();
    if (message_arena != submessage_arena) {
      currency = ::google::protobuf::internal::GetOwnedMessage(message_arena, currency, submessage_arena);
    }
    set_has_currency();
    _impl_.ext_.currency_ = currency;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.currency)
}
void AssetFull::set_allocated_security(::tinkoff::public_::invest::api::contract::v1::AssetSecurity* security) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (security) {
    ::google::protobuf::Arena* submessage_arena = security->GetArena();
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(message_arena, security, submessage_arena);
    }
    set_has_security();
    _impl_.ext_.security_ = security;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.security)
}
void AssetFull::clear_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.updated_at_ != nullptr) _impl_.updated_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AssetFull::AssetFull(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetFull)
}
inline PROTOBUF_NDEBUG_INLINE AssetFull::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        required_tests_{visibility, arena, from.required_tests_},
        instruments_{visibility, arena, from.instruments_},
        uid_(arena, from.uid_),
        name_(arena, from.name_),
        name_brief_(arena, from.name_brief_),
        description_(arena, from.description_),
        gos_reg_code_(arena, from.gos_reg_code_),
        cfi_(arena, from.cfi_),
        code_nsd_(arena, from.code_nsd_),
        status_(arena, from.status_),
        br_code_(arena, from.br_code_),
        br_code_name_(arena, from.br_code_name_),
        ext_{},
        _oneof_case_{from._oneof_case_[0]} {}

AssetFull::AssetFull(
    ::google::protobuf::Arena* arena,
    const AssetFull& from)
    : ::google::protobuf::Message(arena) {
  AssetFull* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.deleted_at_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.deleted_at_)
                : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Brand>(arena, *from._impl_.brand_)
                : nullptr;
  _impl_.updated_at_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.updated_at_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;
  switch (ext_case()) {
    case EXT_NOT_SET:
      break;
      case kCurrency:
        _impl_.ext_.currency_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetCurrency>(arena, *from._impl_.ext_.currency_);
        break;
      case kSecurity:
        _impl_.ext_.security_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetSecurity>(arena, *from._impl_.ext_.security_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetFull)
}
inline PROTOBUF_NDEBUG_INLINE AssetFull::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        required_tests_{visibility, arena},
        instruments_{visibility, arena},
        uid_(arena),
        name_(arena),
        name_brief_(arena),
        description_(arena),
        gos_reg_code_(arena),
        cfi_(arena),
        code_nsd_(arena),
        status_(arena),
        br_code_(arena),
        br_code_name_(arena),
        ext_{},
        _oneof_case_{} {}

inline void AssetFull::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, deleted_at_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, deleted_at_) +
               sizeof(Impl_::type_));
}
AssetFull::~AssetFull() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetFull)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetFull::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.name_brief_.Destroy();
  _impl_.description_.Destroy();
  _impl_.gos_reg_code_.Destroy();
  _impl_.cfi_.Destroy();
  _impl_.code_nsd_.Destroy();
  _impl_.status_.Destroy();
  _impl_.br_code_.Destroy();
  _impl_.br_code_name_.Destroy();
  delete _impl_.deleted_at_;
  delete _impl_.brand_;
  delete _impl_.updated_at_;
  if (has_ext()) {
    clear_ext();
  }
  _impl_.~Impl_();
}

void AssetFull::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (ext_case()) {
    case kCurrency: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.currency_;
      }
      break;
    }
    case kSecurity: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.security_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}


PROTOBUF_NOINLINE void AssetFull::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.required_tests_.Clear();
  _impl_.instruments_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.name_brief_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.gos_reg_code_.ClearToEmpty();
  _impl_.cfi_.ClearToEmpty();
  _impl_.code_nsd_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.br_code_.ClearToEmpty();
  _impl_.br_code_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.updated_at_ != nullptr);
      _impl_.updated_at_->Clear();
    }
  }
  _impl_.type_ = 0;
  clear_ext();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetFull::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 6, 163, 2> AssetFull::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetFull, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetFull_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.uid_)}},
    // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetFull, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.type_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_)}},
    // string name_brief = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_brief_)}},
    // string description = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.description_)}},
    // .google.protobuf.Timestamp deleted_at = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.deleted_at_)}},
    // repeated string required_tests = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.required_tests_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string gos_reg_code = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.gos_reg_code_)}},
    // string cfi = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.cfi_)}},
    // string code_nsd = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.code_nsd_)}},
    // string status = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.status_)}},
    // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 1, 3, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.brand_)}},
    // .google.protobuf.Timestamp updated_at = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 2, 4, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.updated_at_)}},
    // string br_code = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_)}},
    // string br_code_name = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_name_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
    {::_pbi::TcParser::FastMtR2,
     {402, 63, 5, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.instruments_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name_brief = 4;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_brief_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 5;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp deleted_at = 6;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.deleted_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string required_tests = 7;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.required_tests_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .tinkoff.public_.invest.api.contract.v1.AssetCurrency currency = 8;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.ext_.currency_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.AssetSecurity security = 9;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.ext_.security_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string gos_reg_code = 10;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.gos_reg_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cfi = 11;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.cfi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string code_nsd = 12;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.code_nsd_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string status = 13;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.brand_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp updated_at = 15;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.updated_at_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string br_code = 16;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string br_code_name = 17;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.instruments_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetCurrency>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetSecurity>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Brand>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>()},
  }}, {{
    "\60\3\0\4\12\13\0\16\0\0\14\3\10\6\0\0\7\14\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetFull"
    "uid"
    "name"
    "name_brief"
    "description"
    "required_tests"
    "gos_reg_code"
    "cfi"
    "code_nsd"
    "status"
    "br_code"
    "br_code_name"
  }},
};

::uint8_t* AssetFull::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    const std::string& _s = this->_internal_name_brief();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.description");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp deleted_at = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // repeated string required_tests = 7;
  for (int i = 0, n = this->_internal_required_tests_size(); i < n; ++i) {
    const auto& s = this->_internal_required_tests().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests");
    target = stream->WriteString(7, s, target);
  }

  switch (ext_case()) {
    case kCurrency: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::currency(this),
          _Internal::currency(this).GetCachedSize(), target, stream);
      break;
    }
    case kSecurity: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::security(this),
          _Internal::security(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // string gos_reg_code = 10;
  if (!this->_internal_gos_reg_code().empty()) {
    const std::string& _s = this->_internal_gos_reg_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string cfi = 11;
  if (!this->_internal_cfi().empty()) {
    const std::string& _s = this->_internal_cfi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.cfi");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string code_nsd = 12;
  if (!this->_internal_code_nsd().empty()) {
    const std::string& _s = this->_internal_code_nsd();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string status = 13;
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.status");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // string br_code = 16;
  if (!this->_internal_br_code().empty()) {
    const std::string& _s = this->_internal_br_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.br_code");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // string br_code_name = 17;
  if (!this->_internal_br_code_name().empty()) {
    const std::string& _s = this->_internal_br_code_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetFull)
  return target;
}

::size_t AssetFull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_tests = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_required_tests().size());
  for (int i = 0, n = _internal_required_tests().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_required_tests().Get(i));
  }
  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
  total_size += 2UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name_brief());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string gos_reg_code = 10;
  if (!this->_internal_gos_reg_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_gos_reg_code());
  }

  // string cfi = 11;
  if (!this->_internal_cfi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_cfi());
  }

  // string code_nsd = 12;
  if (!this->_internal_code_nsd().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_code_nsd());
  }

  // string status = 13;
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // string br_code = 16;
  if (!this->_internal_br_code().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_br_code());
  }

  // string br_code_name = 17;
  if (!this->_internal_br_code_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_br_code_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp deleted_at = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.deleted_at_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brand_);
    }

    // .google.protobuf.Timestamp updated_at = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.updated_at_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (ext_case()) {
    // .tinkoff.public_.invest.api.contract.v1.AssetCurrency currency = 8;
    case kCurrency: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ext_.currency_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetSecurity security = 9;
    case kSecurity: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ext_.security_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetFull::_class_data_ = {
    AssetFull::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetFull::GetClassData() const {
  return &_class_data_;
}

void AssetFull::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetFull*>(&to_msg);
  auto& from = static_cast<const AssetFull&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_required_tests()->MergeFrom(from._internal_required_tests());
  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_name_brief().empty()) {
    _this->_internal_set_name_brief(from._internal_name_brief());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_gos_reg_code().empty()) {
    _this->_internal_set_gos_reg_code(from._internal_gos_reg_code());
  }
  if (!from._internal_cfi().empty()) {
    _this->_internal_set_cfi(from._internal_cfi());
  }
  if (!from._internal_code_nsd().empty()) {
    _this->_internal_set_code_nsd(from._internal_code_nsd());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_br_code().empty()) {
    _this->_internal_set_br_code(from._internal_br_code());
  }
  if (!from._internal_br_code_name().empty()) {
    _this->_internal_set_br_code_name(from._internal_br_code_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_deleted_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::Brand::MergeFrom(
          from._internal_brand());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_updated_at());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.ext_case()) {
    case kCurrency: {
      _this->_internal_mutable_currency()->::tinkoff::public_::invest::api::contract::v1::AssetCurrency::MergeFrom(
          from._internal_currency());
      break;
    }
    case kSecurity: {
      _this->_internal_mutable_security()->::tinkoff::public_::invest::api::contract::v1::AssetSecurity::MergeFrom(
          from._internal_security());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetFull::CopyFrom(const AssetFull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetFull::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetFull::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetFull::InternalSwap(AssetFull* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.required_tests_.InternalSwap(&other->_impl_.required_tests_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_brief_, &other->_impl_.name_brief_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gos_reg_code_, &other->_impl_.gos_reg_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cfi_, &other->_impl_.cfi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_nsd_, &other->_impl_.code_nsd_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.br_code_, &other->_impl_.br_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.br_code_name_, &other->_impl_.br_code_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.type_)
      + sizeof(AssetFull::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.deleted_at_)>(
          reinterpret_cast<char*>(&_impl_.deleted_at_),
          reinterpret_cast<char*>(&other->_impl_.deleted_at_));
  swap(_impl_.ext_, other->_impl_.ext_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AssetFull::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[45]);
}
// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Asset)
}
inline PROTOBUF_NDEBUG_INLINE Asset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        uid_(arena, from.uid_),
        name_(arena, from.name_),
        _cached_size_{0} {}

Asset::Asset(
    ::google::protobuf::Arena* arena,
    const Asset& from)
    : ::google::protobuf::Message(arena) {
  Asset* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Asset)
}
inline PROTOBUF_NDEBUG_INLINE Asset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        uid_(arena),
        name_(arena),
        _cached_size_{0} {}

inline void Asset::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
Asset::~Asset() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Asset)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Asset::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Asset)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Asset::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 60, 2> Asset::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Asset_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.instruments_)}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.uid_)}},
    // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Asset, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.type_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>()},
  }}, {{
    "\54\3\0\4\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Asset"
    "uid"
    "name"
  }},
};

::uint8_t* Asset::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Asset)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Asset.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Asset.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Asset)
  return target;
}

::size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Asset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Asset::_class_data_ = {
    Asset::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Asset::GetClassData() const {
  return &_class_data_;
}

void Asset::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Asset*>(&to_msg);
  auto& from = static_cast<const Asset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Asset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Asset::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Asset::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Asset::InternalSwap(Asset* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata Asset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[46]);
}
// ===================================================================

class AssetCurrency::_Internal {
 public:
};

AssetCurrency::AssetCurrency(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
}
inline PROTOBUF_NDEBUG_INLINE AssetCurrency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : base_currency_(arena, from.base_currency_),
        _cached_size_{0} {}

AssetCurrency::AssetCurrency(
    ::google::protobuf::Arena* arena,
    const AssetCurrency& from)
    : ::google::protobuf::Message(arena) {
  AssetCurrency* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
}
inline PROTOBUF_NDEBUG_INLINE AssetCurrency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : base_currency_(arena),
        _cached_size_{0} {}

inline void AssetCurrency::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AssetCurrency::~AssetCurrency() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetCurrency::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.base_currency_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetCurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_currency_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetCurrency::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 74, 2> AssetCurrency::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AssetCurrency_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string base_currency = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetCurrency, _impl_.base_currency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string base_currency = 1;
    {PROTOBUF_FIELD_OFFSET(AssetCurrency, _impl_.base_currency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\64\15\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetCurrency"
    "base_currency"
  }},
};

::uint8_t* AssetCurrency::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string base_currency = 1;
  if (!this->_internal_base_currency().empty()) {
    const std::string& _s = this->_internal_base_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  return target;
}

::size_t AssetCurrency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_currency = 1;
  if (!this->_internal_base_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_base_currency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetCurrency::_class_data_ = {
    AssetCurrency::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetCurrency::GetClassData() const {
  return &_class_data_;
}

void AssetCurrency::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetCurrency*>(&to_msg);
  auto& from = static_cast<const AssetCurrency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_base_currency().empty()) {
    _this->_internal_set_base_currency(from._internal_base_currency());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetCurrency::CopyFrom(const AssetCurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetCurrency::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetCurrency::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetCurrency::InternalSwap(AssetCurrency* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_currency_, &other->_impl_.base_currency_, arena);
}

::google::protobuf::Metadata AssetCurrency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[47]);
}
// ===================================================================

class AssetSecurity::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_._oneof_case_);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetShare& share(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetBond& bond(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& sp(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& etf(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& clearing_certificate(const AssetSecurity* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::AssetShare& AssetSecurity::_Internal::share(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.share_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetBond& AssetSecurity::_Internal::bond(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.bond_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& AssetSecurity::_Internal::sp(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.sp_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& AssetSecurity::_Internal::etf(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.etf_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& AssetSecurity::_Internal::clearing_certificate(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.clearing_certificate_;
}
void AssetSecurity::set_allocated_share(::tinkoff::public_::invest::api::contract::v1::AssetShare* share) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (share) {
    ::google::protobuf::Arena* submessage_arena = share->GetArena();
    if (message_arena != submessage_arena) {
      share = ::google::protobuf::internal::GetOwnedMessage(message_arena, share, submessage_arena);
    }
    set_has_share();
    _impl_.ext_.share_ = share;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.share)
}
void AssetSecurity::set_allocated_bond(::tinkoff::public_::invest::api::contract::v1::AssetBond* bond) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (bond) {
    ::google::protobuf::Arena* submessage_arena = bond->GetArena();
    if (message_arena != submessage_arena) {
      bond = ::google::protobuf::internal::GetOwnedMessage(message_arena, bond, submessage_arena);
    }
    set_has_bond();
    _impl_.ext_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.bond)
}
void AssetSecurity::set_allocated_sp(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* sp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (sp) {
    ::google::protobuf::Arena* submessage_arena = sp->GetArena();
    if (message_arena != submessage_arena) {
      sp = ::google::protobuf::internal::GetOwnedMessage(message_arena, sp, submessage_arena);
    }
    set_has_sp();
    _impl_.ext_.sp_ = sp;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.sp)
}
void AssetSecurity::set_allocated_etf(::tinkoff::public_::invest::api::contract::v1::AssetEtf* etf) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (etf) {
    ::google::protobuf::Arena* submessage_arena = etf->GetArena();
    if (message_arena != submessage_arena) {
      etf = ::google::protobuf::internal::GetOwnedMessage(message_arena, etf, submessage_arena);
    }
    set_has_etf();
    _impl_.ext_.etf_ = etf;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.etf)
}
void AssetSecurity::set_allocated_clearing_certificate(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* clearing_certificate) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (clearing_certificate) {
    ::google::protobuf::Arena* submessage_arena = clearing_certificate->GetArena();
    if (message_arena != submessage_arena) {
      clearing_certificate = ::google::protobuf::internal::GetOwnedMessage(message_arena, clearing_certificate, submessage_arena);
    }
    set_has_clearing_certificate();
    _impl_.ext_.clearing_certificate_ = clearing_certificate;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.clearing_certificate)
}
AssetSecurity::AssetSecurity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
}
inline PROTOBUF_NDEBUG_INLINE AssetSecurity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : isin_(arena, from.isin_),
        type_(arena, from.type_),
        ext_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AssetSecurity::AssetSecurity(
    ::google::protobuf::Arena* arena,
    const AssetSecurity& from)
    : ::google::protobuf::Message(arena) {
  AssetSecurity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.instrument_kind_ = from._impl_.instrument_kind_;
  switch (ext_case()) {
    case EXT_NOT_SET:
      break;
      case kShare:
        _impl_.ext_.share_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetShare>(arena, *from._impl_.ext_.share_);
        break;
      case kBond:
        _impl_.ext_.bond_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetBond>(arena, *from._impl_.ext_.bond_);
        break;
      case kSp:
        _impl_.ext_.sp_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct>(arena, *from._impl_.ext_.sp_);
        break;
      case kEtf:
        _impl_.ext_.etf_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetEtf>(arena, *from._impl_.ext_.etf_);
        break;
      case kClearingCertificate:
        _impl_.ext_.clearing_certificate_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate>(arena, *from._impl_.ext_.clearing_certificate_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
}
inline PROTOBUF_NDEBUG_INLINE AssetSecurity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : isin_(arena),
        type_(arena),
        ext_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AssetSecurity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_kind_ = {};
}
AssetSecurity::~AssetSecurity() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetSecurity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.isin_.Destroy();
  _impl_.type_.Destroy();
  if (has_ext()) {
    clear_ext();
  }
  _impl_.~Impl_();
}

void AssetSecurity::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (ext_case()) {
    case kShare: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.share_;
      }
      break;
    }
    case kBond: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.bond_;
      }
      break;
    }
    case kSp: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.sp_;
      }
      break;
    }
    case kEtf: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.etf_;
      }
      break;
    }
    case kClearingCertificate: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.clearing_certificate_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}


PROTOBUF_NOINLINE void AssetSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isin_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.instrument_kind_ = 0;
  clear_ext();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetSecurity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 5, 77, 2> AssetSecurity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966656,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetSecurity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string isin = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.isin_)}},
    // string type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetSecurity, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.instrument_kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string isin = 1;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.isin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string type = 2;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.AssetShare share = 3;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.share_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.AssetBond bond = 4;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.bond_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct sp = 5;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.sp_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.AssetEtf etf = 6;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.etf_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.clearing_certificate_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetShare>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetBond>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetEtf>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate>()},
  }}, {{
    "\64\4\4\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetSecurity"
    "isin"
    "type"
  }},
};

::uint8_t* AssetSecurity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetSecurity.type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  switch (ext_case()) {
    case kShare: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::share(this),
          _Internal::share(this).GetCachedSize(), target, stream);
      break;
    }
    case kBond: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::bond(this),
          _Internal::bond(this).GetCachedSize(), target, stream);
      break;
    }
    case kSp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::sp(this),
          _Internal::sp(this).GetCachedSize(), target, stream);
      break;
    }
    case kEtf: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::etf(this),
          _Internal::etf(this).GetCachedSize(), target, stream);
      break;
    }
    case kClearingCertificate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::clearing_certificate(this),
          _Internal::clearing_certificate(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_instrument_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  return target;
}

::size_t AssetSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  switch (ext_case()) {
    // .tinkoff.public_.invest.api.contract.v1.AssetShare share = 3;
    case kShare: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ext_.share_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetBond bond = 4;
    case kBond: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ext_.bond_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct sp = 5;
    case kSp: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ext_.sp_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetEtf etf = 6;
    case kEtf: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ext_.etf_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
    case kClearingCertificate: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ext_.clearing_certificate_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetSecurity::_class_data_ = {
    AssetSecurity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetSecurity::GetClassData() const {
  return &_class_data_;
}

void AssetSecurity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetSecurity*>(&to_msg);
  auto& from = static_cast<const AssetSecurity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  switch (from.ext_case()) {
    case kShare: {
      _this->_internal_mutable_share()->::tinkoff::public_::invest::api::contract::v1::AssetShare::MergeFrom(
          from._internal_share());
      break;
    }
    case kBond: {
      _this->_internal_mutable_bond()->::tinkoff::public_::invest::api::contract::v1::AssetBond::MergeFrom(
          from._internal_bond());
      break;
    }
    case kSp: {
      _this->_internal_mutable_sp()->::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct::MergeFrom(
          from._internal_sp());
      break;
    }
    case kEtf: {
      _this->_internal_mutable_etf()->::tinkoff::public_::invest::api::contract::v1::AssetEtf::MergeFrom(
          from._internal_etf());
      break;
    }
    case kClearingCertificate: {
      _this->_internal_mutable_clearing_certificate()->::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate::MergeFrom(
          from._internal_clearing_certificate());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetSecurity::CopyFrom(const AssetSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetSecurity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetSecurity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetSecurity::InternalSwap(AssetSecurity* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  swap(_impl_.instrument_kind_, other->_impl_.instrument_kind_);
  swap(_impl_.ext_, other->_impl_.ext_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AssetSecurity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[48]);
}
// ===================================================================

class AssetShare::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetShare>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetShare, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size(const AssetShare* msg);
  static void set_has_issue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetShare* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_rate(const AssetShare* msg);
  static void set_has_dividend_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& ipo_date(const AssetShare* msg);
  static void set_has_ipo_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& registry_date(const AssetShare* msg);
  static void set_has_registry_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& placement_date(const AssetShare* msg);
  static void set_has_placement_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan(const AssetShare* msg);
  static void set_has_issue_size_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& total_float(const AssetShare* msg);
  static void set_has_total_float(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_Internal::issue_size(const AssetShare* msg) {
  return *msg->_impl_.issue_size_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_Internal::nominal(const AssetShare* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_Internal::dividend_rate(const AssetShare* msg) {
  return *msg->_impl_.dividend_rate_;
}
const ::google::protobuf::Timestamp& AssetShare::_Internal::ipo_date(const AssetShare* msg) {
  return *msg->_impl_.ipo_date_;
}
const ::google::protobuf::Timestamp& AssetShare::_Internal::registry_date(const AssetShare* msg) {
  return *msg->_impl_.registry_date_;
}
const ::google::protobuf::Timestamp& AssetShare::_Internal::placement_date(const AssetShare* msg) {
  return *msg->_impl_.placement_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_Internal::issue_size_plan(const AssetShare* msg) {
  return *msg->_impl_.issue_size_plan_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_Internal::total_float(const AssetShare* msg) {
  return *msg->_impl_.total_float_;
}
void AssetShare::clear_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.issue_size_ != nullptr) _impl_.issue_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetShare::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetShare::clear_dividend_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dividend_rate_ != nullptr) _impl_.dividend_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetShare::clear_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ipo_date_ != nullptr) _impl_.ipo_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetShare::clear_registry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.registry_date_ != nullptr) _impl_.registry_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetShare::clear_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AssetShare::clear_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.issue_size_plan_ != nullptr) _impl_.issue_size_plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AssetShare::clear_total_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.total_float_ != nullptr) _impl_.total_float_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
AssetShare::AssetShare(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetShare)
}
inline PROTOBUF_NDEBUG_INLINE AssetShare::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        nominal_currency_(arena, from.nominal_currency_),
        primary_index_(arena, from.primary_index_),
        preferred_share_type_(arena, from.preferred_share_type_),
        issue_kind_(arena, from.issue_kind_),
        repres_isin_(arena, from.repres_isin_) {}

AssetShare::AssetShare(
    ::google::protobuf::Arena* arena,
    const AssetShare& from)
    : ::google::protobuf::Message(arena) {
  AssetShare* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.issue_size_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_)
                : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_)
                : nullptr;
  _impl_.dividend_rate_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dividend_rate_)
                : nullptr;
  _impl_.ipo_date_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.ipo_date_)
                : nullptr;
  _impl_.registry_date_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.registry_date_)
                : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_)
                : nullptr;
  _impl_.issue_size_plan_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_plan_)
                : nullptr;
  _impl_.total_float_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.total_float_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::div_yield_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetShare)
}
inline PROTOBUF_NDEBUG_INLINE AssetShare::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        nominal_currency_(arena),
        primary_index_(arena),
        preferred_share_type_(arena),
        issue_kind_(arena),
        repres_isin_(arena) {}

inline void AssetShare::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, issue_size_),
           0,
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, issue_size_) +
               sizeof(Impl_::div_yield_flag_));
}
AssetShare::~AssetShare() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetShare)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetShare::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nominal_currency_.Destroy();
  _impl_.primary_index_.Destroy();
  _impl_.preferred_share_type_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.repres_isin_.Destroy();
  delete _impl_.issue_size_;
  delete _impl_.nominal_;
  delete _impl_.dividend_rate_;
  delete _impl_.ipo_date_;
  delete _impl_.registry_date_;
  delete _impl_.placement_date_;
  delete _impl_.issue_size_plan_;
  delete _impl_.total_float_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetShare::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.primary_index_.ClearToEmpty();
  _impl_.preferred_share_type_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.repres_isin_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.issue_size_ != nullptr);
      _impl_.issue_size_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dividend_rate_ != nullptr);
      _impl_.dividend_rate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.ipo_date_ != nullptr);
      _impl_.ipo_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.registry_date_ != nullptr);
      _impl_.registry_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.issue_size_plan_ != nullptr);
      _impl_.issue_size_plan_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.total_float_ != nullptr);
      _impl_.total_float_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.div_yield_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetShare::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 8, 136, 2> AssetShare::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetShare, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetShare_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetShare, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.type_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_)}},
    // string nominal_currency = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_currency_)}},
    // string primary_index = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.primary_index_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.dividend_rate_)}},
    // string preferred_share_type = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.preferred_share_type_)}},
    // .google.protobuf.Timestamp ipo_date = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.ipo_date_)}},
    // .google.protobuf.Timestamp registry_date = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.registry_date_)}},
    // bool div_yield_flag = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetShare, _impl_.div_yield_flag_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.div_yield_flag_)}},
    // string issue_kind = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_kind_)}},
    // .google.protobuf.Timestamp placement_date = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.placement_date_)}},
    // string repres_isin = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.repres_isin_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 6, 6, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_plan_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 7, 7, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.total_float_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 4;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index = 5;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.primary_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.dividend_rate_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string preferred_share_type = 7;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.preferred_share_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp ipo_date = 8;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.ipo_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp registry_date = 9;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.registry_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool div_yield_flag = 10;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.div_yield_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string issue_kind = 11;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp placement_date = 12;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.placement_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string repres_isin = 13;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.repres_isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_plan_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.total_float_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\61\0\0\0\20\15\0\24\0\0\0\12\0\13\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetShare"
    "nominal_currency"
    "primary_index"
    "preferred_share_type"
    "issue_kind"
    "repres_isin"
  }},
};

::uint8_t* AssetShare::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::issue_size(this),
        _Internal::issue_size(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 4;
  if (!this->_internal_nominal_currency().empty()) {
    const std::string& _s = this->_internal_nominal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string primary_index = 5;
  if (!this->_internal_primary_index().empty()) {
    const std::string& _s = this->_internal_primary_index();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::dividend_rate(this),
        _Internal::dividend_rate(this).GetCachedSize(), target, stream);
  }

  // string preferred_share_type = 7;
  if (!this->_internal_preferred_share_type().empty()) {
    const std::string& _s = this->_internal_preferred_share_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // .google.protobuf.Timestamp ipo_date = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::ipo_date(this),
        _Internal::ipo_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp registry_date = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::registry_date(this),
        _Internal::registry_date(this).GetCachedSize(), target, stream);
  }

  // bool div_yield_flag = 10;
  if (this->_internal_div_yield_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_div_yield_flag(), target);
  }

  // string issue_kind = 11;
  if (!this->_internal_issue_kind().empty()) {
    const std::string& _s = this->_internal_issue_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // .google.protobuf.Timestamp placement_date = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // string repres_isin = 13;
  if (!this->_internal_repres_isin().empty()) {
    const std::string& _s = this->_internal_repres_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::issue_size_plan(this),
        _Internal::issue_size_plan(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, _Internal::total_float(this),
        _Internal::total_float(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetShare)
  return target;
}

::size_t AssetShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nominal_currency = 4;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nominal_currency());
  }

  // string primary_index = 5;
  if (!this->_internal_primary_index().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_primary_index());
  }

  // string preferred_share_type = 7;
  if (!this->_internal_preferred_share_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_preferred_share_type());
  }

  // string issue_kind = 11;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_issue_kind());
  }

  // string repres_isin = 13;
  if (!this->_internal_repres_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_repres_isin());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.issue_size_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dividend_rate_);
    }

    // .google.protobuf.Timestamp ipo_date = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ipo_date_);
    }

    // .google.protobuf.Timestamp registry_date = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.registry_date_);
    }

    // .google.protobuf.Timestamp placement_date = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.placement_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.issue_size_plan_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.total_float_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool div_yield_flag = 10;
  if (this->_internal_div_yield_flag() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetShare::_class_data_ = {
    AssetShare::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetShare::GetClassData() const {
  return &_class_data_;
}

void AssetShare::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetShare*>(&to_msg);
  auto& from = static_cast<const AssetShare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_primary_index().empty()) {
    _this->_internal_set_primary_index(from._internal_primary_index());
  }
  if (!from._internal_preferred_share_type().empty()) {
    _this->_internal_set_preferred_share_type(from._internal_preferred_share_type());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_repres_isin().empty()) {
    _this->_internal_set_repres_isin(from._internal_repres_isin());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_issue_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_issue_size());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_nominal());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dividend_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_dividend_rate());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_ipo_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_ipo_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_registry_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_registry_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_placement_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_placement_date());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_issue_size_plan()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_issue_size_plan());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_total_float()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_total_float());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_internal_set_div_yield_flag(from._internal_div_yield_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetShare::CopyFrom(const AssetShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetShare::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetShare::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetShare::InternalSwap(AssetShare* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_, &other->_impl_.primary_index_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.preferred_share_type_, &other->_impl_.preferred_share_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.repres_isin_, &other->_impl_.repres_isin_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.div_yield_flag_)
      + sizeof(AssetShare::_impl_.div_yield_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_)>(
          reinterpret_cast<char*>(&_impl_.issue_size_),
          reinterpret_cast<char*>(&other->_impl_.issue_size_));
}

::google::protobuf::Metadata AssetShare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[49]);
}
// ===================================================================

class AssetBond::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetBond>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetBond, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_nominal(const AssetBond* msg);
  static void set_has_current_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size(const AssetBond* msg);
  static void set_has_issue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetBond* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& maturity_date(const AssetBond* msg);
  static void set_has_maturity_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& state_reg_date(const AssetBond* msg);
  static void set_has_state_reg_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& placement_date(const AssetBond* msg);
  static void set_has_placement_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& placement_price(const AssetBond* msg);
  static void set_has_placement_price(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan(const AssetBond* msg);
  static void set_has_issue_size_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_Internal::current_nominal(const AssetBond* msg) {
  return *msg->_impl_.current_nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_Internal::issue_size(const AssetBond* msg) {
  return *msg->_impl_.issue_size_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_Internal::nominal(const AssetBond* msg) {
  return *msg->_impl_.nominal_;
}
const ::google::protobuf::Timestamp& AssetBond::_Internal::maturity_date(const AssetBond* msg) {
  return *msg->_impl_.maturity_date_;
}
const ::google::protobuf::Timestamp& AssetBond::_Internal::state_reg_date(const AssetBond* msg) {
  return *msg->_impl_.state_reg_date_;
}
const ::google::protobuf::Timestamp& AssetBond::_Internal::placement_date(const AssetBond* msg) {
  return *msg->_impl_.placement_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_Internal::placement_price(const AssetBond* msg) {
  return *msg->_impl_.placement_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_Internal::issue_size_plan(const AssetBond* msg) {
  return *msg->_impl_.issue_size_plan_;
}
void AssetBond::clear_current_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.current_nominal_ != nullptr) _impl_.current_nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetBond::clear_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.issue_size_ != nullptr) _impl_.issue_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetBond::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetBond::clear_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.maturity_date_ != nullptr) _impl_.maturity_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetBond::clear_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.state_reg_date_ != nullptr) _impl_.state_reg_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetBond::clear_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AssetBond::clear_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.placement_price_ != nullptr) _impl_.placement_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AssetBond::clear_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.issue_size_plan_ != nullptr) _impl_.issue_size_plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
AssetBond::AssetBond(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetBond)
}
inline PROTOBUF_NDEBUG_INLINE AssetBond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        borrow_name_(arena, from.borrow_name_),
        nominal_currency_(arena, from.nominal_currency_),
        issue_kind_(arena, from.issue_kind_),
        interest_kind_(arena, from.interest_kind_),
        return_condition_(arena, from.return_condition_) {}

AssetBond::AssetBond(
    ::google::protobuf::Arena* arena,
    const AssetBond& from)
    : ::google::protobuf::Message(arena) {
  AssetBond* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_nominal_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.current_nominal_)
                : nullptr;
  _impl_.issue_size_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_)
                : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_)
                : nullptr;
  _impl_.maturity_date_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.maturity_date_)
                : nullptr;
  _impl_.state_reg_date_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.state_reg_date_)
                : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_)
                : nullptr;
  _impl_.placement_price_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.placement_price_)
                : nullptr;
  _impl_.issue_size_plan_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_plan_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, coupon_quantity_per_year_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, coupon_quantity_per_year_),
           offsetof(Impl_, perpetual_flag_) -
               offsetof(Impl_, coupon_quantity_per_year_) +
               sizeof(Impl_::perpetual_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetBond)
}
inline PROTOBUF_NDEBUG_INLINE AssetBond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        borrow_name_(arena),
        nominal_currency_(arena),
        issue_kind_(arena),
        interest_kind_(arena),
        return_condition_(arena) {}

inline void AssetBond::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_nominal_),
           0,
           offsetof(Impl_, perpetual_flag_) -
               offsetof(Impl_, current_nominal_) +
               sizeof(Impl_::perpetual_flag_));
}
AssetBond::~AssetBond() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetBond)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetBond::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.borrow_name_.Destroy();
  _impl_.nominal_currency_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.interest_kind_.Destroy();
  _impl_.return_condition_.Destroy();
  delete _impl_.current_nominal_;
  delete _impl_.issue_size_;
  delete _impl_.nominal_;
  delete _impl_.maturity_date_;
  delete _impl_.state_reg_date_;
  delete _impl_.placement_date_;
  delete _impl_.placement_price_;
  delete _impl_.issue_size_plan_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetBond::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrow_name_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.interest_kind_.ClearToEmpty();
  _impl_.return_condition_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.current_nominal_ != nullptr);
      _impl_.current_nominal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.issue_size_ != nullptr);
      _impl_.issue_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.maturity_date_ != nullptr);
      _impl_.maturity_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.state_reg_date_ != nullptr);
      _impl_.state_reg_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.placement_price_ != nullptr);
      _impl_.placement_price_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.issue_size_plan_ != nullptr);
      _impl_.issue_size_plan_->Clear();
    }
  }
  ::memset(&_impl_.coupon_quantity_per_year_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.perpetual_flag_) -
      reinterpret_cast<char*>(&_impl_.coupon_quantity_per_year_)) + sizeof(_impl_.perpetual_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetBond::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 8, 139, 2> AssetBond::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetBond, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetBond_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.current_nominal_)}},
    // string borrow_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.borrow_name_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_)}},
    // string nominal_currency = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_currency_)}},
    // string issue_kind = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_kind_)}},
    // string interest_kind = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.interest_kind_)}},
    // int32 coupon_quantity_per_year = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetBond, _impl_.coupon_quantity_per_year_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.coupon_quantity_per_year_)}},
    // bool indexed_nominal_flag = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.indexed_nominal_flag_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.indexed_nominal_flag_)}},
    // bool subordinated_flag = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.subordinated_flag_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.subordinated_flag_)}},
    // bool collateral_flag = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.collateral_flag_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.collateral_flag_)}},
    // bool tax_free_flag = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.tax_free_flag_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.tax_free_flag_)}},
    // bool amortization_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.amortization_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.amortization_flag_)}},
    // bool floating_coupon_flag = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.floating_coupon_flag_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.floating_coupon_flag_)}},
    // bool perpetual_flag = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.perpetual_flag_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.perpetual_flag_)}},
    // .google.protobuf.Timestamp maturity_date = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 3, 3, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.maturity_date_)}},
    // string return_condition = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.return_condition_)}},
    // .google.protobuf.Timestamp state_reg_date = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 4, 4, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.state_reg_date_)}},
    // .google.protobuf.Timestamp placement_date = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 5, 5, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 6, 6, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 7, 7, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_plan_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.current_nominal_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string borrow_name = 2;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.borrow_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 5;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string issue_kind = 6;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string interest_kind = 7;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.interest_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 coupon_quantity_per_year = 8;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.coupon_quantity_per_year_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool indexed_nominal_flag = 9;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.indexed_nominal_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool subordinated_flag = 10;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.subordinated_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool collateral_flag = 11;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.collateral_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool tax_free_flag = 12;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.tax_free_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool amortization_flag = 13;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.amortization_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool floating_coupon_flag = 14;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.floating_coupon_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool perpetual_flag = 15;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.perpetual_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp maturity_date = 16;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.maturity_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string return_condition = 17;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.return_condition_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp state_reg_date = 18;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.state_reg_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp placement_date = 19;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_price_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_plan_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\60\0\13\0\0\20\12\15\0\0\0\0\0\0\0\0\0\20\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetBond"
    "borrow_name"
    "nominal_currency"
    "issue_kind"
    "interest_kind"
    "return_condition"
  }},
};

::uint8_t* AssetBond::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::current_nominal(this),
        _Internal::current_nominal(this).GetCachedSize(), target, stream);
  }

  // string borrow_name = 2;
  if (!this->_internal_borrow_name().empty()) {
    const std::string& _s = this->_internal_borrow_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::issue_size(this),
        _Internal::issue_size(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 5;
  if (!this->_internal_nominal_currency().empty()) {
    const std::string& _s = this->_internal_nominal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string issue_kind = 6;
  if (!this->_internal_issue_kind().empty()) {
    const std::string& _s = this->_internal_issue_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string interest_kind = 7;
  if (!this->_internal_interest_kind().empty()) {
    const std::string& _s = this->_internal_interest_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // int32 coupon_quantity_per_year = 8;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_coupon_quantity_per_year(), target);
  }

  // bool indexed_nominal_flag = 9;
  if (this->_internal_indexed_nominal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_indexed_nominal_flag(), target);
  }

  // bool subordinated_flag = 10;
  if (this->_internal_subordinated_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_subordinated_flag(), target);
  }

  // bool collateral_flag = 11;
  if (this->_internal_collateral_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_collateral_flag(), target);
  }

  // bool tax_free_flag = 12;
  if (this->_internal_tax_free_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_tax_free_flag(), target);
  }

  // bool amortization_flag = 13;
  if (this->_internal_amortization_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_amortization_flag(), target);
  }

  // bool floating_coupon_flag = 14;
  if (this->_internal_floating_coupon_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_floating_coupon_flag(), target);
  }

  // bool perpetual_flag = 15;
  if (this->_internal_perpetual_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_perpetual_flag(), target);
  }

  // .google.protobuf.Timestamp maturity_date = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, _Internal::maturity_date(this),
        _Internal::maturity_date(this).GetCachedSize(), target, stream);
  }

  // string return_condition = 17;
  if (!this->_internal_return_condition().empty()) {
    const std::string& _s = this->_internal_return_condition();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // .google.protobuf.Timestamp state_reg_date = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, _Internal::state_reg_date(this),
        _Internal::state_reg_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp placement_date = 19;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, _Internal::placement_price(this),
        _Internal::placement_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::issue_size_plan(this),
        _Internal::issue_size_plan(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetBond)
  return target;
}

::size_t AssetBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string borrow_name = 2;
  if (!this->_internal_borrow_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_borrow_name());
  }

  // string nominal_currency = 5;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nominal_currency());
  }

  // string issue_kind = 6;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_issue_kind());
  }

  // string interest_kind = 7;
  if (!this->_internal_interest_kind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_interest_kind());
  }

  // string return_condition = 17;
  if (!this->_internal_return_condition().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_return_condition());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_nominal_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.issue_size_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

    // .google.protobuf.Timestamp maturity_date = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.maturity_date_);
    }

    // .google.protobuf.Timestamp state_reg_date = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.state_reg_date_);
    }

    // .google.protobuf.Timestamp placement_date = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.placement_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.placement_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.issue_size_plan_);
    }

  }
  // int32 coupon_quantity_per_year = 8;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_coupon_quantity_per_year());
  }

  // bool indexed_nominal_flag = 9;
  if (this->_internal_indexed_nominal_flag() != 0) {
    total_size += 2;
  }

  // bool subordinated_flag = 10;
  if (this->_internal_subordinated_flag() != 0) {
    total_size += 2;
  }

  // bool collateral_flag = 11;
  if (this->_internal_collateral_flag() != 0) {
    total_size += 2;
  }

  // bool tax_free_flag = 12;
  if (this->_internal_tax_free_flag() != 0) {
    total_size += 2;
  }

  // bool amortization_flag = 13;
  if (this->_internal_amortization_flag() != 0) {
    total_size += 2;
  }

  // bool floating_coupon_flag = 14;
  if (this->_internal_floating_coupon_flag() != 0) {
    total_size += 2;
  }

  // bool perpetual_flag = 15;
  if (this->_internal_perpetual_flag() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetBond::_class_data_ = {
    AssetBond::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetBond::GetClassData() const {
  return &_class_data_;
}

void AssetBond::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetBond*>(&to_msg);
  auto& from = static_cast<const AssetBond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_borrow_name().empty()) {
    _this->_internal_set_borrow_name(from._internal_borrow_name());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_interest_kind().empty()) {
    _this->_internal_set_interest_kind(from._internal_interest_kind());
  }
  if (!from._internal_return_condition().empty()) {
    _this->_internal_set_return_condition(from._internal_return_condition());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_current_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_current_nominal());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_issue_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_issue_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_nominal());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_maturity_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_maturity_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_state_reg_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_state_reg_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_placement_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_placement_date());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_placement_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_placement_price());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_issue_size_plan()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_issue_size_plan());
    }
  }
  if (from._internal_coupon_quantity_per_year() != 0) {
    _this->_internal_set_coupon_quantity_per_year(from._internal_coupon_quantity_per_year());
  }
  if (from._internal_indexed_nominal_flag() != 0) {
    _this->_internal_set_indexed_nominal_flag(from._internal_indexed_nominal_flag());
  }
  if (from._internal_subordinated_flag() != 0) {
    _this->_internal_set_subordinated_flag(from._internal_subordinated_flag());
  }
  if (from._internal_collateral_flag() != 0) {
    _this->_internal_set_collateral_flag(from._internal_collateral_flag());
  }
  if (from._internal_tax_free_flag() != 0) {
    _this->_internal_set_tax_free_flag(from._internal_tax_free_flag());
  }
  if (from._internal_amortization_flag() != 0) {
    _this->_internal_set_amortization_flag(from._internal_amortization_flag());
  }
  if (from._internal_floating_coupon_flag() != 0) {
    _this->_internal_set_floating_coupon_flag(from._internal_floating_coupon_flag());
  }
  if (from._internal_perpetual_flag() != 0) {
    _this->_internal_set_perpetual_flag(from._internal_perpetual_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetBond::CopyFrom(const AssetBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetBond::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetBond::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetBond::InternalSwap(AssetBond* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.borrow_name_, &other->_impl_.borrow_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interest_kind_, &other->_impl_.interest_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.return_condition_, &other->_impl_.return_condition_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.perpetual_flag_)
      + sizeof(AssetBond::_impl_.perpetual_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.current_nominal_)>(
          reinterpret_cast<char*>(&_impl_.current_nominal_),
          reinterpret_cast<char*>(&other->_impl_.current_nominal_));
}

::google::protobuf::Metadata AssetBond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[50]);
}
// ===================================================================

class AssetStructuredProduct::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetStructuredProduct>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetStructuredProduct* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& safety_barrier(const AssetStructuredProduct* msg);
  static void set_has_safety_barrier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& maturity_date(const AssetStructuredProduct* msg);
  static void set_has_maturity_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan(const AssetStructuredProduct* msg);
  static void set_has_issue_size_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size(const AssetStructuredProduct* msg);
  static void set_has_issue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& placement_date(const AssetStructuredProduct* msg);
  static void set_has_placement_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_Internal::nominal(const AssetStructuredProduct* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_Internal::safety_barrier(const AssetStructuredProduct* msg) {
  return *msg->_impl_.safety_barrier_;
}
const ::google::protobuf::Timestamp& AssetStructuredProduct::_Internal::maturity_date(const AssetStructuredProduct* msg) {
  return *msg->_impl_.maturity_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_Internal::issue_size_plan(const AssetStructuredProduct* msg) {
  return *msg->_impl_.issue_size_plan_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_Internal::issue_size(const AssetStructuredProduct* msg) {
  return *msg->_impl_.issue_size_;
}
const ::google::protobuf::Timestamp& AssetStructuredProduct::_Internal::placement_date(const AssetStructuredProduct* msg) {
  return *msg->_impl_.placement_date_;
}
void AssetStructuredProduct::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetStructuredProduct::clear_safety_barrier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.safety_barrier_ != nullptr) _impl_.safety_barrier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetStructuredProduct::clear_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.maturity_date_ != nullptr) _impl_.maturity_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetStructuredProduct::clear_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.issue_size_plan_ != nullptr) _impl_.issue_size_plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetStructuredProduct::clear_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.issue_size_ != nullptr) _impl_.issue_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetStructuredProduct::clear_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
AssetStructuredProduct::AssetStructuredProduct(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
}
inline PROTOBUF_NDEBUG_INLINE AssetStructuredProduct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        borrow_name_(arena, from.borrow_name_),
        nominal_currency_(arena, from.nominal_currency_),
        logic_portfolio_(arena, from.logic_portfolio_),
        basic_asset_(arena, from.basic_asset_),
        issue_kind_(arena, from.issue_kind_) {}

AssetStructuredProduct::AssetStructuredProduct(
    ::google::protobuf::Arena* arena,
    const AssetStructuredProduct& from)
    : ::google::protobuf::Message(arena) {
  AssetStructuredProduct* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.nominal_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_)
                : nullptr;
  _impl_.safety_barrier_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.safety_barrier_)
                : nullptr;
  _impl_.maturity_date_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.maturity_date_)
                : nullptr;
  _impl_.issue_size_plan_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_plan_)
                : nullptr;
  _impl_.issue_size_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_)
                : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, asset_type_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::asset_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
}
inline PROTOBUF_NDEBUG_INLINE AssetStructuredProduct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        borrow_name_(arena),
        nominal_currency_(arena),
        logic_portfolio_(arena),
        basic_asset_(arena),
        issue_kind_(arena) {}

inline void AssetStructuredProduct::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nominal_),
           0,
           offsetof(Impl_, asset_type_) -
               offsetof(Impl_, nominal_) +
               sizeof(Impl_::asset_type_));
}
AssetStructuredProduct::~AssetStructuredProduct() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetStructuredProduct::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.borrow_name_.Destroy();
  _impl_.nominal_currency_.Destroy();
  _impl_.logic_portfolio_.Destroy();
  _impl_.basic_asset_.Destroy();
  _impl_.issue_kind_.Destroy();
  delete _impl_.nominal_;
  delete _impl_.safety_barrier_;
  delete _impl_.maturity_date_;
  delete _impl_.issue_size_plan_;
  delete _impl_.issue_size_;
  delete _impl_.placement_date_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetStructuredProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrow_name_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.logic_portfolio_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.safety_barrier_ != nullptr);
      _impl_.safety_barrier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.maturity_date_ != nullptr);
      _impl_.maturity_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.issue_size_plan_ != nullptr);
      _impl_.issue_size_plan_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.issue_size_ != nullptr);
      _impl_.issue_size_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.asset_type_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.asset_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetStructuredProduct::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 6, 141, 2> AssetStructuredProduct::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetStructuredProduct_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string borrow_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.borrow_name_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_)}},
    // string nominal_currency = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetStructuredProduct, _impl_.type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.type_)}},
    // string logic_portfolio = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.logic_portfolio_)}},
    // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetStructuredProduct, _impl_.asset_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.asset_type_)}},
    // string basic_asset = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.basic_asset_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.safety_barrier_)}},
    // .google.protobuf.Timestamp maturity_date = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.maturity_date_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_plan_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_)}},
    // .google.protobuf.Timestamp placement_date = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.placement_date_)}},
    // string issue_kind = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string borrow_name = 1;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.borrow_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 3;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string logic_portfolio = 5;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.logic_portfolio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.asset_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string basic_asset = 7;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.basic_asset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.safety_barrier_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp maturity_date = 9;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.maturity_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_plan_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp placement_date = 12;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.placement_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string issue_kind = 13;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\75\13\0\20\0\17\0\13\0\0\0\0\0\12\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct"
    "borrow_name"
    "nominal_currency"
    "logic_portfolio"
    "basic_asset"
    "issue_kind"
  }},
};

::uint8_t* AssetStructuredProduct::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string borrow_name = 1;
  if (!this->_internal_borrow_name().empty()) {
    const std::string& _s = this->_internal_borrow_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 3;
  if (!this->_internal_nominal_currency().empty()) {
    const std::string& _s = this->_internal_nominal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  // string logic_portfolio = 5;
  if (!this->_internal_logic_portfolio().empty()) {
    const std::string& _s = this->_internal_logic_portfolio();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
  if (this->_internal_asset_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_asset_type(), target);
  }

  // string basic_asset = 7;
  if (!this->_internal_basic_asset().empty()) {
    const std::string& _s = this->_internal_basic_asset();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::safety_barrier(this),
        _Internal::safety_barrier(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp maturity_date = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::maturity_date(this),
        _Internal::maturity_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::issue_size_plan(this),
        _Internal::issue_size_plan(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::issue_size(this),
        _Internal::issue_size(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp placement_date = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // string issue_kind = 13;
  if (!this->_internal_issue_kind().empty()) {
    const std::string& _s = this->_internal_issue_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  return target;
}

::size_t AssetStructuredProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string borrow_name = 1;
  if (!this->_internal_borrow_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_borrow_name());
  }

  // string nominal_currency = 3;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nominal_currency());
  }

  // string logic_portfolio = 5;
  if (!this->_internal_logic_portfolio().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_logic_portfolio());
  }

  // string basic_asset = 7;
  if (!this->_internal_basic_asset().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_basic_asset());
  }

  // string issue_kind = 13;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_issue_kind());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.safety_barrier_);
    }

    // .google.protobuf.Timestamp maturity_date = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.maturity_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.issue_size_plan_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.issue_size_);
    }

    // .google.protobuf.Timestamp placement_date = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.placement_date_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
  if (this->_internal_asset_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_asset_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetStructuredProduct::_class_data_ = {
    AssetStructuredProduct::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetStructuredProduct::GetClassData() const {
  return &_class_data_;
}

void AssetStructuredProduct::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetStructuredProduct*>(&to_msg);
  auto& from = static_cast<const AssetStructuredProduct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_borrow_name().empty()) {
    _this->_internal_set_borrow_name(from._internal_borrow_name());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_logic_portfolio().empty()) {
    _this->_internal_set_logic_portfolio(from._internal_logic_portfolio());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_nominal());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_safety_barrier()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_safety_barrier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_maturity_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_maturity_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_issue_size_plan()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_issue_size_plan());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_issue_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_issue_size());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_placement_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_placement_date());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_asset_type() != 0) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetStructuredProduct::CopyFrom(const AssetStructuredProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetStructuredProduct::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetStructuredProduct::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetStructuredProduct::InternalSwap(AssetStructuredProduct* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.borrow_name_, &other->_impl_.borrow_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logic_portfolio_, &other->_impl_.logic_portfolio_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_, &other->_impl_.basic_asset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.asset_type_)
      + sizeof(AssetStructuredProduct::_impl_.asset_type_)
      - PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_)>(
          reinterpret_cast<char*>(&_impl_.nominal_),
          reinterpret_cast<char*>(&other->_impl_.nominal_));
}

::google::protobuf::Metadata AssetStructuredProduct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[51]);
}
// ===================================================================

class AssetEtf::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetEtf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& total_expense(const AssetEtf* msg);
  static void set_has_total_expense(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& hurdle_rate(const AssetEtf* msg);
  static void set_has_hurdle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& performance_fee(const AssetEtf* msg);
  static void set_has_performance_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& fixed_commission(const AssetEtf* msg);
  static void set_has_fixed_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& buy_premium(const AssetEtf* msg);
  static void set_has_buy_premium(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& sell_discount(const AssetEtf* msg);
  static void set_has_sell_discount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& num_share(const AssetEtf* msg);
  static void set_has_num_share(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::Timestamp& released_date(const AssetEtf* msg);
  static void set_has_released_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& index_recovery_period(const AssetEtf* msg);
  static void set_has_index_recovery_period(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& expense_commission(const AssetEtf* msg);
  static void set_has_expense_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& primary_index_tracking_error(const AssetEtf* msg);
  static void set_has_primary_index_tracking_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetEtf* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::total_expense(const AssetEtf* msg) {
  return *msg->_impl_.total_expense_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::hurdle_rate(const AssetEtf* msg) {
  return *msg->_impl_.hurdle_rate_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::performance_fee(const AssetEtf* msg) {
  return *msg->_impl_.performance_fee_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::fixed_commission(const AssetEtf* msg) {
  return *msg->_impl_.fixed_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::buy_premium(const AssetEtf* msg) {
  return *msg->_impl_.buy_premium_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::sell_discount(const AssetEtf* msg) {
  return *msg->_impl_.sell_discount_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::num_share(const AssetEtf* msg) {
  return *msg->_impl_.num_share_;
}
const ::google::protobuf::Timestamp& AssetEtf::_Internal::released_date(const AssetEtf* msg) {
  return *msg->_impl_.released_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::index_recovery_period(const AssetEtf* msg) {
  return *msg->_impl_.index_recovery_period_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::expense_commission(const AssetEtf* msg) {
  return *msg->_impl_.expense_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::primary_index_tracking_error(const AssetEtf* msg) {
  return *msg->_impl_.primary_index_tracking_error_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_Internal::nominal(const AssetEtf* msg) {
  return *msg->_impl_.nominal_;
}
void AssetEtf::clear_total_expense() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.total_expense_ != nullptr) _impl_.total_expense_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetEtf::clear_hurdle_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hurdle_rate_ != nullptr) _impl_.hurdle_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetEtf::clear_performance_fee() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.performance_fee_ != nullptr) _impl_.performance_fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetEtf::clear_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fixed_commission_ != nullptr) _impl_.fixed_commission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetEtf::clear_buy_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.buy_premium_ != nullptr) _impl_.buy_premium_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetEtf::clear_sell_discount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sell_discount_ != nullptr) _impl_.sell_discount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AssetEtf::clear_num_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.num_share_ != nullptr) _impl_.num_share_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AssetEtf::clear_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.released_date_ != nullptr) _impl_.released_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void AssetEtf::clear_index_recovery_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.index_recovery_period_ != nullptr) _impl_.index_recovery_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void AssetEtf::clear_expense_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.expense_commission_ != nullptr) _impl_.expense_commission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void AssetEtf::clear_primary_index_tracking_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.primary_index_tracking_error_ != nullptr) _impl_.primary_index_tracking_error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void AssetEtf::clear_rebalancing_dates() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_dates_.Clear();
}
void AssetEtf::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
AssetEtf::AssetEtf(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetEtf)
}
inline PROTOBUF_NDEBUG_INLINE AssetEtf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rebalancing_dates_{visibility, arena, from.rebalancing_dates_},
        payment_type_(arena, from.payment_type_),
        rebalancing_freq_(arena, from.rebalancing_freq_),
        management_type_(arena, from.management_type_),
        primary_index_(arena, from.primary_index_),
        focus_type_(arena, from.focus_type_),
        description_(arena, from.description_),
        primary_index_description_(arena, from.primary_index_description_),
        primary_index_company_(arena, from.primary_index_company_),
        inav_code_(arena, from.inav_code_),
        rebalancing_plan_(arena, from.rebalancing_plan_),
        tax_rate_(arena, from.tax_rate_),
        issue_kind_(arena, from.issue_kind_),
        nominal_currency_(arena, from.nominal_currency_) {}

AssetEtf::AssetEtf(
    ::google::protobuf::Arena* arena,
    const AssetEtf& from)
    : ::google::protobuf::Message(arena) {
  AssetEtf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.total_expense_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.total_expense_)
                : nullptr;
  _impl_.hurdle_rate_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.hurdle_rate_)
                : nullptr;
  _impl_.performance_fee_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.performance_fee_)
                : nullptr;
  _impl_.fixed_commission_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.fixed_commission_)
                : nullptr;
  _impl_.buy_premium_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.buy_premium_)
                : nullptr;
  _impl_.sell_discount_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.sell_discount_)
                : nullptr;
  _impl_.num_share_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.num_share_)
                : nullptr;
  _impl_.released_date_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.released_date_)
                : nullptr;
  _impl_.index_recovery_period_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.index_recovery_period_)
                : nullptr;
  _impl_.expense_commission_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.expense_commission_)
                : nullptr;
  _impl_.primary_index_tracking_error_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.primary_index_tracking_error_)
                : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, watermark_flag_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, watermark_flag_),
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, watermark_flag_) +
               sizeof(Impl_::div_yield_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetEtf)
}
inline PROTOBUF_NDEBUG_INLINE AssetEtf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        rebalancing_dates_{visibility, arena},
        payment_type_(arena),
        rebalancing_freq_(arena),
        management_type_(arena),
        primary_index_(arena),
        focus_type_(arena),
        description_(arena),
        primary_index_description_(arena),
        primary_index_company_(arena),
        inav_code_(arena),
        rebalancing_plan_(arena),
        tax_rate_(arena),
        issue_kind_(arena),
        nominal_currency_(arena) {}

inline void AssetEtf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_expense_),
           0,
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, total_expense_) +
               sizeof(Impl_::div_yield_flag_));
}
AssetEtf::~AssetEtf() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetEtf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.payment_type_.Destroy();
  _impl_.rebalancing_freq_.Destroy();
  _impl_.management_type_.Destroy();
  _impl_.primary_index_.Destroy();
  _impl_.focus_type_.Destroy();
  _impl_.description_.Destroy();
  _impl_.primary_index_description_.Destroy();
  _impl_.primary_index_company_.Destroy();
  _impl_.inav_code_.Destroy();
  _impl_.rebalancing_plan_.Destroy();
  _impl_.tax_rate_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.nominal_currency_.Destroy();
  delete _impl_.total_expense_;
  delete _impl_.hurdle_rate_;
  delete _impl_.performance_fee_;
  delete _impl_.fixed_commission_;
  delete _impl_.buy_premium_;
  delete _impl_.sell_discount_;
  delete _impl_.num_share_;
  delete _impl_.released_date_;
  delete _impl_.index_recovery_period_;
  delete _impl_.expense_commission_;
  delete _impl_.primary_index_tracking_error_;
  delete _impl_.nominal_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetEtf::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rebalancing_dates_.Clear();
  _impl_.payment_type_.ClearToEmpty();
  _impl_.rebalancing_freq_.ClearToEmpty();
  _impl_.management_type_.ClearToEmpty();
  _impl_.primary_index_.ClearToEmpty();
  _impl_.focus_type_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.primary_index_description_.ClearToEmpty();
  _impl_.primary_index_company_.ClearToEmpty();
  _impl_.inav_code_.ClearToEmpty();
  _impl_.rebalancing_plan_.ClearToEmpty();
  _impl_.tax_rate_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.total_expense_ != nullptr);
      _impl_.total_expense_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.hurdle_rate_ != nullptr);
      _impl_.hurdle_rate_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.performance_fee_ != nullptr);
      _impl_.performance_fee_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.fixed_commission_ != nullptr);
      _impl_.fixed_commission_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.buy_premium_ != nullptr);
      _impl_.buy_premium_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.sell_discount_ != nullptr);
      _impl_.sell_discount_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.num_share_ != nullptr);
      _impl_.num_share_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.released_date_ != nullptr);
      _impl_.released_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.index_recovery_period_ != nullptr);
      _impl_.index_recovery_period_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.expense_commission_ != nullptr);
      _impl_.expense_commission_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.primary_index_tracking_error_ != nullptr);
      _impl_.primary_index_tracking_error_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  ::memset(&_impl_.watermark_flag_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
      reinterpret_cast<char*>(&_impl_.watermark_flag_)) + sizeof(_impl_.div_yield_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetEtf::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 31, 13, 262, 2> AssetEtf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_._has_bits_),
    0, // no _extensions_
    31, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2147483648,  // skipmap
    offsetof(decltype(_table_), field_entries),
    31,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetEtf_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.total_expense_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.hurdle_rate_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.performance_fee_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.fixed_commission_)}},
    // string payment_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.payment_type_)}},
    // bool watermark_flag = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetEtf, _impl_.watermark_flag_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.watermark_flag_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 4, 4, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.buy_premium_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 5, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.sell_discount_)}},
    // bool rebalancing_flag = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetEtf, _impl_.rebalancing_flag_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_flag_)}},
    // string rebalancing_freq = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_freq_)}},
    // string management_type = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.management_type_)}},
    // string primary_index = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_)}},
    // string focus_type = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.focus_type_)}},
    // bool leveraged_flag = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetEtf, _impl_.leveraged_flag_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.leveraged_flag_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 6, 6, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.num_share_)}},
    // bool ucits_flag = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.ucits_flag_)}},
    // .google.protobuf.Timestamp released_date = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 7, 7, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.released_date_)}},
    // string description = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.description_)}},
    // string primary_index_description = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_description_)}},
    // string primary_index_company = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_company_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 8, 8, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.index_recovery_period_)}},
    // string inav_code = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.inav_code_)}},
    // bool div_yield_flag = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.div_yield_flag_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 9, 9, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.expense_commission_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 10, 10, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_tracking_error_)}},
    // string rebalancing_plan = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_plan_)}},
    // string tax_rate = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.tax_rate_)}},
    // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
    {::_pbi::TcParser::FastMtR2,
     {482, 63, 11, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_dates_)}},
    // string issue_kind = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.issue_kind_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 11, 12, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_)}},
    // string nominal_currency = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_currency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.total_expense_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.hurdle_rate_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.performance_fee_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.fixed_commission_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string payment_type = 5;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.payment_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool watermark_flag = 6;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.watermark_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.buy_premium_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.sell_discount_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool rebalancing_flag = 9;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string rebalancing_freq = 10;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_freq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string management_type = 11;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.management_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index = 12;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string focus_type = 13;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.focus_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool leveraged_flag = 14;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.leveraged_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.num_share_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ucits_flag = 16;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.ucits_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp released_date = 17;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.released_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string description = 18;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index_description = 19;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index_company = 20;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_company_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.index_recovery_period_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string inav_code = 22;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.inav_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool div_yield_flag = 23;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.div_yield_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.expense_commission_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_tracking_error_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string rebalancing_plan = 26;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_plan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string tax_rate = 27;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.tax_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_dates_), -1, 11,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string issue_kind = 29;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_), _Internal::kHasBitsOffset + 11, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 31;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\57\0\0\0\0\14\0\0\0\0\20\17\15\12\0\0\0\0\13\31\25\0\11\0\0\0\20\10\0\12\0\20"
    "tinkoff.public_.invest.api.contract.v1.AssetEtf"
    "payment_type"
    "rebalancing_freq"
    "management_type"
    "primary_index"
    "focus_type"
    "description"
    "primary_index_description"
    "primary_index_company"
    "inav_code"
    "rebalancing_plan"
    "tax_rate"
    "issue_kind"
    "nominal_currency"
  }},
};

::uint8_t* AssetEtf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::total_expense(this),
        _Internal::total_expense(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::hurdle_rate(this),
        _Internal::hurdle_rate(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::performance_fee(this),
        _Internal::performance_fee(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::fixed_commission(this),
        _Internal::fixed_commission(this).GetCachedSize(), target, stream);
  }

  // string payment_type = 5;
  if (!this->_internal_payment_type().empty()) {
    const std::string& _s = this->_internal_payment_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bool watermark_flag = 6;
  if (this->_internal_watermark_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_watermark_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::buy_premium(this),
        _Internal::buy_premium(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::sell_discount(this),
        _Internal::sell_discount(this).GetCachedSize(), target, stream);
  }

  // bool rebalancing_flag = 9;
  if (this->_internal_rebalancing_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_rebalancing_flag(), target);
  }

  // string rebalancing_freq = 10;
  if (!this->_internal_rebalancing_freq().empty()) {
    const std::string& _s = this->_internal_rebalancing_freq();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string management_type = 11;
  if (!this->_internal_management_type().empty()) {
    const std::string& _s = this->_internal_management_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string primary_index = 12;
  if (!this->_internal_primary_index().empty()) {
    const std::string& _s = this->_internal_primary_index();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string focus_type = 13;
  if (!this->_internal_focus_type().empty()) {
    const std::string& _s = this->_internal_focus_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // bool leveraged_flag = 14;
  if (this->_internal_leveraged_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_leveraged_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, _Internal::num_share(this),
        _Internal::num_share(this).GetCachedSize(), target, stream);
  }

  // bool ucits_flag = 16;
  if (this->_internal_ucits_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_ucits_flag(), target);
  }

  // .google.protobuf.Timestamp released_date = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, _Internal::released_date(this),
        _Internal::released_date(this).GetCachedSize(), target, stream);
  }

  // string description = 18;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.description");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // string primary_index_description = 19;
  if (!this->_internal_primary_index_description().empty()) {
    const std::string& _s = this->_internal_primary_index_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // string primary_index_company = 20;
  if (!this->_internal_primary_index_company().empty()) {
    const std::string& _s = this->_internal_primary_index_company();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::index_recovery_period(this),
        _Internal::index_recovery_period(this).GetCachedSize(), target, stream);
  }

  // string inav_code = 22;
  if (!this->_internal_inav_code().empty()) {
    const std::string& _s = this->_internal_inav_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // bool div_yield_flag = 23;
  if (this->_internal_div_yield_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_div_yield_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, _Internal::expense_commission(this),
        _Internal::expense_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        25, _Internal::primary_index_tracking_error(this),
        _Internal::primary_index_tracking_error(this).GetCachedSize(), target, stream);
  }

  // string rebalancing_plan = 26;
  if (!this->_internal_rebalancing_plan().empty()) {
    const std::string& _s = this->_internal_rebalancing_plan();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan");
    target = stream->WriteStringMaybeAliased(26, _s, target);
  }

  // string tax_rate = 27;
  if (!this->_internal_tax_rate().empty()) {
    const std::string& _s = this->_internal_tax_rate();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate");
    target = stream->WriteStringMaybeAliased(27, _s, target);
  }

  // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rebalancing_dates_size()); i < n; i++) {
    const auto& repfield = this->_internal_rebalancing_dates().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string issue_kind = 29;
  if (!this->_internal_issue_kind().empty()) {
    const std::string& _s = this->_internal_issue_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 31;
  if (!this->_internal_nominal_currency().empty()) {
    const std::string& _s = this->_internal_nominal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency");
    target = stream->WriteStringMaybeAliased(31, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  return target;
}

::size_t AssetEtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
  total_size += 2UL * this->_internal_rebalancing_dates_size();
  for (const auto& msg : this->_internal_rebalancing_dates()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string payment_type = 5;
  if (!this->_internal_payment_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_payment_type());
  }

  // string rebalancing_freq = 10;
  if (!this->_internal_rebalancing_freq().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_rebalancing_freq());
  }

  // string management_type = 11;
  if (!this->_internal_management_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_management_type());
  }

  // string primary_index = 12;
  if (!this->_internal_primary_index().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_primary_index());
  }

  // string focus_type = 13;
  if (!this->_internal_focus_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_focus_type());
  }

  // string description = 18;
  if (!this->_internal_description().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string primary_index_description = 19;
  if (!this->_internal_primary_index_description().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_primary_index_description());
  }

  // string primary_index_company = 20;
  if (!this->_internal_primary_index_company().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_primary_index_company());
  }

  // string inav_code = 22;
  if (!this->_internal_inav_code().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_inav_code());
  }

  // string rebalancing_plan = 26;
  if (!this->_internal_rebalancing_plan().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_rebalancing_plan());
  }

  // string tax_rate = 27;
  if (!this->_internal_tax_rate().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tax_rate());
  }

  // string issue_kind = 29;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_issue_kind());
  }

  // string nominal_currency = 31;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nominal_currency());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.total_expense_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.hurdle_rate_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.performance_fee_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fixed_commission_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.buy_premium_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sell_discount_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.num_share_);
    }

    // .google.protobuf.Timestamp released_date = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.released_date_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.index_recovery_period_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expense_commission_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.primary_index_tracking_error_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
    }

  }
  // bool watermark_flag = 6;
  if (this->_internal_watermark_flag() != 0) {
    total_size += 2;
  }

  // bool rebalancing_flag = 9;
  if (this->_internal_rebalancing_flag() != 0) {
    total_size += 2;
  }

  // bool leveraged_flag = 14;
  if (this->_internal_leveraged_flag() != 0) {
    total_size += 2;
  }

  // bool ucits_flag = 16;
  if (this->_internal_ucits_flag() != 0) {
    total_size += 3;
  }

  // bool div_yield_flag = 23;
  if (this->_internal_div_yield_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetEtf::_class_data_ = {
    AssetEtf::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetEtf::GetClassData() const {
  return &_class_data_;
}

void AssetEtf::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetEtf*>(&to_msg);
  auto& from = static_cast<const AssetEtf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rebalancing_dates()->MergeFrom(
      from._internal_rebalancing_dates());
  if (!from._internal_payment_type().empty()) {
    _this->_internal_set_payment_type(from._internal_payment_type());
  }
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_internal_set_rebalancing_freq(from._internal_rebalancing_freq());
  }
  if (!from._internal_management_type().empty()) {
    _this->_internal_set_management_type(from._internal_management_type());
  }
  if (!from._internal_primary_index().empty()) {
    _this->_internal_set_primary_index(from._internal_primary_index());
  }
  if (!from._internal_focus_type().empty()) {
    _this->_internal_set_focus_type(from._internal_focus_type());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_primary_index_description().empty()) {
    _this->_internal_set_primary_index_description(from._internal_primary_index_description());
  }
  if (!from._internal_primary_index_company().empty()) {
    _this->_internal_set_primary_index_company(from._internal_primary_index_company());
  }
  if (!from._internal_inav_code().empty()) {
    _this->_internal_set_inav_code(from._internal_inav_code());
  }
  if (!from._internal_rebalancing_plan().empty()) {
    _this->_internal_set_rebalancing_plan(from._internal_rebalancing_plan());
  }
  if (!from._internal_tax_rate().empty()) {
    _this->_internal_set_tax_rate(from._internal_tax_rate());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_total_expense()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_total_expense());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_hurdle_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_hurdle_rate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_performance_fee()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_performance_fee());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_fixed_commission()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_fixed_commission());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_buy_premium()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_buy_premium());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_sell_discount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_sell_discount());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_num_share()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_num_share());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_released_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_released_date());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_index_recovery_period()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_index_recovery_period());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_expense_commission()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_expense_commission());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_primary_index_tracking_error()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_primary_index_tracking_error());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_nominal());
    }
  }
  if (from._internal_watermark_flag() != 0) {
    _this->_internal_set_watermark_flag(from._internal_watermark_flag());
  }
  if (from._internal_rebalancing_flag() != 0) {
    _this->_internal_set_rebalancing_flag(from._internal_rebalancing_flag());
  }
  if (from._internal_leveraged_flag() != 0) {
    _this->_internal_set_leveraged_flag(from._internal_leveraged_flag());
  }
  if (from._internal_ucits_flag() != 0) {
    _this->_internal_set_ucits_flag(from._internal_ucits_flag());
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_internal_set_div_yield_flag(from._internal_div_yield_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetEtf::CopyFrom(const AssetEtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetEtf::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetEtf::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetEtf::InternalSwap(AssetEtf* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rebalancing_dates_.InternalSwap(&other->_impl_.rebalancing_dates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payment_type_, &other->_impl_.payment_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rebalancing_freq_, &other->_impl_.rebalancing_freq_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.management_type_, &other->_impl_.management_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_, &other->_impl_.primary_index_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.focus_type_, &other->_impl_.focus_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_description_, &other->_impl_.primary_index_description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_company_, &other->_impl_.primary_index_company_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inav_code_, &other->_impl_.inav_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rebalancing_plan_, &other->_impl_.rebalancing_plan_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tax_rate_, &other->_impl_.tax_rate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.div_yield_flag_)
      + sizeof(AssetEtf::_impl_.div_yield_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.total_expense_)>(
          reinterpret_cast<char*>(&_impl_.total_expense_),
          reinterpret_cast<char*>(&other->_impl_.total_expense_));
}

::google::protobuf::Metadata AssetEtf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[52]);
}
// ===================================================================

class AssetClearingCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetClearingCertificate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetClearingCertificate* msg);
  static void set_has_nominal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetClearingCertificate::_Internal::nominal(const AssetClearingCertificate* msg) {
  return *msg->_impl_.nominal_;
}
void AssetClearingCertificate::clear_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AssetClearingCertificate::AssetClearingCertificate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
}
inline PROTOBUF_NDEBUG_INLINE AssetClearingCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        nominal_currency_(arena, from.nominal_currency_) {}

AssetClearingCertificate::AssetClearingCertificate(
    ::google::protobuf::Arena* arena,
    const AssetClearingCertificate& from)
    : ::google::protobuf::Message(arena) {
  AssetClearingCertificate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.nominal_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
}
inline PROTOBUF_NDEBUG_INLINE AssetClearingCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        nominal_currency_(arena) {}

inline void AssetClearingCertificate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.nominal_ = {};
}
AssetClearingCertificate::~AssetClearingCertificate() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetClearingCertificate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nominal_currency_.Destroy();
  delete _impl_.nominal_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetClearingCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nominal_currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.nominal_ != nullptr);
    _impl_.nominal_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetClearingCertificate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 88, 2> AssetClearingCertificate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetClearingCertificate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string nominal_currency = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
    {PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 2;
    {PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\77\0\20\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate"
    "nominal_currency"
  }},
};

::uint8_t* AssetClearingCertificate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 2;
  if (!this->_internal_nominal_currency().empty()) {
    const std::string& _s = this->_internal_nominal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  return target;
}

::size_t AssetClearingCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nominal_currency = 2;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nominal_currency());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.nominal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetClearingCertificate::_class_data_ = {
    AssetClearingCertificate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetClearingCertificate::GetClassData() const {
  return &_class_data_;
}

void AssetClearingCertificate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetClearingCertificate*>(&to_msg);
  auto& from = static_cast<const AssetClearingCertificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetClearingCertificate::CopyFrom(const AssetClearingCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetClearingCertificate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetClearingCertificate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetClearingCertificate::InternalSwap(AssetClearingCertificate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  swap(_impl_.nominal_, other->_impl_.nominal_);
}

::google::protobuf::Metadata AssetClearingCertificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[53]);
}
// ===================================================================

class Brand::_Internal {
 public:
};

Brand::Brand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Brand)
}
inline PROTOBUF_NDEBUG_INLINE Brand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : uid_(arena, from.uid_),
        name_(arena, from.name_),
        description_(arena, from.description_),
        info_(arena, from.info_),
        company_(arena, from.company_),
        sector_(arena, from.sector_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        _cached_size_{0} {}

Brand::Brand(
    ::google::protobuf::Arena* arena,
    const Brand& from)
    : ::google::protobuf::Message(arena) {
  Brand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Brand)
}
inline PROTOBUF_NDEBUG_INLINE Brand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : uid_(arena),
        name_(arena),
        description_(arena),
        info_(arena),
        company_(arena),
        sector_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        _cached_size_{0} {}

inline void Brand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Brand::~Brand() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Brand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Brand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.info_.Destroy();
  _impl_.company_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Brand::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Brand)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Brand::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 131, 2> Brand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Brand_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string country_of_risk_name = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_name_)}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.uid_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.name_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.description_)}},
    // string info = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.info_)}},
    // string company = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.company_)}},
    // string sector = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.sector_)}},
    // string country_of_risk = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string info = 4;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.info_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string company = 5;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.company_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 6;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.sector_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk = 7;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 8;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\54\3\4\13\4\7\6\17\24\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Brand"
    "uid"
    "name"
    "description"
    "info"
    "company"
    "sector"
    "country_of_risk"
    "country_of_risk_name"
  }},
};

::uint8_t* Brand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Brand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.description");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    const std::string& _s = this->_internal_info();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.info");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string company = 5;
  if (!this->_internal_company().empty()) {
    const std::string& _s = this->_internal_company();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.company");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string sector = 6;
  if (!this->_internal_sector().empty()) {
    const std::string& _s = this->_internal_sector();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.sector");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string country_of_risk = 7;
  if (!this->_internal_country_of_risk().empty()) {
    const std::string& _s = this->_internal_country_of_risk();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string country_of_risk_name = 8;
  if (!this->_internal_country_of_risk_name().empty()) {
    const std::string& _s = this->_internal_country_of_risk_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Brand)
  return target;
}

::size_t Brand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Brand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_info());
  }

  // string company = 5;
  if (!this->_internal_company().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_company());
  }

  // string sector = 6;
  if (!this->_internal_sector().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sector());
  }

  // string country_of_risk = 7;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 8;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_of_risk_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Brand::_class_data_ = {
    Brand::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Brand::GetClassData() const {
  return &_class_data_;
}

void Brand::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Brand*>(&to_msg);
  auto& from = static_cast<const Brand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Brand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Brand::CopyFrom(const Brand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Brand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Brand::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Brand::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Brand::InternalSwap(Brand* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.info_, &other->_impl_.info_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.company_, &other->_impl_.company_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
}

::google::protobuf::Metadata Brand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[54]);
}
// ===================================================================

class AssetInstrument::_Internal {
 public:
};

AssetInstrument::AssetInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
}
inline PROTOBUF_NDEBUG_INLINE AssetInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : links_{visibility, arena, from.links_},
        uid_(arena, from.uid_),
        figi_(arena, from.figi_),
        instrument_type_(arena, from.instrument_type_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        position_uid_(arena, from.position_uid_),
        _cached_size_{0} {}

AssetInstrument::AssetInstrument(
    ::google::protobuf::Arena* arena,
    const AssetInstrument& from)
    : ::google::protobuf::Message(arena) {
  AssetInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.instrument_kind_ = from._impl_.instrument_kind_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
}
inline PROTOBUF_NDEBUG_INLINE AssetInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : links_{visibility, arena},
        uid_(arena),
        figi_(arena),
        instrument_type_(arena),
        ticker_(arena),
        class_code_(arena),
        position_uid_(arena),
        _cached_size_{0} {}

inline void AssetInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_kind_ = {};
}
AssetInstrument::~AssetInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AssetInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AssetInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.links_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_kind_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AssetInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 1, 121, 2> AssetInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965696,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AssetInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.uid_)}},
    // string figi = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.figi_)}},
    // string instrument_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_type_)}},
    // string ticker = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.ticker_)}},
    // string class_code = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.class_code_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.links_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetInstrument, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_kind_)}},
    // string position_uid = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string figi = 2;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 3;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 4;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.ticker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 5;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.class_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.links_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 11;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.position_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>()},
  }}, {{
    "\66\3\4\17\6\12\0\0\14\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.AssetInstrument"
    "uid"
    "figi"
    "instrument_type"
    "ticker"
    "class_code"
    "position_uid"
  }},
};

::uint8_t* AssetInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string instrument_type = 3;
  if (!this->_internal_instrument_type().empty()) {
    const std::string& _s = this->_internal_instrument_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string ticker = 4;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string class_code = 5;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_instrument_kind(), target);
  }

  // string position_uid = 11;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  return target;
}

::size_t AssetInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_internal_links()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_type = 3;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_type());
  }

  // string ticker = 4;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 5;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string position_uid = 11;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AssetInstrument::_class_data_ = {
    AssetInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AssetInstrument::GetClassData() const {
  return &_class_data_;
}

void AssetInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AssetInstrument*>(&to_msg);
  auto& from = static_cast<const AssetInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_links()->MergeFrom(
      from._internal_links());
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetInstrument::CopyFrom(const AssetInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AssetInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AssetInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AssetInstrument::InternalSwap(AssetInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  swap(_impl_.instrument_kind_, other->_impl_.instrument_kind_);
}

::google::protobuf::Metadata AssetInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[55]);
}
// ===================================================================

class InstrumentLink::_Internal {
 public:
};

InstrumentLink::InstrumentLink(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentLink::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : type_(arena, from.type_),
        instrument_uid_(arena, from.instrument_uid_),
        _cached_size_{0} {}

InstrumentLink::InstrumentLink(
    ::google::protobuf::Arena* arena,
    const InstrumentLink& from)
    : ::google::protobuf::Message(arena) {
  InstrumentLink* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentLink::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_(arena),
        instrument_uid_(arena),
        _cached_size_{0} {}

inline void InstrumentLink::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
InstrumentLink::~InstrumentLink() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentLink::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.type_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstrumentLink::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InstrumentLink::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 80, 2> InstrumentLink::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InstrumentLink_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.instrument_uid_)}},
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_uid = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\4\16\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.InstrumentLink"
    "type"
    "instrument_uid"
  }},
};

::uint8_t* InstrumentLink::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentLink.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  return target;
}

::size_t InstrumentLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InstrumentLink::_class_data_ = {
    InstrumentLink::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InstrumentLink::GetClassData() const {
  return &_class_data_;
}

void InstrumentLink::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InstrumentLink*>(&to_msg);
  auto& from = static_cast<const InstrumentLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentLink::CopyFrom(const InstrumentLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstrumentLink::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstrumentLink::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstrumentLink::InternalSwap(InstrumentLink* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
}

::google::protobuf::Metadata InstrumentLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[56]);
}
// ===================================================================

class GetFavoritesRequest::_Internal {
 public:
};

GetFavoritesRequest::GetFavoritesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesRequest)
}
GetFavoritesRequest::GetFavoritesRequest(
    ::google::protobuf::Arena* arena,
    const GetFavoritesRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetFavoritesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesRequest)
}









::google::protobuf::Metadata GetFavoritesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[57]);
}
// ===================================================================

class GetFavoritesResponse::_Internal {
 public:
};

GetFavoritesResponse::GetFavoritesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : favorite_instruments_{visibility, arena, from.favorite_instruments_},
        _cached_size_{0} {}

GetFavoritesResponse::GetFavoritesResponse(
    ::google::protobuf::Arena* arena,
    const GetFavoritesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetFavoritesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : favorite_instruments_{visibility, arena},
        _cached_size_{0} {}

inline void GetFavoritesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetFavoritesResponse::~GetFavoritesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetFavoritesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetFavoritesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.favorite_instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetFavoritesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetFavoritesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetFavoritesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetFavoritesResponse, _impl_.favorite_instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {PROTOBUF_FIELD_OFFSET(GetFavoritesResponse, _impl_.favorite_instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>()},
  }}, {{
  }},
};

::uint8_t* GetFavoritesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_favorite_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_favorite_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  return target;
}

::size_t GetFavoritesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  total_size += 1UL * this->_internal_favorite_instruments_size();
  for (const auto& msg : this->_internal_favorite_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetFavoritesResponse::_class_data_ = {
    GetFavoritesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetFavoritesResponse::GetClassData() const {
  return &_class_data_;
}

void GetFavoritesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetFavoritesResponse*>(&to_msg);
  auto& from = static_cast<const GetFavoritesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_favorite_instruments()->MergeFrom(
      from._internal_favorite_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetFavoritesResponse::CopyFrom(const GetFavoritesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetFavoritesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetFavoritesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetFavoritesResponse::InternalSwap(GetFavoritesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.favorite_instruments_.InternalSwap(&other->_impl_.favorite_instruments_);
}

::google::protobuf::Metadata GetFavoritesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[58]);
}
// ===================================================================

class FavoriteInstrument::_Internal {
 public:
};

FavoriteInstrument::FavoriteInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
}
inline PROTOBUF_NDEBUG_INLINE FavoriteInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        instrument_type_(arena, from.instrument_type_),
        name_(arena, from.name_),
        uid_(arena, from.uid_),
        _cached_size_{0} {}

FavoriteInstrument::FavoriteInstrument(
    ::google::protobuf::Arena* arena,
    const FavoriteInstrument& from)
    : ::google::protobuf::Message(arena) {
  FavoriteInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, otc_flag_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, otc_flag_),
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, otc_flag_) +
               sizeof(Impl_::instrument_kind_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
}
inline PROTOBUF_NDEBUG_INLINE FavoriteInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        instrument_type_(arena),
        name_(arena),
        uid_(arena),
        _cached_size_{0} {}

inline void FavoriteInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, otc_flag_),
           0,
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, otc_flag_) +
               sizeof(Impl_::instrument_kind_));
}
FavoriteInstrument::~FavoriteInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FavoriteInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.name_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FavoriteInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  ::memset(&_impl_.otc_flag_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instrument_kind_) -
      reinterpret_cast<char*>(&_impl_.otc_flag_)) + sizeof(_impl_.instrument_kind_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FavoriteInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 120, 2> FavoriteInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    18, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294730736,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FavoriteInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool otc_flag = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.otc_flag_)}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.isin_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_type = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_type_)}},
    // string name = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.name_)}},
    // string uid = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.ticker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.class_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.isin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 11;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 12;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uid = 13;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool otc_flag = 16;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.otc_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool api_trade_available_flag = 17;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.api_trade_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\71\4\6\12\4\17\4\3\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "instrument_type"
    "name"
    "uid"
  }},
};

::uint8_t* FavoriteInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string instrument_type = 11;
  if (!this->_internal_instrument_type().empty()) {
    const std::string& _s = this->_internal_instrument_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string uid = 13;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // bool otc_flag = 16;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_otc_flag(), target);
  }

  // bool api_trade_available_flag = 17;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_api_trade_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        18, this->_internal_instrument_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  return target;
}

::size_t FavoriteInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string instrument_type = 11;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_type());
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string uid = 13;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // bool otc_flag = 16;
  if (this->_internal_otc_flag() != 0) {
    total_size += 3;
  }

  // bool api_trade_available_flag = 17;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 3;
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FavoriteInstrument::_class_data_ = {
    FavoriteInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FavoriteInstrument::GetClassData() const {
  return &_class_data_;
}

void FavoriteInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FavoriteInstrument*>(&to_msg);
  auto& from = static_cast<const FavoriteInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FavoriteInstrument::CopyFrom(const FavoriteInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FavoriteInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FavoriteInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FavoriteInstrument::InternalSwap(FavoriteInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_kind_)
      + sizeof(FavoriteInstrument::_impl_.instrument_kind_)
      - PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.otc_flag_)>(
          reinterpret_cast<char*>(&_impl_.otc_flag_),
          reinterpret_cast<char*>(&other->_impl_.otc_flag_));
}

::google::protobuf::Metadata FavoriteInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[59]);
}
// ===================================================================

class EditFavoritesRequest::_Internal {
 public:
};

EditFavoritesRequest::EditFavoritesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

EditFavoritesRequest::EditFavoritesRequest(
    ::google::protobuf::Arena* arena,
    const EditFavoritesRequest& from)
    : ::google::protobuf::Message(arena) {
  EditFavoritesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.action_type_ = from._impl_.action_type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void EditFavoritesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.action_type_ = {};
}
EditFavoritesRequest::~EditFavoritesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EditFavoritesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EditFavoritesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.action_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EditFavoritesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> EditFavoritesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967262,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EditFavoritesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EditFavoritesRequest, _impl_.action_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.action_type_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.action_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>()},
  }}, {{
  }},
};

::uint8_t* EditFavoritesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_action_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_action_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  return target;
}

::size_t EditFavoritesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_action_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EditFavoritesRequest::_class_data_ = {
    EditFavoritesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EditFavoritesRequest::GetClassData() const {
  return &_class_data_;
}

void EditFavoritesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EditFavoritesRequest*>(&to_msg);
  auto& from = static_cast<const EditFavoritesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (from._internal_action_type() != 0) {
    _this->_internal_set_action_type(from._internal_action_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesRequest::CopyFrom(const EditFavoritesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EditFavoritesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EditFavoritesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EditFavoritesRequest::InternalSwap(EditFavoritesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.action_type_, other->_impl_.action_type_);
}

::google::protobuf::Metadata EditFavoritesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[60]);
}
// ===================================================================

class EditFavoritesRequestInstrument::_Internal {
 public:
  using HasBits = decltype(std::declval<EditFavoritesRequestInstrument>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequestInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(
    ::google::protobuf::Arena* arena,
    const EditFavoritesRequestInstrument& from)
    : ::google::protobuf::Message(arena) {
  EditFavoritesRequestInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequestInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void EditFavoritesRequestInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EditFavoritesRequestInstrument::~EditFavoritesRequestInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EditFavoritesRequestInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EditFavoritesRequestInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.figi_.ClearNonDefaultToEmpty();
  }
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EditFavoritesRequestInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 95, 2> EditFavoritesRequestInstrument::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EditFavoritesRequestInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.instrument_id_)}},
    // optional string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.figi_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\105\4\15\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* EditFavoritesRequestInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string figi = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  return target;
}

::size_t EditFavoritesRequestInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EditFavoritesRequestInstrument::_class_data_ = {
    EditFavoritesRequestInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EditFavoritesRequestInstrument::GetClassData() const {
  return &_class_data_;
}

void EditFavoritesRequestInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EditFavoritesRequestInstrument*>(&to_msg);
  auto& from = static_cast<const EditFavoritesRequestInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesRequestInstrument::CopyFrom(const EditFavoritesRequestInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EditFavoritesRequestInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EditFavoritesRequestInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EditFavoritesRequestInstrument::InternalSwap(EditFavoritesRequestInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata EditFavoritesRequestInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[61]);
}
// ===================================================================

class EditFavoritesResponse::_Internal {
 public:
};

EditFavoritesResponse::EditFavoritesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : favorite_instruments_{visibility, arena, from.favorite_instruments_},
        _cached_size_{0} {}

EditFavoritesResponse::EditFavoritesResponse(
    ::google::protobuf::Arena* arena,
    const EditFavoritesResponse& from)
    : ::google::protobuf::Message(arena) {
  EditFavoritesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : favorite_instruments_{visibility, arena},
        _cached_size_{0} {}

inline void EditFavoritesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EditFavoritesResponse::~EditFavoritesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EditFavoritesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EditFavoritesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.favorite_instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EditFavoritesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EditFavoritesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EditFavoritesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesResponse, _impl_.favorite_instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {PROTOBUF_FIELD_OFFSET(EditFavoritesResponse, _impl_.favorite_instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>()},
  }}, {{
  }},
};

::uint8_t* EditFavoritesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_favorite_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_favorite_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  return target;
}

::size_t EditFavoritesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  total_size += 1UL * this->_internal_favorite_instruments_size();
  for (const auto& msg : this->_internal_favorite_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EditFavoritesResponse::_class_data_ = {
    EditFavoritesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EditFavoritesResponse::GetClassData() const {
  return &_class_data_;
}

void EditFavoritesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EditFavoritesResponse*>(&to_msg);
  auto& from = static_cast<const EditFavoritesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_favorite_instruments()->MergeFrom(
      from._internal_favorite_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesResponse::CopyFrom(const EditFavoritesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EditFavoritesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EditFavoritesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EditFavoritesResponse::InternalSwap(EditFavoritesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.favorite_instruments_.InternalSwap(&other->_impl_.favorite_instruments_);
}

::google::protobuf::Metadata EditFavoritesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[62]);
}
// ===================================================================

class GetCountriesRequest::_Internal {
 public:
};

GetCountriesRequest::GetCountriesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesRequest)
}
GetCountriesRequest::GetCountriesRequest(
    ::google::protobuf::Arena* arena,
    const GetCountriesRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetCountriesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesRequest)
}









::google::protobuf::Metadata GetCountriesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[63]);
}
// ===================================================================

class GetCountriesResponse::_Internal {
 public:
};

GetCountriesResponse::GetCountriesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCountriesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : countries_{visibility, arena, from.countries_},
        _cached_size_{0} {}

GetCountriesResponse::GetCountriesResponse(
    ::google::protobuf::Arena* arena,
    const GetCountriesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetCountriesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCountriesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : countries_{visibility, arena},
        _cached_size_{0} {}

inline void GetCountriesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetCountriesResponse::~GetCountriesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCountriesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetCountriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.countries_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetCountriesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetCountriesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCountriesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetCountriesResponse, _impl_.countries_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
    {PROTOBUF_FIELD_OFFSET(GetCountriesResponse, _impl_.countries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::CountryResponse>()},
  }}, {{
  }},
};

::uint8_t* GetCountriesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_countries_size()); i < n; i++) {
    const auto& repfield = this->_internal_countries().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  return target;
}

::size_t GetCountriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
  total_size += 1UL * this->_internal_countries_size();
  for (const auto& msg : this->_internal_countries()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetCountriesResponse::_class_data_ = {
    GetCountriesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetCountriesResponse::GetClassData() const {
  return &_class_data_;
}

void GetCountriesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetCountriesResponse*>(&to_msg);
  auto& from = static_cast<const GetCountriesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_countries()->MergeFrom(
      from._internal_countries());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCountriesResponse::CopyFrom(const GetCountriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetCountriesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetCountriesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetCountriesResponse::InternalSwap(GetCountriesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.countries_.InternalSwap(&other->_impl_.countries_);
}

::google::protobuf::Metadata GetCountriesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[64]);
}
// ===================================================================

class IndicativesRequest::_Internal {
 public:
};

IndicativesRequest::IndicativesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesRequest)
}
IndicativesRequest::IndicativesRequest(
    ::google::protobuf::Arena* arena,
    const IndicativesRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  IndicativesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesRequest)
}









::google::protobuf::Metadata IndicativesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[65]);
}
// ===================================================================

class IndicativesResponse::_Internal {
 public:
};

IndicativesResponse::IndicativesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

IndicativesResponse::IndicativesResponse(
    ::google::protobuf::Arena* arena,
    const IndicativesResponse& from)
    : ::google::protobuf::Message(arena) {
  IndicativesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void IndicativesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
IndicativesResponse::~IndicativesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IndicativesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IndicativesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IndicativesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> IndicativesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IndicativesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
    {PROTOBUF_FIELD_OFFSET(IndicativesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>()},
  }}, {{
  }},
};

::uint8_t* IndicativesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  return target;
}

::size_t IndicativesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IndicativesResponse::_class_data_ = {
    IndicativesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IndicativesResponse::GetClassData() const {
  return &_class_data_;
}

void IndicativesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IndicativesResponse*>(&to_msg);
  auto& from = static_cast<const IndicativesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IndicativesResponse::CopyFrom(const IndicativesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IndicativesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IndicativesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IndicativesResponse::InternalSwap(IndicativesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata IndicativesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[66]);
}
// ===================================================================

class IndicativeResponse::_Internal {
 public:
};

IndicativeResponse::IndicativeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        uid_(arena, from.uid_),
        _cached_size_{0} {}

IndicativeResponse::IndicativeResponse(
    ::google::protobuf::Arena* arena,
    const IndicativeResponse& from)
    : ::google::protobuf::Message(arena) {
  IndicativeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, instrument_kind_),
           offsetof(Impl_, sell_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::sell_available_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        ticker_(arena),
        class_code_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        uid_(arena),
        _cached_size_{0} {}

inline void IndicativeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           0,
           offsetof(Impl_, sell_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::sell_available_flag_));
}
IndicativeResponse::~IndicativeResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IndicativeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IndicativeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  ::memset(&_impl_.instrument_kind_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sell_available_flag_) -
      reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.sell_available_flag_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IndicativeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 117, 7> IndicativeResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    405, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294952432,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IndicativeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.class_code_)}},
    // string currency = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.currency_)}},
    // bool sell_available_flag = 405;
    {::_pbi::TcParser::FastV8S2,
     {6568, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.sell_available_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IndicativeResponse, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.instrument_kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.name_)}},
    // string exchange = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.exchange_)}},
    // string uid = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    404, 0, 1,
    65532, 8,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.ticker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.class_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currency = 4;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.currency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 12;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 13;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.exchange_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uid = 14;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool buy_available_flag = 404;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.buy_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 405;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.sell_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\71\4\6\12\10\0\4\10\3\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.IndicativeResponse"
    "figi"
    "ticker"
    "class_code"
    "currency"
    "name"
    "exchange"
    "uid"
  }},
};

::uint8_t* IndicativeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_instrument_kind(), target);
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string exchange = 13;
  if (!this->_internal_exchange().empty()) {
    const std::string& _s = this->_internal_exchange();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string uid = 14;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        404, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        405, this->_internal_sell_available_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  return target;
}

::size_t IndicativeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string exchange = 13;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange());
  }

  // string uid = 14;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 3;
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IndicativeResponse::_class_data_ = {
    IndicativeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IndicativeResponse::GetClassData() const {
  return &_class_data_;
}

void IndicativeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IndicativeResponse*>(&to_msg);
  auto& from = static_cast<const IndicativeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IndicativeResponse::CopyFrom(const IndicativeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IndicativeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IndicativeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IndicativeResponse::InternalSwap(IndicativeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.sell_available_flag_)
      + sizeof(IndicativeResponse::_impl_.sell_available_flag_)
      - PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.instrument_kind_)>(
          reinterpret_cast<char*>(&_impl_.instrument_kind_),
          reinterpret_cast<char*>(&other->_impl_.instrument_kind_));
}

::google::protobuf::Metadata IndicativeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[67]);
}
// ===================================================================

class CountryResponse::_Internal {
 public:
};

CountryResponse::CountryResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CountryResponse)
}
inline PROTOBUF_NDEBUG_INLINE CountryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : alfa_two_(arena, from.alfa_two_),
        alfa_three_(arena, from.alfa_three_),
        name_(arena, from.name_),
        name_brief_(arena, from.name_brief_),
        _cached_size_{0} {}

CountryResponse::CountryResponse(
    ::google::protobuf::Arena* arena,
    const CountryResponse& from)
    : ::google::protobuf::Message(arena) {
  CountryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CountryResponse)
}
inline PROTOBUF_NDEBUG_INLINE CountryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : alfa_two_(arena),
        alfa_three_(arena),
        name_(arena),
        name_brief_(arena),
        _cached_size_{0} {}

inline void CountryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CountryResponse::~CountryResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CountryResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.alfa_two_.Destroy();
  _impl_.alfa_three_.Destroy();
  _impl_.name_.Destroy();
  _impl_.name_brief_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CountryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alfa_two_.ClearToEmpty();
  _impl_.alfa_three_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.name_brief_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CountryResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 95, 2> CountryResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CountryResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string name_brief = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_brief_)}},
    // string alfa_two = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_two_)}},
    // string alfa_three = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_three_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string alfa_two = 1;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_two_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string alfa_three = 2;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_three_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name_brief = 4;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_brief_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\66\10\12\4\12\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.CountryResponse"
    "alfa_two"
    "alfa_three"
    "name"
    "name_brief"
  }},
};

::uint8_t* CountryResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string alfa_two = 1;
  if (!this->_internal_alfa_two().empty()) {
    const std::string& _s = this->_internal_alfa_two();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string alfa_three = 2;
  if (!this->_internal_alfa_three().empty()) {
    const std::string& _s = this->_internal_alfa_three();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CountryResponse.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    const std::string& _s = this->_internal_name_brief();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  return target;
}

::size_t CountryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alfa_two = 1;
  if (!this->_internal_alfa_two().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_alfa_two());
  }

  // string alfa_three = 2;
  if (!this->_internal_alfa_three().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_alfa_three());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name_brief());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CountryResponse::_class_data_ = {
    CountryResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CountryResponse::GetClassData() const {
  return &_class_data_;
}

void CountryResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CountryResponse*>(&to_msg);
  auto& from = static_cast<const CountryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alfa_two().empty()) {
    _this->_internal_set_alfa_two(from._internal_alfa_two());
  }
  if (!from._internal_alfa_three().empty()) {
    _this->_internal_set_alfa_three(from._internal_alfa_three());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_name_brief().empty()) {
    _this->_internal_set_name_brief(from._internal_name_brief());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CountryResponse::CopyFrom(const CountryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CountryResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CountryResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CountryResponse::InternalSwap(CountryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alfa_two_, &other->_impl_.alfa_two_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alfa_three_, &other->_impl_.alfa_three_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_brief_, &other->_impl_.name_brief_, arena);
}

::google::protobuf::Metadata CountryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[68]);
}
// ===================================================================

class FindInstrumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FindInstrumentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_._has_bits_);
  static void set_has_instrument_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_api_trade_available_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FindInstrumentRequest::FindInstrumentRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        query_(arena, from.query_) {}

FindInstrumentRequest::FindInstrumentRequest(
    ::google::protobuf::Arena* arena,
    const FindInstrumentRequest& from)
    : ::google::protobuf::Message(arena) {
  FindInstrumentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, instrument_kind_),
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::api_trade_available_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        query_(arena) {}

inline void FindInstrumentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           0,
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::api_trade_available_flag_));
}
FindInstrumentRequest::~FindInstrumentRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FindInstrumentRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.query_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FindInstrumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.instrument_kind_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
        reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.api_trade_available_flag_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FindInstrumentRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 74, 2> FindInstrumentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FindInstrumentRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string query = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.query_)}},
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FindInstrumentRequest, _impl_.instrument_kind_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.instrument_kind_)}},
    // optional bool api_trade_available_flag = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FindInstrumentRequest, _impl_.api_trade_available_flag_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.api_trade_available_flag_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string query = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.query_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
    {PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.instrument_kind_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional bool api_trade_available_flag = 3;
    {PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.api_trade_available_flag_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\74\5\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest"
    "query"
  }},
};

::uint8_t* FindInstrumentRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string query = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_query().empty()) {
    const std::string& _s = this->_internal_query();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_instrument_kind(), target);
  }

  // optional bool api_trade_available_flag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_api_trade_available_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  return target;
}

::size_t FindInstrumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_query().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_query());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
    }

    // optional bool api_trade_available_flag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FindInstrumentRequest::_class_data_ = {
    FindInstrumentRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FindInstrumentRequest::GetClassData() const {
  return &_class_data_;
}

void FindInstrumentRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FindInstrumentRequest*>(&to_msg);
  auto& from = static_cast<const FindInstrumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FindInstrumentRequest::CopyFrom(const FindInstrumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FindInstrumentRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FindInstrumentRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FindInstrumentRequest::InternalSwap(FindInstrumentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_, &other->_impl_.query_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.api_trade_available_flag_)
      + sizeof(FindInstrumentRequest::_impl_.api_trade_available_flag_)
      - PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.instrument_kind_)>(
          reinterpret_cast<char*>(&_impl_.instrument_kind_),
          reinterpret_cast<char*>(&other->_impl_.instrument_kind_));
}

::google::protobuf::Metadata FindInstrumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[69]);
}
// ===================================================================

class FindInstrumentResponse::_Internal {
 public:
};

FindInstrumentResponse::FindInstrumentResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

FindInstrumentResponse::FindInstrumentResponse(
    ::google::protobuf::Arena* arena,
    const FindInstrumentResponse& from)
    : ::google::protobuf::Message(arena) {
  FindInstrumentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void FindInstrumentResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FindInstrumentResponse::~FindInstrumentResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FindInstrumentResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FindInstrumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FindInstrumentResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FindInstrumentResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FindInstrumentResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
    {PROTOBUF_FIELD_OFFSET(FindInstrumentResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>()},
  }}, {{
  }},
};

::uint8_t* FindInstrumentResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  return target;
}

::size_t FindInstrumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FindInstrumentResponse::_class_data_ = {
    FindInstrumentResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FindInstrumentResponse::GetClassData() const {
  return &_class_data_;
}

void FindInstrumentResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FindInstrumentResponse*>(&to_msg);
  auto& from = static_cast<const FindInstrumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FindInstrumentResponse::CopyFrom(const FindInstrumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FindInstrumentResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FindInstrumentResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FindInstrumentResponse::InternalSwap(FindInstrumentResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata FindInstrumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[70]);
}
// ===================================================================

class InstrumentShort::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentShort>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& first_1min_candle_date(const InstrumentShort* msg);
  static void set_has_first_1min_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& first_1day_candle_date(const InstrumentShort* msg);
  static void set_has_first_1day_candle_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& InstrumentShort::_Internal::first_1min_candle_date(const InstrumentShort* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::google::protobuf::Timestamp& InstrumentShort::_Internal::first_1day_candle_date(const InstrumentShort* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
void InstrumentShort::clear_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InstrumentShort::clear_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
InstrumentShort::InstrumentShort(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentShort::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        isin_(arena, from.isin_),
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        instrument_type_(arena, from.instrument_type_),
        name_(arena, from.name_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_) {}

InstrumentShort::InstrumentShort(
    ::google::protobuf::Arena* arena,
    const InstrumentShort& from)
    : ::google::protobuf::Message(arena) {
  InstrumentShort* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_)
                : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, instrument_kind_),
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::blocked_tca_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentShort::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        isin_(arena),
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        instrument_type_(arena),
        name_(arena),
        uid_(arena),
        position_uid_(arena) {}

inline void InstrumentShort::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_1min_candle_date_),
           0,
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, first_1min_candle_date_) +
               sizeof(Impl_::blocked_tca_flag_));
}
InstrumentShort::~InstrumentShort() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentShort::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.isin_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.name_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  delete _impl_.first_1min_candle_date_;
  delete _impl_.first_1day_candle_date_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstrumentShort::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isin_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
  }
  ::memset(&_impl_.instrument_kind_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.blocked_tca_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InstrumentShort::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 2, 137, 2> InstrumentShort::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_._has_bits_),
    0, // no _extensions_
    30, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3254776064,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InstrumentShort_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string isin = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.isin_)}},
    // string figi = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.figi_)}},
    // string ticker = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.ticker_)}},
    // string class_code = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.class_code_)}},
    // string instrument_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_type_)}},
    // string name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.name_)}},
    // string uid = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.uid_)}},
    // string position_uid = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentShort, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_kind_)}},
    // bool api_trade_available_flag = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InstrumentShort, _impl_.api_trade_available_flag_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.api_trade_available_flag_)}},
    // bool for_iis_flag = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InstrumentShort, _impl_.for_iis_flag_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_iis_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp first_1min_candle_date = 26;
    {::_pbi::TcParser::FastMtS2,
     {466, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1min_candle_date_)}},
    // .google.protobuf.Timestamp first_1day_candle_date = 27;
    {::_pbi::TcParser::FastMtS2,
     {474, 1, 1, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1day_candle_date_)}},
    // bool for_qual_investor_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_qual_investor_flag_)}},
    // bool weekend_flag = 29;
    {::_pbi::TcParser::FastV8S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.weekend_flag_)}},
    // bool blocked_tca_flag = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.blocked_tca_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string isin = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string figi = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 3;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 4;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 5;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 6;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uid = 7;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string position_uid = 8;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool api_trade_available_flag = 11;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_iis_flag = 12;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 26;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 27;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool for_qual_investor_flag = 28;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 29;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 30;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\66\4\4\6\12\17\4\3\14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.InstrumentShort"
    "isin"
    "figi"
    "ticker"
    "class_code"
    "instrument_type"
    "name"
    "uid"
    "position_uid"
  }},
};

::uint8_t* InstrumentShort::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    const std::string& _s = this->_internal_isin();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    const std::string& _s = this->_internal_class_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string instrument_type = 5;
  if (!this->_internal_instrument_type().empty()) {
    const std::string& _s = this->_internal_instrument_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string uid = 7;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string position_uid = 8;
  if (!this->_internal_position_uid().empty()) {
    const std::string& _s = this->_internal_position_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_instrument_kind(), target);
  }

  // bool api_trade_available_flag = 11;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_api_trade_available_flag(), target);
  }

  // bool for_iis_flag = 12;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_for_iis_flag(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp first_1min_candle_date = 26;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        26, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 27;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        27, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // bool for_qual_investor_flag = 28;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        28, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 29;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        29, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 30;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_blocked_tca_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  return target;
}

::size_t InstrumentShort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_isin());
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_class_code());
  }

  // string instrument_type = 5;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_type());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string uid = 7;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string position_uid = 8;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_position_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp first_1min_candle_date = 26;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1min_candle_date_);
    }

    // .google.protobuf.Timestamp first_1day_candle_date = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_1day_candle_date_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  // bool api_trade_available_flag = 11;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2;
  }

  // bool for_iis_flag = 12;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2;
  }

  // bool for_qual_investor_flag = 28;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 3;
  }

  // bool weekend_flag = 29;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 3;
  }

  // bool blocked_tca_flag = 30;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InstrumentShort::_class_data_ = {
    InstrumentShort::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InstrumentShort::GetClassData() const {
  return &_class_data_;
}

void InstrumentShort::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InstrumentShort*>(&to_msg);
  auto& from = static_cast<const InstrumentShort&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_first_1min_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1min_candle_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_first_1day_candle_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_first_1day_candle_date());
    }
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentShort::CopyFrom(const InstrumentShort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstrumentShort::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstrumentShort::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstrumentShort::InternalSwap(InstrumentShort* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.blocked_tca_flag_)
      + sizeof(InstrumentShort::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1min_candle_date_)>(
          reinterpret_cast<char*>(&_impl_.first_1min_candle_date_),
          reinterpret_cast<char*>(&other->_impl_.first_1min_candle_date_));
}

::google::protobuf::Metadata InstrumentShort::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[71]);
}
// ===================================================================

class GetBrandsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBrandsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Page& paging(const GetBrandsRequest* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Page& GetBrandsRequest::_Internal::paging(const GetBrandsRequest* msg) {
  return *msg->_impl_.paging_;
}
void GetBrandsRequest::clear_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.paging_ != nullptr) _impl_.paging_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetBrandsRequest::GetBrandsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetBrandsRequest::GetBrandsRequest(
    ::google::protobuf::Arena* arena,
    const GetBrandsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetBrandsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.paging_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Page>(arena, *from._impl_.paging_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetBrandsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.paging_ = {};
}
GetBrandsRequest::~GetBrandsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBrandsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.paging_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBrandsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBrandsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetBrandsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetBrandsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_.paging_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
    {PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_.paging_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Page>()},
  }}, {{
  }},
};

::uint8_t* GetBrandsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  return target;
}

::size_t GetBrandsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBrandsRequest::_class_data_ = {
    GetBrandsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBrandsRequest::GetClassData() const {
  return &_class_data_;
}

void GetBrandsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBrandsRequest*>(&to_msg);
  auto& from = static_cast<const GetBrandsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::tinkoff::public_::invest::api::contract::v1::Page::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandsRequest::CopyFrom(const GetBrandsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBrandsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBrandsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBrandsRequest::InternalSwap(GetBrandsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::google::protobuf::Metadata GetBrandsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[72]);
}
// ===================================================================

class GetBrandRequest::_Internal {
 public:
};

GetBrandRequest::GetBrandRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : id_(arena, from.id_),
        _cached_size_{0} {}

GetBrandRequest::GetBrandRequest(
    ::google::protobuf::Arena* arena,
    const GetBrandRequest& from)
    : ::google::protobuf::Message(arena) {
  GetBrandRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void GetBrandRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetBrandRequest::~GetBrandRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBrandRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBrandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBrandRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 65, 2> GetBrandRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetBrandRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBrandRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetBrandRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\66\2\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetBrandRequest"
    "id"
  }},
};

::uint8_t* GetBrandRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  return target;
}

::size_t GetBrandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBrandRequest::_class_data_ = {
    GetBrandRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBrandRequest::GetClassData() const {
  return &_class_data_;
}

void GetBrandRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBrandRequest*>(&to_msg);
  auto& from = static_cast<const GetBrandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandRequest::CopyFrom(const GetBrandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBrandRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBrandRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBrandRequest::InternalSwap(GetBrandRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata GetBrandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[73]);
}
// ===================================================================

class GetBrandsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBrandsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::PageResponse& paging(const GetBrandsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::PageResponse& GetBrandsResponse::_Internal::paging(const GetBrandsResponse* msg) {
  return *msg->_impl_.paging_;
}
void GetBrandsResponse::clear_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.paging_ != nullptr) _impl_.paging_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetBrandsResponse::GetBrandsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        brands_{visibility, arena, from.brands_} {}

GetBrandsResponse::GetBrandsResponse(
    ::google::protobuf::Arena* arena,
    const GetBrandsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetBrandsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.paging_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PageResponse>(arena, *from._impl_.paging_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        brands_{visibility, arena} {}

inline void GetBrandsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.paging_ = {};
}
GetBrandsResponse::~GetBrandsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetBrandsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.paging_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetBrandsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetBrandsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetBrandsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetBrandsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.paging_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.brands_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
    {PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.brands_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
    {PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.paging_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Brand>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::PageResponse>()},
  }}, {{
  }},
};

::uint8_t* GetBrandsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_brands_size()); i < n; i++) {
    const auto& repfield = this->_internal_brands().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  return target;
}

::size_t GetBrandsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
  total_size += 1UL * this->_internal_brands_size();
  for (const auto& msg : this->_internal_brands()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetBrandsResponse::_class_data_ = {
    GetBrandsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetBrandsResponse::GetClassData() const {
  return &_class_data_;
}

void GetBrandsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetBrandsResponse*>(&to_msg);
  auto& from = static_cast<const GetBrandsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_brands()->MergeFrom(
      from._internal_brands());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::tinkoff::public_::invest::api::contract::v1::PageResponse::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandsResponse::CopyFrom(const GetBrandsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetBrandsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetBrandsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetBrandsResponse::InternalSwap(GetBrandsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.brands_.InternalSwap(&other->_impl_.brands_);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::google::protobuf::Metadata GetBrandsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[74]);
}
// ===================================================================

class GetAssetFundamentalsRequest::_Internal {
 public:
};

GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : assets_{visibility, arena, from.assets_},
        _cached_size_{0} {}

GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(
    ::google::protobuf::Arena* arena,
    const GetAssetFundamentalsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetAssetFundamentalsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : assets_{visibility, arena},
        _cached_size_{0} {}

inline void GetAssetFundamentalsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAssetFundamentalsRequest::~GetAssetFundamentalsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAssetFundamentalsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAssetFundamentalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assets_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAssetFundamentalsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 81, 2> GetAssetFundamentalsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetAssetFundamentalsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsRequest, _impl_.assets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsRequest, _impl_.assets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\102\6\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest"
    "assets"
  }},
};

::uint8_t* GetAssetFundamentalsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
  for (int i = 0, n = this->_internal_assets_size(); i < n; ++i) {
    const auto& s = this->_internal_assets().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  return target;
}

::size_t GetAssetFundamentalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_assets().size());
  for (int i = 0, n = _internal_assets().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_assets().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAssetFundamentalsRequest::_class_data_ = {
    GetAssetFundamentalsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAssetFundamentalsRequest::GetClassData() const {
  return &_class_data_;
}

void GetAssetFundamentalsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_assets()->MergeFrom(from._internal_assets());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsRequest::CopyFrom(const GetAssetFundamentalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAssetFundamentalsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAssetFundamentalsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAssetFundamentalsRequest::InternalSwap(GetAssetFundamentalsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assets_.InternalSwap(&other->_impl_.assets_);
}

::google::protobuf::Metadata GetAssetFundamentalsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[75]);
}
// ===================================================================

class GetAssetFundamentalsResponse_StatisticResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAssetFundamentalsResponse_StatisticResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& ex_dividend_date(const GetAssetFundamentalsResponse_StatisticResponse* msg);
  static void set_has_ex_dividend_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& fiscal_period_start_date(const GetAssetFundamentalsResponse_StatisticResponse* msg);
  static void set_has_fiscal_period_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& fiscal_period_end_date(const GetAssetFundamentalsResponse_StatisticResponse* msg);
  static void set_has_fiscal_period_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::_Internal::ex_dividend_date(const GetAssetFundamentalsResponse_StatisticResponse* msg) {
  return *msg->_impl_.ex_dividend_date_;
}
const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::_Internal::fiscal_period_start_date(const GetAssetFundamentalsResponse_StatisticResponse* msg) {
  return *msg->_impl_.fiscal_period_start_date_;
}
const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::_Internal::fiscal_period_end_date(const GetAssetFundamentalsResponse_StatisticResponse* msg) {
  return *msg->_impl_.fiscal_period_end_date_;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_ex_dividend_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ex_dividend_date_ != nullptr) _impl_.ex_dividend_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_fiscal_period_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fiscal_period_start_date_ != nullptr) _impl_.fiscal_period_start_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_fiscal_period_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fiscal_period_end_date_ != nullptr) _impl_.fiscal_period_end_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse_StatisticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        asset_uid_(arena, from.asset_uid_),
        currency_(arena, from.currency_),
        domicile_indicator_code_(arena, from.domicile_indicator_code_) {}

GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(
    ::google::protobuf::Arena* arena,
    const GetAssetFundamentalsResponse_StatisticResponse& from)
    : ::google::protobuf::Message(arena) {
  GetAssetFundamentalsResponse_StatisticResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ex_dividend_date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.ex_dividend_date_)
                : nullptr;
  _impl_.fiscal_period_start_date_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.fiscal_period_start_date_)
                : nullptr;
  _impl_.fiscal_period_end_date_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.fiscal_period_end_date_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, market_capitalization_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, market_capitalization_),
           offsetof(Impl_, ev_to_sales_) -
               offsetof(Impl_, market_capitalization_) +
               sizeof(Impl_::ev_to_sales_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse_StatisticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        asset_uid_(arena),
        currency_(arena),
        domicile_indicator_code_(arena) {}

inline void GetAssetFundamentalsResponse_StatisticResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ex_dividend_date_),
           0,
           offsetof(Impl_, ev_to_sales_) -
               offsetof(Impl_, ex_dividend_date_) +
               sizeof(Impl_::ev_to_sales_));
}
GetAssetFundamentalsResponse_StatisticResponse::~GetAssetFundamentalsResponse_StatisticResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.asset_uid_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.domicile_indicator_code_.Destroy();
  delete _impl_.ex_dividend_date_;
  delete _impl_.fiscal_period_start_date_;
  delete _impl_.fiscal_period_end_date_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAssetFundamentalsResponse_StatisticResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_uid_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.domicile_indicator_code_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ex_dividend_date_ != nullptr);
      _impl_.ex_dividend_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fiscal_period_start_date_ != nullptr);
      _impl_.fiscal_period_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.fiscal_period_end_date_ != nullptr);
      _impl_.fiscal_period_end_date_->Clear();
    }
  }
  ::memset(&_impl_.market_capitalization_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ev_to_sales_) -
      reinterpret_cast<char*>(&_impl_.market_capitalization_)) + sizeof(_impl_.ev_to_sales_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAssetFundamentalsResponse_StatisticResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 56, 3, 190, 9> GetAssetFundamentalsResponse_StatisticResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_._has_bits_),
    0, // no _extensions_
    57, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    56,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetAssetFundamentalsResponse_StatisticResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string asset_uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.asset_uid_)}},
    // string currency = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.currency_)}},
    // double market_capitalization = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.market_capitalization_)}},
    // double high_price_last_52_weeks = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.high_price_last_52_weeks_)}},
    // double low_price_last_52_weeks = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.low_price_last_52_weeks_)}},
    // double average_daily_volume_last_10_days = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_10_days_)}},
    // double average_daily_volume_last_4_weeks = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_4_weeks_)}},
    // double beta = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.beta_)}},
    // double free_float = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_float_)}},
    // double forward_annual_dividend_yield = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.forward_annual_dividend_yield_)}},
    // double shares_outstanding = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.shares_outstanding_)}},
    // double revenue_ttm = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_ttm_)}},
    // double ebitda_ttm = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_ttm_)}},
    // double net_income_ttm = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_income_ttm_)}},
    // double eps_ttm = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_ttm_)}},
    // double diluted_eps_ttm = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.diluted_eps_ttm_)}},
    // double free_cash_flow_ttm = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_ttm_)}},
    // double five_year_annual_revenue_growth_rate = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_revenue_growth_rate_)}},
    // double three_year_annual_revenue_growth_rate = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.three_year_annual_revenue_growth_rate_)}},
    // double pe_ratio_ttm = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.pe_ratio_ttm_)}},
    // double price_to_sales_ttm = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_sales_ttm_)}},
    // double price_to_book_ttm = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_book_ttm_)}},
    // double price_to_free_cash_flow_ttm = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_free_cash_flow_ttm_)}},
    // double total_enterprise_value_mrq = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_enterprise_value_mrq_)}},
    // double ev_to_ebitda_mrq = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_ebitda_mrq_)}},
    // double net_margin_mrq = 26;
    {::_pbi::TcParser::FastF64S2,
     {465, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_margin_mrq_)}},
    // double net_interest_margin_mrq = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_interest_margin_mrq_)}},
    // double roe = 28;
    {::_pbi::TcParser::FastF64S2,
     {481, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roe_)}},
    // double roa = 29;
    {::_pbi::TcParser::FastF64S2,
     {489, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roa_)}},
    // double roic = 30;
    {::_pbi::TcParser::FastF64S2,
     {497, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roic_)}},
    // double total_debt_mrq = 31;
    {::_pbi::TcParser::FastF64S2,
     {505, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_mrq_)}},
  }}, {{
    33, 0, 2,
    0, 32, 65032, 48,
    65535, 65535
  }}, {{
    // string asset_uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currency = 2;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double market_capitalization = 3;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.market_capitalization_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double high_price_last_52_weeks = 4;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.high_price_last_52_weeks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double low_price_last_52_weeks = 5;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.low_price_last_52_weeks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double average_daily_volume_last_10_days = 6;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_10_days_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double average_daily_volume_last_4_weeks = 7;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_4_weeks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double beta = 8;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.beta_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double free_float = 9;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_float_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double forward_annual_dividend_yield = 10;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.forward_annual_dividend_yield_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double shares_outstanding = 11;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.shares_outstanding_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double revenue_ttm = 12;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ebitda_ttm = 13;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_income_ttm = 14;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_income_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double eps_ttm = 15;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double diluted_eps_ttm = 16;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.diluted_eps_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double free_cash_flow_ttm = 17;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double five_year_annual_revenue_growth_rate = 18;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_revenue_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double three_year_annual_revenue_growth_rate = 19;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.three_year_annual_revenue_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pe_ratio_ttm = 20;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.pe_ratio_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price_to_sales_ttm = 21;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_sales_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price_to_book_ttm = 22;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_book_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price_to_free_cash_flow_ttm = 23;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_free_cash_flow_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_enterprise_value_mrq = 24;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_enterprise_value_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ev_to_ebitda_mrq = 25;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_ebitda_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_margin_mrq = 26;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_margin_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_interest_margin_mrq = 27;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_interest_margin_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roe = 28;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roe_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roa = 29;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roa_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roic = 30;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roic_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_mrq = 31;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_to_equity_mrq = 32;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_equity_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_to_ebitda_mrq = 33;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_ebitda_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double free_cash_flow_to_price = 34;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_to_price_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_debt_to_ebitda = 35;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_debt_to_ebitda_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double current_ratio_mrq = 36;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.current_ratio_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double fixed_charge_coverage_ratio_fy = 37;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.fixed_charge_coverage_ratio_fy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividend_yield_daily_ttm = 38;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_yield_daily_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividend_rate_ttm = 39;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_rate_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividends_per_share = 40;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividends_per_share_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double five_years_average_dividend_yield = 41;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_years_average_dividend_yield_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double five_year_annual_dividend_growth_rate = 42;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_dividend_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividend_payout_ratio_fy = 43;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_payout_ratio_fy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double buy_back_ttm = 44;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.buy_back_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double one_year_annual_revenue_growth_rate = 45;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.one_year_annual_revenue_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string domicile_indicator_code = 46;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.domicile_indicator_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double adr_to_common_share_ratio = 47;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.adr_to_common_share_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double number_of_employees = 48;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.number_of_employees_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .google.protobuf.Timestamp ex_dividend_date = 49;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp fiscal_period_start_date = 50;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_start_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp fiscal_period_end_date = 51;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_end_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double revenue_change_five_years = 53;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double eps_change_five_years = 54;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ebitda_change_five_years = 55;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_change_five_years = 56;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ev_to_sales = 57;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\125\11\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\27\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse"
    "asset_uid"
    "currency"
    "domicile_indicator_code"
  }},
};

::uint8_t* GetAssetFundamentalsResponse_StatisticResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string asset_uid = 1;
  if (!this->_internal_asset_uid().empty()) {
    const std::string& _s = this->_internal_asset_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string currency = 2;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // double market_capitalization = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_market_capitalization = this->_internal_market_capitalization();
  ::uint64_t raw_market_capitalization;
  memcpy(&raw_market_capitalization, &tmp_market_capitalization, sizeof(tmp_market_capitalization));
  if (raw_market_capitalization != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_market_capitalization(), target);
  }

  // double high_price_last_52_weeks = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_high_price_last_52_weeks = this->_internal_high_price_last_52_weeks();
  ::uint64_t raw_high_price_last_52_weeks;
  memcpy(&raw_high_price_last_52_weeks, &tmp_high_price_last_52_weeks, sizeof(tmp_high_price_last_52_weeks));
  if (raw_high_price_last_52_weeks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_high_price_last_52_weeks(), target);
  }

  // double low_price_last_52_weeks = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_low_price_last_52_weeks = this->_internal_low_price_last_52_weeks();
  ::uint64_t raw_low_price_last_52_weeks;
  memcpy(&raw_low_price_last_52_weeks, &tmp_low_price_last_52_weeks, sizeof(tmp_low_price_last_52_weeks));
  if (raw_low_price_last_52_weeks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_low_price_last_52_weeks(), target);
  }

  // double average_daily_volume_last_10_days = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_10_days = this->_internal_average_daily_volume_last_10_days();
  ::uint64_t raw_average_daily_volume_last_10_days;
  memcpy(&raw_average_daily_volume_last_10_days, &tmp_average_daily_volume_last_10_days, sizeof(tmp_average_daily_volume_last_10_days));
  if (raw_average_daily_volume_last_10_days != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_average_daily_volume_last_10_days(), target);
  }

  // double average_daily_volume_last_4_weeks = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_4_weeks = this->_internal_average_daily_volume_last_4_weeks();
  ::uint64_t raw_average_daily_volume_last_4_weeks;
  memcpy(&raw_average_daily_volume_last_4_weeks, &tmp_average_daily_volume_last_4_weeks, sizeof(tmp_average_daily_volume_last_4_weeks));
  if (raw_average_daily_volume_last_4_weeks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_average_daily_volume_last_4_weeks(), target);
  }

  // double beta = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_beta = this->_internal_beta();
  ::uint64_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_beta(), target);
  }

  // double free_float = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_float = this->_internal_free_float();
  ::uint64_t raw_free_float;
  memcpy(&raw_free_float, &tmp_free_float, sizeof(tmp_free_float));
  if (raw_free_float != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_free_float(), target);
  }

  // double forward_annual_dividend_yield = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_forward_annual_dividend_yield = this->_internal_forward_annual_dividend_yield();
  ::uint64_t raw_forward_annual_dividend_yield;
  memcpy(&raw_forward_annual_dividend_yield, &tmp_forward_annual_dividend_yield, sizeof(tmp_forward_annual_dividend_yield));
  if (raw_forward_annual_dividend_yield != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_forward_annual_dividend_yield(), target);
  }

  // double shares_outstanding = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_shares_outstanding = this->_internal_shares_outstanding();
  ::uint64_t raw_shares_outstanding;
  memcpy(&raw_shares_outstanding, &tmp_shares_outstanding, sizeof(tmp_shares_outstanding));
  if (raw_shares_outstanding != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_shares_outstanding(), target);
  }

  // double revenue_ttm = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_revenue_ttm = this->_internal_revenue_ttm();
  ::uint64_t raw_revenue_ttm;
  memcpy(&raw_revenue_ttm, &tmp_revenue_ttm, sizeof(tmp_revenue_ttm));
  if (raw_revenue_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_revenue_ttm(), target);
  }

  // double ebitda_ttm = 13;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ebitda_ttm = this->_internal_ebitda_ttm();
  ::uint64_t raw_ebitda_ttm;
  memcpy(&raw_ebitda_ttm, &tmp_ebitda_ttm, sizeof(tmp_ebitda_ttm));
  if (raw_ebitda_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_ebitda_ttm(), target);
  }

  // double net_income_ttm = 14;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_income_ttm = this->_internal_net_income_ttm();
  ::uint64_t raw_net_income_ttm;
  memcpy(&raw_net_income_ttm, &tmp_net_income_ttm, sizeof(tmp_net_income_ttm));
  if (raw_net_income_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_net_income_ttm(), target);
  }

  // double eps_ttm = 15;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_eps_ttm = this->_internal_eps_ttm();
  ::uint64_t raw_eps_ttm;
  memcpy(&raw_eps_ttm, &tmp_eps_ttm, sizeof(tmp_eps_ttm));
  if (raw_eps_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this->_internal_eps_ttm(), target);
  }

  // double diluted_eps_ttm = 16;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_diluted_eps_ttm = this->_internal_diluted_eps_ttm();
  ::uint64_t raw_diluted_eps_ttm;
  memcpy(&raw_diluted_eps_ttm, &tmp_diluted_eps_ttm, sizeof(tmp_diluted_eps_ttm));
  if (raw_diluted_eps_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_diluted_eps_ttm(), target);
  }

  // double free_cash_flow_ttm = 17;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_cash_flow_ttm = this->_internal_free_cash_flow_ttm();
  ::uint64_t raw_free_cash_flow_ttm;
  memcpy(&raw_free_cash_flow_ttm, &tmp_free_cash_flow_ttm, sizeof(tmp_free_cash_flow_ttm));
  if (raw_free_cash_flow_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this->_internal_free_cash_flow_ttm(), target);
  }

  // double five_year_annual_revenue_growth_rate = 18;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_year_annual_revenue_growth_rate = this->_internal_five_year_annual_revenue_growth_rate();
  ::uint64_t raw_five_year_annual_revenue_growth_rate;
  memcpy(&raw_five_year_annual_revenue_growth_rate, &tmp_five_year_annual_revenue_growth_rate, sizeof(tmp_five_year_annual_revenue_growth_rate));
  if (raw_five_year_annual_revenue_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        18, this->_internal_five_year_annual_revenue_growth_rate(), target);
  }

  // double three_year_annual_revenue_growth_rate = 19;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_three_year_annual_revenue_growth_rate = this->_internal_three_year_annual_revenue_growth_rate();
  ::uint64_t raw_three_year_annual_revenue_growth_rate;
  memcpy(&raw_three_year_annual_revenue_growth_rate, &tmp_three_year_annual_revenue_growth_rate, sizeof(tmp_three_year_annual_revenue_growth_rate));
  if (raw_three_year_annual_revenue_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        19, this->_internal_three_year_annual_revenue_growth_rate(), target);
  }

  // double pe_ratio_ttm = 20;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pe_ratio_ttm = this->_internal_pe_ratio_ttm();
  ::uint64_t raw_pe_ratio_ttm;
  memcpy(&raw_pe_ratio_ttm, &tmp_pe_ratio_ttm, sizeof(tmp_pe_ratio_ttm));
  if (raw_pe_ratio_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this->_internal_pe_ratio_ttm(), target);
  }

  // double price_to_sales_ttm = 21;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_sales_ttm = this->_internal_price_to_sales_ttm();
  ::uint64_t raw_price_to_sales_ttm;
  memcpy(&raw_price_to_sales_ttm, &tmp_price_to_sales_ttm, sizeof(tmp_price_to_sales_ttm));
  if (raw_price_to_sales_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        21, this->_internal_price_to_sales_ttm(), target);
  }

  // double price_to_book_ttm = 22;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_book_ttm = this->_internal_price_to_book_ttm();
  ::uint64_t raw_price_to_book_ttm;
  memcpy(&raw_price_to_book_ttm, &tmp_price_to_book_ttm, sizeof(tmp_price_to_book_ttm));
  if (raw_price_to_book_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        22, this->_internal_price_to_book_ttm(), target);
  }

  // double price_to_free_cash_flow_ttm = 23;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_free_cash_flow_ttm = this->_internal_price_to_free_cash_flow_ttm();
  ::uint64_t raw_price_to_free_cash_flow_ttm;
  memcpy(&raw_price_to_free_cash_flow_ttm, &tmp_price_to_free_cash_flow_ttm, sizeof(tmp_price_to_free_cash_flow_ttm));
  if (raw_price_to_free_cash_flow_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        23, this->_internal_price_to_free_cash_flow_ttm(), target);
  }

  // double total_enterprise_value_mrq = 24;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_enterprise_value_mrq = this->_internal_total_enterprise_value_mrq();
  ::uint64_t raw_total_enterprise_value_mrq;
  memcpy(&raw_total_enterprise_value_mrq, &tmp_total_enterprise_value_mrq, sizeof(tmp_total_enterprise_value_mrq));
  if (raw_total_enterprise_value_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        24, this->_internal_total_enterprise_value_mrq(), target);
  }

  // double ev_to_ebitda_mrq = 25;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ev_to_ebitda_mrq = this->_internal_ev_to_ebitda_mrq();
  ::uint64_t raw_ev_to_ebitda_mrq;
  memcpy(&raw_ev_to_ebitda_mrq, &tmp_ev_to_ebitda_mrq, sizeof(tmp_ev_to_ebitda_mrq));
  if (raw_ev_to_ebitda_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        25, this->_internal_ev_to_ebitda_mrq(), target);
  }

  // double net_margin_mrq = 26;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_margin_mrq = this->_internal_net_margin_mrq();
  ::uint64_t raw_net_margin_mrq;
  memcpy(&raw_net_margin_mrq, &tmp_net_margin_mrq, sizeof(tmp_net_margin_mrq));
  if (raw_net_margin_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        26, this->_internal_net_margin_mrq(), target);
  }

  // double net_interest_margin_mrq = 27;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_interest_margin_mrq = this->_internal_net_interest_margin_mrq();
  ::uint64_t raw_net_interest_margin_mrq;
  memcpy(&raw_net_interest_margin_mrq, &tmp_net_interest_margin_mrq, sizeof(tmp_net_interest_margin_mrq));
  if (raw_net_interest_margin_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_net_interest_margin_mrq(), target);
  }

  // double roe = 28;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roe = this->_internal_roe();
  ::uint64_t raw_roe;
  memcpy(&raw_roe, &tmp_roe, sizeof(tmp_roe));
  if (raw_roe != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        28, this->_internal_roe(), target);
  }

  // double roa = 29;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roa = this->_internal_roa();
  ::uint64_t raw_roa;
  memcpy(&raw_roa, &tmp_roa, sizeof(tmp_roa));
  if (raw_roa != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        29, this->_internal_roa(), target);
  }

  // double roic = 30;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roic = this->_internal_roic();
  ::uint64_t raw_roic;
  memcpy(&raw_roic, &tmp_roic, sizeof(tmp_roic));
  if (raw_roic != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        30, this->_internal_roic(), target);
  }

  // double total_debt_mrq = 31;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_mrq = this->_internal_total_debt_mrq();
  ::uint64_t raw_total_debt_mrq;
  memcpy(&raw_total_debt_mrq, &tmp_total_debt_mrq, sizeof(tmp_total_debt_mrq));
  if (raw_total_debt_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        31, this->_internal_total_debt_mrq(), target);
  }

  // double total_debt_to_equity_mrq = 32;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_to_equity_mrq = this->_internal_total_debt_to_equity_mrq();
  ::uint64_t raw_total_debt_to_equity_mrq;
  memcpy(&raw_total_debt_to_equity_mrq, &tmp_total_debt_to_equity_mrq, sizeof(tmp_total_debt_to_equity_mrq));
  if (raw_total_debt_to_equity_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        32, this->_internal_total_debt_to_equity_mrq(), target);
  }

  // double total_debt_to_ebitda_mrq = 33;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_to_ebitda_mrq = this->_internal_total_debt_to_ebitda_mrq();
  ::uint64_t raw_total_debt_to_ebitda_mrq;
  memcpy(&raw_total_debt_to_ebitda_mrq, &tmp_total_debt_to_ebitda_mrq, sizeof(tmp_total_debt_to_ebitda_mrq));
  if (raw_total_debt_to_ebitda_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        33, this->_internal_total_debt_to_ebitda_mrq(), target);
  }

  // double free_cash_flow_to_price = 34;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_cash_flow_to_price = this->_internal_free_cash_flow_to_price();
  ::uint64_t raw_free_cash_flow_to_price;
  memcpy(&raw_free_cash_flow_to_price, &tmp_free_cash_flow_to_price, sizeof(tmp_free_cash_flow_to_price));
  if (raw_free_cash_flow_to_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        34, this->_internal_free_cash_flow_to_price(), target);
  }

  // double net_debt_to_ebitda = 35;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_debt_to_ebitda = this->_internal_net_debt_to_ebitda();
  ::uint64_t raw_net_debt_to_ebitda;
  memcpy(&raw_net_debt_to_ebitda, &tmp_net_debt_to_ebitda, sizeof(tmp_net_debt_to_ebitda));
  if (raw_net_debt_to_ebitda != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        35, this->_internal_net_debt_to_ebitda(), target);
  }

  // double current_ratio_mrq = 36;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_current_ratio_mrq = this->_internal_current_ratio_mrq();
  ::uint64_t raw_current_ratio_mrq;
  memcpy(&raw_current_ratio_mrq, &tmp_current_ratio_mrq, sizeof(tmp_current_ratio_mrq));
  if (raw_current_ratio_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        36, this->_internal_current_ratio_mrq(), target);
  }

  // double fixed_charge_coverage_ratio_fy = 37;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_fixed_charge_coverage_ratio_fy = this->_internal_fixed_charge_coverage_ratio_fy();
  ::uint64_t raw_fixed_charge_coverage_ratio_fy;
  memcpy(&raw_fixed_charge_coverage_ratio_fy, &tmp_fixed_charge_coverage_ratio_fy, sizeof(tmp_fixed_charge_coverage_ratio_fy));
  if (raw_fixed_charge_coverage_ratio_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        37, this->_internal_fixed_charge_coverage_ratio_fy(), target);
  }

  // double dividend_yield_daily_ttm = 38;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_yield_daily_ttm = this->_internal_dividend_yield_daily_ttm();
  ::uint64_t raw_dividend_yield_daily_ttm;
  memcpy(&raw_dividend_yield_daily_ttm, &tmp_dividend_yield_daily_ttm, sizeof(tmp_dividend_yield_daily_ttm));
  if (raw_dividend_yield_daily_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        38, this->_internal_dividend_yield_daily_ttm(), target);
  }

  // double dividend_rate_ttm = 39;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_rate_ttm = this->_internal_dividend_rate_ttm();
  ::uint64_t raw_dividend_rate_ttm;
  memcpy(&raw_dividend_rate_ttm, &tmp_dividend_rate_ttm, sizeof(tmp_dividend_rate_ttm));
  if (raw_dividend_rate_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        39, this->_internal_dividend_rate_ttm(), target);
  }

  // double dividends_per_share = 40;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividends_per_share = this->_internal_dividends_per_share();
  ::uint64_t raw_dividends_per_share;
  memcpy(&raw_dividends_per_share, &tmp_dividends_per_share, sizeof(tmp_dividends_per_share));
  if (raw_dividends_per_share != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        40, this->_internal_dividends_per_share(), target);
  }

  // double five_years_average_dividend_yield = 41;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_years_average_dividend_yield = this->_internal_five_years_average_dividend_yield();
  ::uint64_t raw_five_years_average_dividend_yield;
  memcpy(&raw_five_years_average_dividend_yield, &tmp_five_years_average_dividend_yield, sizeof(tmp_five_years_average_dividend_yield));
  if (raw_five_years_average_dividend_yield != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        41, this->_internal_five_years_average_dividend_yield(), target);
  }

  // double five_year_annual_dividend_growth_rate = 42;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_year_annual_dividend_growth_rate = this->_internal_five_year_annual_dividend_growth_rate();
  ::uint64_t raw_five_year_annual_dividend_growth_rate;
  memcpy(&raw_five_year_annual_dividend_growth_rate, &tmp_five_year_annual_dividend_growth_rate, sizeof(tmp_five_year_annual_dividend_growth_rate));
  if (raw_five_year_annual_dividend_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        42, this->_internal_five_year_annual_dividend_growth_rate(), target);
  }

  // double dividend_payout_ratio_fy = 43;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_payout_ratio_fy = this->_internal_dividend_payout_ratio_fy();
  ::uint64_t raw_dividend_payout_ratio_fy;
  memcpy(&raw_dividend_payout_ratio_fy, &tmp_dividend_payout_ratio_fy, sizeof(tmp_dividend_payout_ratio_fy));
  if (raw_dividend_payout_ratio_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        43, this->_internal_dividend_payout_ratio_fy(), target);
  }

  // double buy_back_ttm = 44;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_buy_back_ttm = this->_internal_buy_back_ttm();
  ::uint64_t raw_buy_back_ttm;
  memcpy(&raw_buy_back_ttm, &tmp_buy_back_ttm, sizeof(tmp_buy_back_ttm));
  if (raw_buy_back_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        44, this->_internal_buy_back_ttm(), target);
  }

  // double one_year_annual_revenue_growth_rate = 45;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_one_year_annual_revenue_growth_rate = this->_internal_one_year_annual_revenue_growth_rate();
  ::uint64_t raw_one_year_annual_revenue_growth_rate;
  memcpy(&raw_one_year_annual_revenue_growth_rate, &tmp_one_year_annual_revenue_growth_rate, sizeof(tmp_one_year_annual_revenue_growth_rate));
  if (raw_one_year_annual_revenue_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        45, this->_internal_one_year_annual_revenue_growth_rate(), target);
  }

  // string domicile_indicator_code = 46;
  if (!this->_internal_domicile_indicator_code().empty()) {
    const std::string& _s = this->_internal_domicile_indicator_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code");
    target = stream->WriteStringMaybeAliased(46, _s, target);
  }

  // double adr_to_common_share_ratio = 47;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_adr_to_common_share_ratio = this->_internal_adr_to_common_share_ratio();
  ::uint64_t raw_adr_to_common_share_ratio;
  memcpy(&raw_adr_to_common_share_ratio, &tmp_adr_to_common_share_ratio, sizeof(tmp_adr_to_common_share_ratio));
  if (raw_adr_to_common_share_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        47, this->_internal_adr_to_common_share_ratio(), target);
  }

  // double number_of_employees = 48;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number_of_employees = this->_internal_number_of_employees();
  ::uint64_t raw_number_of_employees;
  memcpy(&raw_number_of_employees, &tmp_number_of_employees, sizeof(tmp_number_of_employees));
  if (raw_number_of_employees != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        48, this->_internal_number_of_employees(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp ex_dividend_date = 49;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        49, _Internal::ex_dividend_date(this),
        _Internal::ex_dividend_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp fiscal_period_start_date = 50;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        50, _Internal::fiscal_period_start_date(this),
        _Internal::fiscal_period_start_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp fiscal_period_end_date = 51;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        51, _Internal::fiscal_period_end_date(this),
        _Internal::fiscal_period_end_date(this).GetCachedSize(), target, stream);
  }

  // double revenue_change_five_years = 53;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_revenue_change_five_years = this->_internal_revenue_change_five_years();
  ::uint64_t raw_revenue_change_five_years;
  memcpy(&raw_revenue_change_five_years, &tmp_revenue_change_five_years, sizeof(tmp_revenue_change_five_years));
  if (raw_revenue_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        53, this->_internal_revenue_change_five_years(), target);
  }

  // double eps_change_five_years = 54;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_eps_change_five_years = this->_internal_eps_change_five_years();
  ::uint64_t raw_eps_change_five_years;
  memcpy(&raw_eps_change_five_years, &tmp_eps_change_five_years, sizeof(tmp_eps_change_five_years));
  if (raw_eps_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        54, this->_internal_eps_change_five_years(), target);
  }

  // double ebitda_change_five_years = 55;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ebitda_change_five_years = this->_internal_ebitda_change_five_years();
  ::uint64_t raw_ebitda_change_five_years;
  memcpy(&raw_ebitda_change_five_years, &tmp_ebitda_change_five_years, sizeof(tmp_ebitda_change_five_years));
  if (raw_ebitda_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        55, this->_internal_ebitda_change_five_years(), target);
  }

  // double total_debt_change_five_years = 56;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_change_five_years = this->_internal_total_debt_change_five_years();
  ::uint64_t raw_total_debt_change_five_years;
  memcpy(&raw_total_debt_change_five_years, &tmp_total_debt_change_five_years, sizeof(tmp_total_debt_change_five_years));
  if (raw_total_debt_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        56, this->_internal_total_debt_change_five_years(), target);
  }

  // double ev_to_sales = 57;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ev_to_sales = this->_internal_ev_to_sales();
  ::uint64_t raw_ev_to_sales;
  memcpy(&raw_ev_to_sales, &tmp_ev_to_sales, sizeof(tmp_ev_to_sales));
  if (raw_ev_to_sales != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        57, this->_internal_ev_to_sales(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  return target;
}

::size_t GetAssetFundamentalsResponse_StatisticResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_uid = 1;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_uid());
  }

  // string currency = 2;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string domicile_indicator_code = 46;
  if (!this->_internal_domicile_indicator_code().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domicile_indicator_code());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp ex_dividend_date = 49;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ex_dividend_date_);
    }

    // .google.protobuf.Timestamp fiscal_period_start_date = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fiscal_period_start_date_);
    }

    // .google.protobuf.Timestamp fiscal_period_end_date = 51;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fiscal_period_end_date_);
    }

  }
  // double market_capitalization = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_market_capitalization = this->_internal_market_capitalization();
  ::uint64_t raw_market_capitalization;
  memcpy(&raw_market_capitalization, &tmp_market_capitalization, sizeof(tmp_market_capitalization));
  if (raw_market_capitalization != 0) {
    total_size += 9;
  }

  // double high_price_last_52_weeks = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_high_price_last_52_weeks = this->_internal_high_price_last_52_weeks();
  ::uint64_t raw_high_price_last_52_weeks;
  memcpy(&raw_high_price_last_52_weeks, &tmp_high_price_last_52_weeks, sizeof(tmp_high_price_last_52_weeks));
  if (raw_high_price_last_52_weeks != 0) {
    total_size += 9;
  }

  // double low_price_last_52_weeks = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_low_price_last_52_weeks = this->_internal_low_price_last_52_weeks();
  ::uint64_t raw_low_price_last_52_weeks;
  memcpy(&raw_low_price_last_52_weeks, &tmp_low_price_last_52_weeks, sizeof(tmp_low_price_last_52_weeks));
  if (raw_low_price_last_52_weeks != 0) {
    total_size += 9;
  }

  // double average_daily_volume_last_10_days = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_10_days = this->_internal_average_daily_volume_last_10_days();
  ::uint64_t raw_average_daily_volume_last_10_days;
  memcpy(&raw_average_daily_volume_last_10_days, &tmp_average_daily_volume_last_10_days, sizeof(tmp_average_daily_volume_last_10_days));
  if (raw_average_daily_volume_last_10_days != 0) {
    total_size += 9;
  }

  // double average_daily_volume_last_4_weeks = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_4_weeks = this->_internal_average_daily_volume_last_4_weeks();
  ::uint64_t raw_average_daily_volume_last_4_weeks;
  memcpy(&raw_average_daily_volume_last_4_weeks, &tmp_average_daily_volume_last_4_weeks, sizeof(tmp_average_daily_volume_last_4_weeks));
  if (raw_average_daily_volume_last_4_weeks != 0) {
    total_size += 9;
  }

  // double beta = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_beta = this->_internal_beta();
  ::uint64_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    total_size += 9;
  }

  // double free_float = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_float = this->_internal_free_float();
  ::uint64_t raw_free_float;
  memcpy(&raw_free_float, &tmp_free_float, sizeof(tmp_free_float));
  if (raw_free_float != 0) {
    total_size += 9;
  }

  // double forward_annual_dividend_yield = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_forward_annual_dividend_yield = this->_internal_forward_annual_dividend_yield();
  ::uint64_t raw_forward_annual_dividend_yield;
  memcpy(&raw_forward_annual_dividend_yield, &tmp_forward_annual_dividend_yield, sizeof(tmp_forward_annual_dividend_yield));
  if (raw_forward_annual_dividend_yield != 0) {
    total_size += 9;
  }

  // double shares_outstanding = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_shares_outstanding = this->_internal_shares_outstanding();
  ::uint64_t raw_shares_outstanding;
  memcpy(&raw_shares_outstanding, &tmp_shares_outstanding, sizeof(tmp_shares_outstanding));
  if (raw_shares_outstanding != 0) {
    total_size += 9;
  }

  // double revenue_ttm = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_revenue_ttm = this->_internal_revenue_ttm();
  ::uint64_t raw_revenue_ttm;
  memcpy(&raw_revenue_ttm, &tmp_revenue_ttm, sizeof(tmp_revenue_ttm));
  if (raw_revenue_ttm != 0) {
    total_size += 9;
  }

  // double ebitda_ttm = 13;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ebitda_ttm = this->_internal_ebitda_ttm();
  ::uint64_t raw_ebitda_ttm;
  memcpy(&raw_ebitda_ttm, &tmp_ebitda_ttm, sizeof(tmp_ebitda_ttm));
  if (raw_ebitda_ttm != 0) {
    total_size += 9;
  }

  // double net_income_ttm = 14;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_income_ttm = this->_internal_net_income_ttm();
  ::uint64_t raw_net_income_ttm;
  memcpy(&raw_net_income_ttm, &tmp_net_income_ttm, sizeof(tmp_net_income_ttm));
  if (raw_net_income_ttm != 0) {
    total_size += 9;
  }

  // double eps_ttm = 15;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_eps_ttm = this->_internal_eps_ttm();
  ::uint64_t raw_eps_ttm;
  memcpy(&raw_eps_ttm, &tmp_eps_ttm, sizeof(tmp_eps_ttm));
  if (raw_eps_ttm != 0) {
    total_size += 9;
  }

  // double diluted_eps_ttm = 16;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_diluted_eps_ttm = this->_internal_diluted_eps_ttm();
  ::uint64_t raw_diluted_eps_ttm;
  memcpy(&raw_diluted_eps_ttm, &tmp_diluted_eps_ttm, sizeof(tmp_diluted_eps_ttm));
  if (raw_diluted_eps_ttm != 0) {
    total_size += 10;
  }

  // double free_cash_flow_ttm = 17;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_cash_flow_ttm = this->_internal_free_cash_flow_ttm();
  ::uint64_t raw_free_cash_flow_ttm;
  memcpy(&raw_free_cash_flow_ttm, &tmp_free_cash_flow_ttm, sizeof(tmp_free_cash_flow_ttm));
  if (raw_free_cash_flow_ttm != 0) {
    total_size += 10;
  }

  // double five_year_annual_revenue_growth_rate = 18;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_year_annual_revenue_growth_rate = this->_internal_five_year_annual_revenue_growth_rate();
  ::uint64_t raw_five_year_annual_revenue_growth_rate;
  memcpy(&raw_five_year_annual_revenue_growth_rate, &tmp_five_year_annual_revenue_growth_rate, sizeof(tmp_five_year_annual_revenue_growth_rate));
  if (raw_five_year_annual_revenue_growth_rate != 0) {
    total_size += 10;
  }

  // double three_year_annual_revenue_growth_rate = 19;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_three_year_annual_revenue_growth_rate = this->_internal_three_year_annual_revenue_growth_rate();
  ::uint64_t raw_three_year_annual_revenue_growth_rate;
  memcpy(&raw_three_year_annual_revenue_growth_rate, &tmp_three_year_annual_revenue_growth_rate, sizeof(tmp_three_year_annual_revenue_growth_rate));
  if (raw_three_year_annual_revenue_growth_rate != 0) {
    total_size += 10;
  }

  // double pe_ratio_ttm = 20;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pe_ratio_ttm = this->_internal_pe_ratio_ttm();
  ::uint64_t raw_pe_ratio_ttm;
  memcpy(&raw_pe_ratio_ttm, &tmp_pe_ratio_ttm, sizeof(tmp_pe_ratio_ttm));
  if (raw_pe_ratio_ttm != 0) {
    total_size += 10;
  }

  // double price_to_sales_ttm = 21;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_sales_ttm = this->_internal_price_to_sales_ttm();
  ::uint64_t raw_price_to_sales_ttm;
  memcpy(&raw_price_to_sales_ttm, &tmp_price_to_sales_ttm, sizeof(tmp_price_to_sales_ttm));
  if (raw_price_to_sales_ttm != 0) {
    total_size += 10;
  }

  // double price_to_book_ttm = 22;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_book_ttm = this->_internal_price_to_book_ttm();
  ::uint64_t raw_price_to_book_ttm;
  memcpy(&raw_price_to_book_ttm, &tmp_price_to_book_ttm, sizeof(tmp_price_to_book_ttm));
  if (raw_price_to_book_ttm != 0) {
    total_size += 10;
  }

  // double price_to_free_cash_flow_ttm = 23;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_free_cash_flow_ttm = this->_internal_price_to_free_cash_flow_ttm();
  ::uint64_t raw_price_to_free_cash_flow_ttm;
  memcpy(&raw_price_to_free_cash_flow_ttm, &tmp_price_to_free_cash_flow_ttm, sizeof(tmp_price_to_free_cash_flow_ttm));
  if (raw_price_to_free_cash_flow_ttm != 0) {
    total_size += 10;
  }

  // double total_enterprise_value_mrq = 24;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_enterprise_value_mrq = this->_internal_total_enterprise_value_mrq();
  ::uint64_t raw_total_enterprise_value_mrq;
  memcpy(&raw_total_enterprise_value_mrq, &tmp_total_enterprise_value_mrq, sizeof(tmp_total_enterprise_value_mrq));
  if (raw_total_enterprise_value_mrq != 0) {
    total_size += 10;
  }

  // double ev_to_ebitda_mrq = 25;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ev_to_ebitda_mrq = this->_internal_ev_to_ebitda_mrq();
  ::uint64_t raw_ev_to_ebitda_mrq;
  memcpy(&raw_ev_to_ebitda_mrq, &tmp_ev_to_ebitda_mrq, sizeof(tmp_ev_to_ebitda_mrq));
  if (raw_ev_to_ebitda_mrq != 0) {
    total_size += 10;
  }

  // double net_margin_mrq = 26;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_margin_mrq = this->_internal_net_margin_mrq();
  ::uint64_t raw_net_margin_mrq;
  memcpy(&raw_net_margin_mrq, &tmp_net_margin_mrq, sizeof(tmp_net_margin_mrq));
  if (raw_net_margin_mrq != 0) {
    total_size += 10;
  }

  // double net_interest_margin_mrq = 27;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_interest_margin_mrq = this->_internal_net_interest_margin_mrq();
  ::uint64_t raw_net_interest_margin_mrq;
  memcpy(&raw_net_interest_margin_mrq, &tmp_net_interest_margin_mrq, sizeof(tmp_net_interest_margin_mrq));
  if (raw_net_interest_margin_mrq != 0) {
    total_size += 10;
  }

  // double roe = 28;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roe = this->_internal_roe();
  ::uint64_t raw_roe;
  memcpy(&raw_roe, &tmp_roe, sizeof(tmp_roe));
  if (raw_roe != 0) {
    total_size += 10;
  }

  // double roa = 29;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roa = this->_internal_roa();
  ::uint64_t raw_roa;
  memcpy(&raw_roa, &tmp_roa, sizeof(tmp_roa));
  if (raw_roa != 0) {
    total_size += 10;
  }

  // double roic = 30;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roic = this->_internal_roic();
  ::uint64_t raw_roic;
  memcpy(&raw_roic, &tmp_roic, sizeof(tmp_roic));
  if (raw_roic != 0) {
    total_size += 10;
  }

  // double total_debt_mrq = 31;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_mrq = this->_internal_total_debt_mrq();
  ::uint64_t raw_total_debt_mrq;
  memcpy(&raw_total_debt_mrq, &tmp_total_debt_mrq, sizeof(tmp_total_debt_mrq));
  if (raw_total_debt_mrq != 0) {
    total_size += 10;
  }

  // double total_debt_to_equity_mrq = 32;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_to_equity_mrq = this->_internal_total_debt_to_equity_mrq();
  ::uint64_t raw_total_debt_to_equity_mrq;
  memcpy(&raw_total_debt_to_equity_mrq, &tmp_total_debt_to_equity_mrq, sizeof(tmp_total_debt_to_equity_mrq));
  if (raw_total_debt_to_equity_mrq != 0) {
    total_size += 10;
  }

  // double total_debt_to_ebitda_mrq = 33;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_to_ebitda_mrq = this->_internal_total_debt_to_ebitda_mrq();
  ::uint64_t raw_total_debt_to_ebitda_mrq;
  memcpy(&raw_total_debt_to_ebitda_mrq, &tmp_total_debt_to_ebitda_mrq, sizeof(tmp_total_debt_to_ebitda_mrq));
  if (raw_total_debt_to_ebitda_mrq != 0) {
    total_size += 10;
  }

  // double free_cash_flow_to_price = 34;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_cash_flow_to_price = this->_internal_free_cash_flow_to_price();
  ::uint64_t raw_free_cash_flow_to_price;
  memcpy(&raw_free_cash_flow_to_price, &tmp_free_cash_flow_to_price, sizeof(tmp_free_cash_flow_to_price));
  if (raw_free_cash_flow_to_price != 0) {
    total_size += 10;
  }

  // double net_debt_to_ebitda = 35;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_debt_to_ebitda = this->_internal_net_debt_to_ebitda();
  ::uint64_t raw_net_debt_to_ebitda;
  memcpy(&raw_net_debt_to_ebitda, &tmp_net_debt_to_ebitda, sizeof(tmp_net_debt_to_ebitda));
  if (raw_net_debt_to_ebitda != 0) {
    total_size += 10;
  }

  // double current_ratio_mrq = 36;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_current_ratio_mrq = this->_internal_current_ratio_mrq();
  ::uint64_t raw_current_ratio_mrq;
  memcpy(&raw_current_ratio_mrq, &tmp_current_ratio_mrq, sizeof(tmp_current_ratio_mrq));
  if (raw_current_ratio_mrq != 0) {
    total_size += 10;
  }

  // double fixed_charge_coverage_ratio_fy = 37;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_fixed_charge_coverage_ratio_fy = this->_internal_fixed_charge_coverage_ratio_fy();
  ::uint64_t raw_fixed_charge_coverage_ratio_fy;
  memcpy(&raw_fixed_charge_coverage_ratio_fy, &tmp_fixed_charge_coverage_ratio_fy, sizeof(tmp_fixed_charge_coverage_ratio_fy));
  if (raw_fixed_charge_coverage_ratio_fy != 0) {
    total_size += 10;
  }

  // double dividend_yield_daily_ttm = 38;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_yield_daily_ttm = this->_internal_dividend_yield_daily_ttm();
  ::uint64_t raw_dividend_yield_daily_ttm;
  memcpy(&raw_dividend_yield_daily_ttm, &tmp_dividend_yield_daily_ttm, sizeof(tmp_dividend_yield_daily_ttm));
  if (raw_dividend_yield_daily_ttm != 0) {
    total_size += 10;
  }

  // double dividend_rate_ttm = 39;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_rate_ttm = this->_internal_dividend_rate_ttm();
  ::uint64_t raw_dividend_rate_ttm;
  memcpy(&raw_dividend_rate_ttm, &tmp_dividend_rate_ttm, sizeof(tmp_dividend_rate_ttm));
  if (raw_dividend_rate_ttm != 0) {
    total_size += 10;
  }

  // double dividends_per_share = 40;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividends_per_share = this->_internal_dividends_per_share();
  ::uint64_t raw_dividends_per_share;
  memcpy(&raw_dividends_per_share, &tmp_dividends_per_share, sizeof(tmp_dividends_per_share));
  if (raw_dividends_per_share != 0) {
    total_size += 10;
  }

  // double five_years_average_dividend_yield = 41;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_years_average_dividend_yield = this->_internal_five_years_average_dividend_yield();
  ::uint64_t raw_five_years_average_dividend_yield;
  memcpy(&raw_five_years_average_dividend_yield, &tmp_five_years_average_dividend_yield, sizeof(tmp_five_years_average_dividend_yield));
  if (raw_five_years_average_dividend_yield != 0) {
    total_size += 10;
  }

  // double five_year_annual_dividend_growth_rate = 42;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_year_annual_dividend_growth_rate = this->_internal_five_year_annual_dividend_growth_rate();
  ::uint64_t raw_five_year_annual_dividend_growth_rate;
  memcpy(&raw_five_year_annual_dividend_growth_rate, &tmp_five_year_annual_dividend_growth_rate, sizeof(tmp_five_year_annual_dividend_growth_rate));
  if (raw_five_year_annual_dividend_growth_rate != 0) {
    total_size += 10;
  }

  // double dividend_payout_ratio_fy = 43;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_payout_ratio_fy = this->_internal_dividend_payout_ratio_fy();
  ::uint64_t raw_dividend_payout_ratio_fy;
  memcpy(&raw_dividend_payout_ratio_fy, &tmp_dividend_payout_ratio_fy, sizeof(tmp_dividend_payout_ratio_fy));
  if (raw_dividend_payout_ratio_fy != 0) {
    total_size += 10;
  }

  // double buy_back_ttm = 44;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_buy_back_ttm = this->_internal_buy_back_ttm();
  ::uint64_t raw_buy_back_ttm;
  memcpy(&raw_buy_back_ttm, &tmp_buy_back_ttm, sizeof(tmp_buy_back_ttm));
  if (raw_buy_back_ttm != 0) {
    total_size += 10;
  }

  // double one_year_annual_revenue_growth_rate = 45;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_one_year_annual_revenue_growth_rate = this->_internal_one_year_annual_revenue_growth_rate();
  ::uint64_t raw_one_year_annual_revenue_growth_rate;
  memcpy(&raw_one_year_annual_revenue_growth_rate, &tmp_one_year_annual_revenue_growth_rate, sizeof(tmp_one_year_annual_revenue_growth_rate));
  if (raw_one_year_annual_revenue_growth_rate != 0) {
    total_size += 10;
  }

  // double adr_to_common_share_ratio = 47;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_adr_to_common_share_ratio = this->_internal_adr_to_common_share_ratio();
  ::uint64_t raw_adr_to_common_share_ratio;
  memcpy(&raw_adr_to_common_share_ratio, &tmp_adr_to_common_share_ratio, sizeof(tmp_adr_to_common_share_ratio));
  if (raw_adr_to_common_share_ratio != 0) {
    total_size += 10;
  }

  // double number_of_employees = 48;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number_of_employees = this->_internal_number_of_employees();
  ::uint64_t raw_number_of_employees;
  memcpy(&raw_number_of_employees, &tmp_number_of_employees, sizeof(tmp_number_of_employees));
  if (raw_number_of_employees != 0) {
    total_size += 10;
  }

  // double revenue_change_five_years = 53;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_revenue_change_five_years = this->_internal_revenue_change_five_years();
  ::uint64_t raw_revenue_change_five_years;
  memcpy(&raw_revenue_change_five_years, &tmp_revenue_change_five_years, sizeof(tmp_revenue_change_five_years));
  if (raw_revenue_change_five_years != 0) {
    total_size += 10;
  }

  // double eps_change_five_years = 54;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_eps_change_five_years = this->_internal_eps_change_five_years();
  ::uint64_t raw_eps_change_five_years;
  memcpy(&raw_eps_change_five_years, &tmp_eps_change_five_years, sizeof(tmp_eps_change_five_years));
  if (raw_eps_change_five_years != 0) {
    total_size += 10;
  }

  // double ebitda_change_five_years = 55;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ebitda_change_five_years = this->_internal_ebitda_change_five_years();
  ::uint64_t raw_ebitda_change_five_years;
  memcpy(&raw_ebitda_change_five_years, &tmp_ebitda_change_five_years, sizeof(tmp_ebitda_change_five_years));
  if (raw_ebitda_change_five_years != 0) {
    total_size += 10;
  }

  // double total_debt_change_five_years = 56;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_change_five_years = this->_internal_total_debt_change_five_years();
  ::uint64_t raw_total_debt_change_five_years;
  memcpy(&raw_total_debt_change_five_years, &tmp_total_debt_change_five_years, sizeof(tmp_total_debt_change_five_years));
  if (raw_total_debt_change_five_years != 0) {
    total_size += 10;
  }

  // double ev_to_sales = 57;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ev_to_sales = this->_internal_ev_to_sales();
  ::uint64_t raw_ev_to_sales;
  memcpy(&raw_ev_to_sales, &tmp_ev_to_sales, sizeof(tmp_ev_to_sales));
  if (raw_ev_to_sales != 0) {
    total_size += 10;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAssetFundamentalsResponse_StatisticResponse::_class_data_ = {
    GetAssetFundamentalsResponse_StatisticResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAssetFundamentalsResponse_StatisticResponse::GetClassData() const {
  return &_class_data_;
}

void GetAssetFundamentalsResponse_StatisticResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsResponse_StatisticResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsResponse_StatisticResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_domicile_indicator_code().empty()) {
    _this->_internal_set_domicile_indicator_code(from._internal_domicile_indicator_code());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ex_dividend_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_ex_dividend_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fiscal_period_start_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_fiscal_period_start_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_fiscal_period_end_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_fiscal_period_end_date());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_market_capitalization = from._internal_market_capitalization();
  ::uint64_t raw_market_capitalization;
  memcpy(&raw_market_capitalization, &tmp_market_capitalization, sizeof(tmp_market_capitalization));
  if (raw_market_capitalization != 0) {
    _this->_internal_set_market_capitalization(from._internal_market_capitalization());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_high_price_last_52_weeks = from._internal_high_price_last_52_weeks();
  ::uint64_t raw_high_price_last_52_weeks;
  memcpy(&raw_high_price_last_52_weeks, &tmp_high_price_last_52_weeks, sizeof(tmp_high_price_last_52_weeks));
  if (raw_high_price_last_52_weeks != 0) {
    _this->_internal_set_high_price_last_52_weeks(from._internal_high_price_last_52_weeks());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_low_price_last_52_weeks = from._internal_low_price_last_52_weeks();
  ::uint64_t raw_low_price_last_52_weeks;
  memcpy(&raw_low_price_last_52_weeks, &tmp_low_price_last_52_weeks, sizeof(tmp_low_price_last_52_weeks));
  if (raw_low_price_last_52_weeks != 0) {
    _this->_internal_set_low_price_last_52_weeks(from._internal_low_price_last_52_weeks());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_10_days = from._internal_average_daily_volume_last_10_days();
  ::uint64_t raw_average_daily_volume_last_10_days;
  memcpy(&raw_average_daily_volume_last_10_days, &tmp_average_daily_volume_last_10_days, sizeof(tmp_average_daily_volume_last_10_days));
  if (raw_average_daily_volume_last_10_days != 0) {
    _this->_internal_set_average_daily_volume_last_10_days(from._internal_average_daily_volume_last_10_days());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_4_weeks = from._internal_average_daily_volume_last_4_weeks();
  ::uint64_t raw_average_daily_volume_last_4_weeks;
  memcpy(&raw_average_daily_volume_last_4_weeks, &tmp_average_daily_volume_last_4_weeks, sizeof(tmp_average_daily_volume_last_4_weeks));
  if (raw_average_daily_volume_last_4_weeks != 0) {
    _this->_internal_set_average_daily_volume_last_4_weeks(from._internal_average_daily_volume_last_4_weeks());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_beta = from._internal_beta();
  ::uint64_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    _this->_internal_set_beta(from._internal_beta());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_float = from._internal_free_float();
  ::uint64_t raw_free_float;
  memcpy(&raw_free_float, &tmp_free_float, sizeof(tmp_free_float));
  if (raw_free_float != 0) {
    _this->_internal_set_free_float(from._internal_free_float());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_forward_annual_dividend_yield = from._internal_forward_annual_dividend_yield();
  ::uint64_t raw_forward_annual_dividend_yield;
  memcpy(&raw_forward_annual_dividend_yield, &tmp_forward_annual_dividend_yield, sizeof(tmp_forward_annual_dividend_yield));
  if (raw_forward_annual_dividend_yield != 0) {
    _this->_internal_set_forward_annual_dividend_yield(from._internal_forward_annual_dividend_yield());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_shares_outstanding = from._internal_shares_outstanding();
  ::uint64_t raw_shares_outstanding;
  memcpy(&raw_shares_outstanding, &tmp_shares_outstanding, sizeof(tmp_shares_outstanding));
  if (raw_shares_outstanding != 0) {
    _this->_internal_set_shares_outstanding(from._internal_shares_outstanding());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_revenue_ttm = from._internal_revenue_ttm();
  ::uint64_t raw_revenue_ttm;
  memcpy(&raw_revenue_ttm, &tmp_revenue_ttm, sizeof(tmp_revenue_ttm));
  if (raw_revenue_ttm != 0) {
    _this->_internal_set_revenue_ttm(from._internal_revenue_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ebitda_ttm = from._internal_ebitda_ttm();
  ::uint64_t raw_ebitda_ttm;
  memcpy(&raw_ebitda_ttm, &tmp_ebitda_ttm, sizeof(tmp_ebitda_ttm));
  if (raw_ebitda_ttm != 0) {
    _this->_internal_set_ebitda_ttm(from._internal_ebitda_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_income_ttm = from._internal_net_income_ttm();
  ::uint64_t raw_net_income_ttm;
  memcpy(&raw_net_income_ttm, &tmp_net_income_ttm, sizeof(tmp_net_income_ttm));
  if (raw_net_income_ttm != 0) {
    _this->_internal_set_net_income_ttm(from._internal_net_income_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_eps_ttm = from._internal_eps_ttm();
  ::uint64_t raw_eps_ttm;
  memcpy(&raw_eps_ttm, &tmp_eps_ttm, sizeof(tmp_eps_ttm));
  if (raw_eps_ttm != 0) {
    _this->_internal_set_eps_ttm(from._internal_eps_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_diluted_eps_ttm = from._internal_diluted_eps_ttm();
  ::uint64_t raw_diluted_eps_ttm;
  memcpy(&raw_diluted_eps_ttm, &tmp_diluted_eps_ttm, sizeof(tmp_diluted_eps_ttm));
  if (raw_diluted_eps_ttm != 0) {
    _this->_internal_set_diluted_eps_ttm(from._internal_diluted_eps_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_cash_flow_ttm = from._internal_free_cash_flow_ttm();
  ::uint64_t raw_free_cash_flow_ttm;
  memcpy(&raw_free_cash_flow_ttm, &tmp_free_cash_flow_ttm, sizeof(tmp_free_cash_flow_ttm));
  if (raw_free_cash_flow_ttm != 0) {
    _this->_internal_set_free_cash_flow_ttm(from._internal_free_cash_flow_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_year_annual_revenue_growth_rate = from._internal_five_year_annual_revenue_growth_rate();
  ::uint64_t raw_five_year_annual_revenue_growth_rate;
  memcpy(&raw_five_year_annual_revenue_growth_rate, &tmp_five_year_annual_revenue_growth_rate, sizeof(tmp_five_year_annual_revenue_growth_rate));
  if (raw_five_year_annual_revenue_growth_rate != 0) {
    _this->_internal_set_five_year_annual_revenue_growth_rate(from._internal_five_year_annual_revenue_growth_rate());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_three_year_annual_revenue_growth_rate = from._internal_three_year_annual_revenue_growth_rate();
  ::uint64_t raw_three_year_annual_revenue_growth_rate;
  memcpy(&raw_three_year_annual_revenue_growth_rate, &tmp_three_year_annual_revenue_growth_rate, sizeof(tmp_three_year_annual_revenue_growth_rate));
  if (raw_three_year_annual_revenue_growth_rate != 0) {
    _this->_internal_set_three_year_annual_revenue_growth_rate(from._internal_three_year_annual_revenue_growth_rate());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pe_ratio_ttm = from._internal_pe_ratio_ttm();
  ::uint64_t raw_pe_ratio_ttm;
  memcpy(&raw_pe_ratio_ttm, &tmp_pe_ratio_ttm, sizeof(tmp_pe_ratio_ttm));
  if (raw_pe_ratio_ttm != 0) {
    _this->_internal_set_pe_ratio_ttm(from._internal_pe_ratio_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_sales_ttm = from._internal_price_to_sales_ttm();
  ::uint64_t raw_price_to_sales_ttm;
  memcpy(&raw_price_to_sales_ttm, &tmp_price_to_sales_ttm, sizeof(tmp_price_to_sales_ttm));
  if (raw_price_to_sales_ttm != 0) {
    _this->_internal_set_price_to_sales_ttm(from._internal_price_to_sales_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_book_ttm = from._internal_price_to_book_ttm();
  ::uint64_t raw_price_to_book_ttm;
  memcpy(&raw_price_to_book_ttm, &tmp_price_to_book_ttm, sizeof(tmp_price_to_book_ttm));
  if (raw_price_to_book_ttm != 0) {
    _this->_internal_set_price_to_book_ttm(from._internal_price_to_book_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_price_to_free_cash_flow_ttm = from._internal_price_to_free_cash_flow_ttm();
  ::uint64_t raw_price_to_free_cash_flow_ttm;
  memcpy(&raw_price_to_free_cash_flow_ttm, &tmp_price_to_free_cash_flow_ttm, sizeof(tmp_price_to_free_cash_flow_ttm));
  if (raw_price_to_free_cash_flow_ttm != 0) {
    _this->_internal_set_price_to_free_cash_flow_ttm(from._internal_price_to_free_cash_flow_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_enterprise_value_mrq = from._internal_total_enterprise_value_mrq();
  ::uint64_t raw_total_enterprise_value_mrq;
  memcpy(&raw_total_enterprise_value_mrq, &tmp_total_enterprise_value_mrq, sizeof(tmp_total_enterprise_value_mrq));
  if (raw_total_enterprise_value_mrq != 0) {
    _this->_internal_set_total_enterprise_value_mrq(from._internal_total_enterprise_value_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ev_to_ebitda_mrq = from._internal_ev_to_ebitda_mrq();
  ::uint64_t raw_ev_to_ebitda_mrq;
  memcpy(&raw_ev_to_ebitda_mrq, &tmp_ev_to_ebitda_mrq, sizeof(tmp_ev_to_ebitda_mrq));
  if (raw_ev_to_ebitda_mrq != 0) {
    _this->_internal_set_ev_to_ebitda_mrq(from._internal_ev_to_ebitda_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_margin_mrq = from._internal_net_margin_mrq();
  ::uint64_t raw_net_margin_mrq;
  memcpy(&raw_net_margin_mrq, &tmp_net_margin_mrq, sizeof(tmp_net_margin_mrq));
  if (raw_net_margin_mrq != 0) {
    _this->_internal_set_net_margin_mrq(from._internal_net_margin_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_interest_margin_mrq = from._internal_net_interest_margin_mrq();
  ::uint64_t raw_net_interest_margin_mrq;
  memcpy(&raw_net_interest_margin_mrq, &tmp_net_interest_margin_mrq, sizeof(tmp_net_interest_margin_mrq));
  if (raw_net_interest_margin_mrq != 0) {
    _this->_internal_set_net_interest_margin_mrq(from._internal_net_interest_margin_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roe = from._internal_roe();
  ::uint64_t raw_roe;
  memcpy(&raw_roe, &tmp_roe, sizeof(tmp_roe));
  if (raw_roe != 0) {
    _this->_internal_set_roe(from._internal_roe());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roa = from._internal_roa();
  ::uint64_t raw_roa;
  memcpy(&raw_roa, &tmp_roa, sizeof(tmp_roa));
  if (raw_roa != 0) {
    _this->_internal_set_roa(from._internal_roa());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roic = from._internal_roic();
  ::uint64_t raw_roic;
  memcpy(&raw_roic, &tmp_roic, sizeof(tmp_roic));
  if (raw_roic != 0) {
    _this->_internal_set_roic(from._internal_roic());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_mrq = from._internal_total_debt_mrq();
  ::uint64_t raw_total_debt_mrq;
  memcpy(&raw_total_debt_mrq, &tmp_total_debt_mrq, sizeof(tmp_total_debt_mrq));
  if (raw_total_debt_mrq != 0) {
    _this->_internal_set_total_debt_mrq(from._internal_total_debt_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_to_equity_mrq = from._internal_total_debt_to_equity_mrq();
  ::uint64_t raw_total_debt_to_equity_mrq;
  memcpy(&raw_total_debt_to_equity_mrq, &tmp_total_debt_to_equity_mrq, sizeof(tmp_total_debt_to_equity_mrq));
  if (raw_total_debt_to_equity_mrq != 0) {
    _this->_internal_set_total_debt_to_equity_mrq(from._internal_total_debt_to_equity_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_to_ebitda_mrq = from._internal_total_debt_to_ebitda_mrq();
  ::uint64_t raw_total_debt_to_ebitda_mrq;
  memcpy(&raw_total_debt_to_ebitda_mrq, &tmp_total_debt_to_ebitda_mrq, sizeof(tmp_total_debt_to_ebitda_mrq));
  if (raw_total_debt_to_ebitda_mrq != 0) {
    _this->_internal_set_total_debt_to_ebitda_mrq(from._internal_total_debt_to_ebitda_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_cash_flow_to_price = from._internal_free_cash_flow_to_price();
  ::uint64_t raw_free_cash_flow_to_price;
  memcpy(&raw_free_cash_flow_to_price, &tmp_free_cash_flow_to_price, sizeof(tmp_free_cash_flow_to_price));
  if (raw_free_cash_flow_to_price != 0) {
    _this->_internal_set_free_cash_flow_to_price(from._internal_free_cash_flow_to_price());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_net_debt_to_ebitda = from._internal_net_debt_to_ebitda();
  ::uint64_t raw_net_debt_to_ebitda;
  memcpy(&raw_net_debt_to_ebitda, &tmp_net_debt_to_ebitda, sizeof(tmp_net_debt_to_ebitda));
  if (raw_net_debt_to_ebitda != 0) {
    _this->_internal_set_net_debt_to_ebitda(from._internal_net_debt_to_ebitda());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_current_ratio_mrq = from._internal_current_ratio_mrq();
  ::uint64_t raw_current_ratio_mrq;
  memcpy(&raw_current_ratio_mrq, &tmp_current_ratio_mrq, sizeof(tmp_current_ratio_mrq));
  if (raw_current_ratio_mrq != 0) {
    _this->_internal_set_current_ratio_mrq(from._internal_current_ratio_mrq());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_fixed_charge_coverage_ratio_fy = from._internal_fixed_charge_coverage_ratio_fy();
  ::uint64_t raw_fixed_charge_coverage_ratio_fy;
  memcpy(&raw_fixed_charge_coverage_ratio_fy, &tmp_fixed_charge_coverage_ratio_fy, sizeof(tmp_fixed_charge_coverage_ratio_fy));
  if (raw_fixed_charge_coverage_ratio_fy != 0) {
    _this->_internal_set_fixed_charge_coverage_ratio_fy(from._internal_fixed_charge_coverage_ratio_fy());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_yield_daily_ttm = from._internal_dividend_yield_daily_ttm();
  ::uint64_t raw_dividend_yield_daily_ttm;
  memcpy(&raw_dividend_yield_daily_ttm, &tmp_dividend_yield_daily_ttm, sizeof(tmp_dividend_yield_daily_ttm));
  if (raw_dividend_yield_daily_ttm != 0) {
    _this->_internal_set_dividend_yield_daily_ttm(from._internal_dividend_yield_daily_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_rate_ttm = from._internal_dividend_rate_ttm();
  ::uint64_t raw_dividend_rate_ttm;
  memcpy(&raw_dividend_rate_ttm, &tmp_dividend_rate_ttm, sizeof(tmp_dividend_rate_ttm));
  if (raw_dividend_rate_ttm != 0) {
    _this->_internal_set_dividend_rate_ttm(from._internal_dividend_rate_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividends_per_share = from._internal_dividends_per_share();
  ::uint64_t raw_dividends_per_share;
  memcpy(&raw_dividends_per_share, &tmp_dividends_per_share, sizeof(tmp_dividends_per_share));
  if (raw_dividends_per_share != 0) {
    _this->_internal_set_dividends_per_share(from._internal_dividends_per_share());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_years_average_dividend_yield = from._internal_five_years_average_dividend_yield();
  ::uint64_t raw_five_years_average_dividend_yield;
  memcpy(&raw_five_years_average_dividend_yield, &tmp_five_years_average_dividend_yield, sizeof(tmp_five_years_average_dividend_yield));
  if (raw_five_years_average_dividend_yield != 0) {
    _this->_internal_set_five_years_average_dividend_yield(from._internal_five_years_average_dividend_yield());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_five_year_annual_dividend_growth_rate = from._internal_five_year_annual_dividend_growth_rate();
  ::uint64_t raw_five_year_annual_dividend_growth_rate;
  memcpy(&raw_five_year_annual_dividend_growth_rate, &tmp_five_year_annual_dividend_growth_rate, sizeof(tmp_five_year_annual_dividend_growth_rate));
  if (raw_five_year_annual_dividend_growth_rate != 0) {
    _this->_internal_set_five_year_annual_dividend_growth_rate(from._internal_five_year_annual_dividend_growth_rate());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dividend_payout_ratio_fy = from._internal_dividend_payout_ratio_fy();
  ::uint64_t raw_dividend_payout_ratio_fy;
  memcpy(&raw_dividend_payout_ratio_fy, &tmp_dividend_payout_ratio_fy, sizeof(tmp_dividend_payout_ratio_fy));
  if (raw_dividend_payout_ratio_fy != 0) {
    _this->_internal_set_dividend_payout_ratio_fy(from._internal_dividend_payout_ratio_fy());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_buy_back_ttm = from._internal_buy_back_ttm();
  ::uint64_t raw_buy_back_ttm;
  memcpy(&raw_buy_back_ttm, &tmp_buy_back_ttm, sizeof(tmp_buy_back_ttm));
  if (raw_buy_back_ttm != 0) {
    _this->_internal_set_buy_back_ttm(from._internal_buy_back_ttm());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_one_year_annual_revenue_growth_rate = from._internal_one_year_annual_revenue_growth_rate();
  ::uint64_t raw_one_year_annual_revenue_growth_rate;
  memcpy(&raw_one_year_annual_revenue_growth_rate, &tmp_one_year_annual_revenue_growth_rate, sizeof(tmp_one_year_annual_revenue_growth_rate));
  if (raw_one_year_annual_revenue_growth_rate != 0) {
    _this->_internal_set_one_year_annual_revenue_growth_rate(from._internal_one_year_annual_revenue_growth_rate());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_adr_to_common_share_ratio = from._internal_adr_to_common_share_ratio();
  ::uint64_t raw_adr_to_common_share_ratio;
  memcpy(&raw_adr_to_common_share_ratio, &tmp_adr_to_common_share_ratio, sizeof(tmp_adr_to_common_share_ratio));
  if (raw_adr_to_common_share_ratio != 0) {
    _this->_internal_set_adr_to_common_share_ratio(from._internal_adr_to_common_share_ratio());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number_of_employees = from._internal_number_of_employees();
  ::uint64_t raw_number_of_employees;
  memcpy(&raw_number_of_employees, &tmp_number_of_employees, sizeof(tmp_number_of_employees));
  if (raw_number_of_employees != 0) {
    _this->_internal_set_number_of_employees(from._internal_number_of_employees());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_revenue_change_five_years = from._internal_revenue_change_five_years();
  ::uint64_t raw_revenue_change_five_years;
  memcpy(&raw_revenue_change_five_years, &tmp_revenue_change_five_years, sizeof(tmp_revenue_change_five_years));
  if (raw_revenue_change_five_years != 0) {
    _this->_internal_set_revenue_change_five_years(from._internal_revenue_change_five_years());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_eps_change_five_years = from._internal_eps_change_five_years();
  ::uint64_t raw_eps_change_five_years;
  memcpy(&raw_eps_change_five_years, &tmp_eps_change_five_years, sizeof(tmp_eps_change_five_years));
  if (raw_eps_change_five_years != 0) {
    _this->_internal_set_eps_change_five_years(from._internal_eps_change_five_years());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ebitda_change_five_years = from._internal_ebitda_change_five_years();
  ::uint64_t raw_ebitda_change_five_years;
  memcpy(&raw_ebitda_change_five_years, &tmp_ebitda_change_five_years, sizeof(tmp_ebitda_change_five_years));
  if (raw_ebitda_change_five_years != 0) {
    _this->_internal_set_ebitda_change_five_years(from._internal_ebitda_change_five_years());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_debt_change_five_years = from._internal_total_debt_change_five_years();
  ::uint64_t raw_total_debt_change_five_years;
  memcpy(&raw_total_debt_change_five_years, &tmp_total_debt_change_five_years, sizeof(tmp_total_debt_change_five_years));
  if (raw_total_debt_change_five_years != 0) {
    _this->_internal_set_total_debt_change_five_years(from._internal_total_debt_change_five_years());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ev_to_sales = from._internal_ev_to_sales();
  ::uint64_t raw_ev_to_sales;
  memcpy(&raw_ev_to_sales, &tmp_ev_to_sales, sizeof(tmp_ev_to_sales));
  if (raw_ev_to_sales != 0) {
    _this->_internal_set_ev_to_sales(from._internal_ev_to_sales());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsResponse_StatisticResponse::CopyFrom(const GetAssetFundamentalsResponse_StatisticResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAssetFundamentalsResponse_StatisticResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAssetFundamentalsResponse_StatisticResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAssetFundamentalsResponse_StatisticResponse::InternalSwap(GetAssetFundamentalsResponse_StatisticResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domicile_indicator_code_, &other->_impl_.domicile_indicator_code_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_)
      + sizeof(GetAssetFundamentalsResponse_StatisticResponse::_impl_.ev_to_sales_)
      - PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_)>(
          reinterpret_cast<char*>(&_impl_.ex_dividend_date_),
          reinterpret_cast<char*>(&other->_impl_.ex_dividend_date_));
}

::google::protobuf::Metadata GetAssetFundamentalsResponse_StatisticResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[76]);
}
// ===================================================================

class GetAssetFundamentalsResponse::_Internal {
 public:
};

GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : fundamentals_{visibility, arena, from.fundamentals_},
        _cached_size_{0} {}

GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(
    ::google::protobuf::Arena* arena,
    const GetAssetFundamentalsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetAssetFundamentalsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : fundamentals_{visibility, arena},
        _cached_size_{0} {}

inline void GetAssetFundamentalsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAssetFundamentalsResponse::~GetAssetFundamentalsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAssetFundamentalsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAssetFundamentalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fundamentals_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAssetFundamentalsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetAssetFundamentalsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetAssetFundamentalsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse, _impl_.fundamentals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse, _impl_.fundamentals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>()},
  }}, {{
  }},
};

::uint8_t* GetAssetFundamentalsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fundamentals_size()); i < n; i++) {
    const auto& repfield = this->_internal_fundamentals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  return target;
}

::size_t GetAssetFundamentalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
  total_size += 1UL * this->_internal_fundamentals_size();
  for (const auto& msg : this->_internal_fundamentals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAssetFundamentalsResponse::_class_data_ = {
    GetAssetFundamentalsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAssetFundamentalsResponse::GetClassData() const {
  return &_class_data_;
}

void GetAssetFundamentalsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fundamentals()->MergeFrom(
      from._internal_fundamentals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsResponse::CopyFrom(const GetAssetFundamentalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAssetFundamentalsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAssetFundamentalsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAssetFundamentalsResponse::InternalSwap(GetAssetFundamentalsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fundamentals_.InternalSwap(&other->_impl_.fundamentals_);
}

::google::protobuf::Metadata GetAssetFundamentalsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[77]);
}
// ===================================================================

class GetAssetReportsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAssetReportsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& from(const GetAssetReportsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& to(const GetAssetReportsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& GetAssetReportsRequest::_Internal::from(const GetAssetReportsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetAssetReportsRequest::_Internal::to(const GetAssetReportsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetAssetReportsRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAssetReportsRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetAssetReportsRequest::GetAssetReportsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_) {}

GetAssetReportsRequest::GetAssetReportsRequest(
    ::google::protobuf::Arena* arena,
    const GetAssetReportsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetAssetReportsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena) {}

inline void GetAssetReportsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetAssetReportsRequest::~GetAssetReportsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAssetReportsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrument_id_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAssetReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAssetReportsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 83, 2> GetAssetReportsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetAssetReportsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.instrument_id_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\75\15\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest"
    "instrument_id"
  }},
};

::uint8_t* GetAssetReportsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Timestamp from = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  return target;
}

::size_t GetAssetReportsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAssetReportsRequest::_class_data_ = {
    GetAssetReportsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAssetReportsRequest::GetClassData() const {
  return &_class_data_;
}

void GetAssetReportsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAssetReportsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsRequest::CopyFrom(const GetAssetReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAssetReportsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAssetReportsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAssetReportsRequest::InternalSwap(GetAssetReportsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.to_)
      + sizeof(GetAssetReportsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetAssetReportsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[78]);
}
// ===================================================================

class GetAssetReportsResponse_GetAssetReportsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAssetReportsResponse_GetAssetReportsEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& report_date(const GetAssetReportsResponse_GetAssetReportsEvent* msg);
  static void set_has_report_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& created_at(const GetAssetReportsResponse_GetAssetReportsEvent* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& GetAssetReportsResponse_GetAssetReportsEvent::_Internal::report_date(const GetAssetReportsResponse_GetAssetReportsEvent* msg) {
  return *msg->_impl_.report_date_;
}
const ::google::protobuf::Timestamp& GetAssetReportsResponse_GetAssetReportsEvent::_Internal::created_at(const GetAssetReportsResponse_GetAssetReportsEvent* msg) {
  return *msg->_impl_.created_at_;
}
void GetAssetReportsResponse_GetAssetReportsEvent::clear_report_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.report_date_ != nullptr) _impl_.report_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAssetReportsResponse_GetAssetReportsEvent::clear_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse_GetAssetReportsEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_) {}

GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(
    ::google::protobuf::Arena* arena,
    const GetAssetReportsResponse_GetAssetReportsEvent& from)
    : ::google::protobuf::Message(arena) {
  GetAssetReportsResponse_GetAssetReportsEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.report_date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.report_date_)
                : nullptr;
  _impl_.created_at_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_year_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_year_),
           offsetof(Impl_, period_type_) -
               offsetof(Impl_, period_year_) +
               sizeof(Impl_::period_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse_GetAssetReportsEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena) {}

inline void GetAssetReportsResponse_GetAssetReportsEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, report_date_),
           0,
           offsetof(Impl_, period_type_) -
               offsetof(Impl_, report_date_) +
               sizeof(Impl_::period_type_));
}
GetAssetReportsResponse_GetAssetReportsEvent::~GetAssetReportsResponse_GetAssetReportsEvent() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrument_id_.Destroy();
  delete _impl_.report_date_;
  delete _impl_.created_at_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAssetReportsResponse_GetAssetReportsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.report_date_ != nullptr);
      _impl_.report_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
  }
  ::memset(&_impl_.period_year_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.period_type_) -
      reinterpret_cast<char*>(&_impl_.period_year_)) + sizeof(_impl_.period_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAssetReportsResponse_GetAssetReportsEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 105, 2> GetAssetReportsResponse_GetAssetReportsEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetAssetReportsResponse_GetAssetReportsEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.instrument_id_)}},
    // .google.protobuf.Timestamp report_date = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_)}},
    // int32 period_year = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_)}},
    // int32 period_num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_)}},
    // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_)}},
    // .google.protobuf.Timestamp created_at = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.created_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp report_date = 2;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 period_year = 3;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 period_num = 4;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp created_at = 6;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.created_at_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\123\15\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent"
    "instrument_id"
  }},
};

::uint8_t* GetAssetReportsResponse_GetAssetReportsEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp report_date = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::report_date(this),
        _Internal::report_date(this).GetCachedSize(), target, stream);
  }

  // int32 period_year = 3;
  if (this->_internal_period_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_period_year(), target);
  }

  // int32 period_num = 4;
  if (this->_internal_period_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_period_num(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
  if (this->_internal_period_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_period_type(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  return target;
}

::size_t GetAssetReportsResponse_GetAssetReportsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp report_date = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.report_date_);
    }

    // .google.protobuf.Timestamp created_at = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_at_);
    }

  }
  // int32 period_year = 3;
  if (this->_internal_period_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_period_year());
  }

  // int32 period_num = 4;
  if (this->_internal_period_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_period_num());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
  if (this->_internal_period_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_period_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAssetReportsResponse_GetAssetReportsEvent::_class_data_ = {
    GetAssetReportsResponse_GetAssetReportsEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAssetReportsResponse_GetAssetReportsEvent::GetClassData() const {
  return &_class_data_;
}

void GetAssetReportsResponse_GetAssetReportsEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAssetReportsResponse_GetAssetReportsEvent*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsResponse_GetAssetReportsEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_report_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_report_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_created_at());
    }
  }
  if (from._internal_period_year() != 0) {
    _this->_internal_set_period_year(from._internal_period_year());
  }
  if (from._internal_period_num() != 0) {
    _this->_internal_set_period_num(from._internal_period_num());
  }
  if (from._internal_period_type() != 0) {
    _this->_internal_set_period_type(from._internal_period_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsResponse_GetAssetReportsEvent::CopyFrom(const GetAssetReportsResponse_GetAssetReportsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAssetReportsResponse_GetAssetReportsEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAssetReportsResponse_GetAssetReportsEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAssetReportsResponse_GetAssetReportsEvent::InternalSwap(GetAssetReportsResponse_GetAssetReportsEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_)
      + sizeof(GetAssetReportsResponse_GetAssetReportsEvent::_impl_.period_type_)
      - PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_)>(
          reinterpret_cast<char*>(&_impl_.report_date_),
          reinterpret_cast<char*>(&other->_impl_.report_date_));
}

::google::protobuf::Metadata GetAssetReportsResponse_GetAssetReportsEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[79]);
}
// ===================================================================

class GetAssetReportsResponse::_Internal {
 public:
};

GetAssetReportsResponse::GetAssetReportsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : events_{visibility, arena, from.events_},
        _cached_size_{0} {}

GetAssetReportsResponse::GetAssetReportsResponse(
    ::google::protobuf::Arena* arena,
    const GetAssetReportsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetAssetReportsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : events_{visibility, arena},
        _cached_size_{0} {}

inline void GetAssetReportsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAssetReportsResponse::~GetAssetReportsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetAssetReportsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetAssetReportsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetAssetReportsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetAssetReportsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetAssetReportsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse, _impl_.events_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>()},
  }}, {{
  }},
};

::uint8_t* GetAssetReportsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  return target;
}

::size_t GetAssetReportsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetAssetReportsResponse::_class_data_ = {
    GetAssetReportsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetAssetReportsResponse::GetClassData() const {
  return &_class_data_;
}

void GetAssetReportsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetAssetReportsResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsResponse::CopyFrom(const GetAssetReportsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetAssetReportsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetAssetReportsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetAssetReportsResponse::InternalSwap(GetAssetReportsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::google::protobuf::Metadata GetAssetReportsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[80]);
}
// ===================================================================

class GetConsensusForecastsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetConsensusForecastsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Page& paging(const GetConsensusForecastsRequest* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Page& GetConsensusForecastsRequest::_Internal::paging(const GetConsensusForecastsRequest* msg) {
  return *msg->_impl_.paging_;
}
void GetConsensusForecastsRequest::clear_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.paging_ != nullptr) _impl_.paging_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetConsensusForecastsRequest::GetConsensusForecastsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetConsensusForecastsRequest::GetConsensusForecastsRequest(
    ::google::protobuf::Arena* arena,
    const GetConsensusForecastsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetConsensusForecastsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.paging_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Page>(arena, *from._impl_.paging_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetConsensusForecastsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.paging_ = {};
}
GetConsensusForecastsRequest::~GetConsensusForecastsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetConsensusForecastsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.paging_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetConsensusForecastsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetConsensusForecastsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetConsensusForecastsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetConsensusForecastsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_.paging_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_.paging_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Page>()},
  }}, {{
  }},
};

::uint8_t* GetConsensusForecastsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  return target;
}

::size_t GetConsensusForecastsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetConsensusForecastsRequest::_class_data_ = {
    GetConsensusForecastsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetConsensusForecastsRequest::GetClassData() const {
  return &_class_data_;
}

void GetConsensusForecastsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsRequest*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::tinkoff::public_::invest::api::contract::v1::Page::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsRequest::CopyFrom(const GetConsensusForecastsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetConsensusForecastsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetConsensusForecastsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetConsensusForecastsRequest::InternalSwap(GetConsensusForecastsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::google::protobuf::Metadata GetConsensusForecastsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[81]);
}
// ===================================================================

class GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal {
 public:
  using HasBits = decltype(std::declval<GetConsensusForecastsResponse_ConsensusForecastsItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& created_at(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_price(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static void set_has_best_target_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_low(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static void set_has_best_target_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_high(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static void set_has_best_target_high(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& prognosis_date(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static void set_has_prognosis_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::google::protobuf::Timestamp& GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::created_at(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.created_at_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::best_target_price(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.best_target_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::best_target_low(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.best_target_low_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::best_target_high(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.best_target_high_;
}
const ::google::protobuf::Timestamp& GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::prognosis_date(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.prognosis_date_;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.best_target_price_ != nullptr) _impl_.best_target_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.best_target_low_ != nullptr) _impl_.best_target_low_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.best_target_high_ != nullptr) _impl_.best_target_high_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_prognosis_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.prognosis_date_ != nullptr) _impl_.prognosis_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse_ConsensusForecastsItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        asset_uid_(arena, from.asset_uid_),
        currency_(arena, from.currency_) {}

GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(
    ::google::protobuf::Arena* arena,
    const GetConsensusForecastsResponse_ConsensusForecastsItem& from)
    : ::google::protobuf::Message(arena) {
  GetConsensusForecastsResponse_ConsensusForecastsItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_)
                : nullptr;
  _impl_.best_target_price_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.best_target_price_)
                : nullptr;
  _impl_.best_target_low_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.best_target_low_)
                : nullptr;
  _impl_.best_target_high_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.best_target_high_)
                : nullptr;
  _impl_.prognosis_date_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.prognosis_date_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_buy_recommend_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_buy_recommend_),
           offsetof(Impl_, consensus_) -
               offsetof(Impl_, total_buy_recommend_) +
               sizeof(Impl_::consensus_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse_ConsensusForecastsItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        asset_uid_(arena),
        currency_(arena) {}

inline void GetConsensusForecastsResponse_ConsensusForecastsItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, consensus_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::consensus_));
}
GetConsensusForecastsResponse_ConsensusForecastsItem::~GetConsensusForecastsResponse_ConsensusForecastsItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  _impl_.currency_.Destroy();
  delete _impl_.created_at_;
  delete _impl_.best_target_price_;
  delete _impl_.best_target_low_;
  delete _impl_.best_target_high_;
  delete _impl_.prognosis_date_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetConsensusForecastsResponse_ConsensusForecastsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.best_target_price_ != nullptr);
      _impl_.best_target_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.best_target_low_ != nullptr);
      _impl_.best_target_low_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.best_target_high_ != nullptr);
      _impl_.best_target_high_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.prognosis_date_ != nullptr);
      _impl_.prognosis_date_->Clear();
    }
  }
  ::memset(&_impl_.total_buy_recommend_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.consensus_) -
      reinterpret_cast<char*>(&_impl_.total_buy_recommend_)) + sizeof(_impl_.consensus_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetConsensusForecastsResponse_ConsensusForecastsItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 5, 128, 2> GetConsensusForecastsResponse_ConsensusForecastsItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.uid_)}},
    // string asset_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.asset_uid_)}},
    // .google.protobuf.Timestamp created_at = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_low_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_high_)}},
    // int32 total_buy_recommend = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_)}},
    // int32 total_hold_recommend = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_)}},
    // int32 total_sell_recommend = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_)}},
    // string currency = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_)}},
    // .google.protobuf.Timestamp prognosis_date = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 4, 4, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.prognosis_date_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 2;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 3;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_low_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_high_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 total_buy_recommend = 7;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_hold_recommend = 8;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_sell_recommend = 9;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 10;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp prognosis_date = 12;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.prognosis_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\133\3\11\0\0\0\0\0\0\0\10\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem"
    "uid"
    "asset_uid"
    "currency"
  }},
};

::uint8_t* GetConsensusForecastsResponse_ConsensusForecastsItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string asset_uid = 2;
  if (!this->_internal_asset_uid().empty()) {
    const std::string& _s = this->_internal_asset_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::best_target_price(this),
        _Internal::best_target_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::best_target_low(this),
        _Internal::best_target_low(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::best_target_high(this),
        _Internal::best_target_high(this).GetCachedSize(), target, stream);
  }

  // int32 total_buy_recommend = 7;
  if (this->_internal_total_buy_recommend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_total_buy_recommend(), target);
  }

  // int32 total_hold_recommend = 8;
  if (this->_internal_total_hold_recommend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_total_hold_recommend(), target);
  }

  // int32 total_sell_recommend = 9;
  if (this->_internal_total_sell_recommend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_total_sell_recommend(), target);
  }

  // string currency = 10;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
  if (this->_internal_consensus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_consensus(), target);
  }

  // .google.protobuf.Timestamp prognosis_date = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::prognosis_date(this),
        _Internal::prognosis_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  return target;
}

::size_t GetConsensusForecastsResponse_ConsensusForecastsItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string asset_uid = 2;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_uid());
  }

  // string currency = 10;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .google.protobuf.Timestamp created_at = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_at_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.best_target_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.best_target_low_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.best_target_high_);
    }

    // .google.protobuf.Timestamp prognosis_date = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.prognosis_date_);
    }

  }
  // int32 total_buy_recommend = 7;
  if (this->_internal_total_buy_recommend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_buy_recommend());
  }

  // int32 total_hold_recommend = 8;
  if (this->_internal_total_hold_recommend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_hold_recommend());
  }

  // int32 total_sell_recommend = 9;
  if (this->_internal_total_sell_recommend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_sell_recommend());
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
  if (this->_internal_consensus() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_consensus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetConsensusForecastsResponse_ConsensusForecastsItem::_class_data_ = {
    GetConsensusForecastsResponse_ConsensusForecastsItem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetConsensusForecastsResponse_ConsensusForecastsItem::GetClassData() const {
  return &_class_data_;
}

void GetConsensusForecastsResponse_ConsensusForecastsItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsResponse_ConsensusForecastsItem*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsResponse_ConsensusForecastsItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_created_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_best_target_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_best_target_price());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_best_target_low()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_best_target_low());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_best_target_high()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_best_target_high());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_prognosis_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_prognosis_date());
    }
  }
  if (from._internal_total_buy_recommend() != 0) {
    _this->_internal_set_total_buy_recommend(from._internal_total_buy_recommend());
  }
  if (from._internal_total_hold_recommend() != 0) {
    _this->_internal_set_total_hold_recommend(from._internal_total_hold_recommend());
  }
  if (from._internal_total_sell_recommend() != 0) {
    _this->_internal_set_total_sell_recommend(from._internal_total_sell_recommend());
  }
  if (from._internal_consensus() != 0) {
    _this->_internal_set_consensus(from._internal_consensus());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsResponse_ConsensusForecastsItem::CopyFrom(const GetConsensusForecastsResponse_ConsensusForecastsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetConsensusForecastsResponse_ConsensusForecastsItem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetConsensusForecastsResponse_ConsensusForecastsItem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::InternalSwap(GetConsensusForecastsResponse_ConsensusForecastsItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_)
      + sizeof(GetConsensusForecastsResponse_ConsensusForecastsItem::_impl_.consensus_)
      - PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata GetConsensusForecastsResponse_ConsensusForecastsItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[82]);
}
// ===================================================================

class GetConsensusForecastsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetConsensusForecastsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::PageResponse& page(const GetConsensusForecastsResponse* msg);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::PageResponse& GetConsensusForecastsResponse::_Internal::page(const GetConsensusForecastsResponse* msg) {
  return *msg->_impl_.page_;
}
void GetConsensusForecastsResponse::clear_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.page_ != nullptr) _impl_.page_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetConsensusForecastsResponse::GetConsensusForecastsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        items_{visibility, arena, from.items_} {}

GetConsensusForecastsResponse::GetConsensusForecastsResponse(
    ::google::protobuf::Arena* arena,
    const GetConsensusForecastsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetConsensusForecastsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.page_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PageResponse>(arena, *from._impl_.page_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        items_{visibility, arena} {}

inline void GetConsensusForecastsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.page_ = {};
}
GetConsensusForecastsResponse::~GetConsensusForecastsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetConsensusForecastsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.page_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetConsensusForecastsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.page_ != nullptr);
    _impl_.page_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetConsensusForecastsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetConsensusForecastsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetConsensusForecastsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.page_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.items_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.page_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::PageResponse>()},
  }}, {{
  }},
};

::uint8_t* GetConsensusForecastsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::page(this),
        _Internal::page(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  return target;
}

::size_t GetConsensusForecastsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.page_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetConsensusForecastsResponse::_class_data_ = {
    GetConsensusForecastsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetConsensusForecastsResponse::GetClassData() const {
  return &_class_data_;
}

void GetConsensusForecastsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsResponse*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_page()->::tinkoff::public_::invest::api::contract::v1::PageResponse::MergeFrom(
        from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsResponse::CopyFrom(const GetConsensusForecastsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetConsensusForecastsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetConsensusForecastsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetConsensusForecastsResponse::InternalSwap(GetConsensusForecastsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.page_, other->_impl_.page_);
}

::google::protobuf::Metadata GetConsensusForecastsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[83]);
}
// ===================================================================

class GetForecastRequest::_Internal {
 public:
};

GetForecastRequest::GetForecastRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

GetForecastRequest::GetForecastRequest(
    ::google::protobuf::Arena* arena,
    const GetForecastRequest& from)
    : ::google::protobuf::Message(arena) {
  GetForecastRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instrument_id_(arena),
        _cached_size_{0} {}

inline void GetForecastRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetForecastRequest::~GetForecastRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetForecastRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetForecastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetForecastRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 79, 2> GetForecastRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetForecastRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastRequest, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\71\15\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetForecastRequest"
    "instrument_id"
  }},
};

::uint8_t* GetForecastRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  return target;
}

::size_t GetForecastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetForecastRequest::_class_data_ = {
    GetForecastRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetForecastRequest::GetClassData() const {
  return &_class_data_;
}

void GetForecastRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetForecastRequest*>(&to_msg);
  auto& from = static_cast<const GetForecastRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastRequest::CopyFrom(const GetForecastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetForecastRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetForecastRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetForecastRequest::InternalSwap(GetForecastRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata GetForecastRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[84]);
}
// ===================================================================

class GetForecastResponse_TargetItem::_Internal {
 public:
  using HasBits = decltype(std::declval<GetForecastResponse_TargetItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& recommendation_date(const GetForecastResponse_TargetItem* msg);
  static void set_has_recommendation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_price(const GetForecastResponse_TargetItem* msg);
  static void set_has_current_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& target_price(const GetForecastResponse_TargetItem* msg);
  static void set_has_target_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change(const GetForecastResponse_TargetItem* msg);
  static void set_has_price_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change_rel(const GetForecastResponse_TargetItem* msg);
  static void set_has_price_change_rel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::google::protobuf::Timestamp& GetForecastResponse_TargetItem::_Internal::recommendation_date(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.recommendation_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_Internal::current_price(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.current_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_Internal::target_price(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.target_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_Internal::price_change(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.price_change_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_Internal::price_change_rel(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.price_change_rel_;
}
void GetForecastResponse_TargetItem::clear_recommendation_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.recommendation_date_ != nullptr) _impl_.recommendation_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetForecastResponse_TargetItem::clear_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.current_price_ != nullptr) _impl_.current_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetForecastResponse_TargetItem::clear_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.target_price_ != nullptr) _impl_.target_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetForecastResponse_TargetItem::clear_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_change_ != nullptr) _impl_.price_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetForecastResponse_TargetItem::clear_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_change_rel_ != nullptr) _impl_.price_change_rel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_TargetItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        ticker_(arena, from.ticker_),
        company_(arena, from.company_),
        currency_(arena, from.currency_),
        show_name_(arena, from.show_name_) {}

GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(
    ::google::protobuf::Arena* arena,
    const GetForecastResponse_TargetItem& from)
    : ::google::protobuf::Message(arena) {
  GetForecastResponse_TargetItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.recommendation_date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.recommendation_date_)
                : nullptr;
  _impl_.current_price_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.current_price_)
                : nullptr;
  _impl_.target_price_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.target_price_)
                : nullptr;
  _impl_.price_change_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_)
                : nullptr;
  _impl_.price_change_rel_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_rel_)
                : nullptr;
  _impl_.recommendation_ = from._impl_.recommendation_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_TargetItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        ticker_(arena),
        company_(arena),
        currency_(arena),
        show_name_(arena) {}

inline void GetForecastResponse_TargetItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, recommendation_date_),
           0,
           offsetof(Impl_, recommendation_) -
               offsetof(Impl_, recommendation_date_) +
               sizeof(Impl_::recommendation_));
}
GetForecastResponse_TargetItem::~GetForecastResponse_TargetItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetForecastResponse_TargetItem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.company_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.show_name_.Destroy();
  delete _impl_.recommendation_date_;
  delete _impl_.current_price_;
  delete _impl_.target_price_;
  delete _impl_.price_change_;
  delete _impl_.price_change_rel_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetForecastResponse_TargetItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.show_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.recommendation_date_ != nullptr);
      _impl_.recommendation_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_price_ != nullptr);
      _impl_.current_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_price_ != nullptr);
      _impl_.target_price_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.price_change_ != nullptr);
      _impl_.price_change_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.price_change_rel_ != nullptr);
      _impl_.price_change_rel_->Clear();
    }
  }
  _impl_.recommendation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetForecastResponse_TargetItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 5, 119, 2> GetForecastResponse_TargetItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetForecastResponse_TargetItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.uid_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.ticker_)}},
    // string company = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.company_)}},
    // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetForecastResponse_TargetItem, _impl_.recommendation_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_)}},
    // .google.protobuf.Timestamp recommendation_date = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_date_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.current_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.target_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 4, 4, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_rel_)}},
    // string show_name = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.show_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string company = 3;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.company_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp recommendation_date = 5;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.current_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.target_price_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_rel_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string show_name = 11;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.show_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\105\3\6\7\0\0\10\0\0\0\0\11\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem"
    "uid"
    "ticker"
    "company"
    "currency"
    "show_name"
  }},
};

::uint8_t* GetForecastResponse_TargetItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string company = 3;
  if (!this->_internal_company().empty()) {
    const std::string& _s = this->_internal_company();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
  if (this->_internal_recommendation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_recommendation(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp recommendation_date = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::recommendation_date(this),
        _Internal::recommendation_date(this).GetCachedSize(), target, stream);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::current_price(this),
        _Internal::current_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::target_price(this),
        _Internal::target_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::price_change(this),
        _Internal::price_change(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::price_change_rel(this),
        _Internal::price_change_rel(this).GetCachedSize(), target, stream);
  }

  // string show_name = 11;
  if (!this->_internal_show_name().empty()) {
    const std::string& _s = this->_internal_show_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  return target;
}

::size_t GetForecastResponse_TargetItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string company = 3;
  if (!this->_internal_company().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_company());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  // string show_name = 11;
  if (!this->_internal_show_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_show_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .google.protobuf.Timestamp recommendation_date = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.recommendation_date_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_change_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_change_rel_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
  if (this->_internal_recommendation() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_recommendation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetForecastResponse_TargetItem::_class_data_ = {
    GetForecastResponse_TargetItem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetForecastResponse_TargetItem::GetClassData() const {
  return &_class_data_;
}

void GetForecastResponse_TargetItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetForecastResponse_TargetItem*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse_TargetItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_show_name().empty()) {
    _this->_internal_set_show_name(from._internal_show_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_recommendation_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_recommendation_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_current_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_current_price());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_target_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_target_price());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_price_change()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price_change());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_price_change_rel()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price_change_rel());
    }
  }
  if (from._internal_recommendation() != 0) {
    _this->_internal_set_recommendation(from._internal_recommendation());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse_TargetItem::CopyFrom(const GetForecastResponse_TargetItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetForecastResponse_TargetItem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetForecastResponse_TargetItem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetForecastResponse_TargetItem::InternalSwap(GetForecastResponse_TargetItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.company_, &other->_impl_.company_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.show_name_, &other->_impl_.show_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_)
      + sizeof(GetForecastResponse_TargetItem::_impl_.recommendation_)
      - PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_date_)>(
          reinterpret_cast<char*>(&_impl_.recommendation_date_),
          reinterpret_cast<char*>(&other->_impl_.recommendation_date_));
}

::google::protobuf::Metadata GetForecastResponse_TargetItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[85]);
}
// ===================================================================

class GetForecastResponse_ConsensusItem::_Internal {
 public:
  using HasBits = decltype(std::declval<GetForecastResponse_ConsensusItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_price(const GetForecastResponse_ConsensusItem* msg);
  static void set_has_current_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& consensus(const GetForecastResponse_ConsensusItem* msg);
  static void set_has_consensus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_target(const GetForecastResponse_ConsensusItem* msg);
  static void set_has_min_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& max_target(const GetForecastResponse_ConsensusItem* msg);
  static void set_has_max_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change(const GetForecastResponse_ConsensusItem* msg);
  static void set_has_price_change(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change_rel(const GetForecastResponse_ConsensusItem* msg);
  static void set_has_price_change_rel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_Internal::current_price(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.current_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_Internal::consensus(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.consensus_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_Internal::min_target(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.min_target_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_Internal::max_target(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.max_target_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_Internal::price_change(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.price_change_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_Internal::price_change_rel(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.price_change_rel_;
}
void GetForecastResponse_ConsensusItem::clear_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.current_price_ != nullptr) _impl_.current_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetForecastResponse_ConsensusItem::clear_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.consensus_ != nullptr) _impl_.consensus_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetForecastResponse_ConsensusItem::clear_min_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_target_ != nullptr) _impl_.min_target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetForecastResponse_ConsensusItem::clear_max_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.max_target_ != nullptr) _impl_.max_target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetForecastResponse_ConsensusItem::clear_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_change_ != nullptr) _impl_.price_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GetForecastResponse_ConsensusItem::clear_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_change_rel_ != nullptr) _impl_.price_change_rel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_ConsensusItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        ticker_(arena, from.ticker_),
        currency_(arena, from.currency_) {}

GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(
    ::google::protobuf::Arena* arena,
    const GetForecastResponse_ConsensusItem& from)
    : ::google::protobuf::Message(arena) {
  GetForecastResponse_ConsensusItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_price_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.current_price_)
                : nullptr;
  _impl_.consensus_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.consensus_)
                : nullptr;
  _impl_.min_target_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_target_)
                : nullptr;
  _impl_.max_target_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.max_target_)
                : nullptr;
  _impl_.price_change_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_)
                : nullptr;
  _impl_.price_change_rel_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_rel_)
                : nullptr;
  _impl_.recommendation_ = from._impl_.recommendation_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_ConsensusItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        ticker_(arena),
        currency_(arena) {}

inline void GetForecastResponse_ConsensusItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_price_),
           0,
           offsetof(Impl_, recommendation_) -
               offsetof(Impl_, current_price_) +
               sizeof(Impl_::recommendation_));
}
GetForecastResponse_ConsensusItem::~GetForecastResponse_ConsensusItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetForecastResponse_ConsensusItem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.currency_.Destroy();
  delete _impl_.current_price_;
  delete _impl_.consensus_;
  delete _impl_.min_target_;
  delete _impl_.max_target_;
  delete _impl_.price_change_;
  delete _impl_.price_change_rel_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetForecastResponse_ConsensusItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.current_price_ != nullptr);
      _impl_.current_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.consensus_ != nullptr);
      _impl_.consensus_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.min_target_ != nullptr);
      _impl_.min_target_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.max_target_ != nullptr);
      _impl_.max_target_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.price_change_ != nullptr);
      _impl_.price_change_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.price_change_rel_ != nullptr);
      _impl_.price_change_rel_->Clear();
    }
  }
  _impl_.recommendation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetForecastResponse_ConsensusItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 6, 106, 2> GetForecastResponse_ConsensusItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetForecastResponse_ConsensusItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.uid_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.ticker_)}},
    // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetForecastResponse_ConsensusItem, _impl_.recommendation_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.recommendation_)}},
    // string currency = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.currency_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.current_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.consensus_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.min_target_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.max_target_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 5, 5, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_rel_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.recommendation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string currency = 4;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.current_price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.consensus_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.min_target_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.max_target_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_rel_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\110\3\6\0\10\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem"
    "uid"
    "ticker"
    "currency"
  }},
};

::uint8_t* GetForecastResponse_ConsensusItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    const std::string& _s = this->_internal_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
  if (this->_internal_recommendation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_recommendation(), target);
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::current_price(this),
        _Internal::current_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::consensus(this),
        _Internal::consensus(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::min_target(this),
        _Internal::min_target(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::max_target(this),
        _Internal::max_target(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::price_change(this),
        _Internal::price_change(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::price_change_rel(this),
        _Internal::price_change_rel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  return target;
}

::size_t GetForecastResponse_ConsensusItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uid());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currency());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.consensus_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_target_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.max_target_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_change_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_change_rel_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
  if (this->_internal_recommendation() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_recommendation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetForecastResponse_ConsensusItem::_class_data_ = {
    GetForecastResponse_ConsensusItem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetForecastResponse_ConsensusItem::GetClassData() const {
  return &_class_data_;
}

void GetForecastResponse_ConsensusItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetForecastResponse_ConsensusItem*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse_ConsensusItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_current_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_current_price());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_consensus()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_consensus());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_min_target()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_min_target());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_max_target()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_max_target());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_price_change()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price_change());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_price_change_rel()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price_change_rel());
    }
  }
  if (from._internal_recommendation() != 0) {
    _this->_internal_set_recommendation(from._internal_recommendation());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse_ConsensusItem::CopyFrom(const GetForecastResponse_ConsensusItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetForecastResponse_ConsensusItem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetForecastResponse_ConsensusItem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetForecastResponse_ConsensusItem::InternalSwap(GetForecastResponse_ConsensusItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.recommendation_)
      + sizeof(GetForecastResponse_ConsensusItem::_impl_.recommendation_)
      - PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.current_price_)>(
          reinterpret_cast<char*>(&_impl_.current_price_),
          reinterpret_cast<char*>(&other->_impl_.current_price_));
}

::google::protobuf::Metadata GetForecastResponse_ConsensusItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[86]);
}
// ===================================================================

class GetForecastResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetForecastResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& consensus(const GetForecastResponse* msg);
  static void set_has_consensus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& GetForecastResponse::_Internal::consensus(const GetForecastResponse* msg) {
  return *msg->_impl_.consensus_;
}
GetForecastResponse::GetForecastResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        targets_{visibility, arena, from.targets_} {}

GetForecastResponse::GetForecastResponse(
    ::google::protobuf::Arena* arena,
    const GetForecastResponse& from)
    : ::google::protobuf::Message(arena) {
  GetForecastResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.consensus_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem>(arena, *from._impl_.consensus_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        targets_{visibility, arena} {}

inline void GetForecastResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.consensus_ = {};
}
GetForecastResponse::~GetForecastResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetForecastResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.consensus_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetForecastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.consensus_ != nullptr);
    _impl_.consensus_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetForecastResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetForecastResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetForecastResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.consensus_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.targets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.targets_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.consensus_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem>()},
  }}, {{
  }},
};

::uint8_t* GetForecastResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::consensus(this),
        _Internal::consensus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  return target;
}

::size_t GetForecastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_internal_targets()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.consensus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetForecastResponse::_class_data_ = {
    GetForecastResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetForecastResponse::GetClassData() const {
  return &_class_data_;
}

void GetForecastResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetForecastResponse*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(
      from._internal_targets());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_consensus()->::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem::MergeFrom(
        from._internal_consensus());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse::CopyFrom(const GetForecastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetForecastResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetForecastResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetForecastResponse::InternalSwap(GetForecastResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  swap(_impl_.consensus_, other->_impl_.consensus_);
}

::google::protobuf::Metadata GetForecastResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[87]);
}
// ===================================================================

class TradingInterval_TimeInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingInterval_TimeInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& start_ts(const TradingInterval_TimeInterval* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& end_ts(const TradingInterval_TimeInterval* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& TradingInterval_TimeInterval::_Internal::start_ts(const TradingInterval_TimeInterval* msg) {
  return *msg->_impl_.start_ts_;
}
const ::google::protobuf::Timestamp& TradingInterval_TimeInterval::_Internal::end_ts(const TradingInterval_TimeInterval* msg) {
  return *msg->_impl_.end_ts_;
}
void TradingInterval_TimeInterval::clear_start_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TradingInterval_TimeInterval::clear_end_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TradingInterval_TimeInterval::TradingInterval_TimeInterval(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval_TimeInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TradingInterval_TimeInterval::TradingInterval_TimeInterval(
    ::google::protobuf::Arena* arena,
    const TradingInterval_TimeInterval& from)
    : ::google::protobuf::Message(arena) {
  TradingInterval_TimeInterval* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_ts_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.start_ts_)
                : nullptr;
  _impl_.end_ts_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.end_ts_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval_TimeInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TradingInterval_TimeInterval::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_ts_),
           0,
           offsetof(Impl_, end_ts_) -
               offsetof(Impl_, start_ts_) +
               sizeof(Impl_::end_ts_));
}
TradingInterval_TimeInterval::~TradingInterval_TimeInterval() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradingInterval_TimeInterval::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.start_ts_;
  delete _impl_.end_ts_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradingInterval_TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradingInterval_TimeInterval::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TradingInterval_TimeInterval::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TradingInterval_TimeInterval_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp end_ts = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.end_ts_)}},
    // .google.protobuf.Timestamp start_ts = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.start_ts_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp start_ts = 1;
    {PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.start_ts_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_ts = 2;
    {PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.end_ts_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* TradingInterval_TimeInterval::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_ts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  return target;
}

::size_t TradingInterval_TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp start_ts = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.start_ts_);
    }

    // .google.protobuf.Timestamp end_ts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradingInterval_TimeInterval::_class_data_ = {
    TradingInterval_TimeInterval::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradingInterval_TimeInterval::GetClassData() const {
  return &_class_data_;
}

void TradingInterval_TimeInterval::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradingInterval_TimeInterval*>(&to_msg);
  auto& from = static_cast<const TradingInterval_TimeInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_ts()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_start_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_ts()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingInterval_TimeInterval::CopyFrom(const TradingInterval_TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradingInterval_TimeInterval::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradingInterval_TimeInterval::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradingInterval_TimeInterval::InternalSwap(TradingInterval_TimeInterval* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.end_ts_)
      + sizeof(TradingInterval_TimeInterval::_impl_.end_ts_)
      - PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::google::protobuf::Metadata TradingInterval_TimeInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[88]);
}
// ===================================================================

class TradingInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& interval(const TradingInterval* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& TradingInterval::_Internal::interval(const TradingInterval* msg) {
  return *msg->_impl_.interval_;
}
TradingInterval::TradingInterval(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        type_(arena, from.type_) {}

TradingInterval::TradingInterval(
    ::google::protobuf::Arena* arena,
    const TradingInterval& from)
    : ::google::protobuf::Message(arena) {
  TradingInterval* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.interval_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval>(arena, *from._impl_.interval_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        type_(arena) {}

inline void TradingInterval::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.interval_ = {};
}
TradingInterval::~TradingInterval() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradingInterval::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.type_.Destroy();
  delete _impl_.interval_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradingInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.interval_ != nullptr);
    _impl_.interval_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradingInterval::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 67, 2> TradingInterval::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TradingInterval_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.interval_)}},
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
    {PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval>()},
  }}, {{
    "\66\4\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.TradingInterval"
    "type"
  }},
};

::uint8_t* TradingInterval::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradingInterval.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  return target;
}

::size_t TradingInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.interval_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradingInterval::_class_data_ = {
    TradingInterval::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradingInterval::GetClassData() const {
  return &_class_data_;
}

void TradingInterval::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradingInterval*>(&to_msg);
  auto& from = static_cast<const TradingInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_interval()->::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval::MergeFrom(
        from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingInterval::CopyFrom(const TradingInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradingInterval::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradingInterval::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradingInterval::InternalSwap(TradingInterval* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  swap(_impl_.interval_, other->_impl_.interval_);
}

::google::protobuf::Metadata TradingInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[89]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
