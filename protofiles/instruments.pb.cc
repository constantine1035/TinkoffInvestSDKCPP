// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruments.proto

#include "instruments.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR TradingSchedulesRequest::TradingSchedulesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr} {}
struct TradingSchedulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingSchedulesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingSchedulesRequestDefaultTypeInternal() {}
  union {
    TradingSchedulesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingSchedulesRequestDefaultTypeInternal _TradingSchedulesRequest_default_instance_;
PROTOBUF_CONSTEXPR TradingSchedulesResponse::TradingSchedulesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchanges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradingSchedulesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingSchedulesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingSchedulesResponseDefaultTypeInternal() {}
  union {
    TradingSchedulesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingSchedulesResponseDefaultTypeInternal _TradingSchedulesResponse_default_instance_;
PROTOBUF_CONSTEXPR TradingSchedule::TradingSchedule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.days_)*/{}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradingScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingScheduleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingScheduleDefaultTypeInternal() {}
  union {
    TradingSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingScheduleDefaultTypeInternal _TradingSchedule_default_instance_;
PROTOBUF_CONSTEXPR TradingDay::TradingDay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.intervals_)*/{}
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.opening_auction_start_time_)*/nullptr
  , /*decltype(_impl_.closing_auction_end_time_)*/nullptr
  , /*decltype(_impl_.evening_opening_auction_start_time_)*/nullptr
  , /*decltype(_impl_.evening_start_time_)*/nullptr
  , /*decltype(_impl_.evening_end_time_)*/nullptr
  , /*decltype(_impl_.clearing_start_time_)*/nullptr
  , /*decltype(_impl_.clearing_end_time_)*/nullptr
  , /*decltype(_impl_.premarket_start_time_)*/nullptr
  , /*decltype(_impl_.premarket_end_time_)*/nullptr
  , /*decltype(_impl_.closing_auction_start_time_)*/nullptr
  , /*decltype(_impl_.opening_auction_end_time_)*/nullptr
  , /*decltype(_impl_.is_trading_day_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradingDayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingDayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingDayDefaultTypeInternal() {}
  union {
    TradingDay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingDayDefaultTypeInternal _TradingDay_default_instance_;
PROTOBUF_CONSTEXPR InstrumentRequest::InstrumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_type_)*/0} {}
struct InstrumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentRequestDefaultTypeInternal() {}
  union {
    InstrumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentRequestDefaultTypeInternal _InstrumentRequest_default_instance_;
PROTOBUF_CONSTEXPR InstrumentsRequest::InstrumentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instrument_status_)*/0} {}
struct InstrumentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentsRequestDefaultTypeInternal() {}
  union {
    InstrumentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentsRequestDefaultTypeInternal _InstrumentsRequest_default_instance_;
PROTOBUF_CONSTEXPR FilterOptionsRequest::FilterOptionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.basic_asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basic_asset_position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FilterOptionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterOptionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterOptionsRequestDefaultTypeInternal() {}
  union {
    FilterOptionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterOptionsRequestDefaultTypeInternal _FilterOptionsRequest_default_instance_;
PROTOBUF_CONSTEXPR BondResponse::BondResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BondResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondResponseDefaultTypeInternal() {}
  union {
    BondResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondResponseDefaultTypeInternal _BondResponse_default_instance_;
PROTOBUF_CONSTEXPR BondsResponse::BondsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BondsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondsResponseDefaultTypeInternal() {}
  union {
    BondsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondsResponseDefaultTypeInternal _BondsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBondCouponsRequest::GetBondCouponsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr} {}
struct GetBondCouponsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondCouponsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondCouponsRequestDefaultTypeInternal() {}
  union {
    GetBondCouponsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondCouponsRequestDefaultTypeInternal _GetBondCouponsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBondCouponsResponse::GetBondCouponsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBondCouponsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondCouponsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondCouponsResponseDefaultTypeInternal() {}
  union {
    GetBondCouponsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondCouponsResponseDefaultTypeInternal _GetBondCouponsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBondEventsRequest::GetBondEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct GetBondEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsRequestDefaultTypeInternal() {}
  union {
    GetBondEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsRequestDefaultTypeInternal _GetBondEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execution_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.convert_to_fin_tool_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_date_)*/nullptr
  , /*decltype(_impl_.event_total_vol_)*/nullptr
  , /*decltype(_impl_.fix_date_)*/nullptr
  , /*decltype(_impl_.rate_date_)*/nullptr
  , /*decltype(_impl_.default_date_)*/nullptr
  , /*decltype(_impl_.real_pay_date_)*/nullptr
  , /*decltype(_impl_.pay_date_)*/nullptr
  , /*decltype(_impl_.pay_one_bond_)*/nullptr
  , /*decltype(_impl_.money_flow_val_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.coupon_start_date_)*/nullptr
  , /*decltype(_impl_.coupon_end_date_)*/nullptr
  , /*decltype(_impl_.coupon_interest_rate_)*/nullptr
  , /*decltype(_impl_.event_number_)*/0
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.coupon_period_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBondEventsResponse_BondEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsResponse_BondEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsResponse_BondEventDefaultTypeInternal() {}
  union {
    GetBondEventsResponse_BondEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsResponse_BondEventDefaultTypeInternal _GetBondEventsResponse_BondEvent_default_instance_;
PROTOBUF_CONSTEXPR GetBondEventsResponse::GetBondEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBondEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsResponseDefaultTypeInternal() {}
  union {
    GetBondEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsResponseDefaultTypeInternal _GetBondEventsResponse_default_instance_;
PROTOBUF_CONSTEXPR Coupon::Coupon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coupon_date_)*/nullptr
  , /*decltype(_impl_.fix_date_)*/nullptr
  , /*decltype(_impl_.pay_one_bond_)*/nullptr
  , /*decltype(_impl_.coupon_start_date_)*/nullptr
  , /*decltype(_impl_.coupon_end_date_)*/nullptr
  , /*decltype(_impl_.coupon_number_)*/int64_t{0}
  , /*decltype(_impl_.coupon_type_)*/0
  , /*decltype(_impl_.coupon_period_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CouponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CouponDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CouponDefaultTypeInternal() {}
  union {
    Coupon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CouponDefaultTypeInternal _Coupon_default_instance_;
PROTOBUF_CONSTEXPR CurrencyResponse::CurrencyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrencyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyResponseDefaultTypeInternal() {}
  union {
    CurrencyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyResponseDefaultTypeInternal _CurrencyResponse_default_instance_;
PROTOBUF_CONSTEXPR CurrenciesResponse::CurrenciesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrenciesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrenciesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrenciesResponseDefaultTypeInternal() {}
  union {
    CurrenciesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrenciesResponseDefaultTypeInternal _CurrenciesResponse_default_instance_;
PROTOBUF_CONSTEXPR EtfResponse::EtfResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EtfResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfResponseDefaultTypeInternal() {}
  union {
    EtfResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfResponseDefaultTypeInternal _EtfResponse_default_instance_;
PROTOBUF_CONSTEXPR EtfsResponse::EtfsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EtfsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfsResponseDefaultTypeInternal() {}
  union {
    EtfsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfsResponseDefaultTypeInternal _EtfsResponse_default_instance_;
PROTOBUF_CONSTEXPR FutureResponse::FutureResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FutureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FutureResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FutureResponseDefaultTypeInternal() {}
  union {
    FutureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FutureResponseDefaultTypeInternal _FutureResponse_default_instance_;
PROTOBUF_CONSTEXPR FuturesResponse::FuturesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FuturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuturesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuturesResponseDefaultTypeInternal() {}
  union {
    FuturesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuturesResponseDefaultTypeInternal _FuturesResponse_default_instance_;
PROTOBUF_CONSTEXPR OptionResponse::OptionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionResponseDefaultTypeInternal() {}
  union {
    OptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionResponseDefaultTypeInternal _OptionResponse_default_instance_;
PROTOBUF_CONSTEXPR OptionsResponse::OptionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionsResponseDefaultTypeInternal() {}
  union {
    OptionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionsResponseDefaultTypeInternal _OptionsResponse_default_instance_;
PROTOBUF_CONSTEXPR Option::Option(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basic_asset_position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.settlement_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basic_asset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.basic_asset_size_)*/nullptr
  , /*decltype(_impl_.klong_)*/nullptr
  , /*decltype(_impl_.kshort_)*/nullptr
  , /*decltype(_impl_.dlong_)*/nullptr
  , /*decltype(_impl_.dshort_)*/nullptr
  , /*decltype(_impl_.dlong_min_)*/nullptr
  , /*decltype(_impl_.dshort_min_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.strike_price_)*/nullptr
  , /*decltype(_impl_.expiration_date_)*/nullptr
  , /*decltype(_impl_.first_trade_date_)*/nullptr
  , /*decltype(_impl_.last_trade_date_)*/nullptr
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.real_exchange_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.payment_type_)*/0
  , /*decltype(_impl_.style_)*/0
  , /*decltype(_impl_.settlement_type_)*/0
  , /*decltype(_impl_.lot_)*/0
  , /*decltype(_impl_.short_enabled_flag_)*/false
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionDefaultTypeInternal() {}
  union {
    Option _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionDefaultTypeInternal _Option_default_instance_;
PROTOBUF_CONSTEXPR ShareResponse::ShareResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShareResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareResponseDefaultTypeInternal() {}
  union {
    ShareResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareResponseDefaultTypeInternal _ShareResponse_default_instance_;
PROTOBUF_CONSTEXPR SharesResponse::SharesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SharesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharesResponseDefaultTypeInternal() {}
  union {
    SharesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharesResponseDefaultTypeInternal _SharesResponse_default_instance_;
PROTOBUF_CONSTEXPR Bond::Bond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issue_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.klong_)*/nullptr
  , /*decltype(_impl_.kshort_)*/nullptr
  , /*decltype(_impl_.dlong_)*/nullptr
  , /*decltype(_impl_.dshort_)*/nullptr
  , /*decltype(_impl_.dlong_min_)*/nullptr
  , /*decltype(_impl_.dshort_min_)*/nullptr
  , /*decltype(_impl_.maturity_date_)*/nullptr
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_.initial_nominal_)*/nullptr
  , /*decltype(_impl_.state_reg_date_)*/nullptr
  , /*decltype(_impl_.placement_date_)*/nullptr
  , /*decltype(_impl_.placement_price_)*/nullptr
  , /*decltype(_impl_.aci_value_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.lot_)*/0
  , /*decltype(_impl_.coupon_quantity_per_year_)*/0
  , /*decltype(_impl_.short_enabled_flag_)*/false
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.issue_size_)*/int64_t{0}
  , /*decltype(_impl_.issue_size_plan_)*/int64_t{0}
  , /*decltype(_impl_.floating_coupon_flag_)*/false
  , /*decltype(_impl_.perpetual_flag_)*/false
  , /*decltype(_impl_.amortization_flag_)*/false
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.real_exchange_)*/0
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_.subordinated_flag_)*/false
  , /*decltype(_impl_.liquidity_flag_)*/false
  , /*decltype(_impl_.risk_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondDefaultTypeInternal() {}
  union {
    Bond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondDefaultTypeInternal _Bond_default_instance_;
PROTOBUF_CONSTEXPR Currency::Currency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iso_currency_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.klong_)*/nullptr
  , /*decltype(_impl_.kshort_)*/nullptr
  , /*decltype(_impl_.dlong_)*/nullptr
  , /*decltype(_impl_.dshort_)*/nullptr
  , /*decltype(_impl_.dlong_min_)*/nullptr
  , /*decltype(_impl_.dshort_min_)*/nullptr
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.lot_)*/0
  , /*decltype(_impl_.short_enabled_flag_)*/false
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.real_exchange_)*/0
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyDefaultTypeInternal() {}
  union {
    Currency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyDefaultTypeInternal _Currency_default_instance_;
PROTOBUF_CONSTEXPR Etf::Etf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.focus_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rebalancing_freq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.klong_)*/nullptr
  , /*decltype(_impl_.kshort_)*/nullptr
  , /*decltype(_impl_.dlong_)*/nullptr
  , /*decltype(_impl_.dshort_)*/nullptr
  , /*decltype(_impl_.dlong_min_)*/nullptr
  , /*decltype(_impl_.dshort_min_)*/nullptr
  , /*decltype(_impl_.fixed_commission_)*/nullptr
  , /*decltype(_impl_.released_date_)*/nullptr
  , /*decltype(_impl_.num_shares_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.lot_)*/0
  , /*decltype(_impl_.short_enabled_flag_)*/false
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.real_exchange_)*/0
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_.liquidity_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfDefaultTypeInternal() {}
  union {
    Etf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfDefaultTypeInternal _Etf_default_instance_;
PROTOBUF_CONSTEXPR Future::Future(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.futures_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basic_asset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basic_asset_position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.klong_)*/nullptr
  , /*decltype(_impl_.kshort_)*/nullptr
  , /*decltype(_impl_.dlong_)*/nullptr
  , /*decltype(_impl_.dshort_)*/nullptr
  , /*decltype(_impl_.dlong_min_)*/nullptr
  , /*decltype(_impl_.dshort_min_)*/nullptr
  , /*decltype(_impl_.first_trade_date_)*/nullptr
  , /*decltype(_impl_.last_trade_date_)*/nullptr
  , /*decltype(_impl_.basic_asset_size_)*/nullptr
  , /*decltype(_impl_.expiration_date_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.initial_margin_on_buy_)*/nullptr
  , /*decltype(_impl_.initial_margin_on_sell_)*/nullptr
  , /*decltype(_impl_.min_price_increment_amount_)*/nullptr
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.lot_)*/0
  , /*decltype(_impl_.short_enabled_flag_)*/false
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.real_exchange_)*/0
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FutureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FutureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FutureDefaultTypeInternal() {}
  union {
    Future _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FutureDefaultTypeInternal _Future_default_instance_;
PROTOBUF_CONSTEXPR Share::Share(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.klong_)*/nullptr
  , /*decltype(_impl_.kshort_)*/nullptr
  , /*decltype(_impl_.dlong_)*/nullptr
  , /*decltype(_impl_.dshort_)*/nullptr
  , /*decltype(_impl_.dlong_min_)*/nullptr
  , /*decltype(_impl_.dshort_min_)*/nullptr
  , /*decltype(_impl_.ipo_date_)*/nullptr
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.issue_size_)*/int64_t{0}
  , /*decltype(_impl_.lot_)*/0
  , /*decltype(_impl_.short_enabled_flag_)*/false
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_.issue_size_plan_)*/int64_t{0}
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.share_type_)*/0
  , /*decltype(_impl_.real_exchange_)*/0
  , /*decltype(_impl_.div_yield_flag_)*/false
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_.liquidity_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareDefaultTypeInternal() {}
  union {
    Share _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareDefaultTypeInternal _Share_default_instance_;
PROTOBUF_CONSTEXPR GetAccruedInterestsRequest::GetAccruedInterestsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccruedInterestsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccruedInterestsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccruedInterestsRequestDefaultTypeInternal() {}
  union {
    GetAccruedInterestsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccruedInterestsRequestDefaultTypeInternal _GetAccruedInterestsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAccruedInterestsResponse::GetAccruedInterestsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accrued_interests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccruedInterestsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccruedInterestsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccruedInterestsResponseDefaultTypeInternal() {}
  union {
    GetAccruedInterestsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccruedInterestsResponseDefaultTypeInternal _GetAccruedInterestsResponse_default_instance_;
PROTOBUF_CONSTEXPR AccruedInterest::AccruedInterest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.value_percent_)*/nullptr
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccruedInterestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccruedInterestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccruedInterestDefaultTypeInternal() {}
  union {
    AccruedInterest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccruedInterestDefaultTypeInternal _AccruedInterest_default_instance_;
PROTOBUF_CONSTEXPR GetFuturesMarginRequest::GetFuturesMarginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFuturesMarginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFuturesMarginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFuturesMarginRequestDefaultTypeInternal() {}
  union {
    GetFuturesMarginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFuturesMarginRequestDefaultTypeInternal _GetFuturesMarginRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFuturesMarginResponse::GetFuturesMarginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.initial_margin_on_buy_)*/nullptr
  , /*decltype(_impl_.initial_margin_on_sell_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.min_price_increment_amount_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFuturesMarginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFuturesMarginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFuturesMarginResponseDefaultTypeInternal() {}
  union {
    GetFuturesMarginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFuturesMarginResponseDefaultTypeInternal _GetFuturesMarginResponse_default_instance_;
PROTOBUF_CONSTEXPR InstrumentResponse::InstrumentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentResponseDefaultTypeInternal() {}
  union {
    InstrumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentResponseDefaultTypeInternal _InstrumentResponse_default_instance_;
PROTOBUF_CONSTEXPR Instrument::Instrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.klong_)*/nullptr
  , /*decltype(_impl_.kshort_)*/nullptr
  , /*decltype(_impl_.dlong_)*/nullptr
  , /*decltype(_impl_.dshort_)*/nullptr
  , /*decltype(_impl_.dlong_min_)*/nullptr
  , /*decltype(_impl_.dshort_min_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.lot_)*/0
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.short_enabled_flag_)*/false
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_.real_exchange_)*/0
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentDefaultTypeInternal() {}
  union {
    Instrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentDefaultTypeInternal _Instrument_default_instance_;
PROTOBUF_CONSTEXPR GetDividendsRequest::GetDividendsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr} {}
struct GetDividendsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsRequestDefaultTypeInternal() {}
  union {
    GetDividendsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsRequestDefaultTypeInternal _GetDividendsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDividendsResponse::GetDividendsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dividends_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDividendsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsResponseDefaultTypeInternal() {}
  union {
    GetDividendsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsResponseDefaultTypeInternal _GetDividendsResponse_default_instance_;
PROTOBUF_CONSTEXPR Dividend::Dividend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dividend_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.regularity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dividend_net_)*/nullptr
  , /*decltype(_impl_.payment_date_)*/nullptr
  , /*decltype(_impl_.declared_date_)*/nullptr
  , /*decltype(_impl_.last_buy_date_)*/nullptr
  , /*decltype(_impl_.record_date_)*/nullptr
  , /*decltype(_impl_.close_price_)*/nullptr
  , /*decltype(_impl_.yield_value_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DividendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DividendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DividendDefaultTypeInternal() {}
  union {
    Dividend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DividendDefaultTypeInternal _Dividend_default_instance_;
PROTOBUF_CONSTEXPR AssetRequest::AssetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetRequestDefaultTypeInternal() {}
  union {
    AssetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetRequestDefaultTypeInternal _AssetRequest_default_instance_;
PROTOBUF_CONSTEXPR AssetResponse::AssetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetResponseDefaultTypeInternal() {}
  union {
    AssetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetResponseDefaultTypeInternal _AssetResponse_default_instance_;
PROTOBUF_CONSTEXPR AssetsRequest::AssetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instrument_type_)*/0} {}
struct AssetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetsRequestDefaultTypeInternal() {}
  union {
    AssetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetsRequestDefaultTypeInternal _AssetsRequest_default_instance_;
PROTOBUF_CONSTEXPR AssetsResponse::AssetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.assets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetsResponseDefaultTypeInternal() {}
  union {
    AssetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetsResponseDefaultTypeInternal _AssetsResponse_default_instance_;
PROTOBUF_CONSTEXPR AssetFull::AssetFull(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.required_tests_)*/{}
  , /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_brief_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gos_reg_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cfi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_nsd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.br_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.br_code_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.brand_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.ext_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AssetFullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetFullDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetFullDefaultTypeInternal() {}
  union {
    AssetFull _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetFullDefaultTypeInternal _AssetFull_default_instance_;
PROTOBUF_CONSTEXPR Asset::Asset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetDefaultTypeInternal _Asset_default_instance_;
PROTOBUF_CONSTEXPR AssetCurrency::AssetCurrency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetCurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetCurrencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetCurrencyDefaultTypeInternal() {}
  union {
    AssetCurrency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetCurrencyDefaultTypeInternal _AssetCurrency_default_instance_;
PROTOBUF_CONSTEXPR AssetSecurity::AssetSecurity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_.ext_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AssetSecurityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetSecurityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetSecurityDefaultTypeInternal() {}
  union {
    AssetSecurity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetSecurityDefaultTypeInternal _AssetSecurity_default_instance_;
PROTOBUF_CONSTEXPR AssetShare::AssetShare(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nominal_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.primary_index_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferred_share_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issue_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.repres_isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issue_size_)*/nullptr
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_.dividend_rate_)*/nullptr
  , /*decltype(_impl_.ipo_date_)*/nullptr
  , /*decltype(_impl_.registry_date_)*/nullptr
  , /*decltype(_impl_.placement_date_)*/nullptr
  , /*decltype(_impl_.issue_size_plan_)*/nullptr
  , /*decltype(_impl_.total_float_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.div_yield_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetShareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetShareDefaultTypeInternal() {}
  union {
    AssetShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetShareDefaultTypeInternal _AssetShare_default_instance_;
PROTOBUF_CONSTEXPR AssetBond::AssetBond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.borrow_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nominal_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issue_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interest_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_condition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_nominal_)*/nullptr
  , /*decltype(_impl_.issue_size_)*/nullptr
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_.maturity_date_)*/nullptr
  , /*decltype(_impl_.state_reg_date_)*/nullptr
  , /*decltype(_impl_.placement_date_)*/nullptr
  , /*decltype(_impl_.placement_price_)*/nullptr
  , /*decltype(_impl_.issue_size_plan_)*/nullptr
  , /*decltype(_impl_.coupon_quantity_per_year_)*/0
  , /*decltype(_impl_.indexed_nominal_flag_)*/false
  , /*decltype(_impl_.subordinated_flag_)*/false
  , /*decltype(_impl_.collateral_flag_)*/false
  , /*decltype(_impl_.tax_free_flag_)*/false
  , /*decltype(_impl_.amortization_flag_)*/false
  , /*decltype(_impl_.floating_coupon_flag_)*/false
  , /*decltype(_impl_.perpetual_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetBondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetBondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetBondDefaultTypeInternal() {}
  union {
    AssetBond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetBondDefaultTypeInternal _AssetBond_default_instance_;
PROTOBUF_CONSTEXPR AssetStructuredProduct::AssetStructuredProduct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.borrow_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nominal_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logic_portfolio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basic_asset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issue_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_.safety_barrier_)*/nullptr
  , /*decltype(_impl_.maturity_date_)*/nullptr
  , /*decltype(_impl_.issue_size_plan_)*/nullptr
  , /*decltype(_impl_.issue_size_)*/nullptr
  , /*decltype(_impl_.placement_date_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.asset_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetStructuredProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetStructuredProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetStructuredProductDefaultTypeInternal() {}
  union {
    AssetStructuredProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetStructuredProductDefaultTypeInternal _AssetStructuredProduct_default_instance_;
PROTOBUF_CONSTEXPR AssetEtf::AssetEtf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rebalancing_dates_)*/{}
  , /*decltype(_impl_.payment_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rebalancing_freq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.management_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.primary_index_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.focus_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.primary_index_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.primary_index_company_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inav_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rebalancing_plan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tax_rate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issue_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nominal_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_expense_)*/nullptr
  , /*decltype(_impl_.hurdle_rate_)*/nullptr
  , /*decltype(_impl_.performance_fee_)*/nullptr
  , /*decltype(_impl_.fixed_commission_)*/nullptr
  , /*decltype(_impl_.buy_premium_)*/nullptr
  , /*decltype(_impl_.sell_discount_)*/nullptr
  , /*decltype(_impl_.num_share_)*/nullptr
  , /*decltype(_impl_.released_date_)*/nullptr
  , /*decltype(_impl_.index_recovery_period_)*/nullptr
  , /*decltype(_impl_.expense_commission_)*/nullptr
  , /*decltype(_impl_.primary_index_tracking_error_)*/nullptr
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_.watermark_flag_)*/false
  , /*decltype(_impl_.rebalancing_flag_)*/false
  , /*decltype(_impl_.leveraged_flag_)*/false
  , /*decltype(_impl_.ucits_flag_)*/false
  , /*decltype(_impl_.div_yield_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetEtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetEtfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetEtfDefaultTypeInternal() {}
  union {
    AssetEtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetEtfDefaultTypeInternal _AssetEtf_default_instance_;
PROTOBUF_CONSTEXPR AssetClearingCertificate::AssetClearingCertificate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nominal_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nominal_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetClearingCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetClearingCertificateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetClearingCertificateDefaultTypeInternal() {}
  union {
    AssetClearingCertificate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetClearingCertificateDefaultTypeInternal _AssetClearingCertificate_default_instance_;
PROTOBUF_CONSTEXPR Brand::Brand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.company_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_of_risk_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BrandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrandDefaultTypeInternal() {}
  union {
    Brand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrandDefaultTypeInternal _Brand_default_instance_;
PROTOBUF_CONSTEXPR AssetInstrument::AssetInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetInstrumentDefaultTypeInternal() {}
  union {
    AssetInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetInstrumentDefaultTypeInternal _AssetInstrument_default_instance_;
PROTOBUF_CONSTEXPR InstrumentLink::InstrumentLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentLinkDefaultTypeInternal() {}
  union {
    InstrumentLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentLinkDefaultTypeInternal _InstrumentLink_default_instance_;
PROTOBUF_CONSTEXPR GetFavoritesRequest::GetFavoritesRequest(
    ::_pbi::ConstantInitialized) {}
struct GetFavoritesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFavoritesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFavoritesRequestDefaultTypeInternal() {}
  union {
    GetFavoritesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFavoritesRequestDefaultTypeInternal _GetFavoritesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFavoritesResponse::GetFavoritesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.favorite_instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFavoritesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFavoritesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFavoritesResponseDefaultTypeInternal() {}
  union {
    GetFavoritesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFavoritesResponseDefaultTypeInternal _GetFavoritesResponse_default_instance_;
PROTOBUF_CONSTEXPR FavoriteInstrument::FavoriteInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.otc_flag_)*/false
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FavoriteInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FavoriteInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FavoriteInstrumentDefaultTypeInternal() {}
  union {
    FavoriteInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FavoriteInstrumentDefaultTypeInternal _FavoriteInstrument_default_instance_;
PROTOBUF_CONSTEXPR EditFavoritesRequest::EditFavoritesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.action_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EditFavoritesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesRequestDefaultTypeInternal() {}
  union {
    EditFavoritesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesRequestDefaultTypeInternal _EditFavoritesRequest_default_instance_;
PROTOBUF_CONSTEXPR EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct EditFavoritesRequestInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesRequestInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesRequestInstrumentDefaultTypeInternal() {}
  union {
    EditFavoritesRequestInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesRequestInstrumentDefaultTypeInternal _EditFavoritesRequestInstrument_default_instance_;
PROTOBUF_CONSTEXPR EditFavoritesResponse::EditFavoritesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.favorite_instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EditFavoritesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesResponseDefaultTypeInternal() {}
  union {
    EditFavoritesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesResponseDefaultTypeInternal _EditFavoritesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetCountriesRequest::GetCountriesRequest(
    ::_pbi::ConstantInitialized) {}
struct GetCountriesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCountriesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCountriesRequestDefaultTypeInternal() {}
  union {
    GetCountriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCountriesRequestDefaultTypeInternal _GetCountriesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCountriesResponse::GetCountriesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.countries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCountriesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCountriesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCountriesResponseDefaultTypeInternal() {}
  union {
    GetCountriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCountriesResponseDefaultTypeInternal _GetCountriesResponse_default_instance_;
PROTOBUF_CONSTEXPR IndicativesRequest::IndicativesRequest(
    ::_pbi::ConstantInitialized) {}
struct IndicativesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativesRequestDefaultTypeInternal() {}
  union {
    IndicativesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativesRequestDefaultTypeInternal _IndicativesRequest_default_instance_;
PROTOBUF_CONSTEXPR IndicativesResponse::IndicativesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndicativesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativesResponseDefaultTypeInternal() {}
  union {
    IndicativesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativesResponseDefaultTypeInternal _IndicativesResponse_default_instance_;
PROTOBUF_CONSTEXPR IndicativeResponse::IndicativeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_.buy_available_flag_)*/false
  , /*decltype(_impl_.sell_available_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndicativeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativeResponseDefaultTypeInternal() {}
  union {
    IndicativeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativeResponseDefaultTypeInternal _IndicativeResponse_default_instance_;
PROTOBUF_CONSTEXPR CountryResponse::CountryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alfa_two_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alfa_three_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_brief_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CountryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountryResponseDefaultTypeInternal() {}
  union {
    CountryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountryResponseDefaultTypeInternal _CountryResponse_default_instance_;
PROTOBUF_CONSTEXPR FindInstrumentRequest::FindInstrumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_.api_trade_available_flag_)*/false} {}
struct FindInstrumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindInstrumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindInstrumentRequestDefaultTypeInternal() {}
  union {
    FindInstrumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindInstrumentRequestDefaultTypeInternal _FindInstrumentRequest_default_instance_;
PROTOBUF_CONSTEXPR FindInstrumentResponse::FindInstrumentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindInstrumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindInstrumentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindInstrumentResponseDefaultTypeInternal() {}
  union {
    FindInstrumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindInstrumentResponseDefaultTypeInternal _FindInstrumentResponse_default_instance_;
PROTOBUF_CONSTEXPR InstrumentShort::InstrumentShort(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.first_1min_candle_date_)*/nullptr
  , /*decltype(_impl_.first_1day_candle_date_)*/nullptr
  , /*decltype(_impl_.instrument_kind_)*/0
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.for_iis_flag_)*/false
  , /*decltype(_impl_.for_qual_investor_flag_)*/false
  , /*decltype(_impl_.weekend_flag_)*/false
  , /*decltype(_impl_.blocked_tca_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentShortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentShortDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentShortDefaultTypeInternal() {}
  union {
    InstrumentShort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentShortDefaultTypeInternal _InstrumentShort_default_instance_;
PROTOBUF_CONSTEXPR GetBrandsRequest::GetBrandsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paging_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBrandsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandsRequestDefaultTypeInternal() {}
  union {
    GetBrandsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandsRequestDefaultTypeInternal _GetBrandsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBrandRequest::GetBrandRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBrandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandRequestDefaultTypeInternal() {}
  union {
    GetBrandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandRequestDefaultTypeInternal _GetBrandRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBrandsResponse::GetBrandsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brands_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBrandsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandsResponseDefaultTypeInternal() {}
  union {
    GetBrandsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandsResponseDefaultTypeInternal _GetBrandsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.assets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssetFundamentalsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsRequestDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsRequestDefaultTypeInternal _GetAssetFundamentalsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domicile_indicator_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ex_dividend_date_)*/nullptr
  , /*decltype(_impl_.fiscal_period_start_date_)*/nullptr
  , /*decltype(_impl_.fiscal_period_end_date_)*/nullptr
  , /*decltype(_impl_.market_capitalization_)*/0
  , /*decltype(_impl_.high_price_last_52_weeks_)*/0
  , /*decltype(_impl_.low_price_last_52_weeks_)*/0
  , /*decltype(_impl_.average_daily_volume_last_10_days_)*/0
  , /*decltype(_impl_.average_daily_volume_last_4_weeks_)*/0
  , /*decltype(_impl_.beta_)*/0
  , /*decltype(_impl_.free_float_)*/0
  , /*decltype(_impl_.forward_annual_dividend_yield_)*/0
  , /*decltype(_impl_.shares_outstanding_)*/0
  , /*decltype(_impl_.revenue_ttm_)*/0
  , /*decltype(_impl_.ebitda_ttm_)*/0
  , /*decltype(_impl_.net_income_ttm_)*/0
  , /*decltype(_impl_.eps_ttm_)*/0
  , /*decltype(_impl_.diluted_eps_ttm_)*/0
  , /*decltype(_impl_.free_cash_flow_ttm_)*/0
  , /*decltype(_impl_.five_year_annual_revenue_growth_rate_)*/0
  , /*decltype(_impl_.three_year_annual_revenue_growth_rate_)*/0
  , /*decltype(_impl_.pe_ratio_ttm_)*/0
  , /*decltype(_impl_.price_to_sales_ttm_)*/0
  , /*decltype(_impl_.price_to_book_ttm_)*/0
  , /*decltype(_impl_.price_to_free_cash_flow_ttm_)*/0
  , /*decltype(_impl_.total_enterprise_value_mrq_)*/0
  , /*decltype(_impl_.ev_to_ebitda_mrq_)*/0
  , /*decltype(_impl_.net_margin_mrq_)*/0
  , /*decltype(_impl_.net_interest_margin_mrq_)*/0
  , /*decltype(_impl_.roe_)*/0
  , /*decltype(_impl_.roa_)*/0
  , /*decltype(_impl_.roic_)*/0
  , /*decltype(_impl_.total_debt_mrq_)*/0
  , /*decltype(_impl_.total_debt_to_equity_mrq_)*/0
  , /*decltype(_impl_.total_debt_to_ebitda_mrq_)*/0
  , /*decltype(_impl_.free_cash_flow_to_price_)*/0
  , /*decltype(_impl_.net_debt_to_ebitda_)*/0
  , /*decltype(_impl_.current_ratio_mrq_)*/0
  , /*decltype(_impl_.fixed_charge_coverage_ratio_fy_)*/0
  , /*decltype(_impl_.dividend_yield_daily_ttm_)*/0
  , /*decltype(_impl_.dividend_rate_ttm_)*/0
  , /*decltype(_impl_.dividends_per_share_)*/0
  , /*decltype(_impl_.five_years_average_dividend_yield_)*/0
  , /*decltype(_impl_.five_year_annual_dividend_growth_rate_)*/0
  , /*decltype(_impl_.dividend_payout_ratio_fy_)*/0
  , /*decltype(_impl_.buy_back_ttm_)*/0
  , /*decltype(_impl_.one_year_annual_revenue_growth_rate_)*/0
  , /*decltype(_impl_.adr_to_common_share_ratio_)*/0
  , /*decltype(_impl_.number_of_employees_)*/0
  , /*decltype(_impl_.revenue_change_five_years_)*/0
  , /*decltype(_impl_.eps_change_five_years_)*/0
  , /*decltype(_impl_.ebitda_change_five_years_)*/0
  , /*decltype(_impl_.total_debt_change_five_years_)*/0
  , /*decltype(_impl_.ev_to_sales_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsResponse_StatisticResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal _GetAssetFundamentalsResponse_StatisticResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fundamentals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssetFundamentalsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsResponseDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsResponseDefaultTypeInternal _GetAssetFundamentalsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAssetReportsRequest::GetAssetReportsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr} {}
struct GetAssetReportsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsRequestDefaultTypeInternal() {}
  union {
    GetAssetReportsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsRequestDefaultTypeInternal _GetAssetReportsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.report_date_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.period_year_)*/0
  , /*decltype(_impl_.period_num_)*/0
  , /*decltype(_impl_.period_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal() {}
  union {
    GetAssetReportsResponse_GetAssetReportsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal _GetAssetReportsResponse_GetAssetReportsEvent_default_instance_;
PROTOBUF_CONSTEXPR GetAssetReportsResponse::GetAssetReportsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssetReportsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsResponseDefaultTypeInternal() {}
  union {
    GetAssetReportsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsResponseDefaultTypeInternal _GetAssetReportsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetConsensusForecastsRequest::GetConsensusForecastsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct GetConsensusForecastsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsRequestDefaultTypeInternal() {}
  union {
    GetConsensusForecastsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsRequestDefaultTypeInternal _GetConsensusForecastsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.best_target_price_)*/nullptr
  , /*decltype(_impl_.best_target_low_)*/nullptr
  , /*decltype(_impl_.best_target_high_)*/nullptr
  , /*decltype(_impl_.prognosis_date_)*/nullptr
  , /*decltype(_impl_.total_buy_recommend_)*/0
  , /*decltype(_impl_.total_hold_recommend_)*/0
  , /*decltype(_impl_.total_sell_recommend_)*/0
  , /*decltype(_impl_.consensus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal() {}
  union {
    GetConsensusForecastsResponse_ConsensusForecastsItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal _GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_;
PROTOBUF_CONSTEXPR GetConsensusForecastsResponse::GetConsensusForecastsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.page_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConsensusForecastsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsResponseDefaultTypeInternal() {}
  union {
    GetConsensusForecastsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsResponseDefaultTypeInternal _GetConsensusForecastsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetForecastRequest::GetForecastRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetForecastRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastRequestDefaultTypeInternal() {}
  union {
    GetForecastRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastRequestDefaultTypeInternal _GetForecastRequest_default_instance_;
PROTOBUF_CONSTEXPR GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.company_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.show_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recommendation_date_)*/nullptr
  , /*decltype(_impl_.current_price_)*/nullptr
  , /*decltype(_impl_.target_price_)*/nullptr
  , /*decltype(_impl_.price_change_)*/nullptr
  , /*decltype(_impl_.price_change_rel_)*/nullptr
  , /*decltype(_impl_.recommendation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetForecastResponse_TargetItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponse_TargetItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponse_TargetItemDefaultTypeInternal() {}
  union {
    GetForecastResponse_TargetItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponse_TargetItemDefaultTypeInternal _GetForecastResponse_TargetItem_default_instance_;
PROTOBUF_CONSTEXPR GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_price_)*/nullptr
  , /*decltype(_impl_.consensus_)*/nullptr
  , /*decltype(_impl_.min_target_)*/nullptr
  , /*decltype(_impl_.max_target_)*/nullptr
  , /*decltype(_impl_.price_change_)*/nullptr
  , /*decltype(_impl_.price_change_rel_)*/nullptr
  , /*decltype(_impl_.recommendation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetForecastResponse_ConsensusItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponse_ConsensusItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponse_ConsensusItemDefaultTypeInternal() {}
  union {
    GetForecastResponse_ConsensusItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponse_ConsensusItemDefaultTypeInternal _GetForecastResponse_ConsensusItem_default_instance_;
PROTOBUF_CONSTEXPR GetForecastResponse::GetForecastResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_.consensus_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetForecastResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponseDefaultTypeInternal() {}
  union {
    GetForecastResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponseDefaultTypeInternal _GetForecastResponse_default_instance_;
PROTOBUF_CONSTEXPR TradingInterval_TimeInterval::TradingInterval_TimeInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.end_ts_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradingInterval_TimeIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingInterval_TimeIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingInterval_TimeIntervalDefaultTypeInternal() {}
  union {
    TradingInterval_TimeInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingInterval_TimeIntervalDefaultTypeInternal _TradingInterval_TimeInterval_default_instance_;
PROTOBUF_CONSTEXPR TradingInterval::TradingInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradingIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingIntervalDefaultTypeInternal() {}
  union {
    TradingInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingIntervalDefaultTypeInternal _TradingInterval_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_instruments_2eproto[90];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_instruments_2eproto[16];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_instruments_2eproto = nullptr;

const uint32_t TableStruct_instruments_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.to_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, _impl_.exchanges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _impl_.days_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.is_trading_day_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.opening_auction_start_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.closing_auction_end_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_opening_auction_start_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_start_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_end_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.clearing_start_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.clearing_end_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.premarket_start_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.premarket_end_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.closing_auction_start_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.opening_auction_end_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.intervals_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.id_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.id_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _impl_.instrument_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_.basic_asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_.basic_asset_position_uid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondsResponse, _impl_.instruments_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.instrument_id_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.type_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_number_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_total_vol_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.fix_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.rate_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.default_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.real_pay_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.pay_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.pay_one_bond_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.money_flow_val_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.execution_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.operation_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.convert_to_fin_tool_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_start_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_end_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_period_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_interest_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, _impl_.events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_number_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.fix_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.pay_one_bond_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_start_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_end_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfsResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FuturesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FuturesResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionsResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.real_exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.payment_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.settlement_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.settlement_currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.asset_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.country_of_risk_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.sector_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.brand_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.lot_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_size_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.klong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.kshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dlong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dlong_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dshort_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.strike_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.expiration_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_trade_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.last_trade_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.short_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.sell_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.blocked_tca_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.api_trade_available_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SharesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SharesResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.lot_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.klong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.kshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dlong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dlong_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dshort_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.short_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.coupon_quantity_per_year_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.maturity_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.initial_nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.state_reg_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.placement_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.placement_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.aci_value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.country_of_risk_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.sector_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_size_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_size_plan_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.sell_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.floating_coupon_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.perpetual_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.amortization_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.real_exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.blocked_tca_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.subordinated_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.liquidity_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.risk_level_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.brand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.lot_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.klong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.kshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dlong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dlong_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dshort_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.short_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.country_of_risk_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.sell_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.iso_currency_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.real_exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.blocked_tca_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.brand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.lot_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.klong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.kshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dlong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dlong_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dshort_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.short_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.fixed_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.focus_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.released_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.num_shares_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.country_of_risk_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.sector_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.rebalancing_freq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.sell_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.real_exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.blocked_tca_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.liquidity_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.brand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.lot_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.klong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.kshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dlong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dlong_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dshort_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.short_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_trade_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.last_trade_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.futures_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.asset_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_size_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.country_of_risk_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.sector_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.expiration_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.sell_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.real_exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.blocked_tca_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.initial_margin_on_buy_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.initial_margin_on_sell_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.min_price_increment_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.brand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.lot_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.klong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.kshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dlong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dlong_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dshort_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.short_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.ipo_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.issue_size_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.country_of_risk_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.sector_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.issue_size_plan_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.sell_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.div_yield_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.share_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.real_exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.blocked_tca_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.liquidity_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.brand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, _impl_.accrued_interests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.value_percent_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.nominal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.initial_margin_on_buy_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.initial_margin_on_sell_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.min_price_increment_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.lot_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.klong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.kshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dlong_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dshort_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dlong_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dshort_min_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.short_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.country_of_risk_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.sell_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.min_price_increment_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.real_exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.blocked_tca_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.instrument_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.brand_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.instrument_id_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, _impl_.dividends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.dividend_net_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.payment_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.declared_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.last_buy_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.dividend_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.record_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.regularity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.close_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.yield_value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _impl_.asset_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _impl_.instrument_type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsResponse, _impl_.assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.name_brief_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.required_tests_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.gos_reg_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.cfi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.code_nsd_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.brand_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.br_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.br_code_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.instruments_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetCurrency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetCurrency, _impl_.base_currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.instrument_kind_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_size_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.nominal_currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.primary_index_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.dividend_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.preferred_share_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.ipo_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.registry_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.div_yield_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.placement_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.repres_isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_size_plan_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.total_float_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.current_nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.borrow_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_size_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.nominal_currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.interest_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.coupon_quantity_per_year_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.indexed_nominal_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.subordinated_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.collateral_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.tax_free_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.amortization_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.floating_coupon_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.perpetual_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.maturity_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.return_condition_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.state_reg_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.placement_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.placement_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_size_plan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.borrow_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.nominal_currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.logic_portfolio_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.asset_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.basic_asset_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.safety_barrier_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.maturity_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_size_plan_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_size_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.placement_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.total_expense_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.hurdle_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.performance_fee_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.fixed_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.payment_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.watermark_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.buy_premium_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.sell_discount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_freq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.management_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.focus_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.leveraged_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.num_share_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.ucits_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.released_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_description_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_company_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.index_recovery_period_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.inav_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.div_yield_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.expense_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_tracking_error_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_plan_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.tax_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_dates_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.issue_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.nominal_currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_.nominal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_.nominal_currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.company_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.sector_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.country_of_risk_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.country_of_risk_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.links_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.instrument_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.position_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _impl_.instrument_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, _impl_.favorite_instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.otc_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.instrument_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _impl_.instruments_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_.instrument_id_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, _impl_.favorite_instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, _impl_.countries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.instrument_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.buy_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.sell_available_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.alfa_two_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.alfa_three_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.name_brief_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.instrument_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.api_trade_available_flag_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.isin_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.class_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.instrument_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.position_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.instrument_kind_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.for_iis_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.first_1min_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.first_1day_candle_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.for_qual_investor_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.weekend_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.blocked_tca_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _impl_.paging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_.brands_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_.paging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, _impl_.assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.market_capitalization_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.high_price_last_52_weeks_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.low_price_last_52_weeks_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_10_days_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_4_weeks_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.beta_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_float_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.forward_annual_dividend_yield_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.shares_outstanding_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_income_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.diluted_eps_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_revenue_growth_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.three_year_annual_revenue_growth_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.pe_ratio_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_sales_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_book_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_free_cash_flow_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_enterprise_value_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_ebitda_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_margin_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_interest_margin_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roe_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roa_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roic_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_equity_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_ebitda_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_to_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_debt_to_ebitda_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.current_ratio_mrq_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fixed_charge_coverage_ratio_fy_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_yield_daily_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_rate_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividends_per_share_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_years_average_dividend_yield_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_dividend_growth_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_payout_ratio_fy_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.buy_back_ttm_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.one_year_annual_revenue_growth_rate_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.domicile_indicator_code_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.adr_to_common_share_ratio_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.number_of_employees_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_start_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_end_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_change_five_years_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_change_five_years_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_change_five_years_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_change_five_years_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, _impl_.fundamentals_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.to_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _impl_.paging_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.asset_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_low_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_high_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.prognosis_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_.page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.company_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.recommendation_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.recommendation_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.current_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.target_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.price_change_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.price_change_rel_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.show_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.ticker_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.recommendation_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.current_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.consensus_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.min_target_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.max_target_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.price_change_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.price_change_rel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_.targets_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_.consensus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_.start_ts_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_.end_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_.interval_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest)},
  { 12, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse)},
  { 19, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedule)},
  { 27, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingDay)},
  { 49, 58, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest)},
  { 61, 68, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest)},
  { 69, 77, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest)},
  { 79, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BondResponse)},
  { 86, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BondsResponse)},
  { 93, 103, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest)},
  { 107, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse)},
  { 114, 124, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest)},
  { 128, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent)},
  { 155, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse)},
  { 162, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Coupon)},
  { 177, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse)},
  { 184, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse)},
  { 191, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EtfResponse)},
  { 198, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EtfsResponse)},
  { 205, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FutureResponse)},
  { 212, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FuturesResponse)},
  { 219, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OptionResponse)},
  { 226, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OptionsResponse)},
  { 233, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Option)},
  { 284, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::ShareResponse)},
  { 291, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SharesResponse)},
  { 298, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Bond)},
  { 356, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Currency)},
  { 397, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Etf)},
  { 444, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Future)},
  { 494, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Share)},
  { 542, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest)},
  { 552, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse)},
  { 559, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AccruedInterest)},
  { 569, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest)},
  { 577, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse)},
  { 587, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse)},
  { 594, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Instrument)},
  { 636, 646, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest)},
  { 650, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse)},
  { 657, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Dividend)},
  { 673, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetRequest)},
  { 680, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetResponse)},
  { 687, 694, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetsRequest)},
  { 695, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetsResponse)},
  { 702, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetFull)},
  { 727, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Asset)},
  { 737, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetCurrency)},
  { 744, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetSecurity)},
  { 759, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetShare)},
  { 780, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetBond)},
  { 807, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct)},
  { 826, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetEtf)},
  { 863, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate)},
  { 871, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Brand)},
  { 885, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetInstrument)},
  { 899, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentLink)},
  { 907, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest)},
  { 913, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse)},
  { 920, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument)},
  { 936, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest)},
  { 944, 952, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument)},
  { 954, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse)},
  { 961, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest)},
  { 967, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse)},
  { 974, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativesRequest)},
  { 980, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse)},
  { 987, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse)},
  { 1003, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CountryResponse)},
  { 1013, 1022, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest)},
  { 1025, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse)},
  { 1032, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentShort)},
  { 1054, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest)},
  { 1061, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest)},
  { 1068, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse)},
  { 1076, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest)},
  { 1083, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse)},
  { 1145, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse)},
  { 1152, 1161, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest)},
  { 1164, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent)},
  { 1176, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse)},
  { 1183, 1190, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest)},
  { 1191, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem)},
  { 1209, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse)},
  { 1217, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest)},
  { 1224, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem)},
  { 1241, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem)},
  { 1257, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse)},
  { 1265, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval)},
  { 1273, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingInterval)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_TradingSchedulesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradingSchedulesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradingSchedule_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradingDay_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InstrumentRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InstrumentsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_FilterOptionsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_BondResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_BondsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBondCouponsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBondCouponsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsResponse_BondEvent_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Coupon_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CurrencyResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CurrenciesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_EtfResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_EtfsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_FutureResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_FuturesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OptionResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OptionsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Option_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_ShareResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SharesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Bond_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Currency_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Etf_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Future_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Share_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAccruedInterestsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAccruedInterestsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AccruedInterest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetFuturesMarginRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetFuturesMarginResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InstrumentResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Instrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetDividendsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetDividendsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Dividend_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetFull_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Asset_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetCurrency_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetSecurity_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetShare_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetBond_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetStructuredProduct_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetEtf_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetClearingCertificate_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Brand_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_AssetInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InstrumentLink_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetFavoritesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetFavoritesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_FavoriteInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesRequestInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetCountriesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetCountriesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_IndicativesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_IndicativesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_IndicativeResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CountryResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_FindInstrumentRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_FindInstrumentResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InstrumentShort_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBrandsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBrandRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetBrandsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsResponse_StatisticResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsResponse_GetAssetReportsEvent_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetForecastRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_TargetItem_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_ConsensusItem_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradingInterval_TimeInterval_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradingInterval_default_instance_._instance,
};

const char descriptor_table_protodef_instruments_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021instruments.proto\022&tinkoff.public_.inv"
  "est.api.contract.v1\032\037google/protobuf/tim"
  "estamp.proto\032\014common.proto\032\037google/api/f"
  "ield_behavior.proto\"\251\001\n\027TradingSchedules"
  "Request\022\025\n\010exchange\030\001 \001(\tH\000\210\001\001\022-\n\004from\030\002"
  " \001(\0132\032.google.protobuf.TimestampH\001\210\001\001\022+\n"
  "\002to\030\003 \001(\0132\032.google.protobuf.TimestampH\002\210"
  "\001\001B\013\n\t_exchangeB\007\n\005_fromB\005\n\003_to\"f\n\030Tradi"
  "ngSchedulesResponse\022J\n\texchanges\030\001 \003(\01327"
  ".tinkoff.public_.invest.api.contract.v1."
  "TradingSchedule\"e\n\017TradingSchedule\022\020\n\010ex"
  "change\030\001 \001(\t\022@\n\004days\030\002 \003(\01322.tinkoff.pub"
  "lic_.invest.api.contract.v1.TradingDay\"\230"
  "\007\n\nTradingDay\022(\n\004date\030\001 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\026\n\016is_trading_day\030\002 \001(\010\022"
  ".\n\nstart_time\030\003 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022,\n\010end_time\030\004 \001(\0132\032.google.proto"
  "buf.Timestamp\022>\n\032opening_auction_start_t"
  "ime\030\007 \001(\0132\032.google.protobuf.Timestamp\022<\n"
  "\030closing_auction_end_time\030\010 \001(\0132\032.google"
  ".protobuf.Timestamp\022F\n\"evening_opening_a"
  "uction_start_time\030\t \001(\0132\032.google.protobu"
  "f.Timestamp\0226\n\022evening_start_time\030\n \001(\0132"
  "\032.google.protobuf.Timestamp\0224\n\020evening_e"
  "nd_time\030\013 \001(\0132\032.google.protobuf.Timestam"
  "p\0227\n\023clearing_start_time\030\014 \001(\0132\032.google."
  "protobuf.Timestamp\0225\n\021clearing_end_time\030"
  "\r \001(\0132\032.google.protobuf.Timestamp\0228\n\024pre"
  "market_start_time\030\016 \001(\0132\032.google.protobu"
  "f.Timestamp\0226\n\022premarket_end_time\030\017 \001(\0132"
  "\032.google.protobuf.Timestamp\022>\n\032closing_a"
  "uction_start_time\030\020 \001(\0132\032.google.protobu"
  "f.Timestamp\022<\n\030opening_auction_end_time\030"
  "\021 \001(\0132\032.google.protobuf.Timestamp\022J\n\tint"
  "ervals\030\022 \003(\01327.tinkoff.public_.invest.ap"
  "i.contract.v1.TradingIntervalJ\004\010\005\020\006J\004\010\006\020"
  "\007\"\234\001\n\021InstrumentRequest\022N\n\007id_type\030\001 \001(\016"
  "28.tinkoff.public_.invest.api.contract.v"
  "1.InstrumentIdTypeB\003\340A\002\022\027\n\nclass_code\030\002 "
  "\001(\tH\000\210\001\001\022\017\n\002id\030\003 \001(\tB\003\340A\002B\r\n\013_class_code"
  "\"\204\001\n\022InstrumentsRequest\022X\n\021instrument_st"
  "atus\030\001 \001(\01628.tinkoff.public_.invest.api."
  "contract.v1.InstrumentStatusH\000\210\001\001B\024\n\022_in"
  "strument_status\"\214\001\n\024FilterOptionsRequest"
  "\022\034\n\017basic_asset_uid\030\001 \001(\tH\000\210\001\001\022%\n\030basic_"
  "asset_position_uid\030\002 \001(\tH\001\210\001\001B\022\n\020_basic_"
  "asset_uidB\033\n\031_basic_asset_position_uid\"P"
  "\n\014BondResponse\022@\n\ninstrument\030\001 \001(\0132,.tin"
  "koff.public_.invest.api.contract.v1.Bond"
  "\"R\n\rBondsResponse\022A\n\013instruments\030\001 \003(\0132,"
  ".tinkoff.public_.invest.api.contract.v1."
  "Bond\"\261\001\n\025GetBondCouponsRequest\022\020\n\004figi\030\001"
  " \001(\tB\002\030\001\022-\n\004from\030\002 \001(\0132\032.google.protobuf"
  ".TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.google.pro"
  "tobuf.TimestampH\001\210\001\001\022\032\n\rinstrument_id\030\004 "
  "\001(\tB\003\340A\002B\007\n\005_fromB\005\n\003_to\"X\n\026GetBondCoupo"
  "nsResponse\022>\n\006events\030\001 \003(\0132..tinkoff.pub"
  "lic_.invest.api.contract.v1.Coupon\"\357\002\n\024G"
  "etBondEventsRequest\022-\n\004from\030\002 \001(\0132\032.goog"
  "le.protobuf.TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032"
  ".google.protobuf.TimestampH\001\210\001\001\022\032\n\rinstr"
  "ument_id\030\004 \001(\tB\003\340A\002\022T\n\004type\030\005 \001(\0162F.tink"
  "off.public_.invest.api.contract.v1.GetBo"
  "ndEventsRequest.EventType\"y\n\tEventType\022\032"
  "\n\026EVENT_TYPE_UNSPECIFIED\020\000\022\022\n\016EVENT_TYPE"
  "_CPN\020\001\022\023\n\017EVENT_TYPE_CALL\020\002\022\022\n\016EVENT_TYP"
  "E_MTY\020\003\022\023\n\017EVENT_TYPE_CONV\020\004B\007\n\005_fromB\005\n"
  "\003_to\"\370\010\n\025GetBondEventsResponse\022W\n\006events"
  "\030\001 \003(\0132G.tinkoff.public_.invest.api.cont"
  "ract.v1.GetBondEventsResponse.BondEvent\032"
  "\205\010\n\tBondEvent\022\025\n\rinstrument_id\030\002 \001(\t\022\024\n\014"
  "event_number\030\003 \001(\005\022.\n\nevent_date\030\004 \001(\0132\032"
  ".google.protobuf.Timestamp\022Z\n\nevent_type"
  "\030\005 \001(\0162F.tinkoff.public_.invest.api.cont"
  "ract.v1.GetBondEventsRequest.EventType\022J"
  "\n\017event_total_vol\030\006 \001(\01321.tinkoff.public"
  "_.invest.api.contract.v1.Quotation\022,\n\010fi"
  "x_date\030\007 \001(\0132\032.google.protobuf.Timestamp"
  "\022-\n\trate_date\030\010 \001(\0132\032.google.protobuf.Ti"
  "mestamp\0220\n\014default_date\030\t \001(\0132\032.google.p"
  "rotobuf.Timestamp\0221\n\rreal_pay_date\030\n \001(\013"
  "2\032.google.protobuf.Timestamp\022,\n\010pay_date"
  "\030\013 \001(\0132\032.google.protobuf.Timestamp\022H\n\014pa"
  "y_one_bond\030\014 \001(\01322.tinkoff.public_.inves"
  "t.api.contract.v1.MoneyValue\022J\n\016money_fl"
  "ow_val\030\r \001(\01322.tinkoff.public_.invest.ap"
  "i.contract.v1.MoneyValue\022\021\n\texecution\030\016 "
  "\001(\t\022\026\n\016operation_type\030\017 \001(\t\022@\n\005value\030\020 \001"
  "(\01321.tinkoff.public_.invest.api.contract"
  ".v1.Quotation\022\014\n\004note\030\021 \001(\t\022\036\n\026convert_t"
  "o_fin_tool_id\030\022 \001(\t\0225\n\021coupon_start_date"
  "\030\023 \001(\0132\032.google.protobuf.Timestamp\0223\n\017co"
  "upon_end_date\030\024 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\025\n\rcoupon_period\030\025 \001(\005\022O\n\024coupon"
  "_interest_rate\030\026 \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.Quotation\"\242\003\n\006Coup"
  "on\022\014\n\004figi\030\001 \001(\t\022/\n\013coupon_date\030\002 \001(\0132\032."
  "google.protobuf.Timestamp\022\025\n\rcoupon_numb"
  "er\030\003 \001(\003\022,\n\010fix_date\030\004 \001(\0132\032.google.prot"
  "obuf.Timestamp\022H\n\014pay_one_bond\030\005 \001(\01322.t"
  "inkoff.public_.invest.api.contract.v1.Mo"
  "neyValue\022G\n\013coupon_type\030\006 \001(\01622.tinkoff."
  "public_.invest.api.contract.v1.CouponTyp"
  "e\0225\n\021coupon_start_date\030\007 \001(\0132\032.google.pr"
  "otobuf.Timestamp\0223\n\017coupon_end_date\030\010 \001("
  "\0132\032.google.protobuf.Timestamp\022\025\n\rcoupon_"
  "period\030\t \001(\005\"X\n\020CurrencyResponse\022D\n\ninst"
  "rument\030\001 \001(\01320.tinkoff.public_.invest.ap"
  "i.contract.v1.Currency\"[\n\022CurrenciesResp"
  "onse\022E\n\013instruments\030\001 \003(\01320.tinkoff.publ"
  "ic_.invest.api.contract.v1.Currency\"N\n\013E"
  "tfResponse\022\?\n\ninstrument\030\001 \001(\0132+.tinkoff"
  ".public_.invest.api.contract.v1.Etf\"P\n\014E"
  "tfsResponse\022@\n\013instruments\030\001 \003(\0132+.tinko"
  "ff.public_.invest.api.contract.v1.Etf\"T\n"
  "\016FutureResponse\022B\n\ninstrument\030\001 \001(\0132..ti"
  "nkoff.public_.invest.api.contract.v1.Fut"
  "ure\"V\n\017FuturesResponse\022C\n\013instruments\030\001 "
  "\003(\0132..tinkoff.public_.invest.api.contrac"
  "t.v1.Future\"T\n\016OptionResponse\022B\n\ninstrum"
  "ent\030\001 \001(\0132..tinkoff.public_.invest.api.c"
  "ontract.v1.Option\"V\n\017OptionsResponse\022C\n\013"
  "instruments\030\001 \003(\0132..tinkoff.public_.inve"
  "st.api.contract.v1.Option\"\377\017\n\006Option\022\013\n\003"
  "uid\030\001 \001(\t\022\024\n\014position_uid\030\002 \001(\t\022\016\n\006ticke"
  "r\030\003 \001(\t\022\022\n\nclass_code\030\004 \001(\t\022 \n\030basic_ass"
  "et_position_uid\030\005 \001(\t\022U\n\016trading_status\030"
  "\025 \001(\0162=.tinkoff.public_.invest.api.contr"
  "act.v1.SecurityTradingStatus\022K\n\rreal_exc"
  "hange\030\037 \001(\01624.tinkoff.public_.invest.api"
  ".contract.v1.RealExchange\022J\n\tdirection\030)"
  " \001(\01627.tinkoff.public_.invest.api.contra"
  "ct.v1.OptionDirection\022O\n\014payment_type\030* "
  "\001(\01629.tinkoff.public_.invest.api.contrac"
  "t.v1.OptionPaymentType\022B\n\005style\030+ \001(\01623."
  "tinkoff.public_.invest.api.contract.v1.O"
  "ptionStyle\022U\n\017settlement_type\030, \001(\0162<.ti"
  "nkoff.public_.invest.api.contract.v1.Opt"
  "ionSettlementType\022\014\n\004name\030e \001(\t\022\020\n\010curre"
  "ncy\030o \001(\t\022\033\n\023settlement_currency\030p \001(\t\022\023"
  "\n\nasset_type\030\203\001 \001(\t\022\024\n\013basic_asset\030\204\001 \001("
  "\t\022\021\n\010exchange\030\215\001 \001(\t\022\030\n\017country_of_risk\030"
  "\227\001 \001(\t\022\035\n\024country_of_risk_name\030\230\001 \001(\t\022\017\n"
  "\006sector\030\241\001 \001(\t\022A\n\005brand\030\242\001 \001(\01321.tinkoff"
  ".public_.invest.api.contract.v1.BrandDat"
  "a\022\014\n\003lot\030\311\001 \001(\005\022L\n\020basic_asset_size\030\323\001 \001"
  "(\01321.tinkoff.public_.invest.api.contract"
  ".v1.Quotation\022A\n\005klong\030\335\001 \001(\01321.tinkoff."
  "public_.invest.api.contract.v1.Quotation"
  "\022B\n\006kshort\030\336\001 \001(\01321.tinkoff.public_.inve"
  "st.api.contract.v1.Quotation\022A\n\005dlong\030\337\001"
  " \001(\01321.tinkoff.public_.invest.api.contra"
  "ct.v1.Quotation\022B\n\006dshort\030\340\001 \001(\01321.tinko"
  "ff.public_.invest.api.contract.v1.Quotat"
  "ion\022E\n\tdlong_min\030\341\001 \001(\01321.tinkoff.public"
  "_.invest.api.contract.v1.Quotation\022F\n\nds"
  "hort_min\030\342\001 \001(\01321.tinkoff.public_.invest"
  ".api.contract.v1.Quotation\022O\n\023min_price_"
  "increment\030\347\001 \001(\01321.tinkoff.public_.inves"
  "t.api.contract.v1.Quotation\022I\n\014strike_pr"
  "ice\030\361\001 \001(\01322.tinkoff.public_.invest.api."
  "contract.v1.MoneyValue\0224\n\017expiration_dat"
  "e\030\255\002 \001(\0132\032.google.protobuf.Timestamp\0225\n\020"
  "first_trade_date\030\267\002 \001(\0132\032.google.protobu"
  "f.Timestamp\0224\n\017last_trade_date\030\270\002 \001(\0132\032."
  "google.protobuf.Timestamp\022;\n\026first_1min_"
  "candle_date\030\301\002 \001(\0132\032.google.protobuf.Tim"
  "estamp\022;\n\026first_1day_candle_date\030\302\002 \001(\0132"
  "\032.google.protobuf.Timestamp\022\033\n\022short_ena"
  "bled_flag\030\221\003 \001(\010\022\025\n\014for_iis_flag\030\222\003 \001(\010\022"
  "\021\n\010otc_flag\030\223\003 \001(\010\022\033\n\022buy_available_flag"
  "\030\224\003 \001(\010\022\034\n\023sell_available_flag\030\225\003 \001(\010\022\037\n"
  "\026for_qual_investor_flag\030\226\003 \001(\010\022\025\n\014weeken"
  "d_flag\030\227\003 \001(\010\022\031\n\020blocked_tca_flag\030\230\003 \001(\010"
  "\022!\n\030api_trade_available_flag\030\231\003 \001(\010\"R\n\rS"
  "hareResponse\022A\n\ninstrument\030\001 \001(\0132-.tinko"
  "ff.public_.invest.api.contract.v1.Share\""
  "T\n\016SharesResponse\022B\n\013instruments\030\001 \003(\0132-"
  ".tinkoff.public_.invest.api.contract.v1."
  "Share\"\245\020\n\004Bond\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002"
  " \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\013"
  "\n\003lot\030\005 \001(\005\022\020\n\010currency\030\006 \001(\t\022@\n\005klong\030\007"
  " \001(\01321.tinkoff.public_.invest.api.contra"
  "ct.v1.Quotation\022A\n\006kshort\030\010 \001(\01321.tinkof"
  "f.public_.invest.api.contract.v1.Quotati"
  "on\022@\n\005dlong\030\t \001(\01321.tinkoff.public_.inve"
  "st.api.contract.v1.Quotation\022A\n\006dshort\030\n"
  " \001(\01321.tinkoff.public_.invest.api.contra"
  "ct.v1.Quotation\022D\n\tdlong_min\030\013 \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\022E\n\ndshort_min\030\014 \001(\01321.tinkoff.publ"
  "ic_.invest.api.contract.v1.Quotation\022\032\n\022"
  "short_enabled_flag\030\r \001(\010\022\014\n\004name\030\017 \001(\t\022\020"
  "\n\010exchange\030\020 \001(\t\022 \n\030coupon_quantity_per_"
  "year\030\021 \001(\005\0221\n\rmaturity_date\030\022 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022C\n\007nominal\030\023 \001(\01322"
  ".tinkoff.public_.invest.api.contract.v1."
  "MoneyValue\022K\n\017initial_nominal\030\024 \001(\01322.ti"
  "nkoff.public_.invest.api.contract.v1.Mon"
  "eyValue\0222\n\016state_reg_date\030\025 \001(\0132\032.google"
  ".protobuf.Timestamp\0222\n\016placement_date\030\026 "
  "\001(\0132\032.google.protobuf.Timestamp\022K\n\017place"
  "ment_price\030\027 \001(\01322.tinkoff.public_.inves"
  "t.api.contract.v1.MoneyValue\022E\n\taci_valu"
  "e\030\030 \001(\01322.tinkoff.public_.invest.api.con"
  "tract.v1.MoneyValue\022\027\n\017country_of_risk\030\031"
  " \001(\t\022\034\n\024country_of_risk_name\030\032 \001(\t\022\016\n\006se"
  "ctor\030\033 \001(\t\022\022\n\nissue_kind\030\034 \001(\t\022\022\n\nissue_"
  "size\030\035 \001(\003\022\027\n\017issue_size_plan\030\036 \001(\003\022U\n\016t"
  "rading_status\030\037 \001(\0162=.tinkoff.public_.in"
  "vest.api.contract.v1.SecurityTradingStat"
  "us\022\020\n\010otc_flag\030  \001(\010\022\032\n\022buy_available_fl"
  "ag\030! \001(\010\022\033\n\023sell_available_flag\030\" \001(\010\022\034\n"
  "\024floating_coupon_flag\030# \001(\010\022\026\n\016perpetual"
  "_flag\030$ \001(\010\022\031\n\021amortization_flag\030% \001(\010\022N"
  "\n\023min_price_increment\030& \001(\01321.tinkoff.pu"
  "blic_.invest.api.contract.v1.Quotation\022 "
  "\n\030api_trade_available_flag\030\' \001(\010\022\013\n\003uid\030"
  "( \001(\t\022K\n\rreal_exchange\030) \001(\01624.tinkoff.p"
  "ublic_.invest.api.contract.v1.RealExchan"
  "ge\022\024\n\014position_uid\030* \001(\t\022\021\n\tasset_uid\030+ "
  "\001(\t\022\024\n\014for_iis_flag\0303 \001(\010\022\036\n\026for_qual_in"
  "vestor_flag\0304 \001(\010\022\024\n\014weekend_flag\0305 \001(\010\022"
  "\030\n\020blocked_tca_flag\0306 \001(\010\022\031\n\021subordinate"
  "d_flag\0307 \001(\010\022\026\n\016liquidity_flag\0308 \001(\010\022:\n\026"
  "first_1min_candle_date\030= \001(\0132\032.google.pr"
  "otobuf.Timestamp\022:\n\026first_1day_candle_da"
  "te\030> \001(\0132\032.google.protobuf.Timestamp\022E\n\n"
  "risk_level\030\? \001(\01621.tinkoff.public_.inves"
  "t.api.contract.v1.RiskLevel\022@\n\005brand\030@ \001"
  "(\01321.tinkoff.public_.invest.api.contract"
  ".v1.BrandData\"\367\n\n\010Currency\022\014\n\004figi\030\001 \001(\t"
  "\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004"
  "isin\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030\006 \001("
  "\t\022@\n\005klong\030\007 \001(\01321.tinkoff.public_.inves"
  "t.api.contract.v1.Quotation\022A\n\006kshort\030\010 "
  "\001(\01321.tinkoff.public_.invest.api.contrac"
  "t.v1.Quotation\022@\n\005dlong\030\t \001(\01321.tinkoff."
  "public_.invest.api.contract.v1.Quotation"
  "\022A\n\006dshort\030\n \001(\01321.tinkoff.public_.inves"
  "t.api.contract.v1.Quotation\022D\n\tdlong_min"
  "\030\013 \001(\01321.tinkoff.public_.invest.api.cont"
  "ract.v1.Quotation\022E\n\ndshort_min\030\014 \001(\01321."
  "tinkoff.public_.invest.api.contract.v1.Q"
  "uotation\022\032\n\022short_enabled_flag\030\r \001(\010\022\014\n\004"
  "name\030\017 \001(\t\022\020\n\010exchange\030\020 \001(\t\022C\n\007nominal\030"
  "\021 \001(\01322.tinkoff.public_.invest.api.contr"
  "act.v1.MoneyValue\022\027\n\017country_of_risk\030\022 \001"
  "(\t\022\034\n\024country_of_risk_name\030\023 \001(\t\022U\n\016trad"
  "ing_status\030\024 \001(\0162=.tinkoff.public_.inves"
  "t.api.contract.v1.SecurityTradingStatus\022"
  "\020\n\010otc_flag\030\025 \001(\010\022\032\n\022buy_available_flag\030"
  "\026 \001(\010\022\033\n\023sell_available_flag\030\027 \001(\010\022\031\n\021is"
  "o_currency_name\030\030 \001(\t\022N\n\023min_price_incre"
  "ment\030\031 \001(\01321.tinkoff.public_.invest.api."
  "contract.v1.Quotation\022 \n\030api_trade_avail"
  "able_flag\030\032 \001(\010\022\013\n\003uid\030\033 \001(\t\022K\n\rreal_exc"
  "hange\030\034 \001(\01624.tinkoff.public_.invest.api"
  ".contract.v1.RealExchange\022\024\n\014position_ui"
  "d\030\035 \001(\t\022\024\n\014for_iis_flag\030) \001(\010\022\036\n\026for_qua"
  "l_investor_flag\0304 \001(\010\022\024\n\014weekend_flag\0305 "
  "\001(\010\022\030\n\020blocked_tca_flag\0306 \001(\010\022:\n\026first_1"
  "min_candle_date\0308 \001(\0132\032.google.protobuf."
  "Timestamp\022:\n\026first_1day_candle_date\0309 \001("
  "\0132\032.google.protobuf.Timestamp\022@\n\005brand\030<"
  " \001(\01321.tinkoff.public_.invest.api.contra"
  "ct.v1.BrandData\"\302\014\n\003Etf\022\014\n\004figi\030\001 \001(\t\022\016\n"
  "\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004isi"
  "n\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030\006 \001(\t\022@"
  "\n\005klong\030\007 \001(\01321.tinkoff.public_.invest.a"
  "pi.contract.v1.Quotation\022A\n\006kshort\030\010 \001(\013"
  "21.tinkoff.public_.invest.api.contract.v"
  "1.Quotation\022@\n\005dlong\030\t \001(\01321.tinkoff.pub"
  "lic_.invest.api.contract.v1.Quotation\022A\n"
  "\006dshort\030\n \001(\01321.tinkoff.public_.invest.a"
  "pi.contract.v1.Quotation\022D\n\tdlong_min\030\013 "
  "\001(\01321.tinkoff.public_.invest.api.contrac"
  "t.v1.Quotation\022E\n\ndshort_min\030\014 \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\022\032\n\022short_enabled_flag\030\r \001(\010\022\014\n\004nam"
  "e\030\017 \001(\t\022\020\n\010exchange\030\020 \001(\t\022K\n\020fixed_commi"
  "ssion\030\021 \001(\01321.tinkoff.public_.invest.api"
  ".contract.v1.Quotation\022\022\n\nfocus_type\030\022 \001"
  "(\t\0221\n\rreleased_date\030\023 \001(\0132\032.google.proto"
  "buf.Timestamp\022E\n\nnum_shares\030\024 \001(\01321.tink"
  "off.public_.invest.api.contract.v1.Quota"
  "tion\022\027\n\017country_of_risk\030\025 \001(\t\022\034\n\024country"
  "_of_risk_name\030\026 \001(\t\022\016\n\006sector\030\027 \001(\t\022\030\n\020r"
  "ebalancing_freq\030\030 \001(\t\022U\n\016trading_status\030"
  "\031 \001(\0162=.tinkoff.public_.invest.api.contr"
  "act.v1.SecurityTradingStatus\022\020\n\010otc_flag"
  "\030\032 \001(\010\022\032\n\022buy_available_flag\030\033 \001(\010\022\033\n\023se"
  "ll_available_flag\030\034 \001(\010\022N\n\023min_price_inc"
  "rement\030\035 \001(\01321.tinkoff.public_.invest.ap"
  "i.contract.v1.Quotation\022 \n\030api_trade_ava"
  "ilable_flag\030\036 \001(\010\022\013\n\003uid\030\037 \001(\t\022K\n\rreal_e"
  "xchange\030  \001(\01624.tinkoff.public_.invest.a"
  "pi.contract.v1.RealExchange\022\024\n\014position_"
  "uid\030! \001(\t\022\021\n\tasset_uid\030\" \001(\t\022\024\n\014for_iis_"
  "flag\030) \001(\010\022\036\n\026for_qual_investor_flag\030* \001"
  "(\010\022\024\n\014weekend_flag\030+ \001(\010\022\030\n\020blocked_tca_"
  "flag\030, \001(\010\022\026\n\016liquidity_flag\030- \001(\010\022:\n\026fi"
  "rst_1min_candle_date\0308 \001(\0132\032.google.prot"
  "obuf.Timestamp\022:\n\026first_1day_candle_date"
  "\0309 \001(\0132\032.google.protobuf.Timestamp\022@\n\005br"
  "and\030< \001(\01321.tinkoff.public_.invest.api.c"
  "ontract.v1.BrandData\"\343\016\n\006Future\022\014\n\004figi\030"
  "\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001("
  "\t\022\013\n\003lot\030\004 \001(\005\022\020\n\010currency\030\005 \001(\t\022@\n\005klon"
  "g\030\006 \001(\01321.tinkoff.public_.invest.api.con"
  "tract.v1.Quotation\022A\n\006kshort\030\007 \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\022@\n\005dlong\030\010 \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.Quotation\022A\n\006dshor"
  "t\030\t \001(\01321.tinkoff.public_.invest.api.con"
  "tract.v1.Quotation\022D\n\tdlong_min\030\n \001(\01321."
  "tinkoff.public_.invest.api.contract.v1.Q"
  "uotation\022E\n\ndshort_min\030\013 \001(\01321.tinkoff.p"
  "ublic_.invest.api.contract.v1.Quotation\022"
  "\032\n\022short_enabled_flag\030\014 \001(\010\022\014\n\004name\030\r \001("
  "\t\022\020\n\010exchange\030\016 \001(\t\0224\n\020first_trade_date\030"
  "\017 \001(\0132\032.google.protobuf.Timestamp\0223\n\017las"
  "t_trade_date\030\020 \001(\0132\032.google.protobuf.Tim"
  "estamp\022\024\n\014futures_type\030\021 \001(\t\022\022\n\nasset_ty"
  "pe\030\022 \001(\t\022\023\n\013basic_asset\030\023 \001(\t\022K\n\020basic_a"
  "sset_size\030\024 \001(\01321.tinkoff.public_.invest"
  ".api.contract.v1.Quotation\022\027\n\017country_of"
  "_risk\030\025 \001(\t\022\034\n\024country_of_risk_name\030\026 \001("
  "\t\022\016\n\006sector\030\027 \001(\t\0223\n\017expiration_date\030\030 \001"
  "(\0132\032.google.protobuf.Timestamp\022U\n\016tradin"
  "g_status\030\031 \001(\0162=.tinkoff.public_.invest."
  "api.contract.v1.SecurityTradingStatus\022\020\n"
  "\010otc_flag\030\032 \001(\010\022\032\n\022buy_available_flag\030\033 "
  "\001(\010\022\033\n\023sell_available_flag\030\034 \001(\010\022N\n\023min_"
  "price_increment\030\035 \001(\01321.tinkoff.public_."
  "invest.api.contract.v1.Quotation\022 \n\030api_"
  "trade_available_flag\030\036 \001(\010\022\013\n\003uid\030\037 \001(\t\022"
  "K\n\rreal_exchange\030  \001(\01624.tinkoff.public_"
  ".invest.api.contract.v1.RealExchange\022\024\n\014"
  "position_uid\030! \001(\t\022 \n\030basic_asset_positi"
  "on_uid\030\" \001(\t\022\024\n\014for_iis_flag\030) \001(\010\022\036\n\026fo"
  "r_qual_investor_flag\030* \001(\010\022\024\n\014weekend_fl"
  "ag\030+ \001(\010\022\030\n\020blocked_tca_flag\030, \001(\010\022:\n\026fi"
  "rst_1min_candle_date\0308 \001(\0132\032.google.prot"
  "obuf.Timestamp\022:\n\026first_1day_candle_date"
  "\0309 \001(\0132\032.google.protobuf.Timestamp\022Q\n\025in"
  "itial_margin_on_buy\030= \001(\01322.tinkoff.publ"
  "ic_.invest.api.contract.v1.MoneyValue\022R\n"
  "\026initial_margin_on_sell\030> \001(\01322.tinkoff."
  "public_.invest.api.contract.v1.MoneyValu"
  "e\022U\n\032min_price_increment_amount\030\? \001(\01321."
  "tinkoff.public_.invest.api.contract.v1.Q"
  "uotation\022@\n\005brand\030@ \001(\01321.tinkoff.public"
  "_.invest.api.contract.v1.BrandData\"\316\014\n\005S"
  "hare\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\ncl"
  "ass_code\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030\005 \001("
  "\005\022\020\n\010currency\030\006 \001(\t\022@\n\005klong\030\007 \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\022A\n\006kshort\030\010 \001(\01321.tinkoff.public_."
  "invest.api.contract.v1.Quotation\022@\n\005dlon"
  "g\030\t \001(\01321.tinkoff.public_.invest.api.con"
  "tract.v1.Quotation\022A\n\006dshort\030\n \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\022D\n\tdlong_min\030\013 \001(\01321.tinkoff.publi"
  "c_.invest.api.contract.v1.Quotation\022E\n\nd"
  "short_min\030\014 \001(\01321.tinkoff.public_.invest"
  ".api.contract.v1.Quotation\022\032\n\022short_enab"
  "led_flag\030\r \001(\010\022\014\n\004name\030\017 \001(\t\022\020\n\010exchange"
  "\030\020 \001(\t\022,\n\010ipo_date\030\021 \001(\0132\032.google.protob"
  "uf.Timestamp\022\022\n\nissue_size\030\022 \001(\003\022\027\n\017coun"
  "try_of_risk\030\023 \001(\t\022\034\n\024country_of_risk_nam"
  "e\030\024 \001(\t\022\016\n\006sector\030\025 \001(\t\022\027\n\017issue_size_pl"
  "an\030\026 \001(\003\022C\n\007nominal\030\027 \001(\01322.tinkoff.publ"
  "ic_.invest.api.contract.v1.MoneyValue\022U\n"
  "\016trading_status\030\031 \001(\0162=.tinkoff.public_."
  "invest.api.contract.v1.SecurityTradingSt"
  "atus\022\020\n\010otc_flag\030\032 \001(\010\022\032\n\022buy_available_"
  "flag\030\033 \001(\010\022\033\n\023sell_available_flag\030\034 \001(\010\022"
  "\026\n\016div_yield_flag\030\035 \001(\010\022E\n\nshare_type\030\036 "
  "\001(\01621.tinkoff.public_.invest.api.contrac"
  "t.v1.ShareType\022N\n\023min_price_increment\030\037 "
  "\001(\01321.tinkoff.public_.invest.api.contrac"
  "t.v1.Quotation\022 \n\030api_trade_available_fl"
  "ag\030  \001(\010\022\013\n\003uid\030! \001(\t\022K\n\rreal_exchange\030\""
  " \001(\01624.tinkoff.public_.invest.api.contra"
  "ct.v1.RealExchange\022\024\n\014position_uid\030# \001(\t"
  "\022\021\n\tasset_uid\030$ \001(\t\022\024\n\014for_iis_flag\030. \001("
  "\010\022\036\n\026for_qual_investor_flag\030/ \001(\010\022\024\n\014wee"
  "kend_flag\0300 \001(\010\022\030\n\020blocked_tca_flag\0301 \001("
  "\010\022\026\n\016liquidity_flag\0302 \001(\010\022:\n\026first_1min_"
  "candle_date\0308 \001(\0132\032.google.protobuf.Time"
  "stamp\022:\n\026first_1day_candle_date\0309 \001(\0132\032."
  "google.protobuf.Timestamp\022@\n\005brand\030< \001(\013"
  "21.tinkoff.public_.invest.api.contract.v"
  "1.BrandData\"\246\001\n\032GetAccruedInterestsReque"
  "st\022\020\n\004figi\030\001 \001(\tB\002\030\001\022-\n\004from\030\002 \001(\0132\032.goo"
  "gle.protobuf.TimestampB\003\340A\002\022+\n\002to\030\003 \001(\0132"
  "\032.google.protobuf.TimestampB\003\340A\002\022\032\n\rinst"
  "rument_id\030\004 \001(\tB\003\340A\002\"q\n\033GetAccruedIntere"
  "stsResponse\022R\n\021accrued_interests\030\001 \003(\01327"
  ".tinkoff.public_.invest.api.contract.v1."
  "AccruedInterest\"\213\002\n\017AccruedInterest\022(\n\004d"
  "ate\030\001 \001(\0132\032.google.protobuf.Timestamp\022@\n"
  "\005value\030\002 \001(\01321.tinkoff.public_.invest.ap"
  "i.contract.v1.Quotation\022H\n\rvalue_percent"
  "\030\003 \001(\01321.tinkoff.public_.invest.api.cont"
  "ract.v1.Quotation\022B\n\007nominal\030\004 \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\"G\n\027GetFuturesMarginRequest\022\020\n\004figi"
  "\030\001 \001(\tB\002\030\001\022\032\n\rinstrument_id\030\004 \001(\tB\003\340A\002\"\350"
  "\002\n\030GetFuturesMarginResponse\022Q\n\025initial_m"
  "argin_on_buy\030\001 \001(\01322.tinkoff.public_.inv"
  "est.api.contract.v1.MoneyValue\022R\n\026initia"
  "l_margin_on_sell\030\002 \001(\01322.tinkoff.public_"
  ".invest.api.contract.v1.MoneyValue\022N\n\023mi"
  "n_price_increment\030\003 \001(\01321.tinkoff.public"
  "_.invest.api.contract.v1.Quotation\022U\n\032mi"
  "n_price_increment_amount\030\004 \001(\01321.tinkoff"
  ".public_.invest.api.contract.v1.Quotatio"
  "n\"\\\n\022InstrumentResponse\022F\n\ninstrument\030\001 "
  "\001(\01322.tinkoff.public_.invest.api.contrac"
  "t.v1.Instrument\"\226\013\n\nInstrument\022\014\n\004figi\030\001"
  " \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t"
  "\022\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030"
  "\006 \001(\t\022@\n\005klong\030\007 \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.Quotation\022A\n\006kshor"
  "t\030\010 \001(\01321.tinkoff.public_.invest.api.con"
  "tract.v1.Quotation\022@\n\005dlong\030\t \001(\01321.tink"
  "off.public_.invest.api.contract.v1.Quota"
  "tion\022A\n\006dshort\030\n \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.Quotation\022D\n\tdlong"
  "_min\030\013 \001(\01321.tinkoff.public_.invest.api."
  "contract.v1.Quotation\022E\n\ndshort_min\030\014 \001("
  "\01321.tinkoff.public_.invest.api.contract."
  "v1.Quotation\022\032\n\022short_enabled_flag\030\r \001(\010"
  "\022\014\n\004name\030\016 \001(\t\022\020\n\010exchange\030\017 \001(\t\022\027\n\017coun"
  "try_of_risk\030\020 \001(\t\022\034\n\024country_of_risk_nam"
  "e\030\021 \001(\t\022\027\n\017instrument_type\030\022 \001(\t\022U\n\016trad"
  "ing_status\030\023 \001(\0162=.tinkoff.public_.inves"
  "t.api.contract.v1.SecurityTradingStatus\022"
  "\020\n\010otc_flag\030\024 \001(\010\022\032\n\022buy_available_flag\030"
  "\025 \001(\010\022\033\n\023sell_available_flag\030\026 \001(\010\022N\n\023mi"
  "n_price_increment\030\027 \001(\01321.tinkoff.public"
  "_.invest.api.contract.v1.Quotation\022 \n\030ap"
  "i_trade_available_flag\030\030 \001(\010\022\013\n\003uid\030\031 \001("
  "\t\022K\n\rreal_exchange\030\032 \001(\01624.tinkoff.publi"
  "c_.invest.api.contract.v1.RealExchange\022\024"
  "\n\014position_uid\030\033 \001(\t\022\021\n\tasset_uid\030\034 \001(\t\022"
  "\024\n\014for_iis_flag\030$ \001(\010\022\036\n\026for_qual_invest"
  "or_flag\030% \001(\010\022\024\n\014weekend_flag\030& \001(\010\022\030\n\020b"
  "locked_tca_flag\030\' \001(\010\022O\n\017instrument_kind"
  "\030( \001(\01626.tinkoff.public_.invest.api.cont"
  "ract.v1.InstrumentType\022:\n\026first_1min_can"
  "dle_date\0308 \001(\0132\032.google.protobuf.Timesta"
  "mp\022:\n\026first_1day_candle_date\0309 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022@\n\005brand\030< \001(\01321."
  "tinkoff.public_.invest.api.contract.v1.B"
  "randData\"\257\001\n\023GetDividendsRequest\022\020\n\004figi"
  "\030\001 \001(\tB\002\030\001\022-\n\004from\030\002 \001(\0132\032.google.protob"
  "uf.TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.google.p"
  "rotobuf.TimestampH\001\210\001\001\022\032\n\rinstrument_id\030"
  "\004 \001(\tB\003\340A\002B\007\n\005_fromB\005\n\003_to\"[\n\024GetDividen"
  "dsResponse\022C\n\tdividends\030\001 \003(\01320.tinkoff."
  "public_.invest.api.contract.v1.Dividend\""
  "\211\004\n\010Dividend\022H\n\014dividend_net\030\001 \001(\01322.tin"
  "koff.public_.invest.api.contract.v1.Mone"
  "yValue\0220\n\014payment_date\030\002 \001(\0132\032.google.pr"
  "otobuf.Timestamp\0221\n\rdeclared_date\030\003 \001(\0132"
  "\032.google.protobuf.Timestamp\0221\n\rlast_buy_"
  "date\030\004 \001(\0132\032.google.protobuf.Timestamp\022\025"
  "\n\rdividend_type\030\005 \001(\t\022/\n\013record_date\030\006 \001"
  "(\0132\032.google.protobuf.Timestamp\022\022\n\nregula"
  "rity\030\007 \001(\t\022G\n\013close_price\030\010 \001(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022F\n\013yield_value\030\t \001(\01321.tinkoff.publi"
  "c_.invest.api.contract.v1.Quotation\022.\n\nc"
  "reated_at\030\n \001(\0132\032.google.protobuf.Timest"
  "amp\"\037\n\014AssetRequest\022\017\n\002id\030\001 \001(\tB\003\340A\002\"Q\n\r"
  "AssetResponse\022@\n\005asset\030\001 \001(\01321.tinkoff.p"
  "ublic_.invest.api.contract.v1.AssetFull\""
  "y\n\rAssetsRequest\022T\n\017instrument_type\030\001 \001("
  "\01626.tinkoff.public_.invest.api.contract."
  "v1.InstrumentTypeH\000\210\001\001B\022\n\020_instrument_ty"
  "pe\"O\n\016AssetsResponse\022=\n\006assets\030\001 \003(\0132-.t"
  "inkoff.public_.invest.api.contract.v1.As"
  "set\"\235\005\n\tAssetFull\022\013\n\003uid\030\001 \001(\t\022\?\n\004type\030\002"
  " \001(\01621.tinkoff.public_.invest.api.contra"
  "ct.v1.AssetType\022\014\n\004name\030\003 \001(\t\022\022\n\nname_br"
  "ief\030\004 \001(\t\022\023\n\013description\030\005 \001(\t\022.\n\ndelete"
  "d_at\030\006 \001(\0132\032.google.protobuf.Timestamp\022\026"
  "\n\016required_tests\030\007 \003(\t\022I\n\010currency\030\010 \001(\013"
  "25.tinkoff.public_.invest.api.contract.v"
  "1.AssetCurrencyH\000\022I\n\010security\030\t \001(\01325.ti"
  "nkoff.public_.invest.api.contract.v1.Ass"
  "etSecurityH\000\022\024\n\014gos_reg_code\030\n \001(\t\022\013\n\003cf"
  "i\030\013 \001(\t\022\020\n\010code_nsd\030\014 \001(\t\022\016\n\006status\030\r \001("
  "\t\022<\n\005brand\030\016 \001(\0132-.tinkoff.public_.inves"
  "t.api.contract.v1.Brand\022.\n\nupdated_at\030\017 "
  "\001(\0132\032.google.protobuf.Timestamp\022\017\n\007br_co"
  "de\030\020 \001(\t\022\024\n\014br_code_name\030\021 \001(\t\022L\n\013instru"
  "ments\030\022 \003(\01327.tinkoff.public_.invest.api"
  ".contract.v1.AssetInstrumentB\005\n\003ext\"\261\001\n\005"
  "Asset\022\013\n\003uid\030\001 \001(\t\022\?\n\004type\030\002 \001(\01621.tinko"
  "ff.public_.invest.api.contract.v1.AssetT"
  "ype\022\014\n\004name\030\003 \001(\t\022L\n\013instruments\030\004 \003(\01327"
  ".tinkoff.public_.invest.api.contract.v1."
  "AssetInstrument\"&\n\rAssetCurrency\022\025\n\rbase"
  "_currency\030\001 \001(\t\"\374\003\n\rAssetSecurity\022\014\n\004isi"
  "n\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022O\n\017instrument_kind"
  "\030\n \001(\01626.tinkoff.public_.invest.api.cont"
  "ract.v1.InstrumentType\022C\n\005share\030\003 \001(\01322."
  "tinkoff.public_.invest.api.contract.v1.A"
  "ssetShareH\000\022A\n\004bond\030\004 \001(\01321.tinkoff.publ"
  "ic_.invest.api.contract.v1.AssetBondH\000\022L"
  "\n\002sp\030\005 \001(\0132>.tinkoff.public_.invest.api."
  "contract.v1.AssetStructuredProductH\000\022\?\n\003"
  "etf\030\006 \001(\01320.tinkoff.public_.invest.api.c"
  "ontract.v1.AssetEtfH\000\022`\n\024clearing_certif"
  "icate\030\007 \001(\0132@.tinkoff.public_.invest.api"
  ".contract.v1.AssetClearingCertificateH\000B"
  "\005\n\003ext\"\333\005\n\nAssetShare\022\?\n\004type\030\001 \001(\01621.ti"
  "nkoff.public_.invest.api.contract.v1.Sha"
  "reType\022E\n\nissue_size\030\002 \001(\01321.tinkoff.pub"
  "lic_.invest.api.contract.v1.Quotation\022B\n"
  "\007nominal\030\003 \001(\01321.tinkoff.public_.invest."
  "api.contract.v1.Quotation\022\030\n\020nominal_cur"
  "rency\030\004 \001(\t\022\025\n\rprimary_index\030\005 \001(\t\022H\n\rdi"
  "vidend_rate\030\006 \001(\01321.tinkoff.public_.inve"
  "st.api.contract.v1.Quotation\022\034\n\024preferre"
  "d_share_type\030\007 \001(\t\022,\n\010ipo_date\030\010 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\0221\n\rregistry_dat"
  "e\030\t \001(\0132\032.google.protobuf.Timestamp\022\026\n\016d"
  "iv_yield_flag\030\n \001(\010\022\022\n\nissue_kind\030\013 \001(\t\022"
  "2\n\016placement_date\030\014 \001(\0132\032.google.protobu"
  "f.Timestamp\022\023\n\013repres_isin\030\r \001(\t\022J\n\017issu"
  "e_size_plan\030\016 \001(\01321.tinkoff.public_.inve"
  "st.api.contract.v1.Quotation\022F\n\013total_fl"
  "oat\030\017 \001(\01321.tinkoff.public_.invest.api.c"
  "ontract.v1.Quotation\"\345\006\n\tAssetBond\022J\n\017cu"
  "rrent_nominal\030\001 \001(\01321.tinkoff.public_.in"
  "vest.api.contract.v1.Quotation\022\023\n\013borrow"
  "_name\030\002 \001(\t\022E\n\nissue_size\030\003 \001(\01321.tinkof"
  "f.public_.invest.api.contract.v1.Quotati"
  "on\022B\n\007nominal\030\004 \001(\01321.tinkoff.public_.in"
  "vest.api.contract.v1.Quotation\022\030\n\020nomina"
  "l_currency\030\005 \001(\t\022\022\n\nissue_kind\030\006 \001(\t\022\025\n\r"
  "interest_kind\030\007 \001(\t\022 \n\030coupon_quantity_p"
  "er_year\030\010 \001(\005\022\034\n\024indexed_nominal_flag\030\t "
  "\001(\010\022\031\n\021subordinated_flag\030\n \001(\010\022\027\n\017collat"
  "eral_flag\030\013 \001(\010\022\025\n\rtax_free_flag\030\014 \001(\010\022\031"
  "\n\021amortization_flag\030\r \001(\010\022\034\n\024floating_co"
  "upon_flag\030\016 \001(\010\022\026\n\016perpetual_flag\030\017 \001(\010\022"
  "1\n\rmaturity_date\030\020 \001(\0132\032.google.protobuf"
  ".Timestamp\022\030\n\020return_condition\030\021 \001(\t\0222\n\016"
  "state_reg_date\030\022 \001(\0132\032.google.protobuf.T"
  "imestamp\0222\n\016placement_date\030\023 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022J\n\017placement_price\030"
  "\024 \001(\01321.tinkoff.public_.invest.api.contr"
  "act.v1.Quotation\022J\n\017issue_size_plan\030\025 \001("
  "\01321.tinkoff.public_.invest.api.contract."
  "v1.Quotation\"\246\005\n\026AssetStructuredProduct\022"
  "\023\n\013borrow_name\030\001 \001(\t\022B\n\007nominal\030\002 \001(\01321."
  "tinkoff.public_.invest.api.contract.v1.Q"
  "uotation\022\030\n\020nominal_currency\030\003 \001(\t\022K\n\004ty"
  "pe\030\004 \001(\0162=.tinkoff.public_.invest.api.co"
  "ntract.v1.StructuredProductType\022\027\n\017logic"
  "_portfolio\030\005 \001(\t\022E\n\nasset_type\030\006 \001(\01621.t"
  "inkoff.public_.invest.api.contract.v1.As"
  "setType\022\023\n\013basic_asset\030\007 \001(\t\022I\n\016safety_b"
  "arrier\030\010 \001(\01321.tinkoff.public_.invest.ap"
  "i.contract.v1.Quotation\0221\n\rmaturity_date"
  "\030\t \001(\0132\032.google.protobuf.Timestamp\022J\n\017is"
  "sue_size_plan\030\n \001(\01321.tinkoff.public_.in"
  "vest.api.contract.v1.Quotation\022E\n\nissue_"
  "size\030\013 \001(\01321.tinkoff.public_.invest.api."
  "contract.v1.Quotation\0222\n\016placement_date\030"
  "\014 \001(\0132\032.google.protobuf.Timestamp\022\022\n\niss"
  "ue_kind\030\r \001(\t\"\343\n\n\010AssetEtf\022H\n\rtotal_expe"
  "nse\030\001 \001(\01321.tinkoff.public_.invest.api.c"
  "ontract.v1.Quotation\022F\n\013hurdle_rate\030\002 \001("
  "\01321.tinkoff.public_.invest.api.contract."
  "v1.Quotation\022J\n\017performance_fee\030\003 \001(\01321."
  "tinkoff.public_.invest.api.contract.v1.Q"
  "uotation\022K\n\020fixed_commission\030\004 \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\022\024\n\014payment_type\030\005 \001(\t\022\026\n\016watermark"
  "_flag\030\006 \001(\010\022F\n\013buy_premium\030\007 \001(\01321.tinko"
  "ff.public_.invest.api.contract.v1.Quotat"
  "ion\022H\n\rsell_discount\030\010 \001(\01321.tinkoff.pub"
  "lic_.invest.api.contract.v1.Quotation\022\030\n"
  "\020rebalancing_flag\030\t \001(\010\022\030\n\020rebalancing_f"
  "req\030\n \001(\t\022\027\n\017management_type\030\013 \001(\t\022\025\n\rpr"
  "imary_index\030\014 \001(\t\022\022\n\nfocus_type\030\r \001(\t\022\026\n"
  "\016leveraged_flag\030\016 \001(\010\022D\n\tnum_share\030\017 \001(\013"
  "21.tinkoff.public_.invest.api.contract.v"
  "1.Quotation\022\022\n\nucits_flag\030\020 \001(\010\0221\n\rrelea"
  "sed_date\030\021 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\023\n\013description\030\022 \001(\t\022!\n\031primary_index"
  "_description\030\023 \001(\t\022\035\n\025primary_index_comp"
  "any\030\024 \001(\t\022P\n\025index_recovery_period\030\025 \001(\013"
  "21.tinkoff.public_.invest.api.contract.v"
  "1.Quotation\022\021\n\tinav_code\030\026 \001(\t\022\026\n\016div_yi"
  "eld_flag\030\027 \001(\010\022M\n\022expense_commission\030\030 \001"
  "(\01321.tinkoff.public_.invest.api.contract"
  ".v1.Quotation\022W\n\034primary_index_tracking_"
  "error\030\031 \001(\01321.tinkoff.public_.invest.api"
  ".contract.v1.Quotation\022\030\n\020rebalancing_pl"
  "an\030\032 \001(\t\022\020\n\010tax_rate\030\033 \001(\t\0225\n\021rebalancin"
  "g_dates\030\034 \003(\0132\032.google.protobuf.Timestam"
  "p\022\022\n\nissue_kind\030\035 \001(\t\022B\n\007nominal\030\036 \001(\01321"
  ".tinkoff.public_.invest.api.contract.v1."
  "Quotation\022\030\n\020nominal_currency\030\037 \001(\t\"x\n\030A"
  "ssetClearingCertificate\022B\n\007nominal\030\001 \001(\013"
  "21.tinkoff.public_.invest.api.contract.v"
  "1.Quotation\022\030\n\020nominal_currency\030\002 \001(\t\"\235\001"
  "\n\005Brand\022\013\n\003uid\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\023\n\013de"
  "scription\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\017\n\007company"
  "\030\005 \001(\t\022\016\n\006sector\030\006 \001(\t\022\027\n\017country_of_ris"
  "k\030\007 \001(\t\022\034\n\024country_of_risk_name\030\010 \001(\t\"\227\002"
  "\n\017AssetInstrument\022\013\n\003uid\030\001 \001(\t\022\014\n\004figi\030\002"
  " \001(\t\022\027\n\017instrument_type\030\003 \001(\t\022\016\n\006ticker\030"
  "\004 \001(\t\022\022\n\nclass_code\030\005 \001(\t\022E\n\005links\030\006 \003(\013"
  "26.tinkoff.public_.invest.api.contract.v"
  "1.InstrumentLink\022O\n\017instrument_kind\030\n \001("
  "\01626.tinkoff.public_.invest.api.contract."
  "v1.InstrumentType\022\024\n\014position_uid\030\013 \001(\t\""
  "6\n\016InstrumentLink\022\014\n\004type\030\001 \001(\t\022\026\n\016instr"
  "ument_uid\030\002 \001(\t\"\025\n\023GetFavoritesRequest\"p"
  "\n\024GetFavoritesResponse\022X\n\024favorite_instr"
  "uments\030\001 \003(\0132:.tinkoff.public_.invest.ap"
  "i.contract.v1.FavoriteInstrument\"\215\002\n\022Fav"
  "oriteInstrument\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030"
  "\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022"
  "\027\n\017instrument_type\030\013 \001(\t\022\014\n\004name\030\014 \001(\t\022\013"
  "\n\003uid\030\r \001(\t\022\020\n\010otc_flag\030\020 \001(\010\022 \n\030api_tra"
  "de_available_flag\030\021 \001(\010\022O\n\017instrument_ki"
  "nd\030\022 \001(\01626.tinkoff.public_.invest.api.co"
  "ntract.v1.InstrumentType\"\323\001\n\024EditFavorit"
  "esRequest\022`\n\013instruments\030\001 \003(\0132F.tinkoff"
  ".public_.invest.api.contract.v1.EditFavo"
  "ritesRequestInstrumentB\003\340A\002\022Y\n\013action_ty"
  "pe\030\006 \001(\0162\?.tinkoff.public_.invest.api.co"
  "ntract.v1.EditFavoritesActionTypeB\003\340A\002\"\\"
  "\n\036EditFavoritesRequestInstrument\022\025\n\004figi"
  "\030\001 \001(\tB\002\030\001H\000\210\001\001\022\032\n\rinstrument_id\030\002 \001(\tB\003"
  "\340A\002B\007\n\005_figi\"q\n\025EditFavoritesResponse\022X\n"
  "\024favorite_instruments\030\001 \003(\0132:.tinkoff.pu"
  "blic_.invest.api.contract.v1.FavoriteIns"
  "trument\"\025\n\023GetCountriesRequest\"b\n\024GetCou"
  "ntriesResponse\022J\n\tcountries\030\001 \003(\01327.tink"
  "off.public_.invest.api.contract.v1.Count"
  "ryResponse\"\024\n\022IndicativesRequest\"f\n\023Indi"
  "cativesResponse\022O\n\013instruments\030\001 \003(\0132:.t"
  "inkoff.public_.invest.api.contract.v1.In"
  "dicativeResponse\"\221\002\n\022IndicativeResponse\022"
  "\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_c"
  "ode\030\003 \001(\t\022\020\n\010currency\030\004 \001(\t\022O\n\017instrumen"
  "t_kind\030\n \001(\01626.tinkoff.public_.invest.ap"
  "i.contract.v1.InstrumentType\022\014\n\004name\030\014 \001"
  "(\t\022\020\n\010exchange\030\r \001(\t\022\013\n\003uid\030\016 \001(\t\022\033\n\022buy"
  "_available_flag\030\224\003 \001(\010\022\034\n\023sell_available"
  "_flag\030\225\003 \001(\010\"Y\n\017CountryResponse\022\020\n\010alfa_"
  "two\030\001 \001(\t\022\022\n\nalfa_three\030\002 \001(\t\022\014\n\004name\030\003 "
  "\001(\t\022\022\n\nname_brief\030\004 \001(\t\"\331\001\n\025FindInstrume"
  "ntRequest\022\022\n\005query\030\001 \001(\tB\003\340A\002\022T\n\017instrum"
  "ent_kind\030\002 \001(\01626.tinkoff.public_.invest."
  "api.contract.v1.InstrumentTypeH\000\210\001\001\022%\n\030a"
  "pi_trade_available_flag\030\003 \001(\010H\001\210\001\001B\022\n\020_i"
  "nstrument_kindB\033\n\031_api_trade_available_f"
  "lag\"f\n\026FindInstrumentResponse\022L\n\013instrum"
  "ents\030\001 \003(\01327.tinkoff.public_.invest.api."
  "contract.v1.InstrumentShort\"\354\003\n\017Instrume"
  "ntShort\022\014\n\004isin\030\001 \001(\t\022\014\n\004figi\030\002 \001(\t\022\016\n\006t"
  "icker\030\003 \001(\t\022\022\n\nclass_code\030\004 \001(\t\022\027\n\017instr"
  "ument_type\030\005 \001(\t\022\014\n\004name\030\006 \001(\t\022\013\n\003uid\030\007 "
  "\001(\t\022\024\n\014position_uid\030\010 \001(\t\022O\n\017instrument_"
  "kind\030\n \001(\01626.tinkoff.public_.invest.api."
  "contract.v1.InstrumentType\022 \n\030api_trade_"
  "available_flag\030\013 \001(\010\022\024\n\014for_iis_flag\030\014 \001"
  "(\010\022:\n\026first_1min_candle_date\030\032 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022:\n\026first_1day_can"
  "dle_date\030\033 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\036\n\026for_qual_investor_flag\030\034 \001(\010\022\024\n\014we"
  "ekend_flag\030\035 \001(\010\022\030\n\020blocked_tca_flag\030\036 \001"
  "(\010\"P\n\020GetBrandsRequest\022<\n\006paging\030\001 \001(\0132,"
  ".tinkoff.public_.invest.api.contract.v1."
  "Page\"\"\n\017GetBrandRequest\022\017\n\002id\030\001 \001(\tB\003\340A\002"
  "\"\230\001\n\021GetBrandsResponse\022=\n\006brands\030\001 \003(\0132-"
  ".tinkoff.public_.invest.api.contract.v1."
  "Brand\022D\n\006paging\030\002 \001(\01324.tinkoff.public_."
  "invest.api.contract.v1.PageResponse\"2\n\033G"
  "etAssetFundamentalsRequest\022\023\n\006assets\030\001 \003"
  "(\tB\003\340A\002\"\376\016\n\034GetAssetFundamentalsResponse"
  "\022l\n\014fundamentals\030\001 \003(\0132V.tinkoff.public_"
  ".invest.api.contract.v1.GetAssetFundamen"
  "talsResponse.StatisticResponse\032\357\r\n\021Stati"
  "sticResponse\022\021\n\tasset_uid\030\001 \001(\t\022\020\n\010curre"
  "ncy\030\002 \001(\t\022\035\n\025market_capitalization\030\003 \001(\001"
  "\022 \n\030high_price_last_52_weeks\030\004 \001(\001\022\037\n\027lo"
  "w_price_last_52_weeks\030\005 \001(\001\022)\n!average_d"
  "aily_volume_last_10_days\030\006 \001(\001\022)\n!averag"
  "e_daily_volume_last_4_weeks\030\007 \001(\001\022\014\n\004bet"
  "a\030\010 \001(\001\022\022\n\nfree_float\030\t \001(\001\022%\n\035forward_a"
  "nnual_dividend_yield\030\n \001(\001\022\032\n\022shares_out"
  "standing\030\013 \001(\001\022\023\n\013revenue_ttm\030\014 \001(\001\022\022\n\ne"
  "bitda_ttm\030\r \001(\001\022\026\n\016net_income_ttm\030\016 \001(\001\022"
  "\017\n\007eps_ttm\030\017 \001(\001\022\027\n\017diluted_eps_ttm\030\020 \001("
  "\001\022\032\n\022free_cash_flow_ttm\030\021 \001(\001\022,\n$five_ye"
  "ar_annual_revenue_growth_rate\030\022 \001(\001\022-\n%t"
  "hree_year_annual_revenue_growth_rate\030\023 \001"
  "(\001\022\024\n\014pe_ratio_ttm\030\024 \001(\001\022\032\n\022price_to_sal"
  "es_ttm\030\025 \001(\001\022\031\n\021price_to_book_ttm\030\026 \001(\001\022"
  "#\n\033price_to_free_cash_flow_ttm\030\027 \001(\001\022\"\n\032"
  "total_enterprise_value_mrq\030\030 \001(\001\022\030\n\020ev_t"
  "o_ebitda_mrq\030\031 \001(\001\022\026\n\016net_margin_mrq\030\032 \001"
  "(\001\022\037\n\027net_interest_margin_mrq\030\033 \001(\001\022\013\n\003r"
  "oe\030\034 \001(\001\022\013\n\003roa\030\035 \001(\001\022\014\n\004roic\030\036 \001(\001\022\026\n\016t"
  "otal_debt_mrq\030\037 \001(\001\022 \n\030total_debt_to_equ"
  "ity_mrq\030  \001(\001\022 \n\030total_debt_to_ebitda_mr"
  "q\030! \001(\001\022\037\n\027free_cash_flow_to_price\030\" \001(\001"
  "\022\032\n\022net_debt_to_ebitda\030# \001(\001\022\031\n\021current_"
  "ratio_mrq\030$ \001(\001\022&\n\036fixed_charge_coverage"
  "_ratio_fy\030% \001(\001\022 \n\030dividend_yield_daily_"
  "ttm\030& \001(\001\022\031\n\021dividend_rate_ttm\030\' \001(\001\022\033\n\023"
  "dividends_per_share\030( \001(\001\022)\n!five_years_"
  "average_dividend_yield\030) \001(\001\022-\n%five_yea"
  "r_annual_dividend_growth_rate\030* \001(\001\022 \n\030d"
  "ividend_payout_ratio_fy\030+ \001(\001\022\024\n\014buy_bac"
  "k_ttm\030, \001(\001\022+\n#one_year_annual_revenue_g"
  "rowth_rate\030- \001(\001\022\037\n\027domicile_indicator_c"
  "ode\030. \001(\t\022!\n\031adr_to_common_share_ratio\030/"
  " \001(\001\022\033\n\023number_of_employees\0300 \001(\001\0224\n\020ex_"
  "dividend_date\0301 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022<\n\030fiscal_period_start_date\0302 \001("
  "\0132\032.google.protobuf.Timestamp\022:\n\026fiscal_"
  "period_end_date\0303 \001(\0132\032.google.protobuf."
  "Timestamp\022!\n\031revenue_change_five_years\0305"
  " \001(\001\022\035\n\025eps_change_five_years\0306 \001(\001\022 \n\030e"
  "bitda_change_five_years\0307 \001(\001\022$\n\034total_d"
  "ebt_change_five_years\0308 \001(\001\022\023\n\013ev_to_sal"
  "es\0309 \001(\001\"\240\001\n\026GetAssetReportsRequest\022\032\n\ri"
  "nstrument_id\030\001 \001(\tB\003\340A\002\022-\n\004from\030\002 \001(\0132\032."
  "google.protobuf.TimestampH\000\210\001\001\022+\n\002to\030\003 \001"
  "(\0132\032.google.protobuf.TimestampH\001\210\001\001B\007\n\005_"
  "fromB\005\n\003_to\"\251\004\n\027GetAssetReportsResponse\022"
  "d\n\006events\030\001 \003(\0132T.tinkoff.public_.invest"
  ".api.contract.v1.GetAssetReportsResponse"
  ".GetAssetReportsEvent\032\243\002\n\024GetAssetReport"
  "sEvent\022\025\n\rinstrument_id\030\001 \001(\t\022/\n\013report_"
  "date\030\002 \001(\0132\032.google.protobuf.Timestamp\022\023"
  "\n\013period_year\030\003 \001(\005\022\022\n\nperiod_num\030\004 \001(\005\022"
  "j\n\013period_type\030\005 \001(\0162U.tinkoff.public_.i"
  "nvest.api.contract.v1.GetAssetReportsRes"
  "ponse.AssetReportPeriodType\022.\n\ncreated_a"
  "t\030\006 \001(\0132\032.google.protobuf.Timestamp\"\201\001\n\025"
  "AssetReportPeriodType\022\033\n\027PERIOD_TYPE_UNS"
  "PECIFIED\020\000\022\027\n\023PERIOD_TYPE_QUARTER\020\001\022\032\n\026P"
  "ERIOD_TYPE_SEMIANNUAL\020\002\022\026\n\022PERIOD_TYPE_A"
  "NNUAL\020\003\"l\n\034GetConsensusForecastsRequest\022"
  "A\n\006paging\030\001 \001(\0132,.tinkoff.public_.invest"
  ".api.contract.v1.PageH\000\210\001\001B\t\n\007_paging\"\214\006"
  "\n\035GetConsensusForecastsResponse\022k\n\005items"
  "\030\001 \003(\0132\\.tinkoff.public_.invest.api.cont"
  "ract.v1.GetConsensusForecastsResponse.Co"
  "nsensusForecastsItem\022B\n\004page\030\002 \001(\01324.tin"
  "koff.public_.invest.api.contract.v1.Page"
  "Response\032\271\004\n\026ConsensusForecastsItem\022\013\n\003u"
  "id\030\001 \001(\t\022\021\n\tasset_uid\030\002 \001(\t\022.\n\ncreated_a"
  "t\030\003 \001(\0132\032.google.protobuf.Timestamp\022L\n\021b"
  "est_target_price\030\004 \001(\01321.tinkoff.public_"
  ".invest.api.contract.v1.Quotation\022J\n\017bes"
  "t_target_low\030\005 \001(\01321.tinkoff.public_.inv"
  "est.api.contract.v1.Quotation\022K\n\020best_ta"
  "rget_high\030\006 \001(\01321.tinkoff.public_.invest"
  ".api.contract.v1.Quotation\022\033\n\023total_buy_"
  "recommend\030\007 \001(\005\022\034\n\024total_hold_recommend\030"
  "\010 \001(\005\022\034\n\024total_sell_recommend\030\t \001(\005\022\020\n\010c"
  "urrency\030\n \001(\t\022I\n\tconsensus\030\013 \001(\01626.tinko"
  "ff.public_.invest.api.contract.v1.Recomm"
  "endation\0222\n\016prognosis_date\030\014 \001(\0132\032.googl"
  "e.protobuf.Timestamp\"+\n\022GetForecastReque"
  "st\022\025\n\rinstrument_id\030\001 \001(\t\"\245\n\n\023GetForecas"
  "tResponse\022W\n\007targets\030\001 \003(\0132F.tinkoff.pub"
  "lic_.invest.api.contract.v1.GetForecastR"
  "esponse.TargetItem\022\\\n\tconsensus\030\002 \001(\0132I."
  "tinkoff.public_.invest.api.contract.v1.G"
  "etForecastResponse.ConsensusItem\032\221\004\n\nTar"
  "getItem\022\013\n\003uid\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\017\n\007"
  "company\030\003 \001(\t\022N\n\016recommendation\030\004 \001(\01626."
  "tinkoff.public_.invest.api.contract.v1.R"
  "ecommendation\0227\n\023recommendation_date\030\005 \001"
  "(\0132\032.google.protobuf.Timestamp\022\020\n\010curren"
  "cy\030\006 \001(\t\022H\n\rcurrent_price\030\007 \001(\01321.tinkof"
  "f.public_.invest.api.contract.v1.Quotati"
  "on\022G\n\014target_price\030\010 \001(\01321.tinkoff.publi"
  "c_.invest.api.contract.v1.Quotation\022G\n\014p"
  "rice_change\030\t \001(\01321.tinkoff.public_.inve"
  "st.api.contract.v1.Quotation\022K\n\020price_ch"
  "ange_rel\030\n \001(\01321.tinkoff.public_.invest."
  "api.contract.v1.Quotation\022\021\n\tshow_name\030\013"
  " \001(\t\032\302\004\n\rConsensusItem\022\013\n\003uid\030\001 \001(\t\022\016\n\006t"
  "icker\030\002 \001(\t\022N\n\016recommendation\030\003 \001(\01626.ti"
  "nkoff.public_.invest.api.contract.v1.Rec"
  "ommendation\022\020\n\010currency\030\004 \001(\t\022H\n\rcurrent"
  "_price\030\005 \001(\01321.tinkoff.public_.invest.ap"
  "i.contract.v1.Quotation\022D\n\tconsensus\030\006 \001"
  "(\01321.tinkoff.public_.invest.api.contract"
  ".v1.Quotation\022E\n\nmin_target\030\007 \001(\01321.tink"
  "off.public_.invest.api.contract.v1.Quota"
  "tion\022E\n\nmax_target\030\010 \001(\01321.tinkoff.publi"
  "c_.invest.api.contract.v1.Quotation\022G\n\014p"
  "rice_change\030\t \001(\01321.tinkoff.public_.inve"
  "st.api.contract.v1.Quotation\022K\n\020price_ch"
  "ange_rel\030\n \001(\01321.tinkoff.public_.invest."
  "api.contract.v1.Quotation\"\341\001\n\017TradingInt"
  "erval\022\014\n\004type\030\001 \001(\t\022V\n\010interval\030\002 \001(\0132D."
  "tinkoff.public_.invest.api.contract.v1.T"
  "radingInterval.TimeInterval\032h\n\014TimeInter"
  "val\022,\n\010start_ts\030\001 \001(\0132\032.google.protobuf."
  "Timestamp\022*\n\006end_ts\030\002 \001(\0132\032.google.proto"
  "buf.Timestamp*\327\001\n\nCouponType\022\033\n\027COUPON_T"
  "YPE_UNSPECIFIED\020\000\022\030\n\024COUPON_TYPE_CONSTAN"
  "T\020\001\022\030\n\024COUPON_TYPE_FLOATING\020\002\022\030\n\024COUPON_"
  "TYPE_DISCOUNT\020\003\022\030\n\024COUPON_TYPE_MORTGAGE\020"
  "\004\022\023\n\017COUPON_TYPE_FIX\020\005\022\030\n\024COUPON_TYPE_VA"
  "RIABLE\020\006\022\025\n\021COUPON_TYPE_OTHER\020\007*h\n\017Optio"
  "nDirection\022 \n\034OPTION_DIRECTION_UNSPECIFI"
  "ED\020\000\022\030\n\024OPTION_DIRECTION_PUT\020\001\022\031\n\025OPTION"
  "_DIRECTION_CALL\020\002*{\n\021OptionPaymentType\022#"
  "\n\037OPTION_PAYMENT_TYPE_UNSPECIFIED\020\000\022\037\n\033O"
  "PTION_PAYMENT_TYPE_PREMIUM\020\001\022 \n\034OPTION_P"
  "AYMENT_TYPE_MARGINAL\020\002*a\n\013OptionStyle\022\034\n"
  "\030OPTION_STYLE_UNSPECIFIED\020\000\022\031\n\025OPTION_ST"
  "YLE_AMERICAN\020\001\022\031\n\025OPTION_STYLE_EUROPEAN\020"
  "\002*\225\001\n\024OptionSettlementType\022%\n!OPTION_EXE"
  "CUTION_TYPE_UNSPECIFIED\020\000\022+\n\'OPTION_EXEC"
  "UTION_TYPE_PHYSICAL_DELIVERY\020\001\022)\n%OPTION"
  "_EXECUTION_TYPE_CASH_SETTLEMENT\020\002*\256\001\n\020In"
  "strumentIdType\022\035\n\031INSTRUMENT_ID_UNSPECIF"
  "IED\020\000\022\033\n\027INSTRUMENT_ID_TYPE_FIGI\020\001\022\035\n\031IN"
  "STRUMENT_ID_TYPE_TICKER\020\002\022\032\n\026INSTRUMENT_"
  "ID_TYPE_UID\020\003\022#\n\037INSTRUMENT_ID_TYPE_POSI"
  "TION_UID\020\004*l\n\020InstrumentStatus\022!\n\035INSTRU"
  "MENT_STATUS_UNSPECIFIED\020\000\022\032\n\026INSTRUMENT_"
  "STATUS_BASE\020\001\022\031\n\025INSTRUMENT_STATUS_ALL\020\002"
  "*\345\001\n\tShareType\022\032\n\026SHARE_TYPE_UNSPECIFIED"
  "\020\000\022\025\n\021SHARE_TYPE_COMMON\020\001\022\030\n\024SHARE_TYPE_"
  "PREFERRED\020\002\022\022\n\016SHARE_TYPE_ADR\020\003\022\022\n\016SHARE"
  "_TYPE_GDR\020\004\022\022\n\016SHARE_TYPE_MLP\020\005\022\032\n\026SHARE"
  "_TYPE_NY_REG_SHRS\020\006\022\036\n\032SHARE_TYPE_CLOSED"
  "_END_FUND\020\007\022\023\n\017SHARE_TYPE_REIT\020\010*\211\001\n\tAss"
  "etType\022\032\n\026ASSET_TYPE_UNSPECIFIED\020\000\022\027\n\023AS"
  "SET_TYPE_CURRENCY\020\001\022\030\n\024ASSET_TYPE_COMMOD"
  "ITY\020\002\022\024\n\020ASSET_TYPE_INDEX\020\003\022\027\n\023ASSET_TYP"
  "E_SECURITY\020\004*f\n\025StructuredProductType\022\027\n"
  "\023SP_TYPE_UNSPECIFIED\020\000\022\027\n\023SP_TYPE_DELIVE"
  "RABLE\020\001\022\033\n\027SP_TYPE_NON_DELIVERABLE\020\002*\215\001\n"
  "\027EditFavoritesActionType\022*\n&EDIT_FAVORIT"
  "ES_ACTION_TYPE_UNSPECIFIED\020\000\022\"\n\036EDIT_FAV"
  "ORITES_ACTION_TYPE_ADD\020\001\022\"\n\036EDIT_FAVORIT"
  "ES_ACTION_TYPE_DEL\020\002*s\n\014RealExchange\022\035\n\031"
  "REAL_EXCHANGE_UNSPECIFIED\020\000\022\026\n\022REAL_EXCH"
  "ANGE_MOEX\020\001\022\025\n\021REAL_EXCHANGE_RTS\020\002\022\025\n\021RE"
  "AL_EXCHANGE_OTC\020\003*z\n\016Recommendation\022\036\n\032R"
  "ECOMMENDATION_UNSPECIFIED\020\000\022\026\n\022RECOMMEND"
  "ATION_BUY\020\001\022\027\n\023RECOMMENDATION_HOLD\020\002\022\027\n\023"
  "RECOMMENDATION_SELL\020\003*i\n\tRiskLevel\022\032\n\026RI"
  "SK_LEVEL_UNSPECIFIED\020\000\022\022\n\016RISK_LEVEL_LOW"
  "\020\001\022\027\n\023RISK_LEVEL_MODERATE\020\002\022\023\n\017RISK_LEVE"
  "L_HIGH\020\0032\263#\n\022InstrumentsService\022\225\001\n\020Trad"
  "ingSchedules\022\?.tinkoff.public_.invest.ap"
  "i.contract.v1.TradingSchedulesRequest\032@."
  "tinkoff.public_.invest.api.contract.v1.T"
  "radingSchedulesResponse\022y\n\006BondBy\0229.tink"
  "off.public_.invest.api.contract.v1.Instr"
  "umentRequest\0324.tinkoff.public_.invest.ap"
  "i.contract.v1.BondResponse\022z\n\005Bonds\022:.ti"
  "nkoff.public_.invest.api.contract.v1.Ins"
  "trumentsRequest\0325.tinkoff.public_.invest"
  ".api.contract.v1.BondsResponse\022\217\001\n\016GetBo"
  "ndCoupons\022=.tinkoff.public_.invest.api.c"
  "ontract.v1.GetBondCouponsRequest\032>.tinko"
  "ff.public_.invest.api.contract.v1.GetBon"
  "dCouponsResponse\022\214\001\n\rGetBondEvents\022<.tin"
  "koff.public_.invest.api.contract.v1.GetB"
  "ondEventsRequest\032=.tinkoff.public_.inves"
  "t.api.contract.v1.GetBondEventsResponse\022"
  "\201\001\n\nCurrencyBy\0229.tinkoff.public_.invest."
  "api.contract.v1.InstrumentRequest\0328.tink"
  "off.public_.invest.api.contract.v1.Curre"
  "ncyResponse\022\204\001\n\nCurrencies\022:.tinkoff.pub"
  "lic_.invest.api.contract.v1.InstrumentsR"
  "equest\032:.tinkoff.public_.invest.api.cont"
  "ract.v1.CurrenciesResponse\022w\n\005EtfBy\0229.ti"
  "nkoff.public_.invest.api.contract.v1.Ins"
  "trumentRequest\0323.tinkoff.public_.invest."
  "api.contract.v1.EtfResponse\022x\n\004Etfs\022:.ti"
  "nkoff.public_.invest.api.contract.v1.Ins"
  "trumentsRequest\0324.tinkoff.public_.invest"
  ".api.contract.v1.EtfsResponse\022}\n\010FutureB"
  "y\0229.tinkoff.public_.invest.api.contract."
  "v1.InstrumentRequest\0326.tinkoff.public_.i"
  "nvest.api.contract.v1.FutureResponse\022~\n\007"
  "Futures\022:.tinkoff.public_.invest.api.con"
  "tract.v1.InstrumentsRequest\0327.tinkoff.pu"
  "blic_.invest.api.contract.v1.FuturesResp"
  "onse\022}\n\010OptionBy\0229.tinkoff.public_.inves"
  "t.api.contract.v1.InstrumentRequest\0326.ti"
  "nkoff.public_.invest.api.contract.v1.Opt"
  "ionResponse\022\203\001\n\007Options\022:.tinkoff.public"
  "_.invest.api.contract.v1.InstrumentsRequ"
  "est\0327.tinkoff.public_.invest.api.contrac"
  "t.v1.OptionsResponse\"\003\210\002\001\022\202\001\n\tOptionsBy\022"
  "<.tinkoff.public_.invest.api.contract.v1"
  ".FilterOptionsRequest\0327.tinkoff.public_."
  "invest.api.contract.v1.OptionsResponse\022{"
  "\n\007ShareBy\0229.tinkoff.public_.invest.api.c"
  "ontract.v1.InstrumentRequest\0325.tinkoff.p"
  "ublic_.invest.api.contract.v1.ShareRespo"
  "nse\022|\n\006Shares\022:.tinkoff.public_.invest.a"
  "pi.contract.v1.InstrumentsRequest\0326.tink"
  "off.public_.invest.api.contract.v1.Share"
  "sResponse\022\206\001\n\013Indicatives\022:.tinkoff.publ"
  "ic_.invest.api.contract.v1.IndicativesRe"
  "quest\032;.tinkoff.public_.invest.api.contr"
  "act.v1.IndicativesResponse\022\236\001\n\023GetAccrue"
  "dInterests\022B.tinkoff.public_.invest.api."
  "contract.v1.GetAccruedInterestsRequest\032C"
  ".tinkoff.public_.invest.api.contract.v1."
  "GetAccruedInterestsResponse\022\225\001\n\020GetFutur"
  "esMargin\022\?.tinkoff.public_.invest.api.co"
  "ntract.v1.GetFuturesMarginRequest\032@.tink"
  "off.public_.invest.api.contract.v1.GetFu"
  "turesMarginResponse\022\210\001\n\017GetInstrumentBy\022"
  "9.tinkoff.public_.invest.api.contract.v1"
  ".InstrumentRequest\032:.tinkoff.public_.inv"
  "est.api.contract.v1.InstrumentResponse\022\211"
  "\001\n\014GetDividends\022;.tinkoff.public_.invest"
  ".api.contract.v1.GetDividendsRequest\032<.t"
  "inkoff.public_.invest.api.contract.v1.Ge"
  "tDividendsResponse\022y\n\nGetAssetBy\0224.tinko"
  "ff.public_.invest.api.contract.v1.AssetR"
  "equest\0325.tinkoff.public_.invest.api.cont"
  "ract.v1.AssetResponse\022z\n\tGetAssets\0225.tin"
  "koff.public_.invest.api.contract.v1.Asse"
  "tsRequest\0326.tinkoff.public_.invest.api.c"
  "ontract.v1.AssetsResponse\022\211\001\n\014GetFavorit"
  "es\022;.tinkoff.public_.invest.api.contract"
  ".v1.GetFavoritesRequest\032<.tinkoff.public"
  "_.invest.api.contract.v1.GetFavoritesRes"
  "ponse\022\214\001\n\rEditFavorites\022<.tinkoff.public"
  "_.invest.api.contract.v1.EditFavoritesRe"
  "quest\032=.tinkoff.public_.invest.api.contr"
  "act.v1.EditFavoritesResponse\022\211\001\n\014GetCoun"
  "tries\022;.tinkoff.public_.invest.api.contr"
  "act.v1.GetCountriesRequest\032<.tinkoff.pub"
  "lic_.invest.api.contract.v1.GetCountries"
  "Response\022\217\001\n\016FindInstrument\022=.tinkoff.pu"
  "blic_.invest.api.contract.v1.FindInstrum"
  "entRequest\032>.tinkoff.public_.invest.api."
  "contract.v1.FindInstrumentResponse\022\200\001\n\tG"
  "etBrands\0228.tinkoff.public_.invest.api.co"
  "ntract.v1.GetBrandsRequest\0329.tinkoff.pub"
  "lic_.invest.api.contract.v1.GetBrandsRes"
  "ponse\022t\n\nGetBrandBy\0227.tinkoff.public_.in"
  "vest.api.contract.v1.GetBrandRequest\032-.t"
  "inkoff.public_.invest.api.contract.v1.Br"
  "and\022\241\001\n\024GetAssetFundamentals\022C.tinkoff.p"
  "ublic_.invest.api.contract.v1.GetAssetFu"
  "ndamentalsRequest\032D.tinkoff.public_.inve"
  "st.api.contract.v1.GetAssetFundamentalsR"
  "esponse\022\222\001\n\017GetAssetReports\022>.tinkoff.pu"
  "blic_.invest.api.contract.v1.GetAssetRep"
  "ortsRequest\032\?.tinkoff.public_.invest.api"
  ".contract.v1.GetAssetReportsResponse\022\244\001\n"
  "\025GetConsensusForecasts\022D.tinkoff.public_"
  ".invest.api.contract.v1.GetConsensusFore"
  "castsRequest\032E.tinkoff.public_.invest.ap"
  "i.contract.v1.GetConsensusForecastsRespo"
  "nse\022\210\001\n\rGetForecastBy\022:.tinkoff.public_."
  "invest.api.contract.v1.GetForecastReques"
  "t\032;.tinkoff.public_.invest.api.contract."
  "v1.GetForecastResponseBa\n\034ru.tinkoff.pia"
  "pi.contract.v1P\001Z\014./;investapi\242\002\005TIAPI\252\002"
  "\024Tinkoff.InvestApi.V1\312\002\021Tinkoff\\Invest\\V"
  "1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_instruments_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_instruments_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_instruments_2eproto = {
    false, false, 39409, descriptor_table_protodef_instruments_2eproto,
    "instruments.proto",
    &descriptor_table_instruments_2eproto_once, descriptor_table_instruments_2eproto_deps, 3, 90,
    schemas, file_default_instances, TableStruct_instruments_2eproto::offsets,
    file_level_metadata_instruments_2eproto, file_level_enum_descriptors_instruments_2eproto,
    file_level_service_descriptors_instruments_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_instruments_2eproto_getter() {
  return &descriptor_table_instruments_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_instruments_2eproto(&descriptor_table_instruments_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetBondEventsRequest_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[0];
}
bool GetBondEventsRequest_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_UNSPECIFIED;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CPN;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CALL;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_MTY;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CONV;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EventType_MIN;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EventType_MAX;
constexpr int GetBondEventsRequest::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetAssetReportsResponse_AssetReportPeriodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[1];
}
bool GetAssetReportsResponse_AssetReportPeriodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_UNSPECIFIED;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_QUARTER;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_SEMIANNUAL;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_ANNUAL;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::AssetReportPeriodType_MIN;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::AssetReportPeriodType_MAX;
constexpr int GetAssetReportsResponse::AssetReportPeriodType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CouponType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[2];
}
bool CouponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[3];
}
bool OptionDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionPaymentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[4];
}
bool OptionPaymentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[5];
}
bool OptionStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionSettlementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[6];
}
bool OptionSettlementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstrumentIdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[7];
}
bool InstrumentIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstrumentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[8];
}
bool InstrumentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShareType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[9];
}
bool ShareType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[10];
}
bool AssetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StructuredProductType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[11];
}
bool StructuredProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EditFavoritesActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[12];
}
bool EditFavoritesActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RealExchange_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[13];
}
bool RealExchange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Recommendation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[14];
}
bool Recommendation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RiskLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[15];
}
bool RiskLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TradingSchedulesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingSchedulesRequest>()._impl_._has_bits_);
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const TradingSchedulesRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const TradingSchedulesRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingSchedulesRequest::_Internal::from(const TradingSchedulesRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingSchedulesRequest::_Internal::to(const TradingSchedulesRequest* msg) {
  return *msg->_impl_.to_;
}
void TradingSchedulesRequest::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TradingSchedulesRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TradingSchedulesRequest::TradingSchedulesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
}
TradingSchedulesRequest::TradingSchedulesRequest(const TradingSchedulesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingSchedulesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_exchange()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
}

inline void TradingSchedulesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
  };
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradingSchedulesRequest::~TradingSchedulesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingSchedulesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void TradingSchedulesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingSchedulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingSchedulesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradingSchedulesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string exchange = 1;
  if (_internal_has_exchange()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange(), target);
  }

  // optional .google.protobuf.Timestamp from = 2;
  if (_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  return target;
}

size_t TradingSchedulesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string exchange = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exchange());
    }

    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingSchedulesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingSchedulesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingSchedulesRequest::GetClassData() const { return &_class_data_; }


void TradingSchedulesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingSchedulesRequest*>(&to_msg);
  auto& from = static_cast<const TradingSchedulesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedulesRequest::CopyFrom(const TradingSchedulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSchedulesRequest::IsInitialized() const {
  return true;
}

void TradingSchedulesRequest::InternalSwap(TradingSchedulesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.to_)
      + sizeof(TradingSchedulesRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingSchedulesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[0]);
}

// ===================================================================

class TradingSchedulesResponse::_Internal {
 public:
};

TradingSchedulesResponse::TradingSchedulesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
}
TradingSchedulesResponse::TradingSchedulesResponse(const TradingSchedulesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingSchedulesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchanges_){from._impl_.exchanges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
}

inline void TradingSchedulesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exchanges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TradingSchedulesResponse::~TradingSchedulesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingSchedulesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchanges_.~RepeatedPtrField();
}

void TradingSchedulesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingSchedulesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchanges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingSchedulesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exchanges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradingSchedulesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exchanges_size()); i < n; i++) {
    const auto& repfield = this->_internal_exchanges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  return target;
}

size_t TradingSchedulesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
  total_size += 1UL * this->_internal_exchanges_size();
  for (const auto& msg : this->_impl_.exchanges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingSchedulesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingSchedulesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingSchedulesResponse::GetClassData() const { return &_class_data_; }


void TradingSchedulesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingSchedulesResponse*>(&to_msg);
  auto& from = static_cast<const TradingSchedulesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exchanges_.MergeFrom(from._impl_.exchanges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedulesResponse::CopyFrom(const TradingSchedulesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSchedulesResponse::IsInitialized() const {
  return true;
}

void TradingSchedulesResponse::InternalSwap(TradingSchedulesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exchanges_.InternalSwap(&other->_impl_.exchanges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingSchedulesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[1]);
}

// ===================================================================

class TradingSchedule::_Internal {
 public:
};

TradingSchedule::TradingSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
}
TradingSchedule::TradingSchedule(const TradingSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingSchedule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.days_){from._impl_.days_}
    , decltype(_impl_.exchange_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
}

inline void TradingSchedule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.days_){arena}
    , decltype(_impl_.exchange_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradingSchedule::~TradingSchedule() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.days_.~RepeatedPtrField();
  _impl_.exchange_.Destroy();
}

void TradingSchedule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.days_.Clear();
  _impl_.exchange_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_days(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradingSchedule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_days_size()); i < n; i++) {
    const auto& repfield = this->_internal_days(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  return target;
}

size_t TradingSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
  total_size += 1UL * this->_internal_days_size();
  for (const auto& msg : this->_impl_.days_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingSchedule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingSchedule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingSchedule::GetClassData() const { return &_class_data_; }


void TradingSchedule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingSchedule*>(&to_msg);
  auto& from = static_cast<const TradingSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.days_.MergeFrom(from._impl_.days_);
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedule::CopyFrom(const TradingSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSchedule::IsInitialized() const {
  return true;
}

void TradingSchedule::InternalSwap(TradingSchedule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.days_.InternalSwap(&other->_impl_.days_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingSchedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[2]);
}

// ===================================================================

class TradingDay::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& opening_auction_start_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& closing_auction_end_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& evening_opening_auction_start_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& evening_start_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& evening_end_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& clearing_start_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& clearing_end_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& premarket_start_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& premarket_end_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& closing_auction_start_time(const TradingDay* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& opening_auction_end_time(const TradingDay* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::date(const TradingDay* msg) {
  return *msg->_impl_.date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::start_time(const TradingDay* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::end_time(const TradingDay* msg) {
  return *msg->_impl_.end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::opening_auction_start_time(const TradingDay* msg) {
  return *msg->_impl_.opening_auction_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::closing_auction_end_time(const TradingDay* msg) {
  return *msg->_impl_.closing_auction_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::evening_opening_auction_start_time(const TradingDay* msg) {
  return *msg->_impl_.evening_opening_auction_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::evening_start_time(const TradingDay* msg) {
  return *msg->_impl_.evening_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::evening_end_time(const TradingDay* msg) {
  return *msg->_impl_.evening_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::clearing_start_time(const TradingDay* msg) {
  return *msg->_impl_.clearing_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::clearing_end_time(const TradingDay* msg) {
  return *msg->_impl_.clearing_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::premarket_start_time(const TradingDay* msg) {
  return *msg->_impl_.premarket_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::premarket_end_time(const TradingDay* msg) {
  return *msg->_impl_.premarket_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::closing_auction_start_time(const TradingDay* msg) {
  return *msg->_impl_.closing_auction_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingDay::_Internal::opening_auction_end_time(const TradingDay* msg) {
  return *msg->_impl_.opening_auction_end_time_;
}
void TradingDay::clear_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
}
void TradingDay::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void TradingDay::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
void TradingDay::clear_opening_auction_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.opening_auction_start_time_ != nullptr) {
    delete _impl_.opening_auction_start_time_;
  }
  _impl_.opening_auction_start_time_ = nullptr;
}
void TradingDay::clear_closing_auction_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.closing_auction_end_time_ != nullptr) {
    delete _impl_.closing_auction_end_time_;
  }
  _impl_.closing_auction_end_time_ = nullptr;
}
void TradingDay::clear_evening_opening_auction_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.evening_opening_auction_start_time_ != nullptr) {
    delete _impl_.evening_opening_auction_start_time_;
  }
  _impl_.evening_opening_auction_start_time_ = nullptr;
}
void TradingDay::clear_evening_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.evening_start_time_ != nullptr) {
    delete _impl_.evening_start_time_;
  }
  _impl_.evening_start_time_ = nullptr;
}
void TradingDay::clear_evening_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.evening_end_time_ != nullptr) {
    delete _impl_.evening_end_time_;
  }
  _impl_.evening_end_time_ = nullptr;
}
void TradingDay::clear_clearing_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.clearing_start_time_ != nullptr) {
    delete _impl_.clearing_start_time_;
  }
  _impl_.clearing_start_time_ = nullptr;
}
void TradingDay::clear_clearing_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.clearing_end_time_ != nullptr) {
    delete _impl_.clearing_end_time_;
  }
  _impl_.clearing_end_time_ = nullptr;
}
void TradingDay::clear_premarket_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.premarket_start_time_ != nullptr) {
    delete _impl_.premarket_start_time_;
  }
  _impl_.premarket_start_time_ = nullptr;
}
void TradingDay::clear_premarket_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.premarket_end_time_ != nullptr) {
    delete _impl_.premarket_end_time_;
  }
  _impl_.premarket_end_time_ = nullptr;
}
void TradingDay::clear_closing_auction_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.closing_auction_start_time_ != nullptr) {
    delete _impl_.closing_auction_start_time_;
  }
  _impl_.closing_auction_start_time_ = nullptr;
}
void TradingDay::clear_opening_auction_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.opening_auction_end_time_ != nullptr) {
    delete _impl_.opening_auction_end_time_;
  }
  _impl_.opening_auction_end_time_ = nullptr;
}
TradingDay::TradingDay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingDay)
}
TradingDay::TradingDay(const TradingDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingDay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.intervals_){from._impl_.intervals_}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.opening_auction_start_time_){nullptr}
    , decltype(_impl_.closing_auction_end_time_){nullptr}
    , decltype(_impl_.evening_opening_auction_start_time_){nullptr}
    , decltype(_impl_.evening_start_time_){nullptr}
    , decltype(_impl_.evening_end_time_){nullptr}
    , decltype(_impl_.clearing_start_time_){nullptr}
    , decltype(_impl_.clearing_end_time_){nullptr}
    , decltype(_impl_.premarket_start_time_){nullptr}
    , decltype(_impl_.premarket_end_time_){nullptr}
    , decltype(_impl_.closing_auction_start_time_){nullptr}
    , decltype(_impl_.opening_auction_end_time_){nullptr}
    , decltype(_impl_.is_trading_day_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_);
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  if (from._internal_has_opening_auction_start_time()) {
    _this->_impl_.opening_auction_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.opening_auction_start_time_);
  }
  if (from._internal_has_closing_auction_end_time()) {
    _this->_impl_.closing_auction_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.closing_auction_end_time_);
  }
  if (from._internal_has_evening_opening_auction_start_time()) {
    _this->_impl_.evening_opening_auction_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.evening_opening_auction_start_time_);
  }
  if (from._internal_has_evening_start_time()) {
    _this->_impl_.evening_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.evening_start_time_);
  }
  if (from._internal_has_evening_end_time()) {
    _this->_impl_.evening_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.evening_end_time_);
  }
  if (from._internal_has_clearing_start_time()) {
    _this->_impl_.clearing_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.clearing_start_time_);
  }
  if (from._internal_has_clearing_end_time()) {
    _this->_impl_.clearing_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.clearing_end_time_);
  }
  if (from._internal_has_premarket_start_time()) {
    _this->_impl_.premarket_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.premarket_start_time_);
  }
  if (from._internal_has_premarket_end_time()) {
    _this->_impl_.premarket_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.premarket_end_time_);
  }
  if (from._internal_has_closing_auction_start_time()) {
    _this->_impl_.closing_auction_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.closing_auction_start_time_);
  }
  if (from._internal_has_opening_auction_end_time()) {
    _this->_impl_.opening_auction_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.opening_auction_end_time_);
  }
  _this->_impl_.is_trading_day_ = from._impl_.is_trading_day_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingDay)
}

inline void TradingDay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.intervals_){arena}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.opening_auction_start_time_){nullptr}
    , decltype(_impl_.closing_auction_end_time_){nullptr}
    , decltype(_impl_.evening_opening_auction_start_time_){nullptr}
    , decltype(_impl_.evening_start_time_){nullptr}
    , decltype(_impl_.evening_end_time_){nullptr}
    , decltype(_impl_.clearing_start_time_){nullptr}
    , decltype(_impl_.clearing_end_time_){nullptr}
    , decltype(_impl_.premarket_start_time_){nullptr}
    , decltype(_impl_.premarket_end_time_){nullptr}
    , decltype(_impl_.closing_auction_start_time_){nullptr}
    , decltype(_impl_.opening_auction_end_time_){nullptr}
    , decltype(_impl_.is_trading_day_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TradingDay::~TradingDay() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingDay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingDay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intervals_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.date_;
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
  if (this != internal_default_instance()) delete _impl_.opening_auction_start_time_;
  if (this != internal_default_instance()) delete _impl_.closing_auction_end_time_;
  if (this != internal_default_instance()) delete _impl_.evening_opening_auction_start_time_;
  if (this != internal_default_instance()) delete _impl_.evening_start_time_;
  if (this != internal_default_instance()) delete _impl_.evening_end_time_;
  if (this != internal_default_instance()) delete _impl_.clearing_start_time_;
  if (this != internal_default_instance()) delete _impl_.clearing_end_time_;
  if (this != internal_default_instance()) delete _impl_.premarket_start_time_;
  if (this != internal_default_instance()) delete _impl_.premarket_end_time_;
  if (this != internal_default_instance()) delete _impl_.closing_auction_start_time_;
  if (this != internal_default_instance()) delete _impl_.opening_auction_end_time_;
}

void TradingDay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingDay::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intervals_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opening_auction_start_time_ != nullptr) {
    delete _impl_.opening_auction_start_time_;
  }
  _impl_.opening_auction_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.closing_auction_end_time_ != nullptr) {
    delete _impl_.closing_auction_end_time_;
  }
  _impl_.closing_auction_end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evening_opening_auction_start_time_ != nullptr) {
    delete _impl_.evening_opening_auction_start_time_;
  }
  _impl_.evening_opening_auction_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evening_start_time_ != nullptr) {
    delete _impl_.evening_start_time_;
  }
  _impl_.evening_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evening_end_time_ != nullptr) {
    delete _impl_.evening_end_time_;
  }
  _impl_.evening_end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clearing_start_time_ != nullptr) {
    delete _impl_.clearing_start_time_;
  }
  _impl_.clearing_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clearing_end_time_ != nullptr) {
    delete _impl_.clearing_end_time_;
  }
  _impl_.clearing_end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.premarket_start_time_ != nullptr) {
    delete _impl_.premarket_start_time_;
  }
  _impl_.premarket_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.premarket_end_time_ != nullptr) {
    delete _impl_.premarket_end_time_;
  }
  _impl_.premarket_end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.closing_auction_start_time_ != nullptr) {
    delete _impl_.closing_auction_start_time_;
  }
  _impl_.closing_auction_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opening_auction_end_time_ != nullptr) {
    delete _impl_.opening_auction_end_time_;
  }
  _impl_.opening_auction_end_time_ = nullptr;
  _impl_.is_trading_day_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingDay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_trading_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp opening_auction_start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_opening_auction_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp closing_auction_end_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_closing_auction_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_evening_opening_auction_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp evening_start_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_evening_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp evening_end_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_evening_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp clearing_start_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearing_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp clearing_end_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearing_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp premarket_start_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_premarket_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp premarket_end_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_premarket_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp closing_auction_start_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_closing_auction_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp opening_auction_end_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_opening_auction_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_intervals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradingDay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp date = 1;
  if (this->_internal_has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // bool is_trading_day = 2;
  if (this->_internal_is_trading_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_trading_day(), target);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp opening_auction_start_time = 7;
  if (this->_internal_has_opening_auction_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::opening_auction_start_time(this),
        _Internal::opening_auction_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp closing_auction_end_time = 8;
  if (this->_internal_has_closing_auction_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::closing_auction_end_time(this),
        _Internal::closing_auction_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
  if (this->_internal_has_evening_opening_auction_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::evening_opening_auction_start_time(this),
        _Internal::evening_opening_auction_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp evening_start_time = 10;
  if (this->_internal_has_evening_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::evening_start_time(this),
        _Internal::evening_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp evening_end_time = 11;
  if (this->_internal_has_evening_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::evening_end_time(this),
        _Internal::evening_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp clearing_start_time = 12;
  if (this->_internal_has_clearing_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::clearing_start_time(this),
        _Internal::clearing_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp clearing_end_time = 13;
  if (this->_internal_has_clearing_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::clearing_end_time(this),
        _Internal::clearing_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp premarket_start_time = 14;
  if (this->_internal_has_premarket_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::premarket_start_time(this),
        _Internal::premarket_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp premarket_end_time = 15;
  if (this->_internal_has_premarket_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::premarket_end_time(this),
        _Internal::premarket_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp closing_auction_start_time = 16;
  if (this->_internal_has_closing_auction_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::closing_auction_start_time(this),
        _Internal::closing_auction_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp opening_auction_end_time = 17;
  if (this->_internal_has_opening_auction_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::opening_auction_end_time(this),
        _Internal::opening_auction_end_time(this).GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intervals_size()); i < n; i++) {
    const auto& repfield = this->_internal_intervals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingDay)
  return target;
}

size_t TradingDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
  total_size += 2UL * this->_internal_intervals_size();
  for (const auto& msg : this->_impl_.intervals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp date = 1;
  if (this->_internal_has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // .google.protobuf.Timestamp opening_auction_start_time = 7;
  if (this->_internal_has_opening_auction_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opening_auction_start_time_);
  }

  // .google.protobuf.Timestamp closing_auction_end_time = 8;
  if (this->_internal_has_closing_auction_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.closing_auction_end_time_);
  }

  // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
  if (this->_internal_has_evening_opening_auction_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evening_opening_auction_start_time_);
  }

  // .google.protobuf.Timestamp evening_start_time = 10;
  if (this->_internal_has_evening_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evening_start_time_);
  }

  // .google.protobuf.Timestamp evening_end_time = 11;
  if (this->_internal_has_evening_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evening_end_time_);
  }

  // .google.protobuf.Timestamp clearing_start_time = 12;
  if (this->_internal_has_clearing_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clearing_start_time_);
  }

  // .google.protobuf.Timestamp clearing_end_time = 13;
  if (this->_internal_has_clearing_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clearing_end_time_);
  }

  // .google.protobuf.Timestamp premarket_start_time = 14;
  if (this->_internal_has_premarket_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.premarket_start_time_);
  }

  // .google.protobuf.Timestamp premarket_end_time = 15;
  if (this->_internal_has_premarket_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.premarket_end_time_);
  }

  // .google.protobuf.Timestamp closing_auction_start_time = 16;
  if (this->_internal_has_closing_auction_start_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.closing_auction_start_time_);
  }

  // .google.protobuf.Timestamp opening_auction_end_time = 17;
  if (this->_internal_has_opening_auction_end_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opening_auction_end_time_);
  }

  // bool is_trading_day = 2;
  if (this->_internal_is_trading_day() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingDay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingDay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingDay::GetClassData() const { return &_class_data_; }


void TradingDay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingDay*>(&to_msg);
  auto& from = static_cast<const TradingDay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.intervals_.MergeFrom(from._impl_.intervals_);
  if (from._internal_has_date()) {
    _this->_internal_mutable_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  if (from._internal_has_opening_auction_start_time()) {
    _this->_internal_mutable_opening_auction_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_opening_auction_start_time());
  }
  if (from._internal_has_closing_auction_end_time()) {
    _this->_internal_mutable_closing_auction_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_closing_auction_end_time());
  }
  if (from._internal_has_evening_opening_auction_start_time()) {
    _this->_internal_mutable_evening_opening_auction_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_evening_opening_auction_start_time());
  }
  if (from._internal_has_evening_start_time()) {
    _this->_internal_mutable_evening_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_evening_start_time());
  }
  if (from._internal_has_evening_end_time()) {
    _this->_internal_mutable_evening_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_evening_end_time());
  }
  if (from._internal_has_clearing_start_time()) {
    _this->_internal_mutable_clearing_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_clearing_start_time());
  }
  if (from._internal_has_clearing_end_time()) {
    _this->_internal_mutable_clearing_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_clearing_end_time());
  }
  if (from._internal_has_premarket_start_time()) {
    _this->_internal_mutable_premarket_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_premarket_start_time());
  }
  if (from._internal_has_premarket_end_time()) {
    _this->_internal_mutable_premarket_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_premarket_end_time());
  }
  if (from._internal_has_closing_auction_start_time()) {
    _this->_internal_mutable_closing_auction_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_closing_auction_start_time());
  }
  if (from._internal_has_opening_auction_end_time()) {
    _this->_internal_mutable_opening_auction_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_opening_auction_end_time());
  }
  if (from._internal_is_trading_day() != 0) {
    _this->_internal_set_is_trading_day(from._internal_is_trading_day());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingDay::CopyFrom(const TradingDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingDay::IsInitialized() const {
  return true;
}

void TradingDay::InternalSwap(TradingDay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.intervals_.InternalSwap(&other->_impl_.intervals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.is_trading_day_)
      + sizeof(TradingDay::_impl_.is_trading_day_)
      - PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingDay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[3]);
}

// ===================================================================

class InstrumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentRequest>()._impl_._has_bits_);
  static void set_has_class_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InstrumentRequest::InstrumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
}
InstrumentRequest::InstrumentRequest(const InstrumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.id_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_class_code()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_type_ = from._impl_.id_type_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
}

inline void InstrumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.id_type_){0}
  };
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstrumentRequest::~InstrumentRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_code_.Destroy();
  _impl_.id_.Destroy();
}

void InstrumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.class_code_.ClearNonDefaultToEmpty();
  }
  _impl_.id_.ClearToEmpty();
  _impl_.id_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id_type(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentIdType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string class_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string id = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_id_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id_type(), target);
  }

  // optional string class_code = 2;
  if (_internal_has_class_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_code(), target);
  }

  // string id = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  return target;
}

size_t InstrumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string class_code = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string id = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_id_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_id_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentRequest::GetClassData() const { return &_class_data_; }


void InstrumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_class_code()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_id_type() != 0) {
    _this->_internal_set_id_type(from._internal_id_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentRequest::CopyFrom(const InstrumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentRequest::IsInitialized() const {
  return true;
}

void InstrumentRequest::InternalSwap(InstrumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.id_type_, other->_impl_.id_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[4]);
}

// ===================================================================

class InstrumentsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentsRequest>()._impl_._has_bits_);
  static void set_has_instrument_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InstrumentsRequest::InstrumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
}
InstrumentsRequest::InstrumentsRequest(const InstrumentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.instrument_status_ = from._impl_.instrument_status_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
}

inline void InstrumentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_status_){0}
  };
}

InstrumentsRequest::~InstrumentsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InstrumentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_status(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
  if (_internal_has_instrument_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_instrument_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  return target;
}

size_t InstrumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentsRequest::GetClassData() const { return &_class_data_; }


void InstrumentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentsRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument_status()) {
    _this->_internal_set_instrument_status(from._internal_instrument_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentsRequest::CopyFrom(const InstrumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentsRequest::IsInitialized() const {
  return true;
}

void InstrumentsRequest::InternalSwap(InstrumentsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_status_, other->_impl_.instrument_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[5]);
}

// ===================================================================

class FilterOptionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterOptionsRequest>()._impl_._has_bits_);
  static void set_has_basic_asset_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_basic_asset_position_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FilterOptionsRequest::FilterOptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
}
FilterOptionsRequest::FilterOptionsRequest(const FilterOptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilterOptionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basic_asset_uid_){}
    , decltype(_impl_.basic_asset_position_uid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.basic_asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_basic_asset_uid()) {
    _this->_impl_.basic_asset_uid_.Set(from._internal_basic_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.basic_asset_position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_basic_asset_position_uid()) {
    _this->_impl_.basic_asset_position_uid_.Set(from._internal_basic_asset_position_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
}

inline void FilterOptionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basic_asset_uid_){}
    , decltype(_impl_.basic_asset_position_uid_){}
  };
  _impl_.basic_asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FilterOptionsRequest::~FilterOptionsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterOptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.basic_asset_uid_.Destroy();
  _impl_.basic_asset_position_uid_.Destroy();
}

void FilterOptionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilterOptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.basic_asset_uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.basic_asset_position_uid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterOptionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string basic_asset_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_basic_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // optional string basic_asset_position_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_basic_asset_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterOptionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string basic_asset_uid = 1;
  if (_internal_has_basic_asset_uid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_asset_uid().data(), static_cast<int>(this->_internal_basic_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_basic_asset_uid(), target);
  }

  // optional string basic_asset_position_uid = 2;
  if (_internal_has_basic_asset_position_uid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_asset_position_uid().data(), static_cast<int>(this->_internal_basic_asset_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_basic_asset_position_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  return target;
}

size_t FilterOptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string basic_asset_uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_basic_asset_uid());
    }

    // optional string basic_asset_position_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_basic_asset_position_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterOptionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilterOptionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterOptionsRequest::GetClassData() const { return &_class_data_; }


void FilterOptionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilterOptionsRequest*>(&to_msg);
  auto& from = static_cast<const FilterOptionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_basic_asset_uid(from._internal_basic_asset_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterOptionsRequest::CopyFrom(const FilterOptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterOptionsRequest::IsInitialized() const {
  return true;
}

void FilterOptionsRequest::InternalSwap(FilterOptionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basic_asset_uid_, lhs_arena,
      &other->_impl_.basic_asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basic_asset_position_uid_, lhs_arena,
      &other->_impl_.basic_asset_position_uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterOptionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[6]);
}

// ===================================================================

class BondResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Bond& instrument(const BondResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Bond&
BondResponse::_Internal::instrument(const BondResponse* msg) {
  return *msg->_impl_.instrument_;
}
BondResponse::BondResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BondResponse)
}
BondResponse::BondResponse(const BondResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BondResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::tinkoff::public_::invest::api::contract::v1::Bond(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BondResponse)
}

inline void BondResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BondResponse::~BondResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BondResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BondResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void BondResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BondResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BondResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BondResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BondResponse)
  return target;
}

size_t BondResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BondResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BondResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BondResponse::GetClassData() const { return &_class_data_; }


void BondResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BondResponse*>(&to_msg);
  auto& from = static_cast<const BondResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Bond::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BondResponse::CopyFrom(const BondResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BondResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BondResponse::IsInitialized() const {
  return true;
}

void BondResponse::InternalSwap(BondResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BondResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[7]);
}

// ===================================================================

class BondsResponse::_Internal {
 public:
};

BondsResponse::BondsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BondsResponse)
}
BondsResponse::BondsResponse(const BondsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BondsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BondsResponse)
}

inline void BondsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BondsResponse::~BondsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BondsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void BondsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BondsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BondsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BondsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  return target;
}

size_t BondsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BondsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BondsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BondsResponse::GetClassData() const { return &_class_data_; }


void BondsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BondsResponse*>(&to_msg);
  auto& from = static_cast<const BondsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BondsResponse::CopyFrom(const BondsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BondsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BondsResponse::IsInitialized() const {
  return true;
}

void BondsResponse::InternalSwap(BondsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BondsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[8]);
}

// ===================================================================

class GetBondCouponsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBondCouponsRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetBondCouponsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetBondCouponsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondCouponsRequest::_Internal::from(const GetBondCouponsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondCouponsRequest::_Internal::to(const GetBondCouponsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetBondCouponsRequest::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondCouponsRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetBondCouponsRequest::GetBondCouponsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
}
GetBondCouponsRequest::GetBondCouponsRequest(const GetBondCouponsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBondCouponsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
}

inline void GetBondCouponsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBondCouponsRequest::~GetBondCouponsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBondCouponsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetBondCouponsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBondCouponsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBondCouponsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBondCouponsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // optional .google.protobuf.Timestamp from = 2;
  if (_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  return target;
}

size_t GetBondCouponsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBondCouponsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBondCouponsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBondCouponsRequest::GetClassData() const { return &_class_data_; }


void GetBondCouponsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBondCouponsRequest*>(&to_msg);
  auto& from = static_cast<const GetBondCouponsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondCouponsRequest::CopyFrom(const GetBondCouponsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBondCouponsRequest::IsInitialized() const {
  return true;
}

void GetBondCouponsRequest::InternalSwap(GetBondCouponsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.to_)
      + sizeof(GetBondCouponsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBondCouponsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[9]);
}

// ===================================================================

class GetBondCouponsResponse::_Internal {
 public:
};

GetBondCouponsResponse::GetBondCouponsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
}
GetBondCouponsResponse::GetBondCouponsResponse(const GetBondCouponsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBondCouponsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
}

inline void GetBondCouponsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBondCouponsResponse::~GetBondCouponsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBondCouponsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void GetBondCouponsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBondCouponsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBondCouponsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBondCouponsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  return target;
}

size_t GetBondCouponsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBondCouponsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBondCouponsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBondCouponsResponse::GetClassData() const { return &_class_data_; }


void GetBondCouponsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBondCouponsResponse*>(&to_msg);
  auto& from = static_cast<const GetBondCouponsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondCouponsResponse::CopyFrom(const GetBondCouponsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBondCouponsResponse::IsInitialized() const {
  return true;
}

void GetBondCouponsResponse::InternalSwap(GetBondCouponsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBondCouponsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[10]);
}

// ===================================================================

class GetBondEventsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBondEventsRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetBondEventsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetBondEventsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsRequest::_Internal::from(const GetBondEventsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsRequest::_Internal::to(const GetBondEventsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetBondEventsRequest::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondEventsRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetBondEventsRequest::GetBondEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
}
GetBondEventsRequest::GetBondEventsRequest(const GetBondEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBondEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
}

inline void GetBondEventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.type_){0}
  };
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBondEventsRequest::~GetBondEventsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBondEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetBondEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBondEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBondEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .google.protobuf.Timestamp from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBondEventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .google.protobuf.Timestamp from = 2;
  if (_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  return target;
}

size_t GetBondEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBondEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBondEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBondEventsRequest::GetClassData() const { return &_class_data_; }


void GetBondEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBondEventsRequest*>(&to_msg);
  auto& from = static_cast<const GetBondEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsRequest::CopyFrom(const GetBondEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBondEventsRequest::IsInitialized() const {
  return true;
}

void GetBondEventsRequest::InternalSwap(GetBondEventsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.type_)
      + sizeof(GetBondEventsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBondEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[11]);
}

// ===================================================================

class GetBondEventsResponse_BondEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& event_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& event_total_vol(const GetBondEventsResponse_BondEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& fix_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& rate_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& default_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& real_pay_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& pay_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& pay_one_bond(const GetBondEventsResponse_BondEvent* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& money_flow_val(const GetBondEventsResponse_BondEvent* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& value(const GetBondEventsResponse_BondEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& coupon_start_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& coupon_end_date(const GetBondEventsResponse_BondEvent* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& coupon_interest_rate(const GetBondEventsResponse_BondEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::event_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.event_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetBondEventsResponse_BondEvent::_Internal::event_total_vol(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.event_total_vol_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::fix_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.fix_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::rate_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.rate_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::default_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.default_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::real_pay_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.real_pay_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::pay_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.pay_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetBondEventsResponse_BondEvent::_Internal::pay_one_bond(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.pay_one_bond_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetBondEventsResponse_BondEvent::_Internal::money_flow_val(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.money_flow_val_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetBondEventsResponse_BondEvent::_Internal::value(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.value_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::coupon_start_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.coupon_start_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBondEventsResponse_BondEvent::_Internal::coupon_end_date(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.coupon_end_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetBondEventsResponse_BondEvent::_Internal::coupon_interest_rate(const GetBondEventsResponse_BondEvent* msg) {
  return *msg->_impl_.coupon_interest_rate_;
}
void GetBondEventsResponse_BondEvent::clear_event_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_date_ != nullptr) {
    delete _impl_.event_date_;
  }
  _impl_.event_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_event_total_vol() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_total_vol_ != nullptr) {
    delete _impl_.event_total_vol_;
  }
  _impl_.event_total_vol_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_fix_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.fix_date_ != nullptr) {
    delete _impl_.fix_date_;
  }
  _impl_.fix_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_rate_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.rate_date_ != nullptr) {
    delete _impl_.rate_date_;
  }
  _impl_.rate_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_default_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.default_date_ != nullptr) {
    delete _impl_.default_date_;
  }
  _impl_.default_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_real_pay_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.real_pay_date_ != nullptr) {
    delete _impl_.real_pay_date_;
  }
  _impl_.real_pay_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_pay_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.pay_date_ != nullptr) {
    delete _impl_.pay_date_;
  }
  _impl_.pay_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_pay_one_bond() {
  if (GetArenaForAllocation() == nullptr && _impl_.pay_one_bond_ != nullptr) {
    delete _impl_.pay_one_bond_;
  }
  _impl_.pay_one_bond_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_money_flow_val() {
  if (GetArenaForAllocation() == nullptr && _impl_.money_flow_val_ != nullptr) {
    delete _impl_.money_flow_val_;
  }
  _impl_.money_flow_val_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_coupon_start_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_start_date_ != nullptr) {
    delete _impl_.coupon_start_date_;
  }
  _impl_.coupon_start_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_coupon_end_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_end_date_ != nullptr) {
    delete _impl_.coupon_end_date_;
  }
  _impl_.coupon_end_date_ = nullptr;
}
void GetBondEventsResponse_BondEvent::clear_coupon_interest_rate() {
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_interest_rate_ != nullptr) {
    delete _impl_.coupon_interest_rate_;
  }
  _impl_.coupon_interest_rate_ = nullptr;
}
GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
}
GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(const GetBondEventsResponse_BondEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBondEventsResponse_BondEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , decltype(_impl_.execution_){}
    , decltype(_impl_.operation_type_){}
    , decltype(_impl_.note_){}
    , decltype(_impl_.convert_to_fin_tool_id_){}
    , decltype(_impl_.event_date_){nullptr}
    , decltype(_impl_.event_total_vol_){nullptr}
    , decltype(_impl_.fix_date_){nullptr}
    , decltype(_impl_.rate_date_){nullptr}
    , decltype(_impl_.default_date_){nullptr}
    , decltype(_impl_.real_pay_date_){nullptr}
    , decltype(_impl_.pay_date_){nullptr}
    , decltype(_impl_.pay_one_bond_){nullptr}
    , decltype(_impl_.money_flow_val_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.coupon_start_date_){nullptr}
    , decltype(_impl_.coupon_end_date_){nullptr}
    , decltype(_impl_.coupon_interest_rate_){nullptr}
    , decltype(_impl_.event_number_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.coupon_period_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.execution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution().empty()) {
    _this->_impl_.execution_.Set(from._internal_execution(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note().empty()) {
    _this->_impl_.note_.Set(from._internal_note(), 
      _this->GetArenaForAllocation());
  }
  _impl_.convert_to_fin_tool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convert_to_fin_tool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_convert_to_fin_tool_id().empty()) {
    _this->_impl_.convert_to_fin_tool_id_.Set(from._internal_convert_to_fin_tool_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event_date()) {
    _this->_impl_.event_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.event_date_);
  }
  if (from._internal_has_event_total_vol()) {
    _this->_impl_.event_total_vol_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.event_total_vol_);
  }
  if (from._internal_has_fix_date()) {
    _this->_impl_.fix_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.fix_date_);
  }
  if (from._internal_has_rate_date()) {
    _this->_impl_.rate_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.rate_date_);
  }
  if (from._internal_has_default_date()) {
    _this->_impl_.default_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.default_date_);
  }
  if (from._internal_has_real_pay_date()) {
    _this->_impl_.real_pay_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.real_pay_date_);
  }
  if (from._internal_has_pay_date()) {
    _this->_impl_.pay_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.pay_date_);
  }
  if (from._internal_has_pay_one_bond()) {
    _this->_impl_.pay_one_bond_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.pay_one_bond_);
  }
  if (from._internal_has_money_flow_val()) {
    _this->_impl_.money_flow_val_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.money_flow_val_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.value_);
  }
  if (from._internal_has_coupon_start_date()) {
    _this->_impl_.coupon_start_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.coupon_start_date_);
  }
  if (from._internal_has_coupon_end_date()) {
    _this->_impl_.coupon_end_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.coupon_end_date_);
  }
  if (from._internal_has_coupon_interest_rate()) {
    _this->_impl_.coupon_interest_rate_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.coupon_interest_rate_);
  }
  ::memcpy(&_impl_.event_number_, &from._impl_.event_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coupon_period_) -
    reinterpret_cast<char*>(&_impl_.event_number_)) + sizeof(_impl_.coupon_period_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
}

inline void GetBondEventsResponse_BondEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , decltype(_impl_.execution_){}
    , decltype(_impl_.operation_type_){}
    , decltype(_impl_.note_){}
    , decltype(_impl_.convert_to_fin_tool_id_){}
    , decltype(_impl_.event_date_){nullptr}
    , decltype(_impl_.event_total_vol_){nullptr}
    , decltype(_impl_.fix_date_){nullptr}
    , decltype(_impl_.rate_date_){nullptr}
    , decltype(_impl_.default_date_){nullptr}
    , decltype(_impl_.real_pay_date_){nullptr}
    , decltype(_impl_.pay_date_){nullptr}
    , decltype(_impl_.pay_one_bond_){nullptr}
    , decltype(_impl_.money_flow_val_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.coupon_start_date_){nullptr}
    , decltype(_impl_.coupon_end_date_){nullptr}
    , decltype(_impl_.coupon_interest_rate_){nullptr}
    , decltype(_impl_.event_number_){0}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.coupon_period_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.convert_to_fin_tool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convert_to_fin_tool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBondEventsResponse_BondEvent::~GetBondEventsResponse_BondEvent() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBondEventsResponse_BondEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_id_.Destroy();
  _impl_.execution_.Destroy();
  _impl_.operation_type_.Destroy();
  _impl_.note_.Destroy();
  _impl_.convert_to_fin_tool_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_date_;
  if (this != internal_default_instance()) delete _impl_.event_total_vol_;
  if (this != internal_default_instance()) delete _impl_.fix_date_;
  if (this != internal_default_instance()) delete _impl_.rate_date_;
  if (this != internal_default_instance()) delete _impl_.default_date_;
  if (this != internal_default_instance()) delete _impl_.real_pay_date_;
  if (this != internal_default_instance()) delete _impl_.pay_date_;
  if (this != internal_default_instance()) delete _impl_.pay_one_bond_;
  if (this != internal_default_instance()) delete _impl_.money_flow_val_;
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.coupon_start_date_;
  if (this != internal_default_instance()) delete _impl_.coupon_end_date_;
  if (this != internal_default_instance()) delete _impl_.coupon_interest_rate_;
}

void GetBondEventsResponse_BondEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBondEventsResponse_BondEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _impl_.execution_.ClearToEmpty();
  _impl_.operation_type_.ClearToEmpty();
  _impl_.note_.ClearToEmpty();
  _impl_.convert_to_fin_tool_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_date_ != nullptr) {
    delete _impl_.event_date_;
  }
  _impl_.event_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.event_total_vol_ != nullptr) {
    delete _impl_.event_total_vol_;
  }
  _impl_.event_total_vol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fix_date_ != nullptr) {
    delete _impl_.fix_date_;
  }
  _impl_.fix_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rate_date_ != nullptr) {
    delete _impl_.rate_date_;
  }
  _impl_.rate_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.default_date_ != nullptr) {
    delete _impl_.default_date_;
  }
  _impl_.default_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.real_pay_date_ != nullptr) {
    delete _impl_.real_pay_date_;
  }
  _impl_.real_pay_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pay_date_ != nullptr) {
    delete _impl_.pay_date_;
  }
  _impl_.pay_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pay_one_bond_ != nullptr) {
    delete _impl_.pay_one_bond_;
  }
  _impl_.pay_one_bond_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.money_flow_val_ != nullptr) {
    delete _impl_.money_flow_val_;
  }
  _impl_.money_flow_val_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_start_date_ != nullptr) {
    delete _impl_.coupon_start_date_;
  }
  _impl_.coupon_start_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_end_date_ != nullptr) {
    delete _impl_.coupon_end_date_;
  }
  _impl_.coupon_end_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_interest_rate_ != nullptr) {
    delete _impl_.coupon_interest_rate_;
  }
  _impl_.coupon_interest_rate_ = nullptr;
  ::memset(&_impl_.event_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.coupon_period_) -
      reinterpret_cast<char*>(&_impl_.event_number_)) + sizeof(_impl_.coupon_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBondEventsResponse_BondEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 event_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp event_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_total_vol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp fix_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fix_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp rate_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp default_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp real_pay_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_real_pay_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp pay_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pay_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pay_one_bond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_money_flow_val(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string execution = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_execution();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution"));
        } else
          goto handle_unusual;
        continue;
      // string operation_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string note = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note"));
        } else
          goto handle_unusual;
        continue;
      // string convert_to_fin_tool_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_convert_to_fin_tool_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp coupon_start_date = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_coupon_start_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp coupon_end_date = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_coupon_end_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 coupon_period = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.coupon_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_coupon_interest_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBondEventsResponse_BondEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  // int32 event_number = 3;
  if (this->_internal_event_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_event_number(), target);
  }

  // .google.protobuf.Timestamp event_date = 4;
  if (this->_internal_has_event_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::event_date(this),
        _Internal::event_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_event_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
  if (this->_internal_has_event_total_vol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::event_total_vol(this),
        _Internal::event_total_vol(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp fix_date = 7;
  if (this->_internal_has_fix_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::fix_date(this),
        _Internal::fix_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp rate_date = 8;
  if (this->_internal_has_rate_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::rate_date(this),
        _Internal::rate_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp default_date = 9;
  if (this->_internal_has_default_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::default_date(this),
        _Internal::default_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp real_pay_date = 10;
  if (this->_internal_has_real_pay_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::real_pay_date(this),
        _Internal::real_pay_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp pay_date = 11;
  if (this->_internal_has_pay_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::pay_date(this),
        _Internal::pay_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
  if (this->_internal_has_pay_one_bond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::pay_one_bond(this),
        _Internal::pay_one_bond(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
  if (this->_internal_has_money_flow_val()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::money_flow_val(this),
        _Internal::money_flow_val(this).GetCachedSize(), target, stream);
  }

  // string execution = 14;
  if (!this->_internal_execution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution().data(), static_cast<int>(this->_internal_execution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_execution(), target);
  }

  // string operation_type = 15;
  if (!this->_internal_operation_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_type().data(), static_cast<int>(this->_internal_operation_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_operation_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // string note = 17;
  if (!this->_internal_note().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_note(), target);
  }

  // string convert_to_fin_tool_id = 18;
  if (!this->_internal_convert_to_fin_tool_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_convert_to_fin_tool_id().data(), static_cast<int>(this->_internal_convert_to_fin_tool_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_convert_to_fin_tool_id(), target);
  }

  // .google.protobuf.Timestamp coupon_start_date = 19;
  if (this->_internal_has_coupon_start_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::coupon_start_date(this),
        _Internal::coupon_start_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp coupon_end_date = 20;
  if (this->_internal_has_coupon_end_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::coupon_end_date(this),
        _Internal::coupon_end_date(this).GetCachedSize(), target, stream);
  }

  // int32 coupon_period = 21;
  if (this->_internal_coupon_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_coupon_period(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
  if (this->_internal_has_coupon_interest_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::coupon_interest_rate(this),
        _Internal::coupon_interest_rate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  return target;
}

size_t GetBondEventsResponse_BondEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string execution = 14;
  if (!this->_internal_execution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution());
  }

  // string operation_type = 15;
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_type());
  }

  // string note = 17;
  if (!this->_internal_note().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  // string convert_to_fin_tool_id = 18;
  if (!this->_internal_convert_to_fin_tool_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_convert_to_fin_tool_id());
  }

  // .google.protobuf.Timestamp event_date = 4;
  if (this->_internal_has_event_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
  if (this->_internal_has_event_total_vol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_total_vol_);
  }

  // .google.protobuf.Timestamp fix_date = 7;
  if (this->_internal_has_fix_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fix_date_);
  }

  // .google.protobuf.Timestamp rate_date = 8;
  if (this->_internal_has_rate_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rate_date_);
  }

  // .google.protobuf.Timestamp default_date = 9;
  if (this->_internal_has_default_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_date_);
  }

  // .google.protobuf.Timestamp real_pay_date = 10;
  if (this->_internal_has_real_pay_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.real_pay_date_);
  }

  // .google.protobuf.Timestamp pay_date = 11;
  if (this->_internal_has_pay_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pay_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
  if (this->_internal_has_pay_one_bond()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pay_one_bond_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
  if (this->_internal_has_money_flow_val()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.money_flow_val_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
  if (this->_internal_has_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // .google.protobuf.Timestamp coupon_start_date = 19;
  if (this->_internal_has_coupon_start_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coupon_start_date_);
  }

  // .google.protobuf.Timestamp coupon_end_date = 20;
  if (this->_internal_has_coupon_end_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coupon_end_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
  if (this->_internal_has_coupon_interest_rate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coupon_interest_rate_);
  }

  // int32 event_number = 3;
  if (this->_internal_event_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_number());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  // int32 coupon_period = 21;
  if (this->_internal_coupon_period() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_coupon_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBondEventsResponse_BondEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBondEventsResponse_BondEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBondEventsResponse_BondEvent::GetClassData() const { return &_class_data_; }


void GetBondEventsResponse_BondEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBondEventsResponse_BondEvent*>(&to_msg);
  auto& from = static_cast<const GetBondEventsResponse_BondEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!from._internal_execution().empty()) {
    _this->_internal_set_execution(from._internal_execution());
  }
  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (!from._internal_note().empty()) {
    _this->_internal_set_note(from._internal_note());
  }
  if (!from._internal_convert_to_fin_tool_id().empty()) {
    _this->_internal_set_convert_to_fin_tool_id(from._internal_convert_to_fin_tool_id());
  }
  if (from._internal_has_event_date()) {
    _this->_internal_mutable_event_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_event_date());
  }
  if (from._internal_has_event_total_vol()) {
    _this->_internal_mutable_event_total_vol()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_event_total_vol());
  }
  if (from._internal_has_fix_date()) {
    _this->_internal_mutable_fix_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_fix_date());
  }
  if (from._internal_has_rate_date()) {
    _this->_internal_mutable_rate_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_rate_date());
  }
  if (from._internal_has_default_date()) {
    _this->_internal_mutable_default_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_default_date());
  }
  if (from._internal_has_real_pay_date()) {
    _this->_internal_mutable_real_pay_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_real_pay_date());
  }
  if (from._internal_has_pay_date()) {
    _this->_internal_mutable_pay_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_pay_date());
  }
  if (from._internal_has_pay_one_bond()) {
    _this->_internal_mutable_pay_one_bond()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_pay_one_bond());
  }
  if (from._internal_has_money_flow_val()) {
    _this->_internal_mutable_money_flow_val()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_money_flow_val());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_value());
  }
  if (from._internal_has_coupon_start_date()) {
    _this->_internal_mutable_coupon_start_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_coupon_start_date());
  }
  if (from._internal_has_coupon_end_date()) {
    _this->_internal_mutable_coupon_end_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_coupon_end_date());
  }
  if (from._internal_has_coupon_interest_rate()) {
    _this->_internal_mutable_coupon_interest_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_coupon_interest_rate());
  }
  if (from._internal_event_number() != 0) {
    _this->_internal_set_event_number(from._internal_event_number());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_coupon_period() != 0) {
    _this->_internal_set_coupon_period(from._internal_coupon_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsResponse_BondEvent::CopyFrom(const GetBondEventsResponse_BondEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBondEventsResponse_BondEvent::IsInitialized() const {
  return true;
}

void GetBondEventsResponse_BondEvent::InternalSwap(GetBondEventsResponse_BondEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execution_, lhs_arena,
      &other->_impl_.execution_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_type_, lhs_arena,
      &other->_impl_.operation_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_, lhs_arena,
      &other->_impl_.note_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.convert_to_fin_tool_id_, lhs_arena,
      &other->_impl_.convert_to_fin_tool_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_period_)
      + sizeof(GetBondEventsResponse_BondEvent::_impl_.coupon_period_)
      - PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_date_)>(
          reinterpret_cast<char*>(&_impl_.event_date_),
          reinterpret_cast<char*>(&other->_impl_.event_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBondEventsResponse_BondEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[12]);
}

// ===================================================================

class GetBondEventsResponse::_Internal {
 public:
};

GetBondEventsResponse::GetBondEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
}
GetBondEventsResponse::GetBondEventsResponse(const GetBondEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBondEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
}

inline void GetBondEventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBondEventsResponse::~GetBondEventsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBondEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void GetBondEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBondEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBondEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBondEventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  return target;
}

size_t GetBondEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBondEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBondEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBondEventsResponse::GetClassData() const { return &_class_data_; }


void GetBondEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBondEventsResponse*>(&to_msg);
  auto& from = static_cast<const GetBondEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsResponse::CopyFrom(const GetBondEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBondEventsResponse::IsInitialized() const {
  return true;
}

void GetBondEventsResponse::InternalSwap(GetBondEventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBondEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[13]);
}

// ===================================================================

class Coupon::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& coupon_date(const Coupon* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& fix_date(const Coupon* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& pay_one_bond(const Coupon* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& coupon_start_date(const Coupon* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& coupon_end_date(const Coupon* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Coupon::_Internal::coupon_date(const Coupon* msg) {
  return *msg->_impl_.coupon_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Coupon::_Internal::fix_date(const Coupon* msg) {
  return *msg->_impl_.fix_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Coupon::_Internal::pay_one_bond(const Coupon* msg) {
  return *msg->_impl_.pay_one_bond_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Coupon::_Internal::coupon_start_date(const Coupon* msg) {
  return *msg->_impl_.coupon_start_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Coupon::_Internal::coupon_end_date(const Coupon* msg) {
  return *msg->_impl_.coupon_end_date_;
}
void Coupon::clear_coupon_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_date_ != nullptr) {
    delete _impl_.coupon_date_;
  }
  _impl_.coupon_date_ = nullptr;
}
void Coupon::clear_fix_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.fix_date_ != nullptr) {
    delete _impl_.fix_date_;
  }
  _impl_.fix_date_ = nullptr;
}
void Coupon::clear_pay_one_bond() {
  if (GetArenaForAllocation() == nullptr && _impl_.pay_one_bond_ != nullptr) {
    delete _impl_.pay_one_bond_;
  }
  _impl_.pay_one_bond_ = nullptr;
}
void Coupon::clear_coupon_start_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_start_date_ != nullptr) {
    delete _impl_.coupon_start_date_;
  }
  _impl_.coupon_start_date_ = nullptr;
}
void Coupon::clear_coupon_end_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_end_date_ != nullptr) {
    delete _impl_.coupon_end_date_;
  }
  _impl_.coupon_end_date_ = nullptr;
}
Coupon::Coupon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Coupon)
}
Coupon::Coupon(const Coupon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coupon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.coupon_date_){nullptr}
    , decltype(_impl_.fix_date_){nullptr}
    , decltype(_impl_.pay_one_bond_){nullptr}
    , decltype(_impl_.coupon_start_date_){nullptr}
    , decltype(_impl_.coupon_end_date_){nullptr}
    , decltype(_impl_.coupon_number_){}
    , decltype(_impl_.coupon_type_){}
    , decltype(_impl_.coupon_period_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_coupon_date()) {
    _this->_impl_.coupon_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.coupon_date_);
  }
  if (from._internal_has_fix_date()) {
    _this->_impl_.fix_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.fix_date_);
  }
  if (from._internal_has_pay_one_bond()) {
    _this->_impl_.pay_one_bond_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.pay_one_bond_);
  }
  if (from._internal_has_coupon_start_date()) {
    _this->_impl_.coupon_start_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.coupon_start_date_);
  }
  if (from._internal_has_coupon_end_date()) {
    _this->_impl_.coupon_end_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.coupon_end_date_);
  }
  ::memcpy(&_impl_.coupon_number_, &from._impl_.coupon_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coupon_period_) -
    reinterpret_cast<char*>(&_impl_.coupon_number_)) + sizeof(_impl_.coupon_period_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Coupon)
}

inline void Coupon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.coupon_date_){nullptr}
    , decltype(_impl_.fix_date_){nullptr}
    , decltype(_impl_.pay_one_bond_){nullptr}
    , decltype(_impl_.coupon_start_date_){nullptr}
    , decltype(_impl_.coupon_end_date_){nullptr}
    , decltype(_impl_.coupon_number_){int64_t{0}}
    , decltype(_impl_.coupon_type_){0}
    , decltype(_impl_.coupon_period_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Coupon::~Coupon() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Coupon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coupon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coupon_date_;
  if (this != internal_default_instance()) delete _impl_.fix_date_;
  if (this != internal_default_instance()) delete _impl_.pay_one_bond_;
  if (this != internal_default_instance()) delete _impl_.coupon_start_date_;
  if (this != internal_default_instance()) delete _impl_.coupon_end_date_;
}

void Coupon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coupon::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_date_ != nullptr) {
    delete _impl_.coupon_date_;
  }
  _impl_.coupon_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fix_date_ != nullptr) {
    delete _impl_.fix_date_;
  }
  _impl_.fix_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pay_one_bond_ != nullptr) {
    delete _impl_.pay_one_bond_;
  }
  _impl_.pay_one_bond_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_start_date_ != nullptr) {
    delete _impl_.coupon_start_date_;
  }
  _impl_.coupon_start_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coupon_end_date_ != nullptr) {
    delete _impl_.coupon_end_date_;
  }
  _impl_.coupon_end_date_ = nullptr;
  ::memset(&_impl_.coupon_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.coupon_period_) -
      reinterpret_cast<char*>(&_impl_.coupon_number_)) + sizeof(_impl_.coupon_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coupon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Coupon.figi"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp coupon_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coupon_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 coupon_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.coupon_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp fix_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fix_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pay_one_bond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_coupon_type(static_cast<::tinkoff::public_::invest::api::contract::v1::CouponType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp coupon_start_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_coupon_start_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp coupon_end_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_coupon_end_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 coupon_period = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.coupon_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coupon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Coupon.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .google.protobuf.Timestamp coupon_date = 2;
  if (this->_internal_has_coupon_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coupon_date(this),
        _Internal::coupon_date(this).GetCachedSize(), target, stream);
  }

  // int64 coupon_number = 3;
  if (this->_internal_coupon_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_coupon_number(), target);
  }

  // .google.protobuf.Timestamp fix_date = 4;
  if (this->_internal_has_fix_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fix_date(this),
        _Internal::fix_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
  if (this->_internal_has_pay_one_bond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pay_one_bond(this),
        _Internal::pay_one_bond(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
  if (this->_internal_coupon_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_coupon_type(), target);
  }

  // .google.protobuf.Timestamp coupon_start_date = 7;
  if (this->_internal_has_coupon_start_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::coupon_start_date(this),
        _Internal::coupon_start_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp coupon_end_date = 8;
  if (this->_internal_has_coupon_end_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::coupon_end_date(this),
        _Internal::coupon_end_date(this).GetCachedSize(), target, stream);
  }

  // int32 coupon_period = 9;
  if (this->_internal_coupon_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_coupon_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Coupon)
  return target;
}

size_t Coupon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // .google.protobuf.Timestamp coupon_date = 2;
  if (this->_internal_has_coupon_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coupon_date_);
  }

  // .google.protobuf.Timestamp fix_date = 4;
  if (this->_internal_has_fix_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fix_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
  if (this->_internal_has_pay_one_bond()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pay_one_bond_);
  }

  // .google.protobuf.Timestamp coupon_start_date = 7;
  if (this->_internal_has_coupon_start_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coupon_start_date_);
  }

  // .google.protobuf.Timestamp coupon_end_date = 8;
  if (this->_internal_has_coupon_end_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coupon_end_date_);
  }

  // int64 coupon_number = 3;
  if (this->_internal_coupon_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_coupon_number());
  }

  // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
  if (this->_internal_coupon_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_coupon_type());
  }

  // int32 coupon_period = 9;
  if (this->_internal_coupon_period() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coupon_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coupon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coupon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coupon::GetClassData() const { return &_class_data_; }


void Coupon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coupon*>(&to_msg);
  auto& from = static_cast<const Coupon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (from._internal_has_coupon_date()) {
    _this->_internal_mutable_coupon_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_coupon_date());
  }
  if (from._internal_has_fix_date()) {
    _this->_internal_mutable_fix_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_fix_date());
  }
  if (from._internal_has_pay_one_bond()) {
    _this->_internal_mutable_pay_one_bond()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_pay_one_bond());
  }
  if (from._internal_has_coupon_start_date()) {
    _this->_internal_mutable_coupon_start_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_coupon_start_date());
  }
  if (from._internal_has_coupon_end_date()) {
    _this->_internal_mutable_coupon_end_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_coupon_end_date());
  }
  if (from._internal_coupon_number() != 0) {
    _this->_internal_set_coupon_number(from._internal_coupon_number());
  }
  if (from._internal_coupon_type() != 0) {
    _this->_internal_set_coupon_type(from._internal_coupon_type());
  }
  if (from._internal_coupon_period() != 0) {
    _this->_internal_set_coupon_period(from._internal_coupon_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coupon::CopyFrom(const Coupon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Coupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coupon::IsInitialized() const {
  return true;
}

void Coupon::InternalSwap(Coupon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_period_)
      + sizeof(Coupon::_impl_.coupon_period_)
      - PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_date_)>(
          reinterpret_cast<char*>(&_impl_.coupon_date_),
          reinterpret_cast<char*>(&other->_impl_.coupon_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coupon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[14]);
}

// ===================================================================

class CurrencyResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Currency& instrument(const CurrencyResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Currency&
CurrencyResponse::_Internal::instrument(const CurrencyResponse* msg) {
  return *msg->_impl_.instrument_;
}
CurrencyResponse::CurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
}
CurrencyResponse::CurrencyResponse(const CurrencyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrencyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::tinkoff::public_::invest::api::contract::v1::Currency(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
}

inline void CurrencyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrencyResponse::~CurrencyResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrencyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void CurrencyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrencyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  return target;
}

size_t CurrencyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrencyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrencyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrencyResponse::GetClassData() const { return &_class_data_; }


void CurrencyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrencyResponse*>(&to_msg);
  auto& from = static_cast<const CurrencyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Currency::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyResponse::CopyFrom(const CurrencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyResponse::IsInitialized() const {
  return true;
}

void CurrencyResponse::InternalSwap(CurrencyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[15]);
}

// ===================================================================

class CurrenciesResponse::_Internal {
 public:
};

CurrenciesResponse::CurrenciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
}
CurrenciesResponse::CurrenciesResponse(const CurrenciesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrenciesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
}

inline void CurrenciesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrenciesResponse::~CurrenciesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrenciesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void CurrenciesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrenciesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrenciesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrenciesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  return target;
}

size_t CurrenciesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrenciesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrenciesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrenciesResponse::GetClassData() const { return &_class_data_; }


void CurrenciesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrenciesResponse*>(&to_msg);
  auto& from = static_cast<const CurrenciesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrenciesResponse::CopyFrom(const CurrenciesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrenciesResponse::IsInitialized() const {
  return true;
}

void CurrenciesResponse::InternalSwap(CurrenciesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrenciesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[16]);
}

// ===================================================================

class EtfResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Etf& instrument(const EtfResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Etf&
EtfResponse::_Internal::instrument(const EtfResponse* msg) {
  return *msg->_impl_.instrument_;
}
EtfResponse::EtfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EtfResponse)
}
EtfResponse::EtfResponse(const EtfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EtfResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::tinkoff::public_::invest::api::contract::v1::Etf(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EtfResponse)
}

inline void EtfResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EtfResponse::~EtfResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EtfResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void EtfResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EtfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EtfResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EtfResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  return target;
}

size_t EtfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EtfResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EtfResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EtfResponse::GetClassData() const { return &_class_data_; }


void EtfResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EtfResponse*>(&to_msg);
  auto& from = static_cast<const EtfResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Etf::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EtfResponse::CopyFrom(const EtfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EtfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtfResponse::IsInitialized() const {
  return true;
}

void EtfResponse::InternalSwap(EtfResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EtfResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[17]);
}

// ===================================================================

class EtfsResponse::_Internal {
 public:
};

EtfsResponse::EtfsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
}
EtfsResponse::EtfsResponse(const EtfsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EtfsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
}

inline void EtfsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EtfsResponse::~EtfsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EtfsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void EtfsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EtfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EtfsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EtfsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  return target;
}

size_t EtfsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EtfsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EtfsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EtfsResponse::GetClassData() const { return &_class_data_; }


void EtfsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EtfsResponse*>(&to_msg);
  auto& from = static_cast<const EtfsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EtfsResponse::CopyFrom(const EtfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtfsResponse::IsInitialized() const {
  return true;
}

void EtfsResponse::InternalSwap(EtfsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EtfsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[18]);
}

// ===================================================================

class FutureResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Future& instrument(const FutureResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Future&
FutureResponse::_Internal::instrument(const FutureResponse* msg) {
  return *msg->_impl_.instrument_;
}
FutureResponse::FutureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FutureResponse)
}
FutureResponse::FutureResponse(const FutureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FutureResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::tinkoff::public_::invest::api::contract::v1::Future(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FutureResponse)
}

inline void FutureResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FutureResponse::~FutureResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FutureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void FutureResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FutureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FutureResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  return target;
}

size_t FutureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FutureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FutureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FutureResponse::GetClassData() const { return &_class_data_; }


void FutureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FutureResponse*>(&to_msg);
  auto& from = static_cast<const FutureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Future::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FutureResponse::CopyFrom(const FutureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FutureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureResponse::IsInitialized() const {
  return true;
}

void FutureResponse::InternalSwap(FutureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[19]);
}

// ===================================================================

class FuturesResponse::_Internal {
 public:
};

FuturesResponse::FuturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
}
FuturesResponse::FuturesResponse(const FuturesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FuturesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
}

inline void FuturesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FuturesResponse::~FuturesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FuturesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void FuturesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FuturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuturesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FuturesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  return target;
}

size_t FuturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuturesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FuturesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuturesResponse::GetClassData() const { return &_class_data_; }


void FuturesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FuturesResponse*>(&to_msg);
  auto& from = static_cast<const FuturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuturesResponse::CopyFrom(const FuturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuturesResponse::IsInitialized() const {
  return true;
}

void FuturesResponse::InternalSwap(FuturesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FuturesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[20]);
}

// ===================================================================

class OptionResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Option& instrument(const OptionResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Option&
OptionResponse::_Internal::instrument(const OptionResponse* msg) {
  return *msg->_impl_.instrument_;
}
OptionResponse::OptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OptionResponse)
}
OptionResponse::OptionResponse(const OptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::tinkoff::public_::invest::api::contract::v1::Option(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OptionResponse)
}

inline void OptionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptionResponse::~OptionResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void OptionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  return target;
}

size_t OptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionResponse::GetClassData() const { return &_class_data_; }


void OptionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionResponse*>(&to_msg);
  auto& from = static_cast<const OptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Option::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionResponse::CopyFrom(const OptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionResponse::IsInitialized() const {
  return true;
}

void OptionResponse::InternalSwap(OptionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[21]);
}

// ===================================================================

class OptionsResponse::_Internal {
 public:
};

OptionsResponse::OptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
}
OptionsResponse::OptionsResponse(const OptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
}

inline void OptionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptionsResponse::~OptionsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void OptionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  return target;
}

size_t OptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionsResponse::GetClassData() const { return &_class_data_; }


void OptionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionsResponse*>(&to_msg);
  auto& from = static_cast<const OptionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionsResponse::CopyFrom(const OptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsResponse::IsInitialized() const {
  return true;
}

void OptionsResponse::InternalSwap(OptionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[22]);
}

// ===================================================================

class Option::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& basic_asset_size(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Option* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& strike_price(const Option* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration_date(const Option* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_trade_date(const Option* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_trade_date(const Option* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const Option* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const Option* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::BrandData&
Option::_Internal::brand(const Option* msg) {
  return *msg->_impl_.brand_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::basic_asset_size(const Option* msg) {
  return *msg->_impl_.basic_asset_size_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::klong(const Option* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::kshort(const Option* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::dlong(const Option* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::dshort(const Option* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::dlong_min(const Option* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::dshort_min(const Option* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Option::_Internal::min_price_increment(const Option* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Option::_Internal::strike_price(const Option* msg) {
  return *msg->_impl_.strike_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Option::_Internal::expiration_date(const Option* msg) {
  return *msg->_impl_.expiration_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Option::_Internal::first_trade_date(const Option* msg) {
  return *msg->_impl_.first_trade_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Option::_Internal::last_trade_date(const Option* msg) {
  return *msg->_impl_.last_trade_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Option::_Internal::first_1min_candle_date(const Option* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Option::_Internal::first_1day_candle_date(const Option* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
void Option::clear_brand() {
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
}
void Option::clear_basic_asset_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.basic_asset_size_ != nullptr) {
    delete _impl_.basic_asset_size_;
  }
  _impl_.basic_asset_size_ = nullptr;
}
void Option::clear_klong() {
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
}
void Option::clear_kshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
}
void Option::clear_dlong() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
}
void Option::clear_dshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
}
void Option::clear_dlong_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
}
void Option::clear_dshort_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
}
void Option::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void Option::clear_strike_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.strike_price_ != nullptr) {
    delete _impl_.strike_price_;
  }
  _impl_.strike_price_ = nullptr;
}
void Option::clear_expiration_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_date_ != nullptr) {
    delete _impl_.expiration_date_;
  }
  _impl_.expiration_date_ = nullptr;
}
void Option::clear_first_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_trade_date_ != nullptr) {
    delete _impl_.first_trade_date_;
  }
  _impl_.first_trade_date_ = nullptr;
}
void Option::clear_last_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_date_ != nullptr) {
    delete _impl_.last_trade_date_;
  }
  _impl_.last_trade_date_ = nullptr;
}
void Option::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void Option::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
Option::Option(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Option)
}
Option::Option(const Option& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Option* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.basic_asset_position_uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.settlement_currency_){}
    , decltype(_impl_.asset_type_){}
    , decltype(_impl_.basic_asset_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.basic_asset_size_){nullptr}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.strike_price_){nullptr}
    , decltype(_impl_.expiration_date_){nullptr}
    , decltype(_impl_.first_trade_date_){nullptr}
    , decltype(_impl_.last_trade_date_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.real_exchange_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.payment_type_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.settlement_type_){}
    , decltype(_impl_.lot_){}
    , decltype(_impl_.short_enabled_flag_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.basic_asset_position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_impl_.basic_asset_position_uid_.Set(from._internal_basic_asset_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.settlement_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settlement_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_currency().empty()) {
    _this->_impl_.settlement_currency_.Set(from._internal_settlement_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_type().empty()) {
    _this->_impl_.asset_type_.Set(from._internal_asset_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.basic_asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basic_asset().empty()) {
    _this->_impl_.basic_asset_.Set(from._internal_basic_asset(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sector().empty()) {
    _this->_impl_.sector_.Set(from._internal_sector(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::BrandData(*from._impl_.brand_);
  }
  if (from._internal_has_basic_asset_size()) {
    _this->_impl_.basic_asset_size_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.basic_asset_size_);
  }
  if (from._internal_has_klong()) {
    _this->_impl_.klong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.klong_);
  }
  if (from._internal_has_kshort()) {
    _this->_impl_.kshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.kshort_);
  }
  if (from._internal_has_dlong()) {
    _this->_impl_.dlong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_);
  }
  if (from._internal_has_dshort()) {
    _this->_impl_.dshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_);
  }
  if (from._internal_has_dlong_min()) {
    _this->_impl_.dlong_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_min_);
  }
  if (from._internal_has_dshort_min()) {
    _this->_impl_.dshort_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_min_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_strike_price()) {
    _this->_impl_.strike_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.strike_price_);
  }
  if (from._internal_has_expiration_date()) {
    _this->_impl_.expiration_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiration_date_);
  }
  if (from._internal_has_first_trade_date()) {
    _this->_impl_.first_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_trade_date_);
  }
  if (from._internal_has_last_trade_date()) {
    _this->_impl_.last_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_trade_date_);
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  ::memcpy(&_impl_.trading_status_, &from._impl_.trading_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
    reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.api_trade_available_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Option)
}

inline void Option::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.basic_asset_position_uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.settlement_currency_){}
    , decltype(_impl_.asset_type_){}
    , decltype(_impl_.basic_asset_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.basic_asset_size_){nullptr}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.strike_price_){nullptr}
    , decltype(_impl_.expiration_date_){nullptr}
    , decltype(_impl_.first_trade_date_){nullptr}
    , decltype(_impl_.last_trade_date_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.real_exchange_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.payment_type_){0}
    , decltype(_impl_.style_){0}
    , decltype(_impl_.settlement_type_){0}
    , decltype(_impl_.lot_){0}
    , decltype(_impl_.short_enabled_flag_){false}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , decltype(_impl_.api_trade_available_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settlement_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settlement_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Option::~Option() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Option)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Option::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.basic_asset_position_uid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.settlement_currency_.Destroy();
  _impl_.asset_type_.Destroy();
  _impl_.basic_asset_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  if (this != internal_default_instance()) delete _impl_.brand_;
  if (this != internal_default_instance()) delete _impl_.basic_asset_size_;
  if (this != internal_default_instance()) delete _impl_.klong_;
  if (this != internal_default_instance()) delete _impl_.kshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_;
  if (this != internal_default_instance()) delete _impl_.dshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_min_;
  if (this != internal_default_instance()) delete _impl_.dshort_min_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.strike_price_;
  if (this != internal_default_instance()) delete _impl_.expiration_date_;
  if (this != internal_default_instance()) delete _impl_.first_trade_date_;
  if (this != internal_default_instance()) delete _impl_.last_trade_date_;
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
}

void Option::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Option::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Option)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.basic_asset_position_uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.settlement_currency_.ClearToEmpty();
  _impl_.asset_type_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.basic_asset_size_ != nullptr) {
    delete _impl_.basic_asset_size_;
  }
  _impl_.basic_asset_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.strike_price_ != nullptr) {
    delete _impl_.strike_price_;
  }
  _impl_.strike_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_date_ != nullptr) {
    delete _impl_.expiration_date_;
  }
  _impl_.expiration_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_trade_date_ != nullptr) {
    delete _impl_.first_trade_date_;
  }
  _impl_.first_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_date_ != nullptr) {
    delete _impl_.last_trade_date_;
  }
  _impl_.last_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  ::memset(&_impl_.trading_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
      reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.api_trade_available_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Option::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.uid"));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string basic_asset_position_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_basic_asset_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_exchange(static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::OptionDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_payment_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OptionPaymentType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_style(static_cast<::tinkoff::public_::invest::api::contract::v1::OptionStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_settlement_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OptionSettlementType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.name"));
        } else
          goto handle_unusual;
        continue;
      // string currency = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.currency"));
        } else
          goto handle_unusual;
        continue;
      // string settlement_currency = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_settlement_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.settlement_currency"));
        } else
          goto handle_unusual;
        continue;
      // string asset_type = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_asset_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.asset_type"));
        } else
          goto handle_unusual;
        continue;
      // string basic_asset = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_basic_asset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.basic_asset"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.exchange"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      // string sector = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Option.sector"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lot = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.lot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic_asset_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
      case 221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_klong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
      case 222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_kshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
      case 223:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
      case 224:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
      case 225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
      case 226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
      case 231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
      case 241:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_strike_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiration_date = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_trade_date = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_trade_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_trade_date = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trade_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool short_enabled_flag = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.short_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 409;
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Option::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Option)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string position_uid = 2;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.position_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_position_uid(), target);
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.ticker");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticker(), target);
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.class_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_class_code(), target);
  }

  // string basic_asset_position_uid = 5;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_asset_position_uid().data(), static_cast<int>(this->_internal_basic_asset_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_basic_asset_position_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_trading_status(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_real_exchange(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      41, this->_internal_direction(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
  if (this->_internal_payment_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      42, this->_internal_payment_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      43, this->_internal_style(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
  if (this->_internal_settlement_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      44, this->_internal_settlement_type(), target);
  }

  // string name = 101;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.name");
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_name(), target);
  }

  // string currency = 111;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.currency");
    target = stream->WriteStringMaybeAliased(
        111, this->_internal_currency(), target);
  }

  // string settlement_currency = 112;
  if (!this->_internal_settlement_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlement_currency().data(), static_cast<int>(this->_internal_settlement_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.settlement_currency");
    target = stream->WriteStringMaybeAliased(
        112, this->_internal_settlement_currency(), target);
  }

  // string asset_type = 131;
  if (!this->_internal_asset_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_type().data(), static_cast<int>(this->_internal_asset_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.asset_type");
    target = stream->WriteStringMaybeAliased(
        131, this->_internal_asset_type(), target);
  }

  // string basic_asset = 132;
  if (!this->_internal_basic_asset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_asset().data(), static_cast<int>(this->_internal_basic_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.basic_asset");
    target = stream->WriteStringMaybeAliased(
        132, this->_internal_basic_asset(), target);
  }

  // string exchange = 141;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.exchange");
    target = stream->WriteStringMaybeAliased(
        141, this->_internal_exchange(), target);
  }

  // string country_of_risk = 151;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        151, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 152;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        152, this->_internal_country_of_risk_name(), target);
  }

  // string sector = 161;
  if (!this->_internal_sector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sector().data(), static_cast<int>(this->_internal_sector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Option.sector");
    target = stream->WriteStringMaybeAliased(
        161, this->_internal_sector(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(162, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  // int32 lot = 201;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(201, this->_internal_lot(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
  if (this->_internal_has_basic_asset_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(211, _Internal::basic_asset_size(this),
        _Internal::basic_asset_size(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
  if (this->_internal_has_klong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(221, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
  if (this->_internal_has_kshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(222, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
  if (this->_internal_has_dlong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(223, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
  if (this->_internal_has_dshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(224, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
  if (this->_internal_has_dlong_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(225, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
  if (this->_internal_has_dshort_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(226, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(231, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
  if (this->_internal_has_strike_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(241, _Internal::strike_price(this),
        _Internal::strike_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expiration_date = 301;
  if (this->_internal_has_expiration_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::expiration_date(this),
        _Internal::expiration_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_trade_date = 311;
  if (this->_internal_has_first_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(311, _Internal::first_trade_date(this),
        _Internal::first_trade_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_trade_date = 312;
  if (this->_internal_has_last_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(312, _Internal::last_trade_date(this),
        _Internal::last_trade_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 321;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(321, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 322;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(322, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 401;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(401, this->_internal_short_enabled_flag(), target);
  }

  // bool for_iis_flag = 402;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(402, this->_internal_for_iis_flag(), target);
  }

  // bool otc_flag = 403;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(403, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(404, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(405, this->_internal_sell_available_flag(), target);
  }

  // bool for_qual_investor_flag = 406;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(406, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 407;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(407, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 408;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(408, this->_internal_blocked_tca_flag(), target);
  }

  // bool api_trade_available_flag = 409;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(409, this->_internal_api_trade_available_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Option)
  return target;
}

size_t Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Option)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 2;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string basic_asset_position_uid = 5;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basic_asset_position_uid());
  }

  // string name = 101;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string currency = 111;
  if (!this->_internal_currency().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string settlement_currency = 112;
  if (!this->_internal_settlement_currency().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlement_currency());
  }

  // string asset_type = 131;
  if (!this->_internal_asset_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_type());
  }

  // string basic_asset = 132;
  if (!this->_internal_basic_asset().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basic_asset());
  }

  // string exchange = 141;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string country_of_risk = 151;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 152;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  // string sector = 161;
  if (!this->_internal_sector().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sector());
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
  if (this->_internal_has_brand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
  if (this->_internal_has_basic_asset_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basic_asset_size_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
  if (this->_internal_has_klong()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.klong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
  if (this->_internal_has_kshort()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
  if (this->_internal_has_dlong()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
  if (this->_internal_has_dshort()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
  if (this->_internal_has_dlong_min()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
  if (this->_internal_has_dshort_min()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
  if (this->_internal_has_min_price_increment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
  if (this->_internal_has_strike_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.strike_price_);
  }

  // .google.protobuf.Timestamp expiration_date = 301;
  if (this->_internal_has_expiration_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_date_);
  }

  // .google.protobuf.Timestamp first_trade_date = 311;
  if (this->_internal_has_first_trade_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_trade_date_);
  }

  // .google.protobuf.Timestamp last_trade_date = 312;
  if (this->_internal_has_last_trade_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_trade_date_);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 321;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 322;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
  if (this->_internal_direction() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
  if (this->_internal_payment_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_payment_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
  if (this->_internal_style() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_style());
  }

  // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
  if (this->_internal_settlement_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_settlement_type());
  }

  // int32 lot = 201;
  if (this->_internal_lot() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_lot());
  }

  // bool short_enabled_flag = 401;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_iis_flag = 402;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool otc_flag = 403;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_qual_investor_flag = 406;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 407;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 408;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool api_trade_available_flag = 409;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Option::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Option::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Option::GetClassData() const { return &_class_data_; }


void Option::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Option*>(&to_msg);
  auto& from = static_cast<const Option&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Option)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_settlement_currency().empty()) {
    _this->_internal_set_settlement_currency(from._internal_settlement_currency());
  }
  if (!from._internal_asset_type().empty()) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_has_basic_asset_size()) {
    _this->_internal_mutable_basic_asset_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_basic_asset_size());
  }
  if (from._internal_has_klong()) {
    _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_klong());
  }
  if (from._internal_has_kshort()) {
    _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_kshort());
  }
  if (from._internal_has_dlong()) {
    _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong());
  }
  if (from._internal_has_dshort()) {
    _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort());
  }
  if (from._internal_has_dlong_min()) {
    _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong_min());
  }
  if (from._internal_has_dshort_min()) {
    _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort_min());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_strike_price()) {
    _this->_internal_mutable_strike_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_strike_price());
  }
  if (from._internal_has_expiration_date()) {
    _this->_internal_mutable_expiration_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiration_date());
  }
  if (from._internal_has_first_trade_date()) {
    _this->_internal_mutable_first_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_trade_date());
  }
  if (from._internal_has_last_trade_date()) {
    _this->_internal_mutable_last_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_trade_date());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_payment_type() != 0) {
    _this->_internal_set_payment_type(from._internal_payment_type());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  if (from._internal_settlement_type() != 0) {
    _this->_internal_set_settlement_type(from._internal_settlement_type());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Option::CopyFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Option::IsInitialized() const {
  return true;
}

void Option::InternalSwap(Option* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basic_asset_position_uid_, lhs_arena,
      &other->_impl_.basic_asset_position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.settlement_currency_, lhs_arena,
      &other->_impl_.settlement_currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_type_, lhs_arena,
      &other->_impl_.asset_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basic_asset_, lhs_arena,
      &other->_impl_.basic_asset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sector_, lhs_arena,
      &other->_impl_.sector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Option, _impl_.api_trade_available_flag_)
      + sizeof(Option::_impl_.api_trade_available_flag_)
      - PROTOBUF_FIELD_OFFSET(Option, _impl_.brand_)>(
          reinterpret_cast<char*>(&_impl_.brand_),
          reinterpret_cast<char*>(&other->_impl_.brand_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Option::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[23]);
}

// ===================================================================

class ShareResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Share& instrument(const ShareResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Share&
ShareResponse::_Internal::instrument(const ShareResponse* msg) {
  return *msg->_impl_.instrument_;
}
ShareResponse::ShareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.ShareResponse)
}
ShareResponse::ShareResponse(const ShareResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShareResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::tinkoff::public_::invest::api::contract::v1::Share(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.ShareResponse)
}

inline void ShareResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShareResponse::~ShareResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void ShareResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShareResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  return target;
}

size_t ShareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShareResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShareResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShareResponse::GetClassData() const { return &_class_data_; }


void ShareResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShareResponse*>(&to_msg);
  auto& from = static_cast<const ShareResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Share::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShareResponse::CopyFrom(const ShareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.ShareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareResponse::IsInitialized() const {
  return true;
}

void ShareResponse::InternalSwap(ShareResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShareResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[24]);
}

// ===================================================================

class SharesResponse::_Internal {
 public:
};

SharesResponse::SharesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SharesResponse)
}
SharesResponse::SharesResponse(const SharesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SharesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SharesResponse)
}

inline void SharesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SharesResponse::~SharesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void SharesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SharesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SharesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  return target;
}

size_t SharesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SharesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SharesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SharesResponse::GetClassData() const { return &_class_data_; }


void SharesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SharesResponse*>(&to_msg);
  auto& from = static_cast<const SharesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SharesResponse::CopyFrom(const SharesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SharesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharesResponse::IsInitialized() const {
  return true;
}

void SharesResponse::InternalSwap(SharesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SharesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[25]);
}

// ===================================================================

class Bond::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Bond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& maturity_date(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_nominal(const Bond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& state_reg_date(const Bond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& placement_date(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& placement_price(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Bond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const Bond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const Bond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Bond* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Bond::_Internal::klong(const Bond* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Bond::_Internal::kshort(const Bond* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Bond::_Internal::dlong(const Bond* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Bond::_Internal::dshort(const Bond* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Bond::_Internal::dlong_min(const Bond* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Bond::_Internal::dshort_min(const Bond* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Bond::_Internal::maturity_date(const Bond* msg) {
  return *msg->_impl_.maturity_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Bond::_Internal::nominal(const Bond* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Bond::_Internal::initial_nominal(const Bond* msg) {
  return *msg->_impl_.initial_nominal_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Bond::_Internal::state_reg_date(const Bond* msg) {
  return *msg->_impl_.state_reg_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Bond::_Internal::placement_date(const Bond* msg) {
  return *msg->_impl_.placement_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Bond::_Internal::placement_price(const Bond* msg) {
  return *msg->_impl_.placement_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Bond::_Internal::aci_value(const Bond* msg) {
  return *msg->_impl_.aci_value_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Bond::_Internal::min_price_increment(const Bond* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Bond::_Internal::first_1min_candle_date(const Bond* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Bond::_Internal::first_1day_candle_date(const Bond* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData&
Bond::_Internal::brand(const Bond* msg) {
  return *msg->_impl_.brand_;
}
void Bond::clear_klong() {
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
}
void Bond::clear_kshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
}
void Bond::clear_dlong() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
}
void Bond::clear_dshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
}
void Bond::clear_dlong_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
}
void Bond::clear_dshort_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
}
void Bond::clear_maturity_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.maturity_date_ != nullptr) {
    delete _impl_.maturity_date_;
  }
  _impl_.maturity_date_ = nullptr;
}
void Bond::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
void Bond::clear_initial_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_nominal_ != nullptr) {
    delete _impl_.initial_nominal_;
  }
  _impl_.initial_nominal_ = nullptr;
}
void Bond::clear_state_reg_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_reg_date_ != nullptr) {
    delete _impl_.state_reg_date_;
  }
  _impl_.state_reg_date_ = nullptr;
}
void Bond::clear_placement_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
}
void Bond::clear_placement_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_price_ != nullptr) {
    delete _impl_.placement_price_;
  }
  _impl_.placement_price_ = nullptr;
}
void Bond::clear_aci_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
}
void Bond::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void Bond::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void Bond::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
void Bond::clear_brand() {
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
}
Bond::Bond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Bond)
}
Bond::Bond(const Bond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.maturity_date_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.initial_nominal_){nullptr}
    , decltype(_impl_.state_reg_date_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.placement_price_){nullptr}
    , decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){}
    , decltype(_impl_.coupon_quantity_per_year_){}
    , decltype(_impl_.short_enabled_flag_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.issue_size_){}
    , decltype(_impl_.issue_size_plan_){}
    , decltype(_impl_.floating_coupon_flag_){}
    , decltype(_impl_.perpetual_flag_){}
    , decltype(_impl_.amortization_flag_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.real_exchange_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , decltype(_impl_.subordinated_flag_){}
    , decltype(_impl_.liquidity_flag_){}
    , decltype(_impl_.risk_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sector().empty()) {
    _this->_impl_.sector_.Set(from._internal_sector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issue_kind().empty()) {
    _this->_impl_.issue_kind_.Set(from._internal_issue_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_klong()) {
    _this->_impl_.klong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.klong_);
  }
  if (from._internal_has_kshort()) {
    _this->_impl_.kshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.kshort_);
  }
  if (from._internal_has_dlong()) {
    _this->_impl_.dlong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_);
  }
  if (from._internal_has_dshort()) {
    _this->_impl_.dshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_);
  }
  if (from._internal_has_dlong_min()) {
    _this->_impl_.dlong_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_min_);
  }
  if (from._internal_has_dshort_min()) {
    _this->_impl_.dshort_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_min_);
  }
  if (from._internal_has_maturity_date()) {
    _this->_impl_.maturity_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.maturity_date_);
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.nominal_);
  }
  if (from._internal_has_initial_nominal()) {
    _this->_impl_.initial_nominal_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_nominal_);
  }
  if (from._internal_has_state_reg_date()) {
    _this->_impl_.state_reg_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.state_reg_date_);
  }
  if (from._internal_has_placement_date()) {
    _this->_impl_.placement_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.placement_date_);
  }
  if (from._internal_has_placement_price()) {
    _this->_impl_.placement_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.placement_price_);
  }
  if (from._internal_has_aci_value()) {
    _this->_impl_.aci_value_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.aci_value_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::BrandData(*from._impl_.brand_);
  }
  ::memcpy(&_impl_.lot_, &from._impl_.lot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.risk_level_) -
    reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.risk_level_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Bond)
}

inline void Bond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.maturity_date_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.initial_nominal_){nullptr}
    , decltype(_impl_.state_reg_date_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.placement_price_){nullptr}
    , decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){0}
    , decltype(_impl_.coupon_quantity_per_year_){0}
    , decltype(_impl_.short_enabled_flag_){false}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.issue_size_){int64_t{0}}
    , decltype(_impl_.issue_size_plan_){int64_t{0}}
    , decltype(_impl_.floating_coupon_flag_){false}
    , decltype(_impl_.perpetual_flag_){false}
    , decltype(_impl_.amortization_flag_){false}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.real_exchange_){0}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , decltype(_impl_.subordinated_flag_){false}
    , decltype(_impl_.liquidity_flag_){false}
    , decltype(_impl_.risk_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bond::~Bond() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Bond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.klong_;
  if (this != internal_default_instance()) delete _impl_.kshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_;
  if (this != internal_default_instance()) delete _impl_.dshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_min_;
  if (this != internal_default_instance()) delete _impl_.dshort_min_;
  if (this != internal_default_instance()) delete _impl_.maturity_date_;
  if (this != internal_default_instance()) delete _impl_.nominal_;
  if (this != internal_default_instance()) delete _impl_.initial_nominal_;
  if (this != internal_default_instance()) delete _impl_.state_reg_date_;
  if (this != internal_default_instance()) delete _impl_.placement_date_;
  if (this != internal_default_instance()) delete _impl_.placement_price_;
  if (this != internal_default_instance()) delete _impl_.aci_value_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
  if (this != internal_default_instance()) delete _impl_.brand_;
}

void Bond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bond::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Bond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maturity_date_ != nullptr) {
    delete _impl_.maturity_date_;
  }
  _impl_.maturity_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_nominal_ != nullptr) {
    delete _impl_.initial_nominal_;
  }
  _impl_.initial_nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_reg_date_ != nullptr) {
    delete _impl_.state_reg_date_;
  }
  _impl_.state_reg_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_price_ != nullptr) {
    delete _impl_.placement_price_;
  }
  _impl_.placement_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  ::memset(&_impl_.lot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.risk_level_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.risk_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.isin"));
        } else
          goto handle_unusual;
        continue;
      // int32 lot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_klong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool short_enabled_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.short_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.name"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.exchange"));
        } else
          goto handle_unusual;
        continue;
      // int32 coupon_quantity_per_year = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.coupon_quantity_per_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp maturity_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_maturity_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp state_reg_date = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_reg_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp placement_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_aci_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      // string sector = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_sector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.sector"));
        } else
          goto handle_unusual;
        continue;
      // string issue_kind = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_issue_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.issue_kind"));
        } else
          goto handle_unusual;
        continue;
      // int64 issue_size = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.issue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 issue_size_plan = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.issue_size_plan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool floating_coupon_flag = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.floating_coupon_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool perpetual_flag = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.perpetual_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool amortization_flag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.amortization_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_exchange(static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string asset_uid = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Bond.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool subordinated_flag = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.subordinated_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool liquidity_flag = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.liquidity_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_risk_level(static_cast<::tinkoff::public_::invest::api::contract::v1::RiskLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Bond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.currency");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_name(), target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.exchange");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_exchange(), target);
  }

  // int32 coupon_quantity_per_year = 17;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_coupon_quantity_per_year(), target);
  }

  // .google.protobuf.Timestamp maturity_date = 18;
  if (this->_internal_has_maturity_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::maturity_date(this),
        _Internal::maturity_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
  if (this->_internal_has_initial_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::initial_nominal(this),
        _Internal::initial_nominal(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp state_reg_date = 21;
  if (this->_internal_has_state_reg_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::state_reg_date(this),
        _Internal::state_reg_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp placement_date = 22;
  if (this->_internal_has_placement_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
  if (this->_internal_has_placement_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::placement_price(this),
        _Internal::placement_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
  if (this->_internal_has_aci_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::aci_value(this),
        _Internal::aci_value(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 25;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 26;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_country_of_risk_name(), target);
  }

  // string sector = 27;
  if (!this->_internal_sector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sector().data(), static_cast<int>(this->_internal_sector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.sector");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_sector(), target);
  }

  // string issue_kind = 28;
  if (!this->_internal_issue_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issue_kind().data(), static_cast<int>(this->_internal_issue_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.issue_kind");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_issue_kind(), target);
  }

  // int64 issue_size = 29;
  if (this->_internal_issue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_issue_size(), target);
  }

  // int64 issue_size_plan = 30;
  if (this->_internal_issue_size_plan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(30, this->_internal_issue_size_plan(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 32;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 33;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 34;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_sell_available_flag(), target);
  }

  // bool floating_coupon_flag = 35;
  if (this->_internal_floating_coupon_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_floating_coupon_flag(), target);
  }

  // bool perpetual_flag = 36;
  if (this->_internal_perpetual_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_perpetual_flag(), target);
  }

  // bool amortization_flag = 37;
  if (this->_internal_amortization_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_amortization_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 39;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 40;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.uid");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      41, this->_internal_real_exchange(), target);
  }

  // string position_uid = 42;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.position_uid");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_position_uid(), target);
  }

  // string asset_uid = 43;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Bond.asset_uid");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_asset_uid(), target);
  }

  // bool for_iis_flag = 51;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(52, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(53, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(54, this->_internal_blocked_tca_flag(), target);
  }

  // bool subordinated_flag = 55;
  if (this->_internal_subordinated_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(55, this->_internal_subordinated_flag(), target);
  }

  // bool liquidity_flag = 56;
  if (this->_internal_liquidity_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(56, this->_internal_liquidity_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 61;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 62;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
  if (this->_internal_risk_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      63, this->_internal_risk_level(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Bond)
  return target;
}

size_t Bond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Bond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string country_of_risk = 25;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 26;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  // string sector = 27;
  if (!this->_internal_sector().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sector());
  }

  // string issue_kind = 28;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issue_kind());
  }

  // string uid = 40;
  if (!this->_internal_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 42;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string asset_uid = 43;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.klong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_min_);
  }

  // .google.protobuf.Timestamp maturity_date = 18;
  if (this->_internal_has_maturity_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maturity_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
  if (this->_internal_has_nominal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
  if (this->_internal_has_initial_nominal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_nominal_);
  }

  // .google.protobuf.Timestamp state_reg_date = 21;
  if (this->_internal_has_state_reg_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_reg_date_);
  }

  // .google.protobuf.Timestamp placement_date = 22;
  if (this->_internal_has_placement_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
  if (this->_internal_has_placement_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
  if (this->_internal_has_aci_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aci_value_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
  if (this->_internal_has_min_price_increment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 61;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 62;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (this->_internal_has_brand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lot());
  }

  // int32 coupon_quantity_per_year = 17;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_coupon_quantity_per_year());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool otc_flag = 32;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool buy_available_flag = 33;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 34;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // int64 issue_size = 29;
  if (this->_internal_issue_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_issue_size());
  }

  // int64 issue_size_plan = 30;
  if (this->_internal_issue_size_plan() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_issue_size_plan());
  }

  // bool floating_coupon_flag = 35;
  if (this->_internal_floating_coupon_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool perpetual_flag = 36;
  if (this->_internal_perpetual_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool amortization_flag = 37;
  if (this->_internal_amortization_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool api_trade_available_flag = 39;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool for_iis_flag = 51;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool subordinated_flag = 55;
  if (this->_internal_subordinated_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool liquidity_flag = 56;
  if (this->_internal_liquidity_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
  if (this->_internal_risk_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_risk_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bond::GetClassData() const { return &_class_data_; }


void Bond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bond*>(&to_msg);
  auto& from = static_cast<const Bond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Bond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (from._internal_has_klong()) {
    _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_klong());
  }
  if (from._internal_has_kshort()) {
    _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_kshort());
  }
  if (from._internal_has_dlong()) {
    _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong());
  }
  if (from._internal_has_dshort()) {
    _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort());
  }
  if (from._internal_has_dlong_min()) {
    _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong_min());
  }
  if (from._internal_has_dshort_min()) {
    _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort_min());
  }
  if (from._internal_has_maturity_date()) {
    _this->_internal_mutable_maturity_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_maturity_date());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_nominal());
  }
  if (from._internal_has_initial_nominal()) {
    _this->_internal_mutable_initial_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_nominal());
  }
  if (from._internal_has_state_reg_date()) {
    _this->_internal_mutable_state_reg_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_state_reg_date());
  }
  if (from._internal_has_placement_date()) {
    _this->_internal_mutable_placement_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_placement_date());
  }
  if (from._internal_has_placement_price()) {
    _this->_internal_mutable_placement_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_placement_price());
  }
  if (from._internal_has_aci_value()) {
    _this->_internal_mutable_aci_value()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_aci_value());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_coupon_quantity_per_year() != 0) {
    _this->_internal_set_coupon_quantity_per_year(from._internal_coupon_quantity_per_year());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_issue_size() != 0) {
    _this->_internal_set_issue_size(from._internal_issue_size());
  }
  if (from._internal_issue_size_plan() != 0) {
    _this->_internal_set_issue_size_plan(from._internal_issue_size_plan());
  }
  if (from._internal_floating_coupon_flag() != 0) {
    _this->_internal_set_floating_coupon_flag(from._internal_floating_coupon_flag());
  }
  if (from._internal_perpetual_flag() != 0) {
    _this->_internal_set_perpetual_flag(from._internal_perpetual_flag());
  }
  if (from._internal_amortization_flag() != 0) {
    _this->_internal_set_amortization_flag(from._internal_amortization_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_subordinated_flag() != 0) {
    _this->_internal_set_subordinated_flag(from._internal_subordinated_flag());
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_internal_set_liquidity_flag(from._internal_liquidity_flag());
  }
  if (from._internal_risk_level() != 0) {
    _this->_internal_set_risk_level(from._internal_risk_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bond::CopyFrom(const Bond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Bond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bond::IsInitialized() const {
  return true;
}

void Bond::InternalSwap(Bond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sector_, lhs_arena,
      &other->_impl_.sector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issue_kind_, lhs_arena,
      &other->_impl_.issue_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bond, _impl_.risk_level_)
      + sizeof(Bond::_impl_.risk_level_)
      - PROTOBUF_FIELD_OFFSET(Bond, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[26]);
}

// ===================================================================

class Currency::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Currency* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const Currency* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const Currency* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Currency* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Currency::_Internal::klong(const Currency* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Currency::_Internal::kshort(const Currency* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Currency::_Internal::dlong(const Currency* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Currency::_Internal::dshort(const Currency* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Currency::_Internal::dlong_min(const Currency* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Currency::_Internal::dshort_min(const Currency* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Currency::_Internal::nominal(const Currency* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Currency::_Internal::min_price_increment(const Currency* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Currency::_Internal::first_1min_candle_date(const Currency* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Currency::_Internal::first_1day_candle_date(const Currency* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData&
Currency::_Internal::brand(const Currency* msg) {
  return *msg->_impl_.brand_;
}
void Currency::clear_klong() {
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
}
void Currency::clear_kshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
}
void Currency::clear_dlong() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
}
void Currency::clear_dshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
}
void Currency::clear_dlong_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
}
void Currency::clear_dshort_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
}
void Currency::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
void Currency::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void Currency::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void Currency::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
void Currency::clear_brand() {
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
}
Currency::Currency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Currency)
}
Currency::Currency(const Currency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Currency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.iso_currency_name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){}
    , decltype(_impl_.short_enabled_flag_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.real_exchange_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iso_currency_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iso_currency_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iso_currency_name().empty()) {
    _this->_impl_.iso_currency_name_.Set(from._internal_iso_currency_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_klong()) {
    _this->_impl_.klong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.klong_);
  }
  if (from._internal_has_kshort()) {
    _this->_impl_.kshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.kshort_);
  }
  if (from._internal_has_dlong()) {
    _this->_impl_.dlong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_);
  }
  if (from._internal_has_dshort()) {
    _this->_impl_.dshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_);
  }
  if (from._internal_has_dlong_min()) {
    _this->_impl_.dlong_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_min_);
  }
  if (from._internal_has_dshort_min()) {
    _this->_impl_.dshort_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_min_);
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.nominal_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::BrandData(*from._impl_.brand_);
  }
  ::memcpy(&_impl_.lot_, &from._impl_.lot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
    reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Currency)
}

inline void Currency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.iso_currency_name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){0}
    , decltype(_impl_.short_enabled_flag_){false}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.real_exchange_){0}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iso_currency_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iso_currency_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Currency::~Currency() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Currency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Currency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.iso_currency_name_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.klong_;
  if (this != internal_default_instance()) delete _impl_.kshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_;
  if (this != internal_default_instance()) delete _impl_.dshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_min_;
  if (this != internal_default_instance()) delete _impl_.dshort_min_;
  if (this != internal_default_instance()) delete _impl_.nominal_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
  if (this != internal_default_instance()) delete _impl_.brand_;
}

void Currency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Currency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.iso_currency_name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  ::memset(&_impl_.lot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Currency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.isin"));
        } else
          goto handle_unusual;
        continue;
      // int32 lot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_klong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool short_enabled_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.short_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.name"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.exchange"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string iso_currency_name = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_iso_currency_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_exchange(static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Currency.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Currency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Currency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.currency");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_name(), target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.exchange");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_exchange(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 18;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 19;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_country_of_risk_name(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 21;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 22;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 23;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_sell_available_flag(), target);
  }

  // string iso_currency_name = 24;
  if (!this->_internal_iso_currency_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_currency_name().data(), static_cast<int>(this->_internal_iso_currency_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_iso_currency_name(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 26;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 27;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.uid");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_real_exchange(), target);
  }

  // string position_uid = 29;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Currency.position_uid");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_position_uid(), target);
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(52, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(53, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(54, this->_internal_blocked_tca_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Currency)
  return target;
}

size_t Currency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Currency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string country_of_risk = 18;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 19;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  // string iso_currency_name = 24;
  if (!this->_internal_iso_currency_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_currency_name());
  }

  // string uid = 27;
  if (!this->_internal_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 29;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.klong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
  if (this->_internal_has_nominal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
  if (this->_internal_has_min_price_increment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lot());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool otc_flag = 21;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool buy_available_flag = 22;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 23;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 26;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_qual_investor_flag = 52;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 53;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 54;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Currency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Currency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Currency::GetClassData() const { return &_class_data_; }


void Currency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Currency*>(&to_msg);
  auto& from = static_cast<const Currency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Currency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_iso_currency_name().empty()) {
    _this->_internal_set_iso_currency_name(from._internal_iso_currency_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (from._internal_has_klong()) {
    _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_klong());
  }
  if (from._internal_has_kshort()) {
    _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_kshort());
  }
  if (from._internal_has_dlong()) {
    _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong());
  }
  if (from._internal_has_dshort()) {
    _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort());
  }
  if (from._internal_has_dlong_min()) {
    _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong_min());
  }
  if (from._internal_has_dshort_min()) {
    _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort_min());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_nominal());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Currency::CopyFrom(const Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Currency::IsInitialized() const {
  return true;
}

void Currency::InternalSwap(Currency* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iso_currency_name_, lhs_arena,
      &other->_impl_.iso_currency_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Currency, _impl_.blocked_tca_flag_)
      + sizeof(Currency::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(Currency, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Currency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[27]);
}

// ===================================================================

class Etf::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& fixed_commission(const Etf* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& released_date(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& num_shares(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Etf* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const Etf* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const Etf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Etf* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::klong(const Etf* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::kshort(const Etf* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::dlong(const Etf* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::dshort(const Etf* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::dlong_min(const Etf* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::dshort_min(const Etf* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::fixed_commission(const Etf* msg) {
  return *msg->_impl_.fixed_commission_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Etf::_Internal::released_date(const Etf* msg) {
  return *msg->_impl_.released_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::num_shares(const Etf* msg) {
  return *msg->_impl_.num_shares_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Etf::_Internal::min_price_increment(const Etf* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Etf::_Internal::first_1min_candle_date(const Etf* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Etf::_Internal::first_1day_candle_date(const Etf* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData&
Etf::_Internal::brand(const Etf* msg) {
  return *msg->_impl_.brand_;
}
void Etf::clear_klong() {
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
}
void Etf::clear_kshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
}
void Etf::clear_dlong() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
}
void Etf::clear_dshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
}
void Etf::clear_dlong_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
}
void Etf::clear_dshort_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
}
void Etf::clear_fixed_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.fixed_commission_ != nullptr) {
    delete _impl_.fixed_commission_;
  }
  _impl_.fixed_commission_ = nullptr;
}
void Etf::clear_released_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.released_date_ != nullptr) {
    delete _impl_.released_date_;
  }
  _impl_.released_date_ = nullptr;
}
void Etf::clear_num_shares() {
  if (GetArenaForAllocation() == nullptr && _impl_.num_shares_ != nullptr) {
    delete _impl_.num_shares_;
  }
  _impl_.num_shares_ = nullptr;
}
void Etf::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void Etf::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void Etf::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
void Etf::clear_brand() {
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
}
Etf::Etf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Etf)
}
Etf::Etf(const Etf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Etf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.focus_type_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.rebalancing_freq_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.fixed_commission_){nullptr}
    , decltype(_impl_.released_date_){nullptr}
    , decltype(_impl_.num_shares_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){}
    , decltype(_impl_.short_enabled_flag_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.real_exchange_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , decltype(_impl_.liquidity_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.focus_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.focus_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_focus_type().empty()) {
    _this->_impl_.focus_type_.Set(from._internal_focus_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sector().empty()) {
    _this->_impl_.sector_.Set(from._internal_sector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rebalancing_freq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rebalancing_freq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_impl_.rebalancing_freq_.Set(from._internal_rebalancing_freq(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_klong()) {
    _this->_impl_.klong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.klong_);
  }
  if (from._internal_has_kshort()) {
    _this->_impl_.kshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.kshort_);
  }
  if (from._internal_has_dlong()) {
    _this->_impl_.dlong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_);
  }
  if (from._internal_has_dshort()) {
    _this->_impl_.dshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_);
  }
  if (from._internal_has_dlong_min()) {
    _this->_impl_.dlong_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_min_);
  }
  if (from._internal_has_dshort_min()) {
    _this->_impl_.dshort_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_min_);
  }
  if (from._internal_has_fixed_commission()) {
    _this->_impl_.fixed_commission_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.fixed_commission_);
  }
  if (from._internal_has_released_date()) {
    _this->_impl_.released_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.released_date_);
  }
  if (from._internal_has_num_shares()) {
    _this->_impl_.num_shares_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.num_shares_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::BrandData(*from._impl_.brand_);
  }
  ::memcpy(&_impl_.lot_, &from._impl_.lot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
    reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.liquidity_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Etf)
}

inline void Etf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.focus_type_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.rebalancing_freq_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.fixed_commission_){nullptr}
    , decltype(_impl_.released_date_){nullptr}
    , decltype(_impl_.num_shares_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){0}
    , decltype(_impl_.short_enabled_flag_){false}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.real_exchange_){0}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , decltype(_impl_.liquidity_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.focus_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.focus_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rebalancing_freq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rebalancing_freq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Etf::~Etf() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Etf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Etf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.focus_type_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.rebalancing_freq_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.klong_;
  if (this != internal_default_instance()) delete _impl_.kshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_;
  if (this != internal_default_instance()) delete _impl_.dshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_min_;
  if (this != internal_default_instance()) delete _impl_.dshort_min_;
  if (this != internal_default_instance()) delete _impl_.fixed_commission_;
  if (this != internal_default_instance()) delete _impl_.released_date_;
  if (this != internal_default_instance()) delete _impl_.num_shares_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
  if (this != internal_default_instance()) delete _impl_.brand_;
}

void Etf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Etf::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Etf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.focus_type_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.rebalancing_freq_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fixed_commission_ != nullptr) {
    delete _impl_.fixed_commission_;
  }
  _impl_.fixed_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.released_date_ != nullptr) {
    delete _impl_.released_date_;
  }
  _impl_.released_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.num_shares_ != nullptr) {
    delete _impl_.num_shares_;
  }
  _impl_.num_shares_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  ::memset(&_impl_.lot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.liquidity_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Etf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.isin"));
        } else
          goto handle_unusual;
        continue;
      // int32 lot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_klong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool short_enabled_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.short_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.name"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.exchange"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string focus_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_focus_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.focus_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp released_date = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_released_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_shares(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      // string sector = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_sector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.sector"));
        } else
          goto handle_unusual;
        continue;
      // string rebalancing_freq = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_rebalancing_freq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_exchange(static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string asset_uid = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Etf.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool liquidity_flag = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.liquidity_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Etf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Etf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.currency");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_name(), target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.exchange");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_exchange(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
  if (this->_internal_has_fixed_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::fixed_commission(this),
        _Internal::fixed_commission(this).GetCachedSize(), target, stream);
  }

  // string focus_type = 18;
  if (!this->_internal_focus_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_focus_type().data(), static_cast<int>(this->_internal_focus_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.focus_type");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_focus_type(), target);
  }

  // .google.protobuf.Timestamp released_date = 19;
  if (this->_internal_has_released_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::released_date(this),
        _Internal::released_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
  if (this->_internal_has_num_shares()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::num_shares(this),
        _Internal::num_shares(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_country_of_risk_name(), target);
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sector().data(), static_cast<int>(this->_internal_sector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.sector");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_sector(), target);
  }

  // string rebalancing_freq = 24;
  if (!this->_internal_rebalancing_freq().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rebalancing_freq().data(), static_cast<int>(this->_internal_rebalancing_freq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_rebalancing_freq(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_sell_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.uid");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_real_exchange(), target);
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.position_uid");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_position_uid(), target);
  }

  // string asset_uid = 34;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Etf.asset_uid");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_asset_uid(), target);
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_blocked_tca_flag(), target);
  }

  // bool liquidity_flag = 45;
  if (this->_internal_liquidity_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_liquidity_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Etf)
  return target;
}

size_t Etf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Etf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string focus_type = 18;
  if (!this->_internal_focus_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_focus_type());
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sector());
  }

  // string rebalancing_freq = 24;
  if (!this->_internal_rebalancing_freq().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rebalancing_freq());
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string asset_uid = 34;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.klong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
  if (this->_internal_has_fixed_commission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fixed_commission_);
  }

  // .google.protobuf.Timestamp released_date = 19;
  if (this->_internal_has_released_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.released_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
  if (this->_internal_has_num_shares()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.num_shares_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  if (this->_internal_has_min_price_increment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lot());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool liquidity_flag = 45;
  if (this->_internal_liquidity_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Etf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Etf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Etf::GetClassData() const { return &_class_data_; }


void Etf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Etf*>(&to_msg);
  auto& from = static_cast<const Etf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Etf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_focus_type().empty()) {
    _this->_internal_set_focus_type(from._internal_focus_type());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_internal_set_rebalancing_freq(from._internal_rebalancing_freq());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (from._internal_has_klong()) {
    _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_klong());
  }
  if (from._internal_has_kshort()) {
    _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_kshort());
  }
  if (from._internal_has_dlong()) {
    _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong());
  }
  if (from._internal_has_dshort()) {
    _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort());
  }
  if (from._internal_has_dlong_min()) {
    _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong_min());
  }
  if (from._internal_has_dshort_min()) {
    _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort_min());
  }
  if (from._internal_has_fixed_commission()) {
    _this->_internal_mutable_fixed_commission()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_fixed_commission());
  }
  if (from._internal_has_released_date()) {
    _this->_internal_mutable_released_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_released_date());
  }
  if (from._internal_has_num_shares()) {
    _this->_internal_mutable_num_shares()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_num_shares());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_internal_set_liquidity_flag(from._internal_liquidity_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Etf::CopyFrom(const Etf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Etf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Etf::IsInitialized() const {
  return true;
}

void Etf::InternalSwap(Etf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.focus_type_, lhs_arena,
      &other->_impl_.focus_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sector_, lhs_arena,
      &other->_impl_.sector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rebalancing_freq_, lhs_arena,
      &other->_impl_.rebalancing_freq_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Etf, _impl_.liquidity_flag_)
      + sizeof(Etf::_impl_.liquidity_flag_)
      - PROTOBUF_FIELD_OFFSET(Etf, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Etf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[28]);
}

// ===================================================================

class Future::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Future* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_trade_date(const Future* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_trade_date(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& basic_asset_size(const Future* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration_date(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Future* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const Future* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_buy(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_sell(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment_amount(const Future* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Future* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::klong(const Future* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::kshort(const Future* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::dlong(const Future* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::dshort(const Future* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::dlong_min(const Future* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::dshort_min(const Future* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Future::_Internal::first_trade_date(const Future* msg) {
  return *msg->_impl_.first_trade_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Future::_Internal::last_trade_date(const Future* msg) {
  return *msg->_impl_.last_trade_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::basic_asset_size(const Future* msg) {
  return *msg->_impl_.basic_asset_size_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Future::_Internal::expiration_date(const Future* msg) {
  return *msg->_impl_.expiration_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::min_price_increment(const Future* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Future::_Internal::first_1min_candle_date(const Future* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Future::_Internal::first_1day_candle_date(const Future* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Future::_Internal::initial_margin_on_buy(const Future* msg) {
  return *msg->_impl_.initial_margin_on_buy_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Future::_Internal::initial_margin_on_sell(const Future* msg) {
  return *msg->_impl_.initial_margin_on_sell_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Future::_Internal::min_price_increment_amount(const Future* msg) {
  return *msg->_impl_.min_price_increment_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData&
Future::_Internal::brand(const Future* msg) {
  return *msg->_impl_.brand_;
}
void Future::clear_klong() {
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
}
void Future::clear_kshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
}
void Future::clear_dlong() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
}
void Future::clear_dshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
}
void Future::clear_dlong_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
}
void Future::clear_dshort_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
}
void Future::clear_first_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_trade_date_ != nullptr) {
    delete _impl_.first_trade_date_;
  }
  _impl_.first_trade_date_ = nullptr;
}
void Future::clear_last_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_date_ != nullptr) {
    delete _impl_.last_trade_date_;
  }
  _impl_.last_trade_date_ = nullptr;
}
void Future::clear_basic_asset_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.basic_asset_size_ != nullptr) {
    delete _impl_.basic_asset_size_;
  }
  _impl_.basic_asset_size_ = nullptr;
}
void Future::clear_expiration_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_date_ != nullptr) {
    delete _impl_.expiration_date_;
  }
  _impl_.expiration_date_ = nullptr;
}
void Future::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void Future::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void Future::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
void Future::clear_initial_margin_on_buy() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_buy_ != nullptr) {
    delete _impl_.initial_margin_on_buy_;
  }
  _impl_.initial_margin_on_buy_ = nullptr;
}
void Future::clear_initial_margin_on_sell() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_sell_ != nullptr) {
    delete _impl_.initial_margin_on_sell_;
  }
  _impl_.initial_margin_on_sell_ = nullptr;
}
void Future::clear_min_price_increment_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_amount_ != nullptr) {
    delete _impl_.min_price_increment_amount_;
  }
  _impl_.min_price_increment_amount_ = nullptr;
}
void Future::clear_brand() {
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
}
Future::Future(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Future)
}
Future::Future(const Future& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Future* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.futures_type_){}
    , decltype(_impl_.asset_type_){}
    , decltype(_impl_.basic_asset_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.basic_asset_position_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.first_trade_date_){nullptr}
    , decltype(_impl_.last_trade_date_){nullptr}
    , decltype(_impl_.basic_asset_size_){nullptr}
    , decltype(_impl_.expiration_date_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.initial_margin_on_buy_){nullptr}
    , decltype(_impl_.initial_margin_on_sell_){nullptr}
    , decltype(_impl_.min_price_increment_amount_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){}
    , decltype(_impl_.short_enabled_flag_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.real_exchange_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.futures_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.futures_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_futures_type().empty()) {
    _this->_impl_.futures_type_.Set(from._internal_futures_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_type().empty()) {
    _this->_impl_.asset_type_.Set(from._internal_asset_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.basic_asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basic_asset().empty()) {
    _this->_impl_.basic_asset_.Set(from._internal_basic_asset(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sector().empty()) {
    _this->_impl_.sector_.Set(from._internal_sector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.basic_asset_position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_impl_.basic_asset_position_uid_.Set(from._internal_basic_asset_position_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_klong()) {
    _this->_impl_.klong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.klong_);
  }
  if (from._internal_has_kshort()) {
    _this->_impl_.kshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.kshort_);
  }
  if (from._internal_has_dlong()) {
    _this->_impl_.dlong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_);
  }
  if (from._internal_has_dshort()) {
    _this->_impl_.dshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_);
  }
  if (from._internal_has_dlong_min()) {
    _this->_impl_.dlong_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_min_);
  }
  if (from._internal_has_dshort_min()) {
    _this->_impl_.dshort_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_min_);
  }
  if (from._internal_has_first_trade_date()) {
    _this->_impl_.first_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_trade_date_);
  }
  if (from._internal_has_last_trade_date()) {
    _this->_impl_.last_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_trade_date_);
  }
  if (from._internal_has_basic_asset_size()) {
    _this->_impl_.basic_asset_size_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.basic_asset_size_);
  }
  if (from._internal_has_expiration_date()) {
    _this->_impl_.expiration_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiration_date_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  if (from._internal_has_initial_margin_on_buy()) {
    _this->_impl_.initial_margin_on_buy_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_margin_on_buy_);
  }
  if (from._internal_has_initial_margin_on_sell()) {
    _this->_impl_.initial_margin_on_sell_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_margin_on_sell_);
  }
  if (from._internal_has_min_price_increment_amount()) {
    _this->_impl_.min_price_increment_amount_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_amount_);
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::BrandData(*from._impl_.brand_);
  }
  ::memcpy(&_impl_.lot_, &from._impl_.lot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
    reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Future)
}

inline void Future::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.futures_type_){}
    , decltype(_impl_.asset_type_){}
    , decltype(_impl_.basic_asset_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.basic_asset_position_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.first_trade_date_){nullptr}
    , decltype(_impl_.last_trade_date_){nullptr}
    , decltype(_impl_.basic_asset_size_){nullptr}
    , decltype(_impl_.expiration_date_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.initial_margin_on_buy_){nullptr}
    , decltype(_impl_.initial_margin_on_sell_){nullptr}
    , decltype(_impl_.min_price_increment_amount_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){0}
    , decltype(_impl_.short_enabled_flag_){false}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.real_exchange_){0}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.futures_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.futures_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Future::~Future() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Future)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Future::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.futures_type_.Destroy();
  _impl_.asset_type_.Destroy();
  _impl_.basic_asset_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.basic_asset_position_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.klong_;
  if (this != internal_default_instance()) delete _impl_.kshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_;
  if (this != internal_default_instance()) delete _impl_.dshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_min_;
  if (this != internal_default_instance()) delete _impl_.dshort_min_;
  if (this != internal_default_instance()) delete _impl_.first_trade_date_;
  if (this != internal_default_instance()) delete _impl_.last_trade_date_;
  if (this != internal_default_instance()) delete _impl_.basic_asset_size_;
  if (this != internal_default_instance()) delete _impl_.expiration_date_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
  if (this != internal_default_instance()) delete _impl_.initial_margin_on_buy_;
  if (this != internal_default_instance()) delete _impl_.initial_margin_on_sell_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_amount_;
  if (this != internal_default_instance()) delete _impl_.brand_;
}

void Future::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Future::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Future)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.futures_type_.ClearToEmpty();
  _impl_.asset_type_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.basic_asset_position_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_trade_date_ != nullptr) {
    delete _impl_.first_trade_date_;
  }
  _impl_.first_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_date_ != nullptr) {
    delete _impl_.last_trade_date_;
  }
  _impl_.last_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.basic_asset_size_ != nullptr) {
    delete _impl_.basic_asset_size_;
  }
  _impl_.basic_asset_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_date_ != nullptr) {
    delete _impl_.expiration_date_;
  }
  _impl_.expiration_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_buy_ != nullptr) {
    delete _impl_.initial_margin_on_buy_;
  }
  _impl_.initial_margin_on_buy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_sell_ != nullptr) {
    delete _impl_.initial_margin_on_sell_;
  }
  _impl_.initial_margin_on_sell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_amount_ != nullptr) {
    delete _impl_.min_price_increment_amount_;
  }
  _impl_.min_price_increment_amount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  ::memset(&_impl_.lot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Future::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.class_code"));
        } else
          goto handle_unusual;
        continue;
      // int32 lot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_klong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_kshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool short_enabled_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.short_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.name"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.exchange"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_trade_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_trade_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_trade_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trade_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string futures_type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_futures_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.futures_type"));
        } else
          goto handle_unusual;
        continue;
      // string asset_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_asset_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.asset_type"));
        } else
          goto handle_unusual;
        continue;
      // string basic_asset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_basic_asset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.basic_asset"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic_asset_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      // string sector = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_sector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.sector"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiration_date = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_exchange(static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string basic_asset_position_uid = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_basic_asset_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_margin_on_buy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_margin_on_sell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Future::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Future)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // int32 lot = 4;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_lot(), target);
  }

  // string currency = 5;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.currency");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
  if (this->_internal_has_klong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
  if (this->_internal_has_kshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
  if (this->_internal_has_dlong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
  if (this->_internal_has_dshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
  if (this->_internal_has_dlong_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
  if (this->_internal_has_dshort_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 12;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_short_enabled_flag(), target);
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_name(), target);
  }

  // string exchange = 14;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.exchange");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_exchange(), target);
  }

  // .google.protobuf.Timestamp first_trade_date = 15;
  if (this->_internal_has_first_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::first_trade_date(this),
        _Internal::first_trade_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_trade_date = 16;
  if (this->_internal_has_last_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::last_trade_date(this),
        _Internal::last_trade_date(this).GetCachedSize(), target, stream);
  }

  // string futures_type = 17;
  if (!this->_internal_futures_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_futures_type().data(), static_cast<int>(this->_internal_futures_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.futures_type");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_futures_type(), target);
  }

  // string asset_type = 18;
  if (!this->_internal_asset_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_type().data(), static_cast<int>(this->_internal_asset_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.asset_type");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_asset_type(), target);
  }

  // string basic_asset = 19;
  if (!this->_internal_basic_asset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_asset().data(), static_cast<int>(this->_internal_basic_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.basic_asset");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_basic_asset(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
  if (this->_internal_has_basic_asset_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::basic_asset_size(this),
        _Internal::basic_asset_size(this).GetCachedSize(), target, stream);
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_country_of_risk_name(), target);
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sector().data(), static_cast<int>(this->_internal_sector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.sector");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_sector(), target);
  }

  // .google.protobuf.Timestamp expiration_date = 24;
  if (this->_internal_has_expiration_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::expiration_date(this),
        _Internal::expiration_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_sell_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.uid");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_real_exchange(), target);
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.position_uid");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_position_uid(), target);
  }

  // string basic_asset_position_uid = 34;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_asset_position_uid().data(), static_cast<int>(this->_internal_basic_asset_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_basic_asset_position_uid(), target);
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_blocked_tca_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
  if (this->_internal_has_initial_margin_on_buy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::initial_margin_on_buy(this),
        _Internal::initial_margin_on_buy(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
  if (this->_internal_has_initial_margin_on_sell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::initial_margin_on_sell(this),
        _Internal::initial_margin_on_sell(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
  if (this->_internal_has_min_price_increment_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::min_price_increment_amount(this),
        _Internal::min_price_increment_amount(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Future)
  return target;
}

size_t Future::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Future)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string currency = 5;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exchange = 14;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string futures_type = 17;
  if (!this->_internal_futures_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_futures_type());
  }

  // string asset_type = 18;
  if (!this->_internal_asset_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_type());
  }

  // string basic_asset = 19;
  if (!this->_internal_basic_asset().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basic_asset());
  }

  // string country_of_risk = 21;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 22;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  // string sector = 23;
  if (!this->_internal_sector().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sector());
  }

  // string uid = 31;
  if (!this->_internal_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 33;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string basic_asset_position_uid = 34;
  if (!this->_internal_basic_asset_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basic_asset_position_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
  if (this->_internal_has_klong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.klong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
  if (this->_internal_has_kshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
  if (this->_internal_has_dlong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
  if (this->_internal_has_dshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
  if (this->_internal_has_dlong_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
  if (this->_internal_has_dshort_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_min_);
  }

  // .google.protobuf.Timestamp first_trade_date = 15;
  if (this->_internal_has_first_trade_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_trade_date_);
  }

  // .google.protobuf.Timestamp last_trade_date = 16;
  if (this->_internal_has_last_trade_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_trade_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
  if (this->_internal_has_basic_asset_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basic_asset_size_);
  }

  // .google.protobuf.Timestamp expiration_date = 24;
  if (this->_internal_has_expiration_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  if (this->_internal_has_min_price_increment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
  if (this->_internal_has_initial_margin_on_buy()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_margin_on_buy_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
  if (this->_internal_has_initial_margin_on_sell()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_margin_on_sell_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
  if (this->_internal_has_min_price_increment_amount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_amount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  if (this->_internal_has_brand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // int32 lot = 4;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lot());
  }

  // bool short_enabled_flag = 12;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 30;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_iis_flag = 41;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_qual_investor_flag = 42;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 43;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 44;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Future::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Future::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Future::GetClassData() const { return &_class_data_; }


void Future::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Future*>(&to_msg);
  auto& from = static_cast<const Future&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Future)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_futures_type().empty()) {
    _this->_internal_set_futures_type(from._internal_futures_type());
  }
  if (!from._internal_asset_type().empty()) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
  }
  if (from._internal_has_klong()) {
    _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_klong());
  }
  if (from._internal_has_kshort()) {
    _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_kshort());
  }
  if (from._internal_has_dlong()) {
    _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong());
  }
  if (from._internal_has_dshort()) {
    _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort());
  }
  if (from._internal_has_dlong_min()) {
    _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong_min());
  }
  if (from._internal_has_dshort_min()) {
    _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort_min());
  }
  if (from._internal_has_first_trade_date()) {
    _this->_internal_mutable_first_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_trade_date());
  }
  if (from._internal_has_last_trade_date()) {
    _this->_internal_mutable_last_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_trade_date());
  }
  if (from._internal_has_basic_asset_size()) {
    _this->_internal_mutable_basic_asset_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_basic_asset_size());
  }
  if (from._internal_has_expiration_date()) {
    _this->_internal_mutable_expiration_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiration_date());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_has_initial_margin_on_buy()) {
    _this->_internal_mutable_initial_margin_on_buy()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_margin_on_buy());
  }
  if (from._internal_has_initial_margin_on_sell()) {
    _this->_internal_mutable_initial_margin_on_sell()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_margin_on_sell());
  }
  if (from._internal_has_min_price_increment_amount()) {
    _this->_internal_mutable_min_price_increment_amount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment_amount());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Future::CopyFrom(const Future& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Future)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Future::IsInitialized() const {
  return true;
}

void Future::InternalSwap(Future* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.futures_type_, lhs_arena,
      &other->_impl_.futures_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_type_, lhs_arena,
      &other->_impl_.asset_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basic_asset_, lhs_arena,
      &other->_impl_.basic_asset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sector_, lhs_arena,
      &other->_impl_.sector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basic_asset_position_uid_, lhs_arena,
      &other->_impl_.basic_asset_position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Future, _impl_.blocked_tca_flag_)
      + sizeof(Future::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(Future, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Future::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[29]);
}

// ===================================================================

class Share::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Share* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ipo_date(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Share* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const Share* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const Share* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Share* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Share::_Internal::klong(const Share* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Share::_Internal::kshort(const Share* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Share::_Internal::dlong(const Share* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Share::_Internal::dshort(const Share* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Share::_Internal::dlong_min(const Share* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Share::_Internal::dshort_min(const Share* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Share::_Internal::ipo_date(const Share* msg) {
  return *msg->_impl_.ipo_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Share::_Internal::nominal(const Share* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Share::_Internal::min_price_increment(const Share* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Share::_Internal::first_1min_candle_date(const Share* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Share::_Internal::first_1day_candle_date(const Share* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData&
Share::_Internal::brand(const Share* msg) {
  return *msg->_impl_.brand_;
}
void Share::clear_klong() {
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
}
void Share::clear_kshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
}
void Share::clear_dlong() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
}
void Share::clear_dshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
}
void Share::clear_dlong_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
}
void Share::clear_dshort_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
}
void Share::clear_ipo_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.ipo_date_ != nullptr) {
    delete _impl_.ipo_date_;
  }
  _impl_.ipo_date_ = nullptr;
}
void Share::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
void Share::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void Share::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void Share::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
void Share::clear_brand() {
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
}
Share::Share(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Share)
}
Share::Share(const Share& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Share* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.ipo_date_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.issue_size_){}
    , decltype(_impl_.lot_){}
    , decltype(_impl_.short_enabled_flag_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , decltype(_impl_.issue_size_plan_){}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.share_type_){}
    , decltype(_impl_.real_exchange_){}
    , decltype(_impl_.div_yield_flag_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , decltype(_impl_.liquidity_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sector().empty()) {
    _this->_impl_.sector_.Set(from._internal_sector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_klong()) {
    _this->_impl_.klong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.klong_);
  }
  if (from._internal_has_kshort()) {
    _this->_impl_.kshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.kshort_);
  }
  if (from._internal_has_dlong()) {
    _this->_impl_.dlong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_);
  }
  if (from._internal_has_dshort()) {
    _this->_impl_.dshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_);
  }
  if (from._internal_has_dlong_min()) {
    _this->_impl_.dlong_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_min_);
  }
  if (from._internal_has_dshort_min()) {
    _this->_impl_.dshort_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_min_);
  }
  if (from._internal_has_ipo_date()) {
    _this->_impl_.ipo_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ipo_date_);
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.nominal_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::BrandData(*from._impl_.brand_);
  }
  ::memcpy(&_impl_.issue_size_, &from._impl_.issue_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
    reinterpret_cast<char*>(&_impl_.issue_size_)) + sizeof(_impl_.liquidity_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Share)
}

inline void Share::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.ipo_date_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.issue_size_){int64_t{0}}
    , decltype(_impl_.lot_){0}
    , decltype(_impl_.short_enabled_flag_){false}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , decltype(_impl_.issue_size_plan_){int64_t{0}}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.share_type_){0}
    , decltype(_impl_.real_exchange_){0}
    , decltype(_impl_.div_yield_flag_){false}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , decltype(_impl_.liquidity_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Share::~Share() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Share)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Share::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.klong_;
  if (this != internal_default_instance()) delete _impl_.kshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_;
  if (this != internal_default_instance()) delete _impl_.dshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_min_;
  if (this != internal_default_instance()) delete _impl_.dshort_min_;
  if (this != internal_default_instance()) delete _impl_.ipo_date_;
  if (this != internal_default_instance()) delete _impl_.nominal_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
  if (this != internal_default_instance()) delete _impl_.brand_;
}

void Share::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Share::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Share)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ipo_date_ != nullptr) {
    delete _impl_.ipo_date_;
  }
  _impl_.ipo_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  ::memset(&_impl_.issue_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
      reinterpret_cast<char*>(&_impl_.issue_size_)) + sizeof(_impl_.liquidity_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Share::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.isin"));
        } else
          goto handle_unusual;
        continue;
      // int32 lot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_klong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool short_enabled_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.short_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.name"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.exchange"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ipo_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipo_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 issue_size = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.issue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      // string sector = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_sector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.sector"));
        } else
          goto handle_unusual;
        continue;
      // int64 issue_size_plan = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.issue_size_plan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool div_yield_flag = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.div_yield_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_share_type(static_cast<::tinkoff::public_::invest::api::contract::v1::ShareType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_exchange(static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string asset_uid = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Share.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool liquidity_flag = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.liquidity_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Share::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Share)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.currency");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_name(), target);
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.exchange");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_exchange(), target);
  }

  // .google.protobuf.Timestamp ipo_date = 17;
  if (this->_internal_has_ipo_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::ipo_date(this),
        _Internal::ipo_date(this).GetCachedSize(), target, stream);
  }

  // int64 issue_size = 18;
  if (this->_internal_issue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_issue_size(), target);
  }

  // string country_of_risk = 19;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 20;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_country_of_risk_name(), target);
  }

  // string sector = 21;
  if (!this->_internal_sector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sector().data(), static_cast<int>(this->_internal_sector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.sector");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_sector(), target);
  }

  // int64 issue_size_plan = 22;
  if (this->_internal_issue_size_plan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_issue_size_plan(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_sell_available_flag(), target);
  }

  // bool div_yield_flag = 29;
  if (this->_internal_div_yield_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_div_yield_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
  if (this->_internal_share_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_share_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 32;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 33;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.uid");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_real_exchange(), target);
  }

  // string position_uid = 35;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.position_uid");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_position_uid(), target);
  }

  // string asset_uid = 36;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Share.asset_uid");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_asset_uid(), target);
  }

  // bool for_iis_flag = 46;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(46, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 47;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(47, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 48;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(48, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 49;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(49, this->_internal_blocked_tca_flag(), target);
  }

  // bool liquidity_flag = 50;
  if (this->_internal_liquidity_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_liquidity_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Share)
  return target;
}

size_t Share::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Share)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string name = 15;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exchange = 16;
  if (!this->_internal_exchange().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string country_of_risk = 19;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 20;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  // string sector = 21;
  if (!this->_internal_sector().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sector());
  }

  // string uid = 33;
  if (!this->_internal_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 35;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string asset_uid = 36;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.klong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_min_);
  }

  // .google.protobuf.Timestamp ipo_date = 17;
  if (this->_internal_has_ipo_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ipo_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
  if (this->_internal_has_nominal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
  if (this->_internal_has_min_price_increment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // int64 issue_size = 18;
  if (this->_internal_issue_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_issue_size());
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lot());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool otc_flag = 26;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool buy_available_flag = 27;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 28;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // int64 issue_size_plan = 22;
  if (this->_internal_issue_size_plan() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_issue_size_plan());
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
  if (this->_internal_share_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_share_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool div_yield_flag = 29;
  if (this->_internal_div_yield_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool api_trade_available_flag = 32;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_iis_flag = 46;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_qual_investor_flag = 47;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 48;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 49;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool liquidity_flag = 50;
  if (this->_internal_liquidity_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Share::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Share::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Share::GetClassData() const { return &_class_data_; }


void Share::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Share*>(&to_msg);
  auto& from = static_cast<const Share&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Share)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (from._internal_has_klong()) {
    _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_klong());
  }
  if (from._internal_has_kshort()) {
    _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_kshort());
  }
  if (from._internal_has_dlong()) {
    _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong());
  }
  if (from._internal_has_dshort()) {
    _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort());
  }
  if (from._internal_has_dlong_min()) {
    _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong_min());
  }
  if (from._internal_has_dshort_min()) {
    _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort_min());
  }
  if (from._internal_has_ipo_date()) {
    _this->_internal_mutable_ipo_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ipo_date());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_nominal());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_issue_size() != 0) {
    _this->_internal_set_issue_size(from._internal_issue_size());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_issue_size_plan() != 0) {
    _this->_internal_set_issue_size_plan(from._internal_issue_size_plan());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_share_type() != 0) {
    _this->_internal_set_share_type(from._internal_share_type());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_internal_set_div_yield_flag(from._internal_div_yield_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_internal_set_liquidity_flag(from._internal_liquidity_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Share::CopyFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Share::IsInitialized() const {
  return true;
}

void Share::InternalSwap(Share* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sector_, lhs_arena,
      &other->_impl_.sector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Share, _impl_.liquidity_flag_)
      + sizeof(Share::_impl_.liquidity_flag_)
      - PROTOBUF_FIELD_OFFSET(Share, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Share::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[30]);
}

// ===================================================================

class GetAccruedInterestsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetAccruedInterestsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetAccruedInterestsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAccruedInterestsRequest::_Internal::from(const GetAccruedInterestsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAccruedInterestsRequest::_Internal::to(const GetAccruedInterestsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetAccruedInterestsRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void GetAccruedInterestsRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
GetAccruedInterestsRequest::GetAccruedInterestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
}
GetAccruedInterestsRequest::GetAccruedInterestsRequest(const GetAccruedInterestsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccruedInterestsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
}

inline void GetAccruedInterestsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccruedInterestsRequest::~GetAccruedInterestsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccruedInterestsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetAccruedInterestsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccruedInterestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccruedInterestsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccruedInterestsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  return target;
}

size_t GetAccruedInterestsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccruedInterestsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccruedInterestsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccruedInterestsRequest::GetClassData() const { return &_class_data_; }


void GetAccruedInterestsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccruedInterestsRequest*>(&to_msg);
  auto& from = static_cast<const GetAccruedInterestsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccruedInterestsRequest::CopyFrom(const GetAccruedInterestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccruedInterestsRequest::IsInitialized() const {
  return true;
}

void GetAccruedInterestsRequest::InternalSwap(GetAccruedInterestsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.to_)
      + sizeof(GetAccruedInterestsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccruedInterestsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[31]);
}

// ===================================================================

class GetAccruedInterestsResponse::_Internal {
 public:
};

GetAccruedInterestsResponse::GetAccruedInterestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
}
GetAccruedInterestsResponse::GetAccruedInterestsResponse(const GetAccruedInterestsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccruedInterestsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accrued_interests_){from._impl_.accrued_interests_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
}

inline void GetAccruedInterestsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accrued_interests_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAccruedInterestsResponse::~GetAccruedInterestsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccruedInterestsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accrued_interests_.~RepeatedPtrField();
}

void GetAccruedInterestsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccruedInterestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accrued_interests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccruedInterestsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accrued_interests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccruedInterestsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accrued_interests_size()); i < n; i++) {
    const auto& repfield = this->_internal_accrued_interests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  return target;
}

size_t GetAccruedInterestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
  total_size += 1UL * this->_internal_accrued_interests_size();
  for (const auto& msg : this->_impl_.accrued_interests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccruedInterestsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccruedInterestsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccruedInterestsResponse::GetClassData() const { return &_class_data_; }


void GetAccruedInterestsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccruedInterestsResponse*>(&to_msg);
  auto& from = static_cast<const GetAccruedInterestsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accrued_interests_.MergeFrom(from._impl_.accrued_interests_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccruedInterestsResponse::CopyFrom(const GetAccruedInterestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccruedInterestsResponse::IsInitialized() const {
  return true;
}

void GetAccruedInterestsResponse::InternalSwap(GetAccruedInterestsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accrued_interests_.InternalSwap(&other->_impl_.accrued_interests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccruedInterestsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[32]);
}

// ===================================================================

class AccruedInterest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date(const AccruedInterest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& value(const AccruedInterest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& value_percent(const AccruedInterest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AccruedInterest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AccruedInterest::_Internal::date(const AccruedInterest* msg) {
  return *msg->_impl_.date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AccruedInterest::_Internal::value(const AccruedInterest* msg) {
  return *msg->_impl_.value_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AccruedInterest::_Internal::value_percent(const AccruedInterest* msg) {
  return *msg->_impl_.value_percent_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AccruedInterest::_Internal::nominal(const AccruedInterest* msg) {
  return *msg->_impl_.nominal_;
}
void AccruedInterest::clear_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
}
void AccruedInterest::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
void AccruedInterest::clear_value_percent() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_percent_ != nullptr) {
    delete _impl_.value_percent_;
  }
  _impl_.value_percent_ = nullptr;
}
void AccruedInterest::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
AccruedInterest::AccruedInterest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
}
AccruedInterest::AccruedInterest(const AccruedInterest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccruedInterest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.date_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.value_percent_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.value_);
  }
  if (from._internal_has_value_percent()) {
    _this->_impl_.value_percent_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.value_percent_);
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.nominal_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
}

inline void AccruedInterest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.date_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.value_percent_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccruedInterest::~AccruedInterest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccruedInterest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.date_;
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.value_percent_;
  if (this != internal_default_instance()) delete _impl_.nominal_;
}

void AccruedInterest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccruedInterest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_percent_ != nullptr) {
    delete _impl_.value_percent_;
  }
  _impl_.value_percent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccruedInterest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_percent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccruedInterest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp date = 1;
  if (this->_internal_has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
  if (this->_internal_has_value_percent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value_percent(this),
        _Internal::value_percent(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  return target;
}

size_t AccruedInterest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp date = 1;
  if (this->_internal_has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
  if (this->_internal_has_value_percent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_percent_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  if (this->_internal_has_nominal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccruedInterest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccruedInterest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccruedInterest::GetClassData() const { return &_class_data_; }


void AccruedInterest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccruedInterest*>(&to_msg);
  auto& from = static_cast<const AccruedInterest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_date()) {
    _this->_internal_mutable_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_value());
  }
  if (from._internal_has_value_percent()) {
    _this->_internal_mutable_value_percent()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_value_percent());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccruedInterest::CopyFrom(const AccruedInterest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccruedInterest::IsInitialized() const {
  return true;
}

void AccruedInterest::InternalSwap(AccruedInterest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.nominal_)
      + sizeof(AccruedInterest::_impl_.nominal_)
      - PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccruedInterest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[33]);
}

// ===================================================================

class GetFuturesMarginRequest::_Internal {
 public:
};

GetFuturesMarginRequest::GetFuturesMarginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
}
GetFuturesMarginRequest::GetFuturesMarginRequest(const GetFuturesMarginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFuturesMarginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
}

inline void GetFuturesMarginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFuturesMarginRequest::~GetFuturesMarginRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFuturesMarginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void GetFuturesMarginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFuturesMarginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFuturesMarginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFuturesMarginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  return target;
}

size_t GetFuturesMarginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFuturesMarginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFuturesMarginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFuturesMarginRequest::GetClassData() const { return &_class_data_; }


void GetFuturesMarginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFuturesMarginRequest*>(&to_msg);
  auto& from = static_cast<const GetFuturesMarginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFuturesMarginRequest::CopyFrom(const GetFuturesMarginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFuturesMarginRequest::IsInitialized() const {
  return true;
}

void GetFuturesMarginRequest::InternalSwap(GetFuturesMarginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFuturesMarginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[34]);
}

// ===================================================================

class GetFuturesMarginResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_buy(const GetFuturesMarginResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_sell(const GetFuturesMarginResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const GetFuturesMarginResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment_amount(const GetFuturesMarginResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetFuturesMarginResponse::_Internal::initial_margin_on_buy(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.initial_margin_on_buy_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetFuturesMarginResponse::_Internal::initial_margin_on_sell(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.initial_margin_on_sell_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetFuturesMarginResponse::_Internal::min_price_increment(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetFuturesMarginResponse::_Internal::min_price_increment_amount(const GetFuturesMarginResponse* msg) {
  return *msg->_impl_.min_price_increment_amount_;
}
void GetFuturesMarginResponse::clear_initial_margin_on_buy() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_buy_ != nullptr) {
    delete _impl_.initial_margin_on_buy_;
  }
  _impl_.initial_margin_on_buy_ = nullptr;
}
void GetFuturesMarginResponse::clear_initial_margin_on_sell() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_sell_ != nullptr) {
    delete _impl_.initial_margin_on_sell_;
  }
  _impl_.initial_margin_on_sell_ = nullptr;
}
void GetFuturesMarginResponse::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void GetFuturesMarginResponse::clear_min_price_increment_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_amount_ != nullptr) {
    delete _impl_.min_price_increment_amount_;
  }
  _impl_.min_price_increment_amount_ = nullptr;
}
GetFuturesMarginResponse::GetFuturesMarginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
}
GetFuturesMarginResponse::GetFuturesMarginResponse(const GetFuturesMarginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFuturesMarginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.initial_margin_on_buy_){nullptr}
    , decltype(_impl_.initial_margin_on_sell_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.min_price_increment_amount_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initial_margin_on_buy()) {
    _this->_impl_.initial_margin_on_buy_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_margin_on_buy_);
  }
  if (from._internal_has_initial_margin_on_sell()) {
    _this->_impl_.initial_margin_on_sell_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_margin_on_sell_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_min_price_increment_amount()) {
    _this->_impl_.min_price_increment_amount_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_amount_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
}

inline void GetFuturesMarginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.initial_margin_on_buy_){nullptr}
    , decltype(_impl_.initial_margin_on_sell_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.min_price_increment_amount_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFuturesMarginResponse::~GetFuturesMarginResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFuturesMarginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.initial_margin_on_buy_;
  if (this != internal_default_instance()) delete _impl_.initial_margin_on_sell_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_amount_;
}

void GetFuturesMarginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFuturesMarginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_buy_ != nullptr) {
    delete _impl_.initial_margin_on_buy_;
  }
  _impl_.initial_margin_on_buy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_on_sell_ != nullptr) {
    delete _impl_.initial_margin_on_sell_;
  }
  _impl_.initial_margin_on_sell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_amount_ != nullptr) {
    delete _impl_.min_price_increment_amount_;
  }
  _impl_.min_price_increment_amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFuturesMarginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_margin_on_buy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_margin_on_sell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFuturesMarginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
  if (this->_internal_has_initial_margin_on_buy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::initial_margin_on_buy(this),
        _Internal::initial_margin_on_buy(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
  if (this->_internal_has_initial_margin_on_sell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::initial_margin_on_sell(this),
        _Internal::initial_margin_on_sell(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
  if (this->_internal_has_min_price_increment_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::min_price_increment_amount(this),
        _Internal::min_price_increment_amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  return target;
}

size_t GetFuturesMarginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
  if (this->_internal_has_initial_margin_on_buy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_margin_on_buy_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
  if (this->_internal_has_initial_margin_on_sell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_margin_on_sell_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
  if (this->_internal_has_min_price_increment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
  if (this->_internal_has_min_price_increment_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFuturesMarginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFuturesMarginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFuturesMarginResponse::GetClassData() const { return &_class_data_; }


void GetFuturesMarginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFuturesMarginResponse*>(&to_msg);
  auto& from = static_cast<const GetFuturesMarginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_initial_margin_on_buy()) {
    _this->_internal_mutable_initial_margin_on_buy()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_margin_on_buy());
  }
  if (from._internal_has_initial_margin_on_sell()) {
    _this->_internal_mutable_initial_margin_on_sell()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_margin_on_sell());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_min_price_increment_amount()) {
    _this->_internal_mutable_min_price_increment_amount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFuturesMarginResponse::CopyFrom(const GetFuturesMarginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFuturesMarginResponse::IsInitialized() const {
  return true;
}

void GetFuturesMarginResponse::InternalSwap(GetFuturesMarginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_amount_)
      + sizeof(GetFuturesMarginResponse::_impl_.min_price_increment_amount_)
      - PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_buy_)>(
          reinterpret_cast<char*>(&_impl_.initial_margin_on_buy_),
          reinterpret_cast<char*>(&other->_impl_.initial_margin_on_buy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFuturesMarginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[35]);
}

// ===================================================================

class InstrumentResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Instrument& instrument(const InstrumentResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Instrument&
InstrumentResponse::_Internal::instrument(const InstrumentResponse* msg) {
  return *msg->_impl_.instrument_;
}
InstrumentResponse::InstrumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
}
InstrumentResponse::InstrumentResponse(const InstrumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::tinkoff::public_::invest::api::contract::v1::Instrument(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
}

inline void InstrumentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InstrumentResponse::~InstrumentResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void InstrumentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  return target;
}

size_t InstrumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentResponse::GetClassData() const { return &_class_data_; }


void InstrumentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentResponse*>(&to_msg);
  auto& from = static_cast<const InstrumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::tinkoff::public_::invest::api::contract::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentResponse::CopyFrom(const InstrumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentResponse::IsInitialized() const {
  return true;
}

void InstrumentResponse::InternalSwap(InstrumentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[36]);
}

// ===================================================================

class Instrument::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong(const Instrument* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort(const Instrument* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong(const Instrument* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort(const Instrument* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min(const Instrument* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min(const Instrument* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment(const Instrument* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const Instrument* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const Instrument* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand(const Instrument* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Instrument::_Internal::klong(const Instrument* msg) {
  return *msg->_impl_.klong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Instrument::_Internal::kshort(const Instrument* msg) {
  return *msg->_impl_.kshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Instrument::_Internal::dlong(const Instrument* msg) {
  return *msg->_impl_.dlong_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Instrument::_Internal::dshort(const Instrument* msg) {
  return *msg->_impl_.dshort_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Instrument::_Internal::dlong_min(const Instrument* msg) {
  return *msg->_impl_.dlong_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Instrument::_Internal::dshort_min(const Instrument* msg) {
  return *msg->_impl_.dshort_min_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Instrument::_Internal::min_price_increment(const Instrument* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Instrument::_Internal::first_1min_candle_date(const Instrument* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Instrument::_Internal::first_1day_candle_date(const Instrument* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::BrandData&
Instrument::_Internal::brand(const Instrument* msg) {
  return *msg->_impl_.brand_;
}
void Instrument::clear_klong() {
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
}
void Instrument::clear_kshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
}
void Instrument::clear_dlong() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
}
void Instrument::clear_dshort() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
}
void Instrument::clear_dlong_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
}
void Instrument::clear_dshort_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
}
void Instrument::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void Instrument::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void Instrument::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
void Instrument::clear_brand() {
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
}
Instrument::Instrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Instrument)
}
Instrument::Instrument(const Instrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Instrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.short_enabled_flag_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , decltype(_impl_.real_exchange_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , decltype(_impl_.instrument_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_klong()) {
    _this->_impl_.klong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.klong_);
  }
  if (from._internal_has_kshort()) {
    _this->_impl_.kshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.kshort_);
  }
  if (from._internal_has_dlong()) {
    _this->_impl_.dlong_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_);
  }
  if (from._internal_has_dshort()) {
    _this->_impl_.dshort_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_);
  }
  if (from._internal_has_dlong_min()) {
    _this->_impl_.dlong_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dlong_min_);
  }
  if (from._internal_has_dshort_min()) {
    _this->_impl_.dshort_min_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dshort_min_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::BrandData(*from._impl_.brand_);
  }
  ::memcpy(&_impl_.lot_, &from._impl_.lot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.instrument_kind_) -
    reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.instrument_kind_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Instrument)
}

inline void Instrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.klong_){nullptr}
    , decltype(_impl_.kshort_){nullptr}
    , decltype(_impl_.dlong_){nullptr}
    , decltype(_impl_.dshort_){nullptr}
    , decltype(_impl_.dlong_min_){nullptr}
    , decltype(_impl_.dshort_min_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.lot_){0}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.short_enabled_flag_){false}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , decltype(_impl_.real_exchange_){0}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , decltype(_impl_.instrument_kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Instrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Instrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.klong_;
  if (this != internal_default_instance()) delete _impl_.kshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_;
  if (this != internal_default_instance()) delete _impl_.dshort_;
  if (this != internal_default_instance()) delete _impl_.dlong_min_;
  if (this != internal_default_instance()) delete _impl_.dshort_min_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
  if (this != internal_default_instance()) delete _impl_.brand_;
}

void Instrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.klong_ != nullptr) {
    delete _impl_.klong_;
  }
  _impl_.klong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kshort_ != nullptr) {
    delete _impl_.kshort_;
  }
  _impl_.kshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_ != nullptr) {
    delete _impl_.dlong_;
  }
  _impl_.dlong_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_ != nullptr) {
    delete _impl_.dshort_;
  }
  _impl_.dshort_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dlong_min_ != nullptr) {
    delete _impl_.dlong_min_;
  }
  _impl_.dlong_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dshort_min_ != nullptr) {
    delete _impl_.dshort_min_;
  }
  _impl_.dshort_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  ::memset(&_impl_.lot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.instrument_kind_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.instrument_kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.isin"));
        } else
          goto handle_unusual;
        continue;
      // int32 lot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_klong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlong_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dshort_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool short_enabled_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.short_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.name"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.exchange"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_exchange(static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // string asset_uid = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_lot(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.currency");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::klong(this),
        _Internal::klong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::kshort(this),
        _Internal::kshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dlong(this),
        _Internal::dlong(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dshort(this),
        _Internal::dshort(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dlong_min(this),
        _Internal::dlong_min(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::dshort_min(this),
        _Internal::dshort_min(this).GetCachedSize(), target, stream);
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_short_enabled_flag(), target);
  }

  // string name = 14;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_name(), target);
  }

  // string exchange = 15;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.exchange");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_exchange(), target);
  }

  // string country_of_risk = 16;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 17;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_country_of_risk_name(), target);
  }

  // string instrument_type = 18;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_instrument_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_trading_status(), target);
  }

  // bool otc_flag = 20;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_otc_flag(), target);
  }

  // bool buy_available_flag = 21;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 22;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_sell_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // bool api_trade_available_flag = 24;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_api_trade_available_flag(), target);
  }

  // string uid = 25;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.uid");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
  if (this->_internal_real_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_real_exchange(), target);
  }

  // string position_uid = 27;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.position_uid");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_position_uid(), target);
  }

  // string asset_uid = 28;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_asset_uid(), target);
  }

  // bool for_iis_flag = 36;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_for_iis_flag(), target);
  }

  // bool for_qual_investor_flag = 37;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 38;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 39;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_blocked_tca_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      40, this->_internal_instrument_kind(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Instrument)
  return target;
}

size_t Instrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string name = 14;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exchange = 15;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string country_of_risk = 16;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 17;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  // string instrument_type = 18;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // string uid = 25;
  if (!this->_internal_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 27;
  if (!this->_internal_position_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // string asset_uid = 28;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  if (this->_internal_has_klong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.klong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  if (this->_internal_has_kshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  if (this->_internal_has_dlong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  if (this->_internal_has_dshort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  if (this->_internal_has_dlong_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dlong_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  if (this->_internal_has_dshort_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dshort_min_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
  if (this->_internal_has_min_price_increment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  if (this->_internal_has_brand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // int32 lot = 5;
  if (this->_internal_lot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lot());
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
  if (this->_internal_trading_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // bool short_enabled_flag = 13;
  if (this->_internal_short_enabled_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool otc_flag = 20;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool buy_available_flag = 21;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 22;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
  if (this->_internal_real_exchange() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_real_exchange());
  }

  // bool api_trade_available_flag = 24;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_iis_flag = 36;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool for_qual_investor_flag = 37;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 38;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 39;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Instrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instrument::GetClassData() const { return &_class_data_; }


void Instrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Instrument*>(&to_msg);
  auto& from = static_cast<const Instrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (from._internal_has_klong()) {
    _this->_internal_mutable_klong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_klong());
  }
  if (from._internal_has_kshort()) {
    _this->_internal_mutable_kshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_kshort());
  }
  if (from._internal_has_dlong()) {
    _this->_internal_mutable_dlong()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong());
  }
  if (from._internal_has_dshort()) {
    _this->_internal_mutable_dshort()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort());
  }
  if (from._internal_has_dlong_min()) {
    _this->_internal_mutable_dlong_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dlong_min());
  }
  if (from._internal_has_dshort_min()) {
    _this->_internal_mutable_dshort_min()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dshort_min());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::BrandData::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_lot() != 0) {
    _this->_internal_set_lot(from._internal_lot());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_internal_set_short_enabled_flag(from._internal_short_enabled_flag());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  if (from._internal_real_exchange() != 0) {
    _this->_internal_set_real_exchange(from._internal_real_exchange());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  return true;
}

void Instrument::InternalSwap(Instrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_kind_)
      + sizeof(Instrument::_impl_.instrument_kind_)
      - PROTOBUF_FIELD_OFFSET(Instrument, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Instrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[37]);
}

// ===================================================================

class GetDividendsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDividendsRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetDividendsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetDividendsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDividendsRequest::_Internal::from(const GetDividendsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDividendsRequest::_Internal::to(const GetDividendsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetDividendsRequest::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetDividendsRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetDividendsRequest::GetDividendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
}
GetDividendsRequest::GetDividendsRequest(const GetDividendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDividendsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
}

inline void GetDividendsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDividendsRequest::~GetDividendsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDividendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetDividendsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDividendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDividendsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDividendsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // optional .google.protobuf.Timestamp from = 2;
  if (_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  return target;
}

size_t GetDividendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDividendsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDividendsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDividendsRequest::GetClassData() const { return &_class_data_; }


void GetDividendsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsRequest*>(&to_msg);
  auto& from = static_cast<const GetDividendsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsRequest::CopyFrom(const GetDividendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDividendsRequest::IsInitialized() const {
  return true;
}

void GetDividendsRequest::InternalSwap(GetDividendsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.to_)
      + sizeof(GetDividendsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDividendsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[38]);
}

// ===================================================================

class GetDividendsResponse::_Internal {
 public:
};

GetDividendsResponse::GetDividendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
}
GetDividendsResponse::GetDividendsResponse(const GetDividendsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDividendsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dividends_){from._impl_.dividends_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
}

inline void GetDividendsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dividends_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDividendsResponse::~GetDividendsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDividendsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dividends_.~RepeatedPtrField();
}

void GetDividendsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDividendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dividends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDividendsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dividends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDividendsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dividends_size()); i < n; i++) {
    const auto& repfield = this->_internal_dividends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  return target;
}

size_t GetDividendsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
  total_size += 1UL * this->_internal_dividends_size();
  for (const auto& msg : this->_impl_.dividends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDividendsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDividendsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDividendsResponse::GetClassData() const { return &_class_data_; }


void GetDividendsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDividendsResponse*>(&to_msg);
  auto& from = static_cast<const GetDividendsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dividends_.MergeFrom(from._impl_.dividends_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsResponse::CopyFrom(const GetDividendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDividendsResponse::IsInitialized() const {
  return true;
}

void GetDividendsResponse::InternalSwap(GetDividendsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dividends_.InternalSwap(&other->_impl_.dividends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDividendsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[39]);
}

// ===================================================================

class Dividend::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& dividend_net(const Dividend* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& payment_date(const Dividend* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& declared_date(const Dividend* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_buy_date(const Dividend* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& record_date(const Dividend* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& close_price(const Dividend* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_value(const Dividend* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Dividend* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Dividend::_Internal::dividend_net(const Dividend* msg) {
  return *msg->_impl_.dividend_net_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dividend::_Internal::payment_date(const Dividend* msg) {
  return *msg->_impl_.payment_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dividend::_Internal::declared_date(const Dividend* msg) {
  return *msg->_impl_.declared_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dividend::_Internal::last_buy_date(const Dividend* msg) {
  return *msg->_impl_.last_buy_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dividend::_Internal::record_date(const Dividend* msg) {
  return *msg->_impl_.record_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
Dividend::_Internal::close_price(const Dividend* msg) {
  return *msg->_impl_.close_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Dividend::_Internal::yield_value(const Dividend* msg) {
  return *msg->_impl_.yield_value_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dividend::_Internal::created_at(const Dividend* msg) {
  return *msg->_impl_.created_at_;
}
void Dividend::clear_dividend_net() {
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_net_ != nullptr) {
    delete _impl_.dividend_net_;
  }
  _impl_.dividend_net_ = nullptr;
}
void Dividend::clear_payment_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.payment_date_ != nullptr) {
    delete _impl_.payment_date_;
  }
  _impl_.payment_date_ = nullptr;
}
void Dividend::clear_declared_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.declared_date_ != nullptr) {
    delete _impl_.declared_date_;
  }
  _impl_.declared_date_ = nullptr;
}
void Dividend::clear_last_buy_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_buy_date_ != nullptr) {
    delete _impl_.last_buy_date_;
  }
  _impl_.last_buy_date_ = nullptr;
}
void Dividend::clear_record_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.record_date_ != nullptr) {
    delete _impl_.record_date_;
  }
  _impl_.record_date_ = nullptr;
}
void Dividend::clear_close_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.close_price_ != nullptr) {
    delete _impl_.close_price_;
  }
  _impl_.close_price_ = nullptr;
}
void Dividend::clear_yield_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.yield_value_ != nullptr) {
    delete _impl_.yield_value_;
  }
  _impl_.yield_value_ = nullptr;
}
void Dividend::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Dividend::Dividend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Dividend)
}
Dividend::Dividend(const Dividend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dividend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dividend_type_){}
    , decltype(_impl_.regularity_){}
    , decltype(_impl_.dividend_net_){nullptr}
    , decltype(_impl_.payment_date_){nullptr}
    , decltype(_impl_.declared_date_){nullptr}
    , decltype(_impl_.last_buy_date_){nullptr}
    , decltype(_impl_.record_date_){nullptr}
    , decltype(_impl_.close_price_){nullptr}
    , decltype(_impl_.yield_value_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dividend_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dividend_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dividend_type().empty()) {
    _this->_impl_.dividend_type_.Set(from._internal_dividend_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.regularity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regularity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_regularity().empty()) {
    _this->_impl_.regularity_.Set(from._internal_regularity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dividend_net()) {
    _this->_impl_.dividend_net_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.dividend_net_);
  }
  if (from._internal_has_payment_date()) {
    _this->_impl_.payment_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.payment_date_);
  }
  if (from._internal_has_declared_date()) {
    _this->_impl_.declared_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.declared_date_);
  }
  if (from._internal_has_last_buy_date()) {
    _this->_impl_.last_buy_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_buy_date_);
  }
  if (from._internal_has_record_date()) {
    _this->_impl_.record_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.record_date_);
  }
  if (from._internal_has_close_price()) {
    _this->_impl_.close_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.close_price_);
  }
  if (from._internal_has_yield_value()) {
    _this->_impl_.yield_value_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.yield_value_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Dividend)
}

inline void Dividend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dividend_type_){}
    , decltype(_impl_.regularity_){}
    , decltype(_impl_.dividend_net_){nullptr}
    , decltype(_impl_.payment_date_){nullptr}
    , decltype(_impl_.declared_date_){nullptr}
    , decltype(_impl_.last_buy_date_){nullptr}
    , decltype(_impl_.record_date_){nullptr}
    , decltype(_impl_.close_price_){nullptr}
    , decltype(_impl_.yield_value_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dividend_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dividend_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.regularity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regularity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dividend::~Dividend() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Dividend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dividend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dividend_type_.Destroy();
  _impl_.regularity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dividend_net_;
  if (this != internal_default_instance()) delete _impl_.payment_date_;
  if (this != internal_default_instance()) delete _impl_.declared_date_;
  if (this != internal_default_instance()) delete _impl_.last_buy_date_;
  if (this != internal_default_instance()) delete _impl_.record_date_;
  if (this != internal_default_instance()) delete _impl_.close_price_;
  if (this != internal_default_instance()) delete _impl_.yield_value_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void Dividend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dividend::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dividend_type_.ClearToEmpty();
  _impl_.regularity_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_net_ != nullptr) {
    delete _impl_.dividend_net_;
  }
  _impl_.dividend_net_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payment_date_ != nullptr) {
    delete _impl_.payment_date_;
  }
  _impl_.payment_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.declared_date_ != nullptr) {
    delete _impl_.declared_date_;
  }
  _impl_.declared_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_buy_date_ != nullptr) {
    delete _impl_.last_buy_date_;
  }
  _impl_.last_buy_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.record_date_ != nullptr) {
    delete _impl_.record_date_;
  }
  _impl_.record_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.close_price_ != nullptr) {
    delete _impl_.close_price_;
  }
  _impl_.close_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.yield_value_ != nullptr) {
    delete _impl_.yield_value_;
  }
  _impl_.yield_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dividend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dividend_net(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp payment_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp declared_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_declared_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_buy_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_buy_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dividend_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dividend_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp record_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string regularity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_regularity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Dividend.regularity"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dividend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
  if (this->_internal_has_dividend_net()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dividend_net(this),
        _Internal::dividend_net(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp payment_date = 2;
  if (this->_internal_has_payment_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payment_date(this),
        _Internal::payment_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp declared_date = 3;
  if (this->_internal_has_declared_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::declared_date(this),
        _Internal::declared_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_buy_date = 4;
  if (this->_internal_has_last_buy_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_buy_date(this),
        _Internal::last_buy_date(this).GetCachedSize(), target, stream);
  }

  // string dividend_type = 5;
  if (!this->_internal_dividend_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dividend_type().data(), static_cast<int>(this->_internal_dividend_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dividend_type(), target);
  }

  // .google.protobuf.Timestamp record_date = 6;
  if (this->_internal_has_record_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::record_date(this),
        _Internal::record_date(this).GetCachedSize(), target, stream);
  }

  // string regularity = 7;
  if (!this->_internal_regularity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regularity().data(), static_cast<int>(this->_internal_regularity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Dividend.regularity");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_regularity(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
  if (this->_internal_has_close_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::close_price(this),
        _Internal::close_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
  if (this->_internal_has_yield_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::yield_value(this),
        _Internal::yield_value(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 10;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Dividend)
  return target;
}

size_t Dividend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dividend_type = 5;
  if (!this->_internal_dividend_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dividend_type());
  }

  // string regularity = 7;
  if (!this->_internal_regularity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regularity());
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
  if (this->_internal_has_dividend_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dividend_net_);
  }

  // .google.protobuf.Timestamp payment_date = 2;
  if (this->_internal_has_payment_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payment_date_);
  }

  // .google.protobuf.Timestamp declared_date = 3;
  if (this->_internal_has_declared_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.declared_date_);
  }

  // .google.protobuf.Timestamp last_buy_date = 4;
  if (this->_internal_has_last_buy_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_buy_date_);
  }

  // .google.protobuf.Timestamp record_date = 6;
  if (this->_internal_has_record_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
  if (this->_internal_has_close_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.close_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
  if (this->_internal_has_yield_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yield_value_);
  }

  // .google.protobuf.Timestamp created_at = 10;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dividend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dividend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dividend::GetClassData() const { return &_class_data_; }


void Dividend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dividend*>(&to_msg);
  auto& from = static_cast<const Dividend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dividend_type().empty()) {
    _this->_internal_set_dividend_type(from._internal_dividend_type());
  }
  if (!from._internal_regularity().empty()) {
    _this->_internal_set_regularity(from._internal_regularity());
  }
  if (from._internal_has_dividend_net()) {
    _this->_internal_mutable_dividend_net()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_dividend_net());
  }
  if (from._internal_has_payment_date()) {
    _this->_internal_mutable_payment_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_payment_date());
  }
  if (from._internal_has_declared_date()) {
    _this->_internal_mutable_declared_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_declared_date());
  }
  if (from._internal_has_last_buy_date()) {
    _this->_internal_mutable_last_buy_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_buy_date());
  }
  if (from._internal_has_record_date()) {
    _this->_internal_mutable_record_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_record_date());
  }
  if (from._internal_has_close_price()) {
    _this->_internal_mutable_close_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_close_price());
  }
  if (from._internal_has_yield_value()) {
    _this->_internal_mutable_yield_value()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_yield_value());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dividend::CopyFrom(const Dividend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Dividend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dividend::IsInitialized() const {
  return true;
}

void Dividend::InternalSwap(Dividend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dividend_type_, lhs_arena,
      &other->_impl_.dividend_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.regularity_, lhs_arena,
      &other->_impl_.regularity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dividend, _impl_.created_at_)
      + sizeof(Dividend::_impl_.created_at_)
      - PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_net_)>(
          reinterpret_cast<char*>(&_impl_.dividend_net_),
          reinterpret_cast<char*>(&other->_impl_.dividend_net_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dividend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[40]);
}

// ===================================================================

class AssetRequest::_Internal {
 public:
};

AssetRequest::AssetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetRequest)
}
AssetRequest::AssetRequest(const AssetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetRequest)
}

inline void AssetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetRequest::~AssetRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void AssetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  return target;
}

size_t AssetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetRequest::GetClassData() const { return &_class_data_; }


void AssetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetRequest*>(&to_msg);
  auto& from = static_cast<const AssetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetRequest::CopyFrom(const AssetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetRequest::IsInitialized() const {
  return true;
}

void AssetRequest::InternalSwap(AssetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[41]);
}

// ===================================================================

class AssetResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::AssetFull& asset(const AssetResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::AssetFull&
AssetResponse::_Internal::asset(const AssetResponse* msg) {
  return *msg->_impl_.asset_;
}
AssetResponse::AssetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetResponse)
}
AssetResponse::AssetResponse(const AssetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    _this->_impl_.asset_ = new ::tinkoff::public_::invest::api::contract::v1::AssetFull(*from._impl_.asset_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetResponse)
}

inline void AssetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssetResponse::~AssetResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.asset_;
}

void AssetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.asset_ != nullptr) {
    delete _impl_.asset_;
  }
  _impl_.asset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
  if (this->_internal_has_asset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::asset(this),
        _Internal::asset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  return target;
}

size_t AssetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.asset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetResponse::GetClassData() const { return &_class_data_; }


void AssetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetResponse*>(&to_msg);
  auto& from = static_cast<const AssetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_asset()) {
    _this->_internal_mutable_asset()->::tinkoff::public_::invest::api::contract::v1::AssetFull::MergeFrom(
        from._internal_asset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetResponse::CopyFrom(const AssetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetResponse::IsInitialized() const {
  return true;
}

void AssetResponse::InternalSwap(AssetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.asset_, other->_impl_.asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[42]);
}

// ===================================================================

class AssetsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetsRequest>()._impl_._has_bits_);
  static void set_has_instrument_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AssetsRequest::AssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
}
AssetsRequest::AssetsRequest(const AssetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.instrument_type_ = from._impl_.instrument_type_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
}

inline void AssetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_type_){0}
  };
}

AssetsRequest::~AssetsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_type(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
  if (_internal_has_instrument_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_instrument_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  return target;
}

size_t AssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetsRequest::GetClassData() const { return &_class_data_; }


void AssetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetsRequest*>(&to_msg);
  auto& from = static_cast<const AssetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument_type()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetsRequest::CopyFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsRequest::IsInitialized() const {
  return true;
}

void AssetsRequest::InternalSwap(AssetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_type_, other->_impl_.instrument_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[43]);
}

// ===================================================================

class AssetsResponse::_Internal {
 public:
};

AssetsResponse::AssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
}
AssetsResponse::AssetsResponse(const AssetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.assets_){from._impl_.assets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
}

inline void AssetsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.assets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssetsResponse::~AssetsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assets_.~RepeatedPtrField();
}

void AssetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assets_size()); i < n; i++) {
    const auto& repfield = this->_internal_assets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  return target;
}

size_t AssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->_impl_.assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetsResponse::GetClassData() const { return &_class_data_; }


void AssetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetsResponse*>(&to_msg);
  auto& from = static_cast<const AssetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assets_.MergeFrom(from._impl_.assets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetsResponse::CopyFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsResponse::IsInitialized() const {
  return true;
}

void AssetsResponse::InternalSwap(AssetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assets_.InternalSwap(&other->_impl_.assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[44]);
}

// ===================================================================

class AssetFull::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const AssetFull* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& currency(const AssetFull* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& security(const AssetFull* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Brand& brand(const AssetFull* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const AssetFull* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetFull::_Internal::deleted_at(const AssetFull* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency&
AssetFull::_Internal::currency(const AssetFull* msg) {
  return *msg->_impl_.ext_.currency_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity&
AssetFull::_Internal::security(const AssetFull* msg) {
  return *msg->_impl_.ext_.security_;
}
const ::tinkoff::public_::invest::api::contract::v1::Brand&
AssetFull::_Internal::brand(const AssetFull* msg) {
  return *msg->_impl_.brand_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetFull::_Internal::updated_at(const AssetFull* msg) {
  return *msg->_impl_.updated_at_;
}
void AssetFull::clear_deleted_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
}
void AssetFull::set_allocated_currency(::tinkoff::public_::invest::api::contract::v1::AssetCurrency* currency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (currency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(currency);
    if (message_arena != submessage_arena) {
      currency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency, submessage_arena);
    }
    set_has_currency();
    _impl_.ext_.currency_ = currency;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.currency)
}
void AssetFull::set_allocated_security(::tinkoff::public_::invest::api::contract::v1::AssetSecurity* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    set_has_security();
    _impl_.ext_.security_ = security;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.security)
}
void AssetFull::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
AssetFull::AssetFull(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetFull)
}
AssetFull::AssetFull(const AssetFull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetFull* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.required_tests_){from._impl_.required_tests_}
    , decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_brief_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.gos_reg_code_){}
    , decltype(_impl_.cfi_){}
    , decltype(_impl_.code_nsd_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.br_code_){}
    , decltype(_impl_.br_code_name_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.ext_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_brief_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_brief_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name_brief().empty()) {
    _this->_impl_.name_brief_.Set(from._internal_name_brief(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gos_reg_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gos_reg_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gos_reg_code().empty()) {
    _this->_impl_.gos_reg_code_.Set(from._internal_gos_reg_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cfi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cfi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cfi().empty()) {
    _this->_impl_.cfi_.Set(from._internal_cfi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_nsd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_nsd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_nsd().empty()) {
    _this->_impl_.code_nsd_.Set(from._internal_code_nsd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.br_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.br_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_br_code().empty()) {
    _this->_impl_.br_code_.Set(from._internal_br_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.br_code_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.br_code_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_br_code_name().empty()) {
    _this->_impl_.br_code_name_.Set(from._internal_br_code_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_brand()) {
    _this->_impl_.brand_ = new ::tinkoff::public_::invest::api::contract::v1::Brand(*from._impl_.brand_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_ext();
  switch (from.ext_case()) {
    case kCurrency: {
      _this->_internal_mutable_currency()->::tinkoff::public_::invest::api::contract::v1::AssetCurrency::MergeFrom(
          from._internal_currency());
      break;
    }
    case kSecurity: {
      _this->_internal_mutable_security()->::tinkoff::public_::invest::api::contract::v1::AssetSecurity::MergeFrom(
          from._internal_security());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetFull)
}

inline void AssetFull::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.required_tests_){arena}
    , decltype(_impl_.instruments_){arena}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_brief_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.gos_reg_code_){}
    , decltype(_impl_.cfi_){}
    , decltype(_impl_.code_nsd_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.br_code_){}
    , decltype(_impl_.br_code_name_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.brand_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.ext_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_brief_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_brief_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gos_reg_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gos_reg_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cfi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cfi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_nsd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_nsd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.br_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.br_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.br_code_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.br_code_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_ext();
}

AssetFull::~AssetFull() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetFull)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetFull::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.required_tests_.~RepeatedPtrField();
  _impl_.instruments_.~RepeatedPtrField();
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.name_brief_.Destroy();
  _impl_.description_.Destroy();
  _impl_.gos_reg_code_.Destroy();
  _impl_.cfi_.Destroy();
  _impl_.code_nsd_.Destroy();
  _impl_.status_.Destroy();
  _impl_.br_code_.Destroy();
  _impl_.br_code_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.brand_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (has_ext()) {
    clear_ext();
  }
}

void AssetFull::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetFull::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  switch (ext_case()) {
    case kCurrency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ext_.currency_;
      }
      break;
    }
    case kSecurity: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ext_.security_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}


void AssetFull::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.required_tests_.Clear();
  _impl_.instruments_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.name_brief_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.gos_reg_code_.ClearToEmpty();
  _impl_.cfi_.ClearToEmpty();
  _impl_.code_nsd_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.br_code_.ClearToEmpty();
  _impl_.br_code_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brand_ != nullptr) {
    delete _impl_.brand_;
  }
  _impl_.brand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.type_ = 0;
  clear_ext();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetFull::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tinkoff::public_::invest::api::contract::v1::AssetType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.name"));
        } else
          goto handle_unusual;
        continue;
      // string name_brief = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name_brief();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief"));
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_tests = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_tests();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetCurrency currency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetSecurity security = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gos_reg_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_gos_reg_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code"));
        } else
          goto handle_unusual;
        continue;
      // string cfi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_cfi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.cfi"));
        } else
          goto handle_unusual;
        continue;
      // string code_nsd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_code_nsd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd"));
        } else
          goto handle_unusual;
        continue;
      // string status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.status"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_brand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string br_code = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_br_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.br_code"));
        } else
          goto handle_unusual;
        continue;
      // string br_code_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_br_code_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetFull::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_brief().data(), static_cast<int>(this->_internal_name_brief().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_brief(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp deleted_at = 6;
  if (this->_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // repeated string required_tests = 7;
  for (int i = 0, n = this->_internal_required_tests_size(); i < n; i++) {
    const auto& s = this->_internal_required_tests(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests");
    target = stream->WriteString(7, s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetCurrency currency = 8;
  if (_internal_has_currency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::currency(this),
        _Internal::currency(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetSecurity security = 9;
  if (_internal_has_security()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::security(this),
        _Internal::security(this).GetCachedSize(), target, stream);
  }

  // string gos_reg_code = 10;
  if (!this->_internal_gos_reg_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gos_reg_code().data(), static_cast<int>(this->_internal_gos_reg_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gos_reg_code(), target);
  }

  // string cfi = 11;
  if (!this->_internal_cfi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cfi().data(), static_cast<int>(this->_internal_cfi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.cfi");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_cfi(), target);
  }

  // string code_nsd = 12;
  if (!this->_internal_code_nsd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code_nsd().data(), static_cast<int>(this->_internal_code_nsd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_code_nsd(), target);
  }

  // string status = 13;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.status");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_status(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
  if (this->_internal_has_brand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::brand(this),
        _Internal::brand(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 15;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // string br_code = 16;
  if (!this->_internal_br_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_br_code().data(), static_cast<int>(this->_internal_br_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.br_code");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_br_code(), target);
  }

  // string br_code_name = 17;
  if (!this->_internal_br_code_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_br_code_name().data(), static_cast<int>(this->_internal_br_code_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_br_code_name(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetFull)
  return target;
}

size_t AssetFull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_tests = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.required_tests_.size());
  for (int i = 0, n = _impl_.required_tests_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.required_tests_.Get(i));
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
  total_size += 2UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_brief());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string gos_reg_code = 10;
  if (!this->_internal_gos_reg_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gos_reg_code());
  }

  // string cfi = 11;
  if (!this->_internal_cfi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cfi());
  }

  // string code_nsd = 12;
  if (!this->_internal_code_nsd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code_nsd());
  }

  // string status = 13;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string br_code = 16;
  if (!this->_internal_br_code().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_br_code());
  }

  // string br_code_name = 17;
  if (!this->_internal_br_code_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_br_code_name());
  }

  // .google.protobuf.Timestamp deleted_at = 6;
  if (this->_internal_has_deleted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deleted_at_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
  if (this->_internal_has_brand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brand_);
  }

  // .google.protobuf.Timestamp updated_at = 15;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (ext_case()) {
    // .tinkoff.public_.invest.api.contract.v1.AssetCurrency currency = 8;
    case kCurrency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ext_.currency_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetSecurity security = 9;
    case kSecurity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ext_.security_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetFull::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetFull::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetFull::GetClassData() const { return &_class_data_; }


void AssetFull::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetFull*>(&to_msg);
  auto& from = static_cast<const AssetFull&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.required_tests_.MergeFrom(from._impl_.required_tests_);
  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_name_brief().empty()) {
    _this->_internal_set_name_brief(from._internal_name_brief());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_gos_reg_code().empty()) {
    _this->_internal_set_gos_reg_code(from._internal_gos_reg_code());
  }
  if (!from._internal_cfi().empty()) {
    _this->_internal_set_cfi(from._internal_cfi());
  }
  if (!from._internal_code_nsd().empty()) {
    _this->_internal_set_code_nsd(from._internal_code_nsd());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_br_code().empty()) {
    _this->_internal_set_br_code(from._internal_br_code());
  }
  if (!from._internal_br_code_name().empty()) {
    _this->_internal_set_br_code_name(from._internal_br_code_name());
  }
  if (from._internal_has_deleted_at()) {
    _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_deleted_at());
  }
  if (from._internal_has_brand()) {
    _this->_internal_mutable_brand()->::tinkoff::public_::invest::api::contract::v1::Brand::MergeFrom(
        from._internal_brand());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.ext_case()) {
    case kCurrency: {
      _this->_internal_mutable_currency()->::tinkoff::public_::invest::api::contract::v1::AssetCurrency::MergeFrom(
          from._internal_currency());
      break;
    }
    case kSecurity: {
      _this->_internal_mutable_security()->::tinkoff::public_::invest::api::contract::v1::AssetSecurity::MergeFrom(
          from._internal_security());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetFull::CopyFrom(const AssetFull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetFull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetFull::IsInitialized() const {
  return true;
}

void AssetFull::InternalSwap(AssetFull* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.required_tests_.InternalSwap(&other->_impl_.required_tests_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_brief_, lhs_arena,
      &other->_impl_.name_brief_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gos_reg_code_, lhs_arena,
      &other->_impl_.gos_reg_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cfi_, lhs_arena,
      &other->_impl_.cfi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_nsd_, lhs_arena,
      &other->_impl_.code_nsd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.br_code_, lhs_arena,
      &other->_impl_.br_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.br_code_name_, lhs_arena,
      &other->_impl_.br_code_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.type_)
      + sizeof(AssetFull::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.deleted_at_)>(
          reinterpret_cast<char*>(&_impl_.deleted_at_),
          reinterpret_cast<char*>(&other->_impl_.deleted_at_));
  swap(_impl_.ext_, other->_impl_.ext_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetFull::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[45]);
}

// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Asset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Asset)
}

inline void Asset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Asset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
}

void Asset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Asset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Asset.uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tinkoff::public_::invest::api::contract::v1::AssetType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Asset.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Asset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Asset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Asset.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Asset.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Asset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }


void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Asset*>(&to_msg);
  auto& from = static_cast<const Asset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Asset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[46]);
}

// ===================================================================

class AssetCurrency::_Internal {
 public:
};

AssetCurrency::AssetCurrency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
}
AssetCurrency::AssetCurrency(const AssetCurrency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetCurrency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_currency_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.base_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_currency().empty()) {
    _this->_impl_.base_currency_.Set(from._internal_base_currency(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
}

inline void AssetCurrency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_currency_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.base_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetCurrency::~AssetCurrency() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetCurrency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.base_currency_.Destroy();
}

void AssetCurrency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetCurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_currency_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetCurrency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string base_currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_base_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetCurrency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string base_currency = 1;
  if (!this->_internal_base_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_currency().data(), static_cast<int>(this->_internal_base_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  return target;
}

size_t AssetCurrency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_currency = 1;
  if (!this->_internal_base_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_currency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetCurrency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetCurrency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetCurrency::GetClassData() const { return &_class_data_; }


void AssetCurrency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetCurrency*>(&to_msg);
  auto& from = static_cast<const AssetCurrency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_base_currency().empty()) {
    _this->_internal_set_base_currency(from._internal_base_currency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetCurrency::CopyFrom(const AssetCurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetCurrency::IsInitialized() const {
  return true;
}

void AssetCurrency::InternalSwap(AssetCurrency* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base_currency_, lhs_arena,
      &other->_impl_.base_currency_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetCurrency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[47]);
}

// ===================================================================

class AssetSecurity::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::AssetShare& share(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetBond& bond(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& sp(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& etf(const AssetSecurity* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& clearing_certificate(const AssetSecurity* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::AssetShare&
AssetSecurity::_Internal::share(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.share_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetBond&
AssetSecurity::_Internal::bond(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.bond_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct&
AssetSecurity::_Internal::sp(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.sp_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetEtf&
AssetSecurity::_Internal::etf(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.etf_;
}
const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate&
AssetSecurity::_Internal::clearing_certificate(const AssetSecurity* msg) {
  return *msg->_impl_.ext_.clearing_certificate_;
}
void AssetSecurity::set_allocated_share(::tinkoff::public_::invest::api::contract::v1::AssetShare* share) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (share) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(share);
    if (message_arena != submessage_arena) {
      share = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share, submessage_arena);
    }
    set_has_share();
    _impl_.ext_.share_ = share;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.share)
}
void AssetSecurity::set_allocated_bond(::tinkoff::public_::invest::api::contract::v1::AssetBond* bond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (bond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bond);
    if (message_arena != submessage_arena) {
      bond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bond, submessage_arena);
    }
    set_has_bond();
    _impl_.ext_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.bond)
}
void AssetSecurity::set_allocated_sp(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* sp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (sp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sp);
    if (message_arena != submessage_arena) {
      sp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sp, submessage_arena);
    }
    set_has_sp();
    _impl_.ext_.sp_ = sp;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.sp)
}
void AssetSecurity::set_allocated_etf(::tinkoff::public_::invest::api::contract::v1::AssetEtf* etf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (etf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(etf);
    if (message_arena != submessage_arena) {
      etf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, etf, submessage_arena);
    }
    set_has_etf();
    _impl_.ext_.etf_ = etf;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.etf)
}
void AssetSecurity::set_allocated_clearing_certificate(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* clearing_certificate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (clearing_certificate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clearing_certificate);
    if (message_arena != submessage_arena) {
      clearing_certificate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearing_certificate, submessage_arena);
    }
    set_has_clearing_certificate();
    _impl_.ext_.clearing_certificate_ = clearing_certificate;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.clearing_certificate)
}
AssetSecurity::AssetSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
}
AssetSecurity::AssetSecurity(const AssetSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetSecurity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isin_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.instrument_kind_){}
    , decltype(_impl_.ext_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  clear_has_ext();
  switch (from.ext_case()) {
    case kShare: {
      _this->_internal_mutable_share()->::tinkoff::public_::invest::api::contract::v1::AssetShare::MergeFrom(
          from._internal_share());
      break;
    }
    case kBond: {
      _this->_internal_mutable_bond()->::tinkoff::public_::invest::api::contract::v1::AssetBond::MergeFrom(
          from._internal_bond());
      break;
    }
    case kSp: {
      _this->_internal_mutable_sp()->::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct::MergeFrom(
          from._internal_sp());
      break;
    }
    case kEtf: {
      _this->_internal_mutable_etf()->::tinkoff::public_::invest::api::contract::v1::AssetEtf::MergeFrom(
          from._internal_etf());
      break;
    }
    case kClearingCertificate: {
      _this->_internal_mutable_clearing_certificate()->::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate::MergeFrom(
          from._internal_clearing_certificate());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
}

inline void AssetSecurity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isin_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.instrument_kind_){0}
    , decltype(_impl_.ext_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_ext();
}

AssetSecurity::~AssetSecurity() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetSecurity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.isin_.Destroy();
  _impl_.type_.Destroy();
  if (has_ext()) {
    clear_ext();
  }
}

void AssetSecurity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetSecurity::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  switch (ext_case()) {
    case kShare: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ext_.share_;
      }
      break;
    }
    case kBond: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ext_.bond_;
      }
      break;
    }
    case kSp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ext_.sp_;
      }
      break;
    }
    case kEtf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ext_.etf_;
      }
      break;
    }
    case kClearingCertificate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ext_.clearing_certificate_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}


void AssetSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isin_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.instrument_kind_ = 0;
  clear_ext();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetSecurity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string isin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetSecurity.type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetShare share = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_share(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetBond bond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct sp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetEtf etf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_etf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearing_certificate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetSecurity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_isin(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetSecurity.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetShare share = 3;
  if (_internal_has_share()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::share(this),
        _Internal::share(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetBond bond = 4;
  if (_internal_has_bond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bond(this),
        _Internal::bond(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct sp = 5;
  if (_internal_has_sp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::sp(this),
        _Internal::sp(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetEtf etf = 6;
  if (_internal_has_etf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::etf(this),
        _Internal::etf(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
  if (_internal_has_clearing_certificate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::clearing_certificate(this),
        _Internal::clearing_certificate(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_instrument_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  return target;
}

size_t AssetSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  switch (ext_case()) {
    // .tinkoff.public_.invest.api.contract.v1.AssetShare share = 3;
    case kShare: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ext_.share_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetBond bond = 4;
    case kBond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ext_.bond_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct sp = 5;
    case kSp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ext_.sp_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetEtf etf = 6;
    case kEtf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ext_.etf_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
    case kClearingCertificate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ext_.clearing_certificate_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetSecurity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetSecurity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetSecurity::GetClassData() const { return &_class_data_; }


void AssetSecurity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetSecurity*>(&to_msg);
  auto& from = static_cast<const AssetSecurity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  switch (from.ext_case()) {
    case kShare: {
      _this->_internal_mutable_share()->::tinkoff::public_::invest::api::contract::v1::AssetShare::MergeFrom(
          from._internal_share());
      break;
    }
    case kBond: {
      _this->_internal_mutable_bond()->::tinkoff::public_::invest::api::contract::v1::AssetBond::MergeFrom(
          from._internal_bond());
      break;
    }
    case kSp: {
      _this->_internal_mutable_sp()->::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct::MergeFrom(
          from._internal_sp());
      break;
    }
    case kEtf: {
      _this->_internal_mutable_etf()->::tinkoff::public_::invest::api::contract::v1::AssetEtf::MergeFrom(
          from._internal_etf());
      break;
    }
    case kClearingCertificate: {
      _this->_internal_mutable_clearing_certificate()->::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate::MergeFrom(
          from._internal_clearing_certificate());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetSecurity::CopyFrom(const AssetSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetSecurity::IsInitialized() const {
  return true;
}

void AssetSecurity::InternalSwap(AssetSecurity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.instrument_kind_, other->_impl_.instrument_kind_);
  swap(_impl_.ext_, other->_impl_.ext_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetSecurity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[48]);
}

// ===================================================================

class AssetShare::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size(const AssetShare* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetShare* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_rate(const AssetShare* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ipo_date(const AssetShare* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& registry_date(const AssetShare* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& placement_date(const AssetShare* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan(const AssetShare* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& total_float(const AssetShare* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetShare::_Internal::issue_size(const AssetShare* msg) {
  return *msg->_impl_.issue_size_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetShare::_Internal::nominal(const AssetShare* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetShare::_Internal::dividend_rate(const AssetShare* msg) {
  return *msg->_impl_.dividend_rate_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetShare::_Internal::ipo_date(const AssetShare* msg) {
  return *msg->_impl_.ipo_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetShare::_Internal::registry_date(const AssetShare* msg) {
  return *msg->_impl_.registry_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetShare::_Internal::placement_date(const AssetShare* msg) {
  return *msg->_impl_.placement_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetShare::_Internal::issue_size_plan(const AssetShare* msg) {
  return *msg->_impl_.issue_size_plan_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetShare::_Internal::total_float(const AssetShare* msg) {
  return *msg->_impl_.total_float_;
}
void AssetShare::clear_issue_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_ != nullptr) {
    delete _impl_.issue_size_;
  }
  _impl_.issue_size_ = nullptr;
}
void AssetShare::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
void AssetShare::clear_dividend_rate() {
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_rate_ != nullptr) {
    delete _impl_.dividend_rate_;
  }
  _impl_.dividend_rate_ = nullptr;
}
void AssetShare::clear_ipo_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.ipo_date_ != nullptr) {
    delete _impl_.ipo_date_;
  }
  _impl_.ipo_date_ = nullptr;
}
void AssetShare::clear_registry_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.registry_date_ != nullptr) {
    delete _impl_.registry_date_;
  }
  _impl_.registry_date_ = nullptr;
}
void AssetShare::clear_placement_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
}
void AssetShare::clear_issue_size_plan() {
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_plan_ != nullptr) {
    delete _impl_.issue_size_plan_;
  }
  _impl_.issue_size_plan_ = nullptr;
}
void AssetShare::clear_total_float() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_float_ != nullptr) {
    delete _impl_.total_float_;
  }
  _impl_.total_float_ = nullptr;
}
AssetShare::AssetShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetShare)
}
AssetShare::AssetShare(const AssetShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetShare* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.primary_index_){}
    , decltype(_impl_.preferred_share_type_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.repres_isin_){}
    , decltype(_impl_.issue_size_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.dividend_rate_){nullptr}
    , decltype(_impl_.ipo_date_){nullptr}
    , decltype(_impl_.registry_date_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.issue_size_plan_){nullptr}
    , decltype(_impl_.total_float_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.div_yield_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nominal_currency().empty()) {
    _this->_impl_.nominal_currency_.Set(from._internal_nominal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.primary_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_index().empty()) {
    _this->_impl_.primary_index_.Set(from._internal_primary_index(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preferred_share_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_share_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preferred_share_type().empty()) {
    _this->_impl_.preferred_share_type_.Set(from._internal_preferred_share_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issue_kind().empty()) {
    _this->_impl_.issue_kind_.Set(from._internal_issue_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.repres_isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.repres_isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_repres_isin().empty()) {
    _this->_impl_.repres_isin_.Set(from._internal_repres_isin(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_issue_size()) {
    _this->_impl_.issue_size_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.issue_size_);
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.nominal_);
  }
  if (from._internal_has_dividend_rate()) {
    _this->_impl_.dividend_rate_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.dividend_rate_);
  }
  if (from._internal_has_ipo_date()) {
    _this->_impl_.ipo_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ipo_date_);
  }
  if (from._internal_has_registry_date()) {
    _this->_impl_.registry_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.registry_date_);
  }
  if (from._internal_has_placement_date()) {
    _this->_impl_.placement_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.placement_date_);
  }
  if (from._internal_has_issue_size_plan()) {
    _this->_impl_.issue_size_plan_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.issue_size_plan_);
  }
  if (from._internal_has_total_float()) {
    _this->_impl_.total_float_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.total_float_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.div_yield_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetShare)
}

inline void AssetShare::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.primary_index_){}
    , decltype(_impl_.preferred_share_type_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.repres_isin_){}
    , decltype(_impl_.issue_size_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.dividend_rate_){nullptr}
    , decltype(_impl_.ipo_date_){nullptr}
    , decltype(_impl_.registry_date_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.issue_size_plan_){nullptr}
    , decltype(_impl_.total_float_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.div_yield_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.primary_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_share_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_share_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.repres_isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.repres_isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetShare::~AssetShare() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetShare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetShare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nominal_currency_.Destroy();
  _impl_.primary_index_.Destroy();
  _impl_.preferred_share_type_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.repres_isin_.Destroy();
  if (this != internal_default_instance()) delete _impl_.issue_size_;
  if (this != internal_default_instance()) delete _impl_.nominal_;
  if (this != internal_default_instance()) delete _impl_.dividend_rate_;
  if (this != internal_default_instance()) delete _impl_.ipo_date_;
  if (this != internal_default_instance()) delete _impl_.registry_date_;
  if (this != internal_default_instance()) delete _impl_.placement_date_;
  if (this != internal_default_instance()) delete _impl_.issue_size_plan_;
  if (this != internal_default_instance()) delete _impl_.total_float_;
}

void AssetShare::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetShare::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.primary_index_.ClearToEmpty();
  _impl_.preferred_share_type_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.repres_isin_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_ != nullptr) {
    delete _impl_.issue_size_;
  }
  _impl_.issue_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dividend_rate_ != nullptr) {
    delete _impl_.dividend_rate_;
  }
  _impl_.dividend_rate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ipo_date_ != nullptr) {
    delete _impl_.ipo_date_;
  }
  _impl_.ipo_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.registry_date_ != nullptr) {
    delete _impl_.registry_date_;
  }
  _impl_.registry_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_plan_ != nullptr) {
    delete _impl_.issue_size_plan_;
  }
  _impl_.issue_size_plan_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_float_ != nullptr) {
    delete _impl_.total_float_;
  }
  _impl_.total_float_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.div_yield_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetShare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tinkoff::public_::invest::api::contract::v1::ShareType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nominal_currency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nominal_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency"));
        } else
          goto handle_unusual;
        continue;
      // string primary_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_primary_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dividend_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string preferred_share_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_preferred_share_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ipo_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipo_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp registry_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_registry_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool div_yield_flag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.div_yield_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string issue_kind = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_issue_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp placement_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string repres_isin = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_repres_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue_size_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_float(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetShare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
  if (this->_internal_has_issue_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::issue_size(this),
        _Internal::issue_size(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 4;
  if (!this->_internal_nominal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nominal_currency().data(), static_cast<int>(this->_internal_nominal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nominal_currency(), target);
  }

  // string primary_index = 5;
  if (!this->_internal_primary_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_index().data(), static_cast<int>(this->_internal_primary_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_primary_index(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
  if (this->_internal_has_dividend_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::dividend_rate(this),
        _Internal::dividend_rate(this).GetCachedSize(), target, stream);
  }

  // string preferred_share_type = 7;
  if (!this->_internal_preferred_share_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preferred_share_type().data(), static_cast<int>(this->_internal_preferred_share_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_preferred_share_type(), target);
  }

  // .google.protobuf.Timestamp ipo_date = 8;
  if (this->_internal_has_ipo_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ipo_date(this),
        _Internal::ipo_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp registry_date = 9;
  if (this->_internal_has_registry_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::registry_date(this),
        _Internal::registry_date(this).GetCachedSize(), target, stream);
  }

  // bool div_yield_flag = 10;
  if (this->_internal_div_yield_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_div_yield_flag(), target);
  }

  // string issue_kind = 11;
  if (!this->_internal_issue_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issue_kind().data(), static_cast<int>(this->_internal_issue_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_issue_kind(), target);
  }

  // .google.protobuf.Timestamp placement_date = 12;
  if (this->_internal_has_placement_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // string repres_isin = 13;
  if (!this->_internal_repres_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repres_isin().data(), static_cast<int>(this->_internal_repres_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_repres_isin(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
  if (this->_internal_has_issue_size_plan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::issue_size_plan(this),
        _Internal::issue_size_plan(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
  if (this->_internal_has_total_float()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::total_float(this),
        _Internal::total_float(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetShare)
  return target;
}

size_t AssetShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nominal_currency = 4;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nominal_currency());
  }

  // string primary_index = 5;
  if (!this->_internal_primary_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_index());
  }

  // string preferred_share_type = 7;
  if (!this->_internal_preferred_share_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_share_type());
  }

  // string issue_kind = 11;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issue_kind());
  }

  // string repres_isin = 13;
  if (!this->_internal_repres_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repres_isin());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
  if (this->_internal_has_issue_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.issue_size_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
  if (this->_internal_has_nominal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
  if (this->_internal_has_dividend_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dividend_rate_);
  }

  // .google.protobuf.Timestamp ipo_date = 8;
  if (this->_internal_has_ipo_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ipo_date_);
  }

  // .google.protobuf.Timestamp registry_date = 9;
  if (this->_internal_has_registry_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registry_date_);
  }

  // .google.protobuf.Timestamp placement_date = 12;
  if (this->_internal_has_placement_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
  if (this->_internal_has_issue_size_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.issue_size_plan_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
  if (this->_internal_has_total_float()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_float_);
  }

  // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool div_yield_flag = 10;
  if (this->_internal_div_yield_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetShare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetShare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetShare::GetClassData() const { return &_class_data_; }


void AssetShare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetShare*>(&to_msg);
  auto& from = static_cast<const AssetShare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_primary_index().empty()) {
    _this->_internal_set_primary_index(from._internal_primary_index());
  }
  if (!from._internal_preferred_share_type().empty()) {
    _this->_internal_set_preferred_share_type(from._internal_preferred_share_type());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_repres_isin().empty()) {
    _this->_internal_set_repres_isin(from._internal_repres_isin());
  }
  if (from._internal_has_issue_size()) {
    _this->_internal_mutable_issue_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_issue_size());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal());
  }
  if (from._internal_has_dividend_rate()) {
    _this->_internal_mutable_dividend_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_dividend_rate());
  }
  if (from._internal_has_ipo_date()) {
    _this->_internal_mutable_ipo_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ipo_date());
  }
  if (from._internal_has_registry_date()) {
    _this->_internal_mutable_registry_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_registry_date());
  }
  if (from._internal_has_placement_date()) {
    _this->_internal_mutable_placement_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_placement_date());
  }
  if (from._internal_has_issue_size_plan()) {
    _this->_internal_mutable_issue_size_plan()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_issue_size_plan());
  }
  if (from._internal_has_total_float()) {
    _this->_internal_mutable_total_float()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_total_float());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_internal_set_div_yield_flag(from._internal_div_yield_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetShare::CopyFrom(const AssetShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetShare::IsInitialized() const {
  return true;
}

void AssetShare::InternalSwap(AssetShare* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nominal_currency_, lhs_arena,
      &other->_impl_.nominal_currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.primary_index_, lhs_arena,
      &other->_impl_.primary_index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_share_type_, lhs_arena,
      &other->_impl_.preferred_share_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issue_kind_, lhs_arena,
      &other->_impl_.issue_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.repres_isin_, lhs_arena,
      &other->_impl_.repres_isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.div_yield_flag_)
      + sizeof(AssetShare::_impl_.div_yield_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_)>(
          reinterpret_cast<char*>(&_impl_.issue_size_),
          reinterpret_cast<char*>(&other->_impl_.issue_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetShare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[49]);
}

// ===================================================================

class AssetBond::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_nominal(const AssetBond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size(const AssetBond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetBond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& maturity_date(const AssetBond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& state_reg_date(const AssetBond* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& placement_date(const AssetBond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& placement_price(const AssetBond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan(const AssetBond* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetBond::_Internal::current_nominal(const AssetBond* msg) {
  return *msg->_impl_.current_nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetBond::_Internal::issue_size(const AssetBond* msg) {
  return *msg->_impl_.issue_size_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetBond::_Internal::nominal(const AssetBond* msg) {
  return *msg->_impl_.nominal_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetBond::_Internal::maturity_date(const AssetBond* msg) {
  return *msg->_impl_.maturity_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetBond::_Internal::state_reg_date(const AssetBond* msg) {
  return *msg->_impl_.state_reg_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetBond::_Internal::placement_date(const AssetBond* msg) {
  return *msg->_impl_.placement_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetBond::_Internal::placement_price(const AssetBond* msg) {
  return *msg->_impl_.placement_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetBond::_Internal::issue_size_plan(const AssetBond* msg) {
  return *msg->_impl_.issue_size_plan_;
}
void AssetBond::clear_current_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_nominal_ != nullptr) {
    delete _impl_.current_nominal_;
  }
  _impl_.current_nominal_ = nullptr;
}
void AssetBond::clear_issue_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_ != nullptr) {
    delete _impl_.issue_size_;
  }
  _impl_.issue_size_ = nullptr;
}
void AssetBond::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
void AssetBond::clear_maturity_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.maturity_date_ != nullptr) {
    delete _impl_.maturity_date_;
  }
  _impl_.maturity_date_ = nullptr;
}
void AssetBond::clear_state_reg_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_reg_date_ != nullptr) {
    delete _impl_.state_reg_date_;
  }
  _impl_.state_reg_date_ = nullptr;
}
void AssetBond::clear_placement_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
}
void AssetBond::clear_placement_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_price_ != nullptr) {
    delete _impl_.placement_price_;
  }
  _impl_.placement_price_ = nullptr;
}
void AssetBond::clear_issue_size_plan() {
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_plan_ != nullptr) {
    delete _impl_.issue_size_plan_;
  }
  _impl_.issue_size_plan_ = nullptr;
}
AssetBond::AssetBond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetBond)
}
AssetBond::AssetBond(const AssetBond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetBond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.borrow_name_){}
    , decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.interest_kind_){}
    , decltype(_impl_.return_condition_){}
    , decltype(_impl_.current_nominal_){nullptr}
    , decltype(_impl_.issue_size_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.maturity_date_){nullptr}
    , decltype(_impl_.state_reg_date_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.placement_price_){nullptr}
    , decltype(_impl_.issue_size_plan_){nullptr}
    , decltype(_impl_.coupon_quantity_per_year_){}
    , decltype(_impl_.indexed_nominal_flag_){}
    , decltype(_impl_.subordinated_flag_){}
    , decltype(_impl_.collateral_flag_){}
    , decltype(_impl_.tax_free_flag_){}
    , decltype(_impl_.amortization_flag_){}
    , decltype(_impl_.floating_coupon_flag_){}
    , decltype(_impl_.perpetual_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.borrow_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.borrow_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_borrow_name().empty()) {
    _this->_impl_.borrow_name_.Set(from._internal_borrow_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nominal_currency().empty()) {
    _this->_impl_.nominal_currency_.Set(from._internal_nominal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issue_kind().empty()) {
    _this->_impl_.issue_kind_.Set(from._internal_issue_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.interest_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interest_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interest_kind().empty()) {
    _this->_impl_.interest_kind_.Set(from._internal_interest_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.return_condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_return_condition().empty()) {
    _this->_impl_.return_condition_.Set(from._internal_return_condition(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_current_nominal()) {
    _this->_impl_.current_nominal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.current_nominal_);
  }
  if (from._internal_has_issue_size()) {
    _this->_impl_.issue_size_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.issue_size_);
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.nominal_);
  }
  if (from._internal_has_maturity_date()) {
    _this->_impl_.maturity_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.maturity_date_);
  }
  if (from._internal_has_state_reg_date()) {
    _this->_impl_.state_reg_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.state_reg_date_);
  }
  if (from._internal_has_placement_date()) {
    _this->_impl_.placement_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.placement_date_);
  }
  if (from._internal_has_placement_price()) {
    _this->_impl_.placement_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.placement_price_);
  }
  if (from._internal_has_issue_size_plan()) {
    _this->_impl_.issue_size_plan_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.issue_size_plan_);
  }
  ::memcpy(&_impl_.coupon_quantity_per_year_, &from._impl_.coupon_quantity_per_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.perpetual_flag_) -
    reinterpret_cast<char*>(&_impl_.coupon_quantity_per_year_)) + sizeof(_impl_.perpetual_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetBond)
}

inline void AssetBond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.borrow_name_){}
    , decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.interest_kind_){}
    , decltype(_impl_.return_condition_){}
    , decltype(_impl_.current_nominal_){nullptr}
    , decltype(_impl_.issue_size_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.maturity_date_){nullptr}
    , decltype(_impl_.state_reg_date_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.placement_price_){nullptr}
    , decltype(_impl_.issue_size_plan_){nullptr}
    , decltype(_impl_.coupon_quantity_per_year_){0}
    , decltype(_impl_.indexed_nominal_flag_){false}
    , decltype(_impl_.subordinated_flag_){false}
    , decltype(_impl_.collateral_flag_){false}
    , decltype(_impl_.tax_free_flag_){false}
    , decltype(_impl_.amortization_flag_){false}
    , decltype(_impl_.floating_coupon_flag_){false}
    , decltype(_impl_.perpetual_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.borrow_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.borrow_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interest_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interest_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.return_condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetBond::~AssetBond() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetBond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetBond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.borrow_name_.Destroy();
  _impl_.nominal_currency_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.interest_kind_.Destroy();
  _impl_.return_condition_.Destroy();
  if (this != internal_default_instance()) delete _impl_.current_nominal_;
  if (this != internal_default_instance()) delete _impl_.issue_size_;
  if (this != internal_default_instance()) delete _impl_.nominal_;
  if (this != internal_default_instance()) delete _impl_.maturity_date_;
  if (this != internal_default_instance()) delete _impl_.state_reg_date_;
  if (this != internal_default_instance()) delete _impl_.placement_date_;
  if (this != internal_default_instance()) delete _impl_.placement_price_;
  if (this != internal_default_instance()) delete _impl_.issue_size_plan_;
}

void AssetBond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetBond::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrow_name_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.interest_kind_.ClearToEmpty();
  _impl_.return_condition_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.current_nominal_ != nullptr) {
    delete _impl_.current_nominal_;
  }
  _impl_.current_nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_ != nullptr) {
    delete _impl_.issue_size_;
  }
  _impl_.issue_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maturity_date_ != nullptr) {
    delete _impl_.maturity_date_;
  }
  _impl_.maturity_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_reg_date_ != nullptr) {
    delete _impl_.state_reg_date_;
  }
  _impl_.state_reg_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_price_ != nullptr) {
    delete _impl_.placement_price_;
  }
  _impl_.placement_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_plan_ != nullptr) {
    delete _impl_.issue_size_plan_;
  }
  _impl_.issue_size_plan_ = nullptr;
  ::memset(&_impl_.coupon_quantity_per_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.perpetual_flag_) -
      reinterpret_cast<char*>(&_impl_.coupon_quantity_per_year_)) + sizeof(_impl_.perpetual_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetBond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string borrow_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_borrow_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nominal_currency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_nominal_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency"));
        } else
          goto handle_unusual;
        continue;
      // string issue_kind = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_issue_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind"));
        } else
          goto handle_unusual;
        continue;
      // string interest_kind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_interest_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind"));
        } else
          goto handle_unusual;
        continue;
      // int32 coupon_quantity_per_year = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.coupon_quantity_per_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool indexed_nominal_flag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.indexed_nominal_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool subordinated_flag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.subordinated_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool collateral_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.collateral_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tax_free_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.tax_free_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool amortization_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.amortization_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool floating_coupon_flag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.floating_coupon_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool perpetual_flag = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.perpetual_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp maturity_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_maturity_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string return_condition = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_return_condition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp state_reg_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_reg_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp placement_date = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue_size_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetBond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
  if (this->_internal_has_current_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::current_nominal(this),
        _Internal::current_nominal(this).GetCachedSize(), target, stream);
  }

  // string borrow_name = 2;
  if (!this->_internal_borrow_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_borrow_name().data(), static_cast<int>(this->_internal_borrow_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_borrow_name(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
  if (this->_internal_has_issue_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::issue_size(this),
        _Internal::issue_size(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 5;
  if (!this->_internal_nominal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nominal_currency().data(), static_cast<int>(this->_internal_nominal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nominal_currency(), target);
  }

  // string issue_kind = 6;
  if (!this->_internal_issue_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issue_kind().data(), static_cast<int>(this->_internal_issue_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_issue_kind(), target);
  }

  // string interest_kind = 7;
  if (!this->_internal_interest_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interest_kind().data(), static_cast<int>(this->_internal_interest_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_interest_kind(), target);
  }

  // int32 coupon_quantity_per_year = 8;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_coupon_quantity_per_year(), target);
  }

  // bool indexed_nominal_flag = 9;
  if (this->_internal_indexed_nominal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_indexed_nominal_flag(), target);
  }

  // bool subordinated_flag = 10;
  if (this->_internal_subordinated_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_subordinated_flag(), target);
  }

  // bool collateral_flag = 11;
  if (this->_internal_collateral_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_collateral_flag(), target);
  }

  // bool tax_free_flag = 12;
  if (this->_internal_tax_free_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_tax_free_flag(), target);
  }

  // bool amortization_flag = 13;
  if (this->_internal_amortization_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_amortization_flag(), target);
  }

  // bool floating_coupon_flag = 14;
  if (this->_internal_floating_coupon_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_floating_coupon_flag(), target);
  }

  // bool perpetual_flag = 15;
  if (this->_internal_perpetual_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_perpetual_flag(), target);
  }

  // .google.protobuf.Timestamp maturity_date = 16;
  if (this->_internal_has_maturity_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::maturity_date(this),
        _Internal::maturity_date(this).GetCachedSize(), target, stream);
  }

  // string return_condition = 17;
  if (!this->_internal_return_condition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_return_condition().data(), static_cast<int>(this->_internal_return_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_return_condition(), target);
  }

  // .google.protobuf.Timestamp state_reg_date = 18;
  if (this->_internal_has_state_reg_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::state_reg_date(this),
        _Internal::state_reg_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp placement_date = 19;
  if (this->_internal_has_placement_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
  if (this->_internal_has_placement_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::placement_price(this),
        _Internal::placement_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
  if (this->_internal_has_issue_size_plan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::issue_size_plan(this),
        _Internal::issue_size_plan(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetBond)
  return target;
}

size_t AssetBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string borrow_name = 2;
  if (!this->_internal_borrow_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_borrow_name());
  }

  // string nominal_currency = 5;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nominal_currency());
  }

  // string issue_kind = 6;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issue_kind());
  }

  // string interest_kind = 7;
  if (!this->_internal_interest_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interest_kind());
  }

  // string return_condition = 17;
  if (!this->_internal_return_condition().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_return_condition());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
  if (this->_internal_has_current_nominal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_nominal_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
  if (this->_internal_has_issue_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.issue_size_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  if (this->_internal_has_nominal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  // .google.protobuf.Timestamp maturity_date = 16;
  if (this->_internal_has_maturity_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maturity_date_);
  }

  // .google.protobuf.Timestamp state_reg_date = 18;
  if (this->_internal_has_state_reg_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_reg_date_);
  }

  // .google.protobuf.Timestamp placement_date = 19;
  if (this->_internal_has_placement_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
  if (this->_internal_has_placement_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
  if (this->_internal_has_issue_size_plan()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.issue_size_plan_);
  }

  // int32 coupon_quantity_per_year = 8;
  if (this->_internal_coupon_quantity_per_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coupon_quantity_per_year());
  }

  // bool indexed_nominal_flag = 9;
  if (this->_internal_indexed_nominal_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool subordinated_flag = 10;
  if (this->_internal_subordinated_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool collateral_flag = 11;
  if (this->_internal_collateral_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool tax_free_flag = 12;
  if (this->_internal_tax_free_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool amortization_flag = 13;
  if (this->_internal_amortization_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool floating_coupon_flag = 14;
  if (this->_internal_floating_coupon_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool perpetual_flag = 15;
  if (this->_internal_perpetual_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetBond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetBond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetBond::GetClassData() const { return &_class_data_; }


void AssetBond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetBond*>(&to_msg);
  auto& from = static_cast<const AssetBond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_borrow_name().empty()) {
    _this->_internal_set_borrow_name(from._internal_borrow_name());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_interest_kind().empty()) {
    _this->_internal_set_interest_kind(from._internal_interest_kind());
  }
  if (!from._internal_return_condition().empty()) {
    _this->_internal_set_return_condition(from._internal_return_condition());
  }
  if (from._internal_has_current_nominal()) {
    _this->_internal_mutable_current_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_current_nominal());
  }
  if (from._internal_has_issue_size()) {
    _this->_internal_mutable_issue_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_issue_size());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal());
  }
  if (from._internal_has_maturity_date()) {
    _this->_internal_mutable_maturity_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_maturity_date());
  }
  if (from._internal_has_state_reg_date()) {
    _this->_internal_mutable_state_reg_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_state_reg_date());
  }
  if (from._internal_has_placement_date()) {
    _this->_internal_mutable_placement_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_placement_date());
  }
  if (from._internal_has_placement_price()) {
    _this->_internal_mutable_placement_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_placement_price());
  }
  if (from._internal_has_issue_size_plan()) {
    _this->_internal_mutable_issue_size_plan()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_issue_size_plan());
  }
  if (from._internal_coupon_quantity_per_year() != 0) {
    _this->_internal_set_coupon_quantity_per_year(from._internal_coupon_quantity_per_year());
  }
  if (from._internal_indexed_nominal_flag() != 0) {
    _this->_internal_set_indexed_nominal_flag(from._internal_indexed_nominal_flag());
  }
  if (from._internal_subordinated_flag() != 0) {
    _this->_internal_set_subordinated_flag(from._internal_subordinated_flag());
  }
  if (from._internal_collateral_flag() != 0) {
    _this->_internal_set_collateral_flag(from._internal_collateral_flag());
  }
  if (from._internal_tax_free_flag() != 0) {
    _this->_internal_set_tax_free_flag(from._internal_tax_free_flag());
  }
  if (from._internal_amortization_flag() != 0) {
    _this->_internal_set_amortization_flag(from._internal_amortization_flag());
  }
  if (from._internal_floating_coupon_flag() != 0) {
    _this->_internal_set_floating_coupon_flag(from._internal_floating_coupon_flag());
  }
  if (from._internal_perpetual_flag() != 0) {
    _this->_internal_set_perpetual_flag(from._internal_perpetual_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetBond::CopyFrom(const AssetBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetBond::IsInitialized() const {
  return true;
}

void AssetBond::InternalSwap(AssetBond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.borrow_name_, lhs_arena,
      &other->_impl_.borrow_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nominal_currency_, lhs_arena,
      &other->_impl_.nominal_currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issue_kind_, lhs_arena,
      &other->_impl_.issue_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interest_kind_, lhs_arena,
      &other->_impl_.interest_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.return_condition_, lhs_arena,
      &other->_impl_.return_condition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.perpetual_flag_)
      + sizeof(AssetBond::_impl_.perpetual_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.current_nominal_)>(
          reinterpret_cast<char*>(&_impl_.current_nominal_),
          reinterpret_cast<char*>(&other->_impl_.current_nominal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetBond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[50]);
}

// ===================================================================

class AssetStructuredProduct::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetStructuredProduct* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& safety_barrier(const AssetStructuredProduct* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& maturity_date(const AssetStructuredProduct* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan(const AssetStructuredProduct* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size(const AssetStructuredProduct* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& placement_date(const AssetStructuredProduct* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetStructuredProduct::_Internal::nominal(const AssetStructuredProduct* msg) {
  return *msg->_impl_.nominal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetStructuredProduct::_Internal::safety_barrier(const AssetStructuredProduct* msg) {
  return *msg->_impl_.safety_barrier_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetStructuredProduct::_Internal::maturity_date(const AssetStructuredProduct* msg) {
  return *msg->_impl_.maturity_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetStructuredProduct::_Internal::issue_size_plan(const AssetStructuredProduct* msg) {
  return *msg->_impl_.issue_size_plan_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetStructuredProduct::_Internal::issue_size(const AssetStructuredProduct* msg) {
  return *msg->_impl_.issue_size_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetStructuredProduct::_Internal::placement_date(const AssetStructuredProduct* msg) {
  return *msg->_impl_.placement_date_;
}
void AssetStructuredProduct::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
void AssetStructuredProduct::clear_safety_barrier() {
  if (GetArenaForAllocation() == nullptr && _impl_.safety_barrier_ != nullptr) {
    delete _impl_.safety_barrier_;
  }
  _impl_.safety_barrier_ = nullptr;
}
void AssetStructuredProduct::clear_maturity_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.maturity_date_ != nullptr) {
    delete _impl_.maturity_date_;
  }
  _impl_.maturity_date_ = nullptr;
}
void AssetStructuredProduct::clear_issue_size_plan() {
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_plan_ != nullptr) {
    delete _impl_.issue_size_plan_;
  }
  _impl_.issue_size_plan_ = nullptr;
}
void AssetStructuredProduct::clear_issue_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_ != nullptr) {
    delete _impl_.issue_size_;
  }
  _impl_.issue_size_ = nullptr;
}
void AssetStructuredProduct::clear_placement_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
}
AssetStructuredProduct::AssetStructuredProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
}
AssetStructuredProduct::AssetStructuredProduct(const AssetStructuredProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetStructuredProduct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.borrow_name_){}
    , decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.logic_portfolio_){}
    , decltype(_impl_.basic_asset_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.safety_barrier_){nullptr}
    , decltype(_impl_.maturity_date_){nullptr}
    , decltype(_impl_.issue_size_plan_){nullptr}
    , decltype(_impl_.issue_size_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.asset_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.borrow_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.borrow_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_borrow_name().empty()) {
    _this->_impl_.borrow_name_.Set(from._internal_borrow_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nominal_currency().empty()) {
    _this->_impl_.nominal_currency_.Set(from._internal_nominal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logic_portfolio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logic_portfolio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logic_portfolio().empty()) {
    _this->_impl_.logic_portfolio_.Set(from._internal_logic_portfolio(), 
      _this->GetArenaForAllocation());
  }
  _impl_.basic_asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basic_asset().empty()) {
    _this->_impl_.basic_asset_.Set(from._internal_basic_asset(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issue_kind().empty()) {
    _this->_impl_.issue_kind_.Set(from._internal_issue_kind(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.nominal_);
  }
  if (from._internal_has_safety_barrier()) {
    _this->_impl_.safety_barrier_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.safety_barrier_);
  }
  if (from._internal_has_maturity_date()) {
    _this->_impl_.maturity_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.maturity_date_);
  }
  if (from._internal_has_issue_size_plan()) {
    _this->_impl_.issue_size_plan_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.issue_size_plan_);
  }
  if (from._internal_has_issue_size()) {
    _this->_impl_.issue_size_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.issue_size_);
  }
  if (from._internal_has_placement_date()) {
    _this->_impl_.placement_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.placement_date_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.asset_type_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.asset_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
}

inline void AssetStructuredProduct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.borrow_name_){}
    , decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.logic_portfolio_){}
    , decltype(_impl_.basic_asset_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.safety_barrier_){nullptr}
    , decltype(_impl_.maturity_date_){nullptr}
    , decltype(_impl_.issue_size_plan_){nullptr}
    , decltype(_impl_.issue_size_){nullptr}
    , decltype(_impl_.placement_date_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.asset_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.borrow_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.borrow_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logic_portfolio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logic_portfolio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basic_asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetStructuredProduct::~AssetStructuredProduct() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetStructuredProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.borrow_name_.Destroy();
  _impl_.nominal_currency_.Destroy();
  _impl_.logic_portfolio_.Destroy();
  _impl_.basic_asset_.Destroy();
  _impl_.issue_kind_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nominal_;
  if (this != internal_default_instance()) delete _impl_.safety_barrier_;
  if (this != internal_default_instance()) delete _impl_.maturity_date_;
  if (this != internal_default_instance()) delete _impl_.issue_size_plan_;
  if (this != internal_default_instance()) delete _impl_.issue_size_;
  if (this != internal_default_instance()) delete _impl_.placement_date_;
}

void AssetStructuredProduct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetStructuredProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrow_name_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.logic_portfolio_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.safety_barrier_ != nullptr) {
    delete _impl_.safety_barrier_;
  }
  _impl_.safety_barrier_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maturity_date_ != nullptr) {
    delete _impl_.maturity_date_;
  }
  _impl_.maturity_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_plan_ != nullptr) {
    delete _impl_.issue_size_plan_;
  }
  _impl_.issue_size_plan_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.issue_size_ != nullptr) {
    delete _impl_.issue_size_;
  }
  _impl_.issue_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_date_ != nullptr) {
    delete _impl_.placement_date_;
  }
  _impl_.placement_date_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.asset_type_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.asset_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetStructuredProduct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string borrow_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_borrow_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nominal_currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nominal_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tinkoff::public_::invest::api::contract::v1::StructuredProductType>(val));
        } else
          goto handle_unusual;
        continue;
      // string logic_portfolio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_logic_portfolio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_asset_type(static_cast<::tinkoff::public_::invest::api::contract::v1::AssetType>(val));
        } else
          goto handle_unusual;
        continue;
      // string basic_asset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_basic_asset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_safety_barrier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp maturity_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_maturity_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue_size_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp placement_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string issue_kind = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_issue_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetStructuredProduct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string borrow_name = 1;
  if (!this->_internal_borrow_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_borrow_name().data(), static_cast<int>(this->_internal_borrow_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_borrow_name(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 3;
  if (!this->_internal_nominal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nominal_currency().data(), static_cast<int>(this->_internal_nominal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nominal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string logic_portfolio = 5;
  if (!this->_internal_logic_portfolio().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logic_portfolio().data(), static_cast<int>(this->_internal_logic_portfolio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_logic_portfolio(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
  if (this->_internal_asset_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_asset_type(), target);
  }

  // string basic_asset = 7;
  if (!this->_internal_basic_asset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_asset().data(), static_cast<int>(this->_internal_basic_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_basic_asset(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
  if (this->_internal_has_safety_barrier()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::safety_barrier(this),
        _Internal::safety_barrier(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp maturity_date = 9;
  if (this->_internal_has_maturity_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::maturity_date(this),
        _Internal::maturity_date(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
  if (this->_internal_has_issue_size_plan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::issue_size_plan(this),
        _Internal::issue_size_plan(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
  if (this->_internal_has_issue_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::issue_size(this),
        _Internal::issue_size(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp placement_date = 12;
  if (this->_internal_has_placement_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::placement_date(this),
        _Internal::placement_date(this).GetCachedSize(), target, stream);
  }

  // string issue_kind = 13;
  if (!this->_internal_issue_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issue_kind().data(), static_cast<int>(this->_internal_issue_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_issue_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  return target;
}

size_t AssetStructuredProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string borrow_name = 1;
  if (!this->_internal_borrow_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_borrow_name());
  }

  // string nominal_currency = 3;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nominal_currency());
  }

  // string logic_portfolio = 5;
  if (!this->_internal_logic_portfolio().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logic_portfolio());
  }

  // string basic_asset = 7;
  if (!this->_internal_basic_asset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basic_asset());
  }

  // string issue_kind = 13;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issue_kind());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
  if (this->_internal_has_nominal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
  if (this->_internal_has_safety_barrier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.safety_barrier_);
  }

  // .google.protobuf.Timestamp maturity_date = 9;
  if (this->_internal_has_maturity_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maturity_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
  if (this->_internal_has_issue_size_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.issue_size_plan_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
  if (this->_internal_has_issue_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.issue_size_);
  }

  // .google.protobuf.Timestamp placement_date = 12;
  if (this->_internal_has_placement_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
  if (this->_internal_asset_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_asset_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetStructuredProduct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetStructuredProduct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetStructuredProduct::GetClassData() const { return &_class_data_; }


void AssetStructuredProduct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetStructuredProduct*>(&to_msg);
  auto& from = static_cast<const AssetStructuredProduct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_borrow_name().empty()) {
    _this->_internal_set_borrow_name(from._internal_borrow_name());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_logic_portfolio().empty()) {
    _this->_internal_set_logic_portfolio(from._internal_logic_portfolio());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal());
  }
  if (from._internal_has_safety_barrier()) {
    _this->_internal_mutable_safety_barrier()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_safety_barrier());
  }
  if (from._internal_has_maturity_date()) {
    _this->_internal_mutable_maturity_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_maturity_date());
  }
  if (from._internal_has_issue_size_plan()) {
    _this->_internal_mutable_issue_size_plan()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_issue_size_plan());
  }
  if (from._internal_has_issue_size()) {
    _this->_internal_mutable_issue_size()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_issue_size());
  }
  if (from._internal_has_placement_date()) {
    _this->_internal_mutable_placement_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_placement_date());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_asset_type() != 0) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetStructuredProduct::CopyFrom(const AssetStructuredProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetStructuredProduct::IsInitialized() const {
  return true;
}

void AssetStructuredProduct::InternalSwap(AssetStructuredProduct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.borrow_name_, lhs_arena,
      &other->_impl_.borrow_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nominal_currency_, lhs_arena,
      &other->_impl_.nominal_currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logic_portfolio_, lhs_arena,
      &other->_impl_.logic_portfolio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basic_asset_, lhs_arena,
      &other->_impl_.basic_asset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issue_kind_, lhs_arena,
      &other->_impl_.issue_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.asset_type_)
      + sizeof(AssetStructuredProduct::_impl_.asset_type_)
      - PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_)>(
          reinterpret_cast<char*>(&_impl_.nominal_),
          reinterpret_cast<char*>(&other->_impl_.nominal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetStructuredProduct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[51]);
}

// ===================================================================

class AssetEtf::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& total_expense(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& hurdle_rate(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& performance_fee(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& fixed_commission(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& buy_premium(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& sell_discount(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& num_share(const AssetEtf* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& released_date(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& index_recovery_period(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& expense_commission(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& primary_index_tracking_error(const AssetEtf* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetEtf* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::total_expense(const AssetEtf* msg) {
  return *msg->_impl_.total_expense_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::hurdle_rate(const AssetEtf* msg) {
  return *msg->_impl_.hurdle_rate_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::performance_fee(const AssetEtf* msg) {
  return *msg->_impl_.performance_fee_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::fixed_commission(const AssetEtf* msg) {
  return *msg->_impl_.fixed_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::buy_premium(const AssetEtf* msg) {
  return *msg->_impl_.buy_premium_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::sell_discount(const AssetEtf* msg) {
  return *msg->_impl_.sell_discount_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::num_share(const AssetEtf* msg) {
  return *msg->_impl_.num_share_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AssetEtf::_Internal::released_date(const AssetEtf* msg) {
  return *msg->_impl_.released_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::index_recovery_period(const AssetEtf* msg) {
  return *msg->_impl_.index_recovery_period_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::expense_commission(const AssetEtf* msg) {
  return *msg->_impl_.expense_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::primary_index_tracking_error(const AssetEtf* msg) {
  return *msg->_impl_.primary_index_tracking_error_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetEtf::_Internal::nominal(const AssetEtf* msg) {
  return *msg->_impl_.nominal_;
}
void AssetEtf::clear_total_expense() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_expense_ != nullptr) {
    delete _impl_.total_expense_;
  }
  _impl_.total_expense_ = nullptr;
}
void AssetEtf::clear_hurdle_rate() {
  if (GetArenaForAllocation() == nullptr && _impl_.hurdle_rate_ != nullptr) {
    delete _impl_.hurdle_rate_;
  }
  _impl_.hurdle_rate_ = nullptr;
}
void AssetEtf::clear_performance_fee() {
  if (GetArenaForAllocation() == nullptr && _impl_.performance_fee_ != nullptr) {
    delete _impl_.performance_fee_;
  }
  _impl_.performance_fee_ = nullptr;
}
void AssetEtf::clear_fixed_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.fixed_commission_ != nullptr) {
    delete _impl_.fixed_commission_;
  }
  _impl_.fixed_commission_ = nullptr;
}
void AssetEtf::clear_buy_premium() {
  if (GetArenaForAllocation() == nullptr && _impl_.buy_premium_ != nullptr) {
    delete _impl_.buy_premium_;
  }
  _impl_.buy_premium_ = nullptr;
}
void AssetEtf::clear_sell_discount() {
  if (GetArenaForAllocation() == nullptr && _impl_.sell_discount_ != nullptr) {
    delete _impl_.sell_discount_;
  }
  _impl_.sell_discount_ = nullptr;
}
void AssetEtf::clear_num_share() {
  if (GetArenaForAllocation() == nullptr && _impl_.num_share_ != nullptr) {
    delete _impl_.num_share_;
  }
  _impl_.num_share_ = nullptr;
}
void AssetEtf::clear_released_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.released_date_ != nullptr) {
    delete _impl_.released_date_;
  }
  _impl_.released_date_ = nullptr;
}
void AssetEtf::clear_index_recovery_period() {
  if (GetArenaForAllocation() == nullptr && _impl_.index_recovery_period_ != nullptr) {
    delete _impl_.index_recovery_period_;
  }
  _impl_.index_recovery_period_ = nullptr;
}
void AssetEtf::clear_expense_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.expense_commission_ != nullptr) {
    delete _impl_.expense_commission_;
  }
  _impl_.expense_commission_ = nullptr;
}
void AssetEtf::clear_primary_index_tracking_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.primary_index_tracking_error_ != nullptr) {
    delete _impl_.primary_index_tracking_error_;
  }
  _impl_.primary_index_tracking_error_ = nullptr;
}
void AssetEtf::clear_rebalancing_dates() {
  _impl_.rebalancing_dates_.Clear();
}
void AssetEtf::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
AssetEtf::AssetEtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetEtf)
}
AssetEtf::AssetEtf(const AssetEtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetEtf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rebalancing_dates_){from._impl_.rebalancing_dates_}
    , decltype(_impl_.payment_type_){}
    , decltype(_impl_.rebalancing_freq_){}
    , decltype(_impl_.management_type_){}
    , decltype(_impl_.primary_index_){}
    , decltype(_impl_.focus_type_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.primary_index_description_){}
    , decltype(_impl_.primary_index_company_){}
    , decltype(_impl_.inav_code_){}
    , decltype(_impl_.rebalancing_plan_){}
    , decltype(_impl_.tax_rate_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.total_expense_){nullptr}
    , decltype(_impl_.hurdle_rate_){nullptr}
    , decltype(_impl_.performance_fee_){nullptr}
    , decltype(_impl_.fixed_commission_){nullptr}
    , decltype(_impl_.buy_premium_){nullptr}
    , decltype(_impl_.sell_discount_){nullptr}
    , decltype(_impl_.num_share_){nullptr}
    , decltype(_impl_.released_date_){nullptr}
    , decltype(_impl_.index_recovery_period_){nullptr}
    , decltype(_impl_.expense_commission_){nullptr}
    , decltype(_impl_.primary_index_tracking_error_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.watermark_flag_){}
    , decltype(_impl_.rebalancing_flag_){}
    , decltype(_impl_.leveraged_flag_){}
    , decltype(_impl_.ucits_flag_){}
    , decltype(_impl_.div_yield_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payment_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payment_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payment_type().empty()) {
    _this->_impl_.payment_type_.Set(from._internal_payment_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rebalancing_freq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rebalancing_freq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_impl_.rebalancing_freq_.Set(from._internal_rebalancing_freq(), 
      _this->GetArenaForAllocation());
  }
  _impl_.management_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.management_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_management_type().empty()) {
    _this->_impl_.management_type_.Set(from._internal_management_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.primary_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_index().empty()) {
    _this->_impl_.primary_index_.Set(from._internal_primary_index(), 
      _this->GetArenaForAllocation());
  }
  _impl_.focus_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.focus_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_focus_type().empty()) {
    _this->_impl_.focus_type_.Set(from._internal_focus_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.primary_index_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_index_description().empty()) {
    _this->_impl_.primary_index_description_.Set(from._internal_primary_index_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.primary_index_company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_index_company().empty()) {
    _this->_impl_.primary_index_company_.Set(from._internal_primary_index_company(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inav_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inav_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inav_code().empty()) {
    _this->_impl_.inav_code_.Set(from._internal_inav_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rebalancing_plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rebalancing_plan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rebalancing_plan().empty()) {
    _this->_impl_.rebalancing_plan_.Set(from._internal_rebalancing_plan(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tax_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tax_rate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tax_rate().empty()) {
    _this->_impl_.tax_rate_.Set(from._internal_tax_rate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issue_kind().empty()) {
    _this->_impl_.issue_kind_.Set(from._internal_issue_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nominal_currency().empty()) {
    _this->_impl_.nominal_currency_.Set(from._internal_nominal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_total_expense()) {
    _this->_impl_.total_expense_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.total_expense_);
  }
  if (from._internal_has_hurdle_rate()) {
    _this->_impl_.hurdle_rate_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.hurdle_rate_);
  }
  if (from._internal_has_performance_fee()) {
    _this->_impl_.performance_fee_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.performance_fee_);
  }
  if (from._internal_has_fixed_commission()) {
    _this->_impl_.fixed_commission_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.fixed_commission_);
  }
  if (from._internal_has_buy_premium()) {
    _this->_impl_.buy_premium_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.buy_premium_);
  }
  if (from._internal_has_sell_discount()) {
    _this->_impl_.sell_discount_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.sell_discount_);
  }
  if (from._internal_has_num_share()) {
    _this->_impl_.num_share_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.num_share_);
  }
  if (from._internal_has_released_date()) {
    _this->_impl_.released_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.released_date_);
  }
  if (from._internal_has_index_recovery_period()) {
    _this->_impl_.index_recovery_period_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.index_recovery_period_);
  }
  if (from._internal_has_expense_commission()) {
    _this->_impl_.expense_commission_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.expense_commission_);
  }
  if (from._internal_has_primary_index_tracking_error()) {
    _this->_impl_.primary_index_tracking_error_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.primary_index_tracking_error_);
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.nominal_);
  }
  ::memcpy(&_impl_.watermark_flag_, &from._impl_.watermark_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
    reinterpret_cast<char*>(&_impl_.watermark_flag_)) + sizeof(_impl_.div_yield_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetEtf)
}

inline void AssetEtf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rebalancing_dates_){arena}
    , decltype(_impl_.payment_type_){}
    , decltype(_impl_.rebalancing_freq_){}
    , decltype(_impl_.management_type_){}
    , decltype(_impl_.primary_index_){}
    , decltype(_impl_.focus_type_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.primary_index_description_){}
    , decltype(_impl_.primary_index_company_){}
    , decltype(_impl_.inav_code_){}
    , decltype(_impl_.rebalancing_plan_){}
    , decltype(_impl_.tax_rate_){}
    , decltype(_impl_.issue_kind_){}
    , decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.total_expense_){nullptr}
    , decltype(_impl_.hurdle_rate_){nullptr}
    , decltype(_impl_.performance_fee_){nullptr}
    , decltype(_impl_.fixed_commission_){nullptr}
    , decltype(_impl_.buy_premium_){nullptr}
    , decltype(_impl_.sell_discount_){nullptr}
    , decltype(_impl_.num_share_){nullptr}
    , decltype(_impl_.released_date_){nullptr}
    , decltype(_impl_.index_recovery_period_){nullptr}
    , decltype(_impl_.expense_commission_){nullptr}
    , decltype(_impl_.primary_index_tracking_error_){nullptr}
    , decltype(_impl_.nominal_){nullptr}
    , decltype(_impl_.watermark_flag_){false}
    , decltype(_impl_.rebalancing_flag_){false}
    , decltype(_impl_.leveraged_flag_){false}
    , decltype(_impl_.ucits_flag_){false}
    , decltype(_impl_.div_yield_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payment_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payment_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rebalancing_freq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rebalancing_freq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.management_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.management_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.primary_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.focus_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.focus_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.primary_index_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.primary_index_company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_index_company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inav_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inav_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rebalancing_plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rebalancing_plan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tax_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tax_rate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issue_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issue_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetEtf::~AssetEtf() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetEtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rebalancing_dates_.~RepeatedPtrField();
  _impl_.payment_type_.Destroy();
  _impl_.rebalancing_freq_.Destroy();
  _impl_.management_type_.Destroy();
  _impl_.primary_index_.Destroy();
  _impl_.focus_type_.Destroy();
  _impl_.description_.Destroy();
  _impl_.primary_index_description_.Destroy();
  _impl_.primary_index_company_.Destroy();
  _impl_.inav_code_.Destroy();
  _impl_.rebalancing_plan_.Destroy();
  _impl_.tax_rate_.Destroy();
  _impl_.issue_kind_.Destroy();
  _impl_.nominal_currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.total_expense_;
  if (this != internal_default_instance()) delete _impl_.hurdle_rate_;
  if (this != internal_default_instance()) delete _impl_.performance_fee_;
  if (this != internal_default_instance()) delete _impl_.fixed_commission_;
  if (this != internal_default_instance()) delete _impl_.buy_premium_;
  if (this != internal_default_instance()) delete _impl_.sell_discount_;
  if (this != internal_default_instance()) delete _impl_.num_share_;
  if (this != internal_default_instance()) delete _impl_.released_date_;
  if (this != internal_default_instance()) delete _impl_.index_recovery_period_;
  if (this != internal_default_instance()) delete _impl_.expense_commission_;
  if (this != internal_default_instance()) delete _impl_.primary_index_tracking_error_;
  if (this != internal_default_instance()) delete _impl_.nominal_;
}

void AssetEtf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetEtf::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rebalancing_dates_.Clear();
  _impl_.payment_type_.ClearToEmpty();
  _impl_.rebalancing_freq_.ClearToEmpty();
  _impl_.management_type_.ClearToEmpty();
  _impl_.primary_index_.ClearToEmpty();
  _impl_.focus_type_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.primary_index_description_.ClearToEmpty();
  _impl_.primary_index_company_.ClearToEmpty();
  _impl_.inav_code_.ClearToEmpty();
  _impl_.rebalancing_plan_.ClearToEmpty();
  _impl_.tax_rate_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.total_expense_ != nullptr) {
    delete _impl_.total_expense_;
  }
  _impl_.total_expense_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hurdle_rate_ != nullptr) {
    delete _impl_.hurdle_rate_;
  }
  _impl_.hurdle_rate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.performance_fee_ != nullptr) {
    delete _impl_.performance_fee_;
  }
  _impl_.performance_fee_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fixed_commission_ != nullptr) {
    delete _impl_.fixed_commission_;
  }
  _impl_.fixed_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buy_premium_ != nullptr) {
    delete _impl_.buy_premium_;
  }
  _impl_.buy_premium_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sell_discount_ != nullptr) {
    delete _impl_.sell_discount_;
  }
  _impl_.sell_discount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.num_share_ != nullptr) {
    delete _impl_.num_share_;
  }
  _impl_.num_share_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.released_date_ != nullptr) {
    delete _impl_.released_date_;
  }
  _impl_.released_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.index_recovery_period_ != nullptr) {
    delete _impl_.index_recovery_period_;
  }
  _impl_.index_recovery_period_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expense_commission_ != nullptr) {
    delete _impl_.expense_commission_;
  }
  _impl_.expense_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.primary_index_tracking_error_ != nullptr) {
    delete _impl_.primary_index_tracking_error_;
  }
  _impl_.primary_index_tracking_error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  ::memset(&_impl_.watermark_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
      reinterpret_cast<char*>(&_impl_.watermark_flag_)) + sizeof(_impl_.div_yield_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetEtf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_expense(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hurdle_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_performance_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payment_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_payment_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type"));
        } else
          goto handle_unusual;
        continue;
      // bool watermark_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.watermark_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_buy_premium(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sell_discount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rebalancing_flag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.rebalancing_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rebalancing_freq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_rebalancing_freq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq"));
        } else
          goto handle_unusual;
        continue;
      // string management_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_management_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type"));
        } else
          goto handle_unusual;
        continue;
      // string primary_index = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_primary_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index"));
        } else
          goto handle_unusual;
        continue;
      // string focus_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_focus_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type"));
        } else
          goto handle_unusual;
        continue;
      // bool leveraged_flag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.leveraged_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_share(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ucits_flag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.ucits_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp released_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_released_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.description"));
        } else
          goto handle_unusual;
        continue;
      // string primary_index_description = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_primary_index_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description"));
        } else
          goto handle_unusual;
        continue;
      // string primary_index_company = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_primary_index_company();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_recovery_period(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string inav_code = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_inav_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code"));
        } else
          goto handle_unusual;
        continue;
      // bool div_yield_flag = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.div_yield_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_expense_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary_index_tracking_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rebalancing_plan = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_rebalancing_plan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan"));
        } else
          goto handle_unusual;
        continue;
      // string tax_rate = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_tax_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rebalancing_dates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string issue_kind = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_issue_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nominal_currency = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_nominal_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetEtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
  if (this->_internal_has_total_expense()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::total_expense(this),
        _Internal::total_expense(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
  if (this->_internal_has_hurdle_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hurdle_rate(this),
        _Internal::hurdle_rate(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
  if (this->_internal_has_performance_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::performance_fee(this),
        _Internal::performance_fee(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
  if (this->_internal_has_fixed_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fixed_commission(this),
        _Internal::fixed_commission(this).GetCachedSize(), target, stream);
  }

  // string payment_type = 5;
  if (!this->_internal_payment_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_type().data(), static_cast<int>(this->_internal_payment_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payment_type(), target);
  }

  // bool watermark_flag = 6;
  if (this->_internal_watermark_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_watermark_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
  if (this->_internal_has_buy_premium()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::buy_premium(this),
        _Internal::buy_premium(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
  if (this->_internal_has_sell_discount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::sell_discount(this),
        _Internal::sell_discount(this).GetCachedSize(), target, stream);
  }

  // bool rebalancing_flag = 9;
  if (this->_internal_rebalancing_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_rebalancing_flag(), target);
  }

  // string rebalancing_freq = 10;
  if (!this->_internal_rebalancing_freq().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rebalancing_freq().data(), static_cast<int>(this->_internal_rebalancing_freq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_rebalancing_freq(), target);
  }

  // string management_type = 11;
  if (!this->_internal_management_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_management_type().data(), static_cast<int>(this->_internal_management_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_management_type(), target);
  }

  // string primary_index = 12;
  if (!this->_internal_primary_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_index().data(), static_cast<int>(this->_internal_primary_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_primary_index(), target);
  }

  // string focus_type = 13;
  if (!this->_internal_focus_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_focus_type().data(), static_cast<int>(this->_internal_focus_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_focus_type(), target);
  }

  // bool leveraged_flag = 14;
  if (this->_internal_leveraged_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_leveraged_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
  if (this->_internal_has_num_share()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::num_share(this),
        _Internal::num_share(this).GetCachedSize(), target, stream);
  }

  // bool ucits_flag = 16;
  if (this->_internal_ucits_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_ucits_flag(), target);
  }

  // .google.protobuf.Timestamp released_date = 17;
  if (this->_internal_has_released_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::released_date(this),
        _Internal::released_date(this).GetCachedSize(), target, stream);
  }

  // string description = 18;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.description");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_description(), target);
  }

  // string primary_index_description = 19;
  if (!this->_internal_primary_index_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_index_description().data(), static_cast<int>(this->_internal_primary_index_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_primary_index_description(), target);
  }

  // string primary_index_company = 20;
  if (!this->_internal_primary_index_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_index_company().data(), static_cast<int>(this->_internal_primary_index_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_primary_index_company(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
  if (this->_internal_has_index_recovery_period()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::index_recovery_period(this),
        _Internal::index_recovery_period(this).GetCachedSize(), target, stream);
  }

  // string inav_code = 22;
  if (!this->_internal_inav_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inav_code().data(), static_cast<int>(this->_internal_inav_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_inav_code(), target);
  }

  // bool div_yield_flag = 23;
  if (this->_internal_div_yield_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_div_yield_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
  if (this->_internal_has_expense_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::expense_commission(this),
        _Internal::expense_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
  if (this->_internal_has_primary_index_tracking_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::primary_index_tracking_error(this),
        _Internal::primary_index_tracking_error(this).GetCachedSize(), target, stream);
  }

  // string rebalancing_plan = 26;
  if (!this->_internal_rebalancing_plan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rebalancing_plan().data(), static_cast<int>(this->_internal_rebalancing_plan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_rebalancing_plan(), target);
  }

  // string tax_rate = 27;
  if (!this->_internal_tax_rate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tax_rate().data(), static_cast<int>(this->_internal_tax_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_tax_rate(), target);
  }

  // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rebalancing_dates_size()); i < n; i++) {
    const auto& repfield = this->_internal_rebalancing_dates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string issue_kind = 29;
  if (!this->_internal_issue_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issue_kind().data(), static_cast<int>(this->_internal_issue_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_issue_kind(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 31;
  if (!this->_internal_nominal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nominal_currency().data(), static_cast<int>(this->_internal_nominal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_nominal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  return target;
}

size_t AssetEtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
  total_size += 2UL * this->_internal_rebalancing_dates_size();
  for (const auto& msg : this->_impl_.rebalancing_dates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string payment_type = 5;
  if (!this->_internal_payment_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_type());
  }

  // string rebalancing_freq = 10;
  if (!this->_internal_rebalancing_freq().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rebalancing_freq());
  }

  // string management_type = 11;
  if (!this->_internal_management_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_management_type());
  }

  // string primary_index = 12;
  if (!this->_internal_primary_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_index());
  }

  // string focus_type = 13;
  if (!this->_internal_focus_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_focus_type());
  }

  // string description = 18;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string primary_index_description = 19;
  if (!this->_internal_primary_index_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_index_description());
  }

  // string primary_index_company = 20;
  if (!this->_internal_primary_index_company().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_index_company());
  }

  // string inav_code = 22;
  if (!this->_internal_inav_code().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inav_code());
  }

  // string rebalancing_plan = 26;
  if (!this->_internal_rebalancing_plan().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rebalancing_plan());
  }

  // string tax_rate = 27;
  if (!this->_internal_tax_rate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tax_rate());
  }

  // string issue_kind = 29;
  if (!this->_internal_issue_kind().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issue_kind());
  }

  // string nominal_currency = 31;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nominal_currency());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
  if (this->_internal_has_total_expense()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_expense_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
  if (this->_internal_has_hurdle_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hurdle_rate_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
  if (this->_internal_has_performance_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.performance_fee_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
  if (this->_internal_has_fixed_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fixed_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
  if (this->_internal_has_buy_premium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buy_premium_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
  if (this->_internal_has_sell_discount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sell_discount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
  if (this->_internal_has_num_share()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.num_share_);
  }

  // .google.protobuf.Timestamp released_date = 17;
  if (this->_internal_has_released_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.released_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
  if (this->_internal_has_index_recovery_period()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.index_recovery_period_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
  if (this->_internal_has_expense_commission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expense_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
  if (this->_internal_has_primary_index_tracking_error()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.primary_index_tracking_error_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
  if (this->_internal_has_nominal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  // bool watermark_flag = 6;
  if (this->_internal_watermark_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool rebalancing_flag = 9;
  if (this->_internal_rebalancing_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool leveraged_flag = 14;
  if (this->_internal_leveraged_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool ucits_flag = 16;
  if (this->_internal_ucits_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool div_yield_flag = 23;
  if (this->_internal_div_yield_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetEtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetEtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetEtf::GetClassData() const { return &_class_data_; }


void AssetEtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetEtf*>(&to_msg);
  auto& from = static_cast<const AssetEtf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rebalancing_dates_.MergeFrom(from._impl_.rebalancing_dates_);
  if (!from._internal_payment_type().empty()) {
    _this->_internal_set_payment_type(from._internal_payment_type());
  }
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_internal_set_rebalancing_freq(from._internal_rebalancing_freq());
  }
  if (!from._internal_management_type().empty()) {
    _this->_internal_set_management_type(from._internal_management_type());
  }
  if (!from._internal_primary_index().empty()) {
    _this->_internal_set_primary_index(from._internal_primary_index());
  }
  if (!from._internal_focus_type().empty()) {
    _this->_internal_set_focus_type(from._internal_focus_type());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_primary_index_description().empty()) {
    _this->_internal_set_primary_index_description(from._internal_primary_index_description());
  }
  if (!from._internal_primary_index_company().empty()) {
    _this->_internal_set_primary_index_company(from._internal_primary_index_company());
  }
  if (!from._internal_inav_code().empty()) {
    _this->_internal_set_inav_code(from._internal_inav_code());
  }
  if (!from._internal_rebalancing_plan().empty()) {
    _this->_internal_set_rebalancing_plan(from._internal_rebalancing_plan());
  }
  if (!from._internal_tax_rate().empty()) {
    _this->_internal_set_tax_rate(from._internal_tax_rate());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (from._internal_has_total_expense()) {
    _this->_internal_mutable_total_expense()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_total_expense());
  }
  if (from._internal_has_hurdle_rate()) {
    _this->_internal_mutable_hurdle_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_hurdle_rate());
  }
  if (from._internal_has_performance_fee()) {
    _this->_internal_mutable_performance_fee()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_performance_fee());
  }
  if (from._internal_has_fixed_commission()) {
    _this->_internal_mutable_fixed_commission()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_fixed_commission());
  }
  if (from._internal_has_buy_premium()) {
    _this->_internal_mutable_buy_premium()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_buy_premium());
  }
  if (from._internal_has_sell_discount()) {
    _this->_internal_mutable_sell_discount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_sell_discount());
  }
  if (from._internal_has_num_share()) {
    _this->_internal_mutable_num_share()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_num_share());
  }
  if (from._internal_has_released_date()) {
    _this->_internal_mutable_released_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_released_date());
  }
  if (from._internal_has_index_recovery_period()) {
    _this->_internal_mutable_index_recovery_period()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_index_recovery_period());
  }
  if (from._internal_has_expense_commission()) {
    _this->_internal_mutable_expense_commission()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_expense_commission());
  }
  if (from._internal_has_primary_index_tracking_error()) {
    _this->_internal_mutable_primary_index_tracking_error()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_primary_index_tracking_error());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal());
  }
  if (from._internal_watermark_flag() != 0) {
    _this->_internal_set_watermark_flag(from._internal_watermark_flag());
  }
  if (from._internal_rebalancing_flag() != 0) {
    _this->_internal_set_rebalancing_flag(from._internal_rebalancing_flag());
  }
  if (from._internal_leveraged_flag() != 0) {
    _this->_internal_set_leveraged_flag(from._internal_leveraged_flag());
  }
  if (from._internal_ucits_flag() != 0) {
    _this->_internal_set_ucits_flag(from._internal_ucits_flag());
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_internal_set_div_yield_flag(from._internal_div_yield_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetEtf::CopyFrom(const AssetEtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetEtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetEtf::IsInitialized() const {
  return true;
}

void AssetEtf::InternalSwap(AssetEtf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rebalancing_dates_.InternalSwap(&other->_impl_.rebalancing_dates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payment_type_, lhs_arena,
      &other->_impl_.payment_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rebalancing_freq_, lhs_arena,
      &other->_impl_.rebalancing_freq_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.management_type_, lhs_arena,
      &other->_impl_.management_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.primary_index_, lhs_arena,
      &other->_impl_.primary_index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.focus_type_, lhs_arena,
      &other->_impl_.focus_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.primary_index_description_, lhs_arena,
      &other->_impl_.primary_index_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.primary_index_company_, lhs_arena,
      &other->_impl_.primary_index_company_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inav_code_, lhs_arena,
      &other->_impl_.inav_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rebalancing_plan_, lhs_arena,
      &other->_impl_.rebalancing_plan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tax_rate_, lhs_arena,
      &other->_impl_.tax_rate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issue_kind_, lhs_arena,
      &other->_impl_.issue_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nominal_currency_, lhs_arena,
      &other->_impl_.nominal_currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.div_yield_flag_)
      + sizeof(AssetEtf::_impl_.div_yield_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.total_expense_)>(
          reinterpret_cast<char*>(&_impl_.total_expense_),
          reinterpret_cast<char*>(&other->_impl_.total_expense_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetEtf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[52]);
}

// ===================================================================

class AssetClearingCertificate::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal(const AssetClearingCertificate* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
AssetClearingCertificate::_Internal::nominal(const AssetClearingCertificate* msg) {
  return *msg->_impl_.nominal_;
}
void AssetClearingCertificate::clear_nominal() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
}
AssetClearingCertificate::AssetClearingCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
}
AssetClearingCertificate::AssetClearingCertificate(const AssetClearingCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetClearingCertificate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.nominal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nominal_currency().empty()) {
    _this->_impl_.nominal_currency_.Set(from._internal_nominal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nominal()) {
    _this->_impl_.nominal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.nominal_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
}

inline void AssetClearingCertificate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nominal_currency_){}
    , decltype(_impl_.nominal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nominal_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nominal_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetClearingCertificate::~AssetClearingCertificate() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetClearingCertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nominal_currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nominal_;
}

void AssetClearingCertificate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetClearingCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nominal_currency_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_ != nullptr) {
    delete _impl_.nominal_;
  }
  _impl_.nominal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetClearingCertificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nominal_currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nominal_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetClearingCertificate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
  if (this->_internal_has_nominal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nominal(this),
        _Internal::nominal(this).GetCachedSize(), target, stream);
  }

  // string nominal_currency = 2;
  if (!this->_internal_nominal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nominal_currency().data(), static_cast<int>(this->_internal_nominal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nominal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  return target;
}

size_t AssetClearingCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nominal_currency = 2;
  if (!this->_internal_nominal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nominal_currency());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
  if (this->_internal_has_nominal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetClearingCertificate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetClearingCertificate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetClearingCertificate::GetClassData() const { return &_class_data_; }


void AssetClearingCertificate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetClearingCertificate*>(&to_msg);
  auto& from = static_cast<const AssetClearingCertificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (from._internal_has_nominal()) {
    _this->_internal_mutable_nominal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetClearingCertificate::CopyFrom(const AssetClearingCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetClearingCertificate::IsInitialized() const {
  return true;
}

void AssetClearingCertificate::InternalSwap(AssetClearingCertificate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nominal_currency_, lhs_arena,
      &other->_impl_.nominal_currency_, rhs_arena
  );
  swap(_impl_.nominal_, other->_impl_.nominal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetClearingCertificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[53]);
}

// ===================================================================

class Brand::_Internal {
 public:
};

Brand::Brand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Brand)
}
Brand::Brand(const Brand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Brand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company().empty()) {
    _this->_impl_.company_.Set(from._internal_company(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sector().empty()) {
    _this->_impl_.sector_.Set(from._internal_sector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk().empty()) {
    _this->_impl_.country_of_risk_.Set(from._internal_country_of_risk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_impl_.country_of_risk_name_.Set(from._internal_country_of_risk_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Brand)
}

inline void Brand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.country_of_risk_){}
    , decltype(_impl_.country_of_risk_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_of_risk_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_of_risk_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Brand::~Brand() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Brand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.info_.Destroy();
  _impl_.company_.Destroy();
  _impl_.sector_.Destroy();
  _impl_.country_of_risk_.Destroy();
  _impl_.country_of_risk_name_.Destroy();
}

void Brand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brand::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Brand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.uid"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.description"));
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.info"));
        } else
          goto handle_unusual;
        continue;
      // string company = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_company();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.company"));
        } else
          goto handle_unusual;
        continue;
      // string sector = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.sector"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_country_of_risk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk"));
        } else
          goto handle_unusual;
        continue;
      // string country_of_risk_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_country_of_risk_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Brand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // string company = 5;
  if (!this->_internal_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.company");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company(), target);
  }

  // string sector = 6;
  if (!this->_internal_sector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sector().data(), static_cast<int>(this->_internal_sector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.sector");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sector(), target);
  }

  // string country_of_risk = 7;
  if (!this->_internal_country_of_risk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk().data(), static_cast<int>(this->_internal_country_of_risk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country_of_risk(), target);
  }

  // string country_of_risk_name = 8;
  if (!this->_internal_country_of_risk_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_of_risk_name().data(), static_cast<int>(this->_internal_country_of_risk_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country_of_risk_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Brand)
  return target;
}

size_t Brand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Brand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string company = 5;
  if (!this->_internal_company().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // string sector = 6;
  if (!this->_internal_sector().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sector());
  }

  // string country_of_risk = 7;
  if (!this->_internal_country_of_risk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk());
  }

  // string country_of_risk_name = 8;
  if (!this->_internal_country_of_risk_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_of_risk_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Brand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brand::GetClassData() const { return &_class_data_; }


void Brand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Brand*>(&to_msg);
  auto& from = static_cast<const Brand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Brand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brand::CopyFrom(const Brand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Brand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brand::IsInitialized() const {
  return true;
}

void Brand::InternalSwap(Brand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.company_, lhs_arena,
      &other->_impl_.company_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sector_, lhs_arena,
      &other->_impl_.sector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_, lhs_arena,
      &other->_impl_.country_of_risk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_of_risk_name_, lhs_arena,
      &other->_impl_.country_of_risk_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Brand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[54]);
}

// ===================================================================

class AssetInstrument::_Internal {
 public:
};

AssetInstrument::AssetInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
}
AssetInstrument::AssetInstrument(const AssetInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){from._impl_.links_}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
}

inline void AssetInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){arena}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.instrument_kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssetInstrument::~AssetInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.links_.~RepeatedPtrField();
  _impl_.uid_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.position_uid_.Destroy();
}

void AssetInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.links_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid"));
        } else
          goto handle_unusual;
        continue;
      // string figi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_figi(), target);
  }

  // string instrument_type = 3;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_type(), target);
  }

  // string ticker = 4;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ticker(), target);
  }

  // string class_code = 5;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_class_code(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_instrument_kind(), target);
  }

  // string position_uid = 11;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_position_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  return target;
}

size_t AssetInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_impl_.links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_type = 3;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // string ticker = 4;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 5;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string position_uid = 11;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetInstrument::GetClassData() const { return &_class_data_; }


void AssetInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetInstrument*>(&to_msg);
  auto& from = static_cast<const AssetInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.links_.MergeFrom(from._impl_.links_);
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetInstrument::CopyFrom(const AssetInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetInstrument::IsInitialized() const {
  return true;
}

void AssetInstrument::InternalSwap(AssetInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  swap(_impl_.instrument_kind_, other->_impl_.instrument_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[55]);
}

// ===================================================================

class InstrumentLink::_Internal {
 public:
};

InstrumentLink::InstrumentLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
}
InstrumentLink::InstrumentLink(const InstrumentLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.instrument_uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
}

inline void InstrumentLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.instrument_uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstrumentLink::~InstrumentLink() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.instrument_uid_.Destroy();
}

void InstrumentLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentLink::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentLink.type"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentLink.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  return target;
}

size_t InstrumentLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentLink::GetClassData() const { return &_class_data_; }


void InstrumentLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentLink*>(&to_msg);
  auto& from = static_cast<const InstrumentLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentLink::CopyFrom(const InstrumentLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentLink::IsInitialized() const {
  return true;
}

void InstrumentLink::InternalSwap(InstrumentLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[56]);
}

// ===================================================================

class GetFavoritesRequest::_Internal {
 public:
};

GetFavoritesRequest::GetFavoritesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesRequest)
}
GetFavoritesRequest::GetFavoritesRequest(const GetFavoritesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetFavoritesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFavoritesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFavoritesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetFavoritesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[57]);
}

// ===================================================================

class GetFavoritesResponse::_Internal {
 public:
};

GetFavoritesResponse::GetFavoritesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
}
GetFavoritesResponse::GetFavoritesResponse(const GetFavoritesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFavoritesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.favorite_instruments_){from._impl_.favorite_instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
}

inline void GetFavoritesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.favorite_instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFavoritesResponse::~GetFavoritesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFavoritesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.favorite_instruments_.~RepeatedPtrField();
}

void GetFavoritesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFavoritesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.favorite_instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFavoritesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_favorite_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFavoritesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_favorite_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_favorite_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  return target;
}

size_t GetFavoritesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  total_size += 1UL * this->_internal_favorite_instruments_size();
  for (const auto& msg : this->_impl_.favorite_instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFavoritesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFavoritesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFavoritesResponse::GetClassData() const { return &_class_data_; }


void GetFavoritesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFavoritesResponse*>(&to_msg);
  auto& from = static_cast<const GetFavoritesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.favorite_instruments_.MergeFrom(from._impl_.favorite_instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFavoritesResponse::CopyFrom(const GetFavoritesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFavoritesResponse::IsInitialized() const {
  return true;
}

void GetFavoritesResponse::InternalSwap(GetFavoritesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.favorite_instruments_.InternalSwap(&other->_impl_.favorite_instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFavoritesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[58]);
}

// ===================================================================

class FavoriteInstrument::_Internal {
 public:
};

FavoriteInstrument::FavoriteInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
}
FavoriteInstrument::FavoriteInstrument(const FavoriteInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FavoriteInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.otc_flag_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.instrument_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.otc_flag_, &from._impl_.otc_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.instrument_kind_) -
    reinterpret_cast<char*>(&_impl_.otc_flag_)) + sizeof(_impl_.instrument_kind_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
}

inline void FavoriteInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.isin_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.otc_flag_){false}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.instrument_kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FavoriteInstrument::~FavoriteInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FavoriteInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.isin_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.name_.Destroy();
  _impl_.uid_.Destroy();
}

void FavoriteInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FavoriteInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  ::memset(&_impl_.otc_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.instrument_kind_) -
      reinterpret_cast<char*>(&_impl_.otc_flag_)) + sizeof(_impl_.instrument_kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FavoriteInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name"));
        } else
          goto handle_unusual;
        continue;
      // string uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid"));
        } else
          goto handle_unusual;
        continue;
      // bool otc_flag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.otc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FavoriteInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // string instrument_type = 11;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_instrument_type(), target);
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_name(), target);
  }

  // string uid = 13;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_uid(), target);
  }

  // bool otc_flag = 16;
  if (this->_internal_otc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_otc_flag(), target);
  }

  // bool api_trade_available_flag = 17;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_api_trade_available_flag(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_instrument_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  return target;
}

size_t FavoriteInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string isin = 4;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string instrument_type = 11;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uid = 13;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // bool otc_flag = 16;
  if (this->_internal_otc_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool api_trade_available_flag = 17;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FavoriteInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FavoriteInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FavoriteInstrument::GetClassData() const { return &_class_data_; }


void FavoriteInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FavoriteInstrument*>(&to_msg);
  auto& from = static_cast<const FavoriteInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_internal_set_otc_flag(from._internal_otc_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FavoriteInstrument::CopyFrom(const FavoriteInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavoriteInstrument::IsInitialized() const {
  return true;
}

void FavoriteInstrument::InternalSwap(FavoriteInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_kind_)
      + sizeof(FavoriteInstrument::_impl_.instrument_kind_)
      - PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.otc_flag_)>(
          reinterpret_cast<char*>(&_impl_.otc_flag_),
          reinterpret_cast<char*>(&other->_impl_.otc_flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FavoriteInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[59]);
}

// ===================================================================

class EditFavoritesRequest::_Internal {
 public:
};

EditFavoritesRequest::EditFavoritesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
}
EditFavoritesRequest::EditFavoritesRequest(const EditFavoritesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditFavoritesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.action_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.action_type_ = from._impl_.action_type_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
}

inline void EditFavoritesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.action_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EditFavoritesRequest::~EditFavoritesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditFavoritesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void EditFavoritesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditFavoritesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.action_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditFavoritesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action_type(static_cast<::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditFavoritesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_action_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_action_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  return target;
}

size_t EditFavoritesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_action_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditFavoritesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditFavoritesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditFavoritesRequest::GetClassData() const { return &_class_data_; }


void EditFavoritesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditFavoritesRequest*>(&to_msg);
  auto& from = static_cast<const EditFavoritesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (from._internal_action_type() != 0) {
    _this->_internal_set_action_type(from._internal_action_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesRequest::CopyFrom(const EditFavoritesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditFavoritesRequest::IsInitialized() const {
  return true;
}

void EditFavoritesRequest::InternalSwap(EditFavoritesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.action_type_, other->_impl_.action_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditFavoritesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[60]);
}

// ===================================================================

class EditFavoritesRequestInstrument::_Internal {
 public:
  using HasBits = decltype(std::declval<EditFavoritesRequestInstrument>()._impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
}
EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(const EditFavoritesRequestInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditFavoritesRequestInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
}

inline void EditFavoritesRequestInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EditFavoritesRequestInstrument::~EditFavoritesRequestInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditFavoritesRequestInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void EditFavoritesRequestInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditFavoritesRequestInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.figi_.ClearNonDefaultToEmpty();
  }
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditFavoritesRequestInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditFavoritesRequestInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  return target;
}

size_t EditFavoritesRequestInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditFavoritesRequestInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditFavoritesRequestInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditFavoritesRequestInstrument::GetClassData() const { return &_class_data_; }


void EditFavoritesRequestInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditFavoritesRequestInstrument*>(&to_msg);
  auto& from = static_cast<const EditFavoritesRequestInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_figi()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesRequestInstrument::CopyFrom(const EditFavoritesRequestInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditFavoritesRequestInstrument::IsInitialized() const {
  return true;
}

void EditFavoritesRequestInstrument::InternalSwap(EditFavoritesRequestInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EditFavoritesRequestInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[61]);
}

// ===================================================================

class EditFavoritesResponse::_Internal {
 public:
};

EditFavoritesResponse::EditFavoritesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
}
EditFavoritesResponse::EditFavoritesResponse(const EditFavoritesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditFavoritesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.favorite_instruments_){from._impl_.favorite_instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
}

inline void EditFavoritesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.favorite_instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EditFavoritesResponse::~EditFavoritesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditFavoritesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.favorite_instruments_.~RepeatedPtrField();
}

void EditFavoritesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditFavoritesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.favorite_instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditFavoritesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_favorite_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditFavoritesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_favorite_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_favorite_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  return target;
}

size_t EditFavoritesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  total_size += 1UL * this->_internal_favorite_instruments_size();
  for (const auto& msg : this->_impl_.favorite_instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditFavoritesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditFavoritesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditFavoritesResponse::GetClassData() const { return &_class_data_; }


void EditFavoritesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditFavoritesResponse*>(&to_msg);
  auto& from = static_cast<const EditFavoritesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.favorite_instruments_.MergeFrom(from._impl_.favorite_instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesResponse::CopyFrom(const EditFavoritesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditFavoritesResponse::IsInitialized() const {
  return true;
}

void EditFavoritesResponse::InternalSwap(EditFavoritesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.favorite_instruments_.InternalSwap(&other->_impl_.favorite_instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditFavoritesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[62]);
}

// ===================================================================

class GetCountriesRequest::_Internal {
 public:
};

GetCountriesRequest::GetCountriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesRequest)
}
GetCountriesRequest::GetCountriesRequest(const GetCountriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetCountriesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCountriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCountriesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetCountriesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[63]);
}

// ===================================================================

class GetCountriesResponse::_Internal {
 public:
};

GetCountriesResponse::GetCountriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
}
GetCountriesResponse::GetCountriesResponse(const GetCountriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCountriesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.countries_){from._impl_.countries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
}

inline void GetCountriesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.countries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCountriesResponse::~GetCountriesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCountriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countries_.~RepeatedPtrField();
}

void GetCountriesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCountriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.countries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCountriesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_countries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCountriesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_countries_size()); i < n; i++) {
    const auto& repfield = this->_internal_countries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  return target;
}

size_t GetCountriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
  total_size += 1UL * this->_internal_countries_size();
  for (const auto& msg : this->_impl_.countries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCountriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCountriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCountriesResponse::GetClassData() const { return &_class_data_; }


void GetCountriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCountriesResponse*>(&to_msg);
  auto& from = static_cast<const GetCountriesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.countries_.MergeFrom(from._impl_.countries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCountriesResponse::CopyFrom(const GetCountriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCountriesResponse::IsInitialized() const {
  return true;
}

void GetCountriesResponse::InternalSwap(GetCountriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.countries_.InternalSwap(&other->_impl_.countries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCountriesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[64]);
}

// ===================================================================

class IndicativesRequest::_Internal {
 public:
};

IndicativesRequest::IndicativesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesRequest)
}
IndicativesRequest::IndicativesRequest(const IndicativesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  IndicativesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndicativesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndicativesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IndicativesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[65]);
}

// ===================================================================

class IndicativesResponse::_Internal {
 public:
};

IndicativesResponse::IndicativesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
}
IndicativesResponse::IndicativesResponse(const IndicativesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndicativesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
}

inline void IndicativesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndicativesResponse::~IndicativesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndicativesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void IndicativesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndicativesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndicativesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndicativesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  return target;
}

size_t IndicativesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndicativesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndicativesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndicativesResponse::GetClassData() const { return &_class_data_; }


void IndicativesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndicativesResponse*>(&to_msg);
  auto& from = static_cast<const IndicativesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndicativesResponse::CopyFrom(const IndicativesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndicativesResponse::IsInitialized() const {
  return true;
}

void IndicativesResponse::InternalSwap(IndicativesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndicativesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[66]);
}

// ===================================================================

class IndicativeResponse::_Internal {
 public:
};

IndicativeResponse::IndicativeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
}
IndicativeResponse::IndicativeResponse(const IndicativeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndicativeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.instrument_kind_){}
    , decltype(_impl_.buy_available_flag_){}
    , decltype(_impl_.sell_available_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.instrument_kind_, &from._impl_.instrument_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sell_available_flag_) -
    reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.sell_available_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
}

inline void IndicativeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.instrument_kind_){0}
    , decltype(_impl_.buy_available_flag_){false}
    , decltype(_impl_.sell_available_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndicativeResponse::~IndicativeResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndicativeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.name_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.uid_.Destroy();
}

void IndicativeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndicativeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  ::memset(&_impl_.instrument_kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sell_available_flag_) -
      reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.sell_available_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndicativeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string currency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange"));
        } else
          goto handle_unusual;
        continue;
      // string uid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid"));
        } else
          goto handle_unusual;
        continue;
      // bool buy_available_flag = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.buy_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sell_available_flag = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.sell_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndicativeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_code(), target);
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_instrument_kind(), target);
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_name(), target);
  }

  // string exchange = 13;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_exchange(), target);
  }

  // string uid = 14;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_uid(), target);
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(404, this->_internal_buy_available_flag(), target);
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(405, this->_internal_sell_available_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  return target;
}

size_t IndicativeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 3;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exchange = 13;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string uid = 14;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  // bool buy_available_flag = 404;
  if (this->_internal_buy_available_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool sell_available_flag = 405;
  if (this->_internal_sell_available_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndicativeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndicativeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndicativeResponse::GetClassData() const { return &_class_data_; }


void IndicativeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndicativeResponse*>(&to_msg);
  auto& from = static_cast<const IndicativeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_internal_set_buy_available_flag(from._internal_buy_available_flag());
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_internal_set_sell_available_flag(from._internal_sell_available_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndicativeResponse::CopyFrom(const IndicativeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndicativeResponse::IsInitialized() const {
  return true;
}

void IndicativeResponse::InternalSwap(IndicativeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.sell_available_flag_)
      + sizeof(IndicativeResponse::_impl_.sell_available_flag_)
      - PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.instrument_kind_)>(
          reinterpret_cast<char*>(&_impl_.instrument_kind_),
          reinterpret_cast<char*>(&other->_impl_.instrument_kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndicativeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[67]);
}

// ===================================================================

class CountryResponse::_Internal {
 public:
};

CountryResponse::CountryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CountryResponse)
}
CountryResponse::CountryResponse(const CountryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CountryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alfa_two_){}
    , decltype(_impl_.alfa_three_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_brief_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.alfa_two_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alfa_two_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alfa_two().empty()) {
    _this->_impl_.alfa_two_.Set(from._internal_alfa_two(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alfa_three_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alfa_three_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alfa_three().empty()) {
    _this->_impl_.alfa_three_.Set(from._internal_alfa_three(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_brief_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_brief_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name_brief().empty()) {
    _this->_impl_.name_brief_.Set(from._internal_name_brief(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CountryResponse)
}

inline void CountryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alfa_two_){}
    , decltype(_impl_.alfa_three_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_brief_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.alfa_two_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alfa_two_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alfa_three_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alfa_three_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_brief_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_brief_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CountryResponse::~CountryResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CountryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.alfa_two_.Destroy();
  _impl_.alfa_three_.Destroy();
  _impl_.name_.Destroy();
  _impl_.name_brief_.Destroy();
}

void CountryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CountryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alfa_two_.ClearToEmpty();
  _impl_.alfa_three_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.name_brief_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CountryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string alfa_two = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_alfa_two();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two"));
        } else
          goto handle_unusual;
        continue;
      // string alfa_three = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_alfa_three();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CountryResponse.name"));
        } else
          goto handle_unusual;
        continue;
      // string name_brief = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name_brief();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CountryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string alfa_two = 1;
  if (!this->_internal_alfa_two().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alfa_two().data(), static_cast<int>(this->_internal_alfa_two().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_alfa_two(), target);
  }

  // string alfa_three = 2;
  if (!this->_internal_alfa_three().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alfa_three().data(), static_cast<int>(this->_internal_alfa_three().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alfa_three(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CountryResponse.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_brief().data(), static_cast<int>(this->_internal_name_brief().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_brief(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  return target;
}

size_t CountryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alfa_two = 1;
  if (!this->_internal_alfa_two().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alfa_two());
  }

  // string alfa_three = 2;
  if (!this->_internal_alfa_three().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alfa_three());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string name_brief = 4;
  if (!this->_internal_name_brief().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_brief());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CountryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CountryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CountryResponse::GetClassData() const { return &_class_data_; }


void CountryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CountryResponse*>(&to_msg);
  auto& from = static_cast<const CountryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alfa_two().empty()) {
    _this->_internal_set_alfa_two(from._internal_alfa_two());
  }
  if (!from._internal_alfa_three().empty()) {
    _this->_internal_set_alfa_three(from._internal_alfa_three());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_name_brief().empty()) {
    _this->_internal_set_name_brief(from._internal_name_brief());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CountryResponse::CopyFrom(const CountryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CountryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryResponse::IsInitialized() const {
  return true;
}

void CountryResponse::InternalSwap(CountryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alfa_two_, lhs_arena,
      &other->_impl_.alfa_two_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alfa_three_, lhs_arena,
      &other->_impl_.alfa_three_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_brief_, lhs_arena,
      &other->_impl_.name_brief_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CountryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[68]);
}

// ===================================================================

class FindInstrumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FindInstrumentRequest>()._impl_._has_bits_);
  static void set_has_instrument_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_api_trade_available_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FindInstrumentRequest::FindInstrumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
}
FindInstrumentRequest::FindInstrumentRequest(const FindInstrumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindInstrumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){}
    , decltype(_impl_.instrument_kind_){}
    , decltype(_impl_.api_trade_available_flag_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.instrument_kind_, &from._impl_.instrument_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
    reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.api_trade_available_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
}

inline void FindInstrumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){}
    , decltype(_impl_.instrument_kind_){0}
    , decltype(_impl_.api_trade_available_flag_){false}
  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindInstrumentRequest::~FindInstrumentRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindInstrumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_.Destroy();
}

void FindInstrumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindInstrumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.instrument_kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
        reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.api_trade_available_flag_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindInstrumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query"));
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bool api_trade_available_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_api_trade_available_flag(&has_bits);
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindInstrumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
  if (_internal_has_instrument_kind()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_instrument_kind(), target);
  }

  // optional bool api_trade_available_flag = 3;
  if (_internal_has_api_trade_available_flag()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_api_trade_available_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  return target;
}

size_t FindInstrumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
    }

    // optional bool api_trade_available_flag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindInstrumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindInstrumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindInstrumentRequest::GetClassData() const { return &_class_data_; }


void FindInstrumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindInstrumentRequest*>(&to_msg);
  auto& from = static_cast<const FindInstrumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindInstrumentRequest::CopyFrom(const FindInstrumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindInstrumentRequest::IsInitialized() const {
  return true;
}

void FindInstrumentRequest::InternalSwap(FindInstrumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.api_trade_available_flag_)
      + sizeof(FindInstrumentRequest::_impl_.api_trade_available_flag_)
      - PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.instrument_kind_)>(
          reinterpret_cast<char*>(&_impl_.instrument_kind_),
          reinterpret_cast<char*>(&other->_impl_.instrument_kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindInstrumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[69]);
}

// ===================================================================

class FindInstrumentResponse::_Internal {
 public:
};

FindInstrumentResponse::FindInstrumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
}
FindInstrumentResponse::FindInstrumentResponse(const FindInstrumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindInstrumentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
}

inline void FindInstrumentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FindInstrumentResponse::~FindInstrumentResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindInstrumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void FindInstrumentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindInstrumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindInstrumentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindInstrumentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  return target;
}

size_t FindInstrumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindInstrumentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindInstrumentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindInstrumentResponse::GetClassData() const { return &_class_data_; }


void FindInstrumentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindInstrumentResponse*>(&to_msg);
  auto& from = static_cast<const FindInstrumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindInstrumentResponse::CopyFrom(const FindInstrumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindInstrumentResponse::IsInitialized() const {
  return true;
}

void FindInstrumentResponse::InternalSwap(FindInstrumentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindInstrumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[70]);
}

// ===================================================================

class InstrumentShort::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1min_candle_date(const InstrumentShort* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_1day_candle_date(const InstrumentShort* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InstrumentShort::_Internal::first_1min_candle_date(const InstrumentShort* msg) {
  return *msg->_impl_.first_1min_candle_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InstrumentShort::_Internal::first_1day_candle_date(const InstrumentShort* msg) {
  return *msg->_impl_.first_1day_candle_date_;
}
void InstrumentShort::clear_first_1min_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
}
void InstrumentShort::clear_first_1day_candle_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
}
InstrumentShort::InstrumentShort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
}
InstrumentShort::InstrumentShort(const InstrumentShort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentShort* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isin_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.instrument_kind_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.for_iis_flag_){}
    , decltype(_impl_.for_qual_investor_flag_){}
    , decltype(_impl_.weekend_flag_){}
    , decltype(_impl_.blocked_tca_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isin().empty()) {
    _this->_impl_.isin_.Set(from._internal_isin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_code().empty()) {
    _this->_impl_.class_code_.Set(from._internal_class_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_type().empty()) {
    _this->_impl_.instrument_type_.Set(from._internal_instrument_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_uid().empty()) {
    _this->_impl_.position_uid_.Set(from._internal_position_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_impl_.first_1min_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1min_candle_date_);
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_impl_.first_1day_candle_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.first_1day_candle_date_);
  }
  ::memcpy(&_impl_.instrument_kind_, &from._impl_.instrument_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
    reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.blocked_tca_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
}

inline void InstrumentShort::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isin_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.class_code_){}
    , decltype(_impl_.instrument_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.position_uid_){}
    , decltype(_impl_.first_1min_candle_date_){nullptr}
    , decltype(_impl_.first_1day_candle_date_){nullptr}
    , decltype(_impl_.instrument_kind_){0}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.for_iis_flag_){false}
    , decltype(_impl_.for_qual_investor_flag_){false}
    , decltype(_impl_.weekend_flag_){false}
    , decltype(_impl_.blocked_tca_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.isin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstrumentShort::~InstrumentShort() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentShort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.isin_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.class_code_.Destroy();
  _impl_.instrument_type_.Destroy();
  _impl_.name_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.position_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.first_1min_candle_date_;
  if (this != internal_default_instance()) delete _impl_.first_1day_candle_date_;
}

void InstrumentShort::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentShort::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isin_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.first_1min_candle_date_ != nullptr) {
    delete _impl_.first_1min_candle_date_;
  }
  _impl_.first_1min_candle_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.first_1day_candle_date_ != nullptr) {
    delete _impl_.first_1day_candle_date_;
  }
  _impl_.first_1day_candle_date_ = nullptr;
  ::memset(&_impl_.instrument_kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.blocked_tca_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentShort::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string isin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_isin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin"));
        } else
          goto handle_unusual;
        continue;
      // string figi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string class_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_class_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_instrument_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.name"));
        } else
          goto handle_unusual;
        continue;
      // string uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid"));
        } else
          goto handle_unusual;
        continue;
      // string position_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_position_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_kind(static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_iis_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.for_iis_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1min_candle_date = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1min_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_1day_candle_date = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_1day_candle_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool for_qual_investor_flag = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.for_qual_investor_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool weekend_flag = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.weekend_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocked_tca_flag = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.blocked_tca_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentShort::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_isin(), target);
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_figi(), target);
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticker(), target);
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_code().data(), static_cast<int>(this->_internal_class_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_class_code(), target);
  }

  // string instrument_type = 5;
  if (!this->_internal_instrument_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_type().data(), static_cast<int>(this->_internal_instrument_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_type(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string uid = 7;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_uid(), target);
  }

  // string position_uid = 8;
  if (!this->_internal_position_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_uid().data(), static_cast<int>(this->_internal_position_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_position_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_instrument_kind(), target);
  }

  // bool api_trade_available_flag = 11;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_api_trade_available_flag(), target);
  }

  // bool for_iis_flag = 12;
  if (this->_internal_for_iis_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_for_iis_flag(), target);
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 26;
  if (this->_internal_has_first_1min_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::first_1min_candle_date(this),
        _Internal::first_1min_candle_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 27;
  if (this->_internal_has_first_1day_candle_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::first_1day_candle_date(this),
        _Internal::first_1day_candle_date(this).GetCachedSize(), target, stream);
  }

  // bool for_qual_investor_flag = 28;
  if (this->_internal_for_qual_investor_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_for_qual_investor_flag(), target);
  }

  // bool weekend_flag = 29;
  if (this->_internal_weekend_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_weekend_flag(), target);
  }

  // bool blocked_tca_flag = 30;
  if (this->_internal_blocked_tca_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_blocked_tca_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  return target;
}

size_t InstrumentShort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string isin = 1;
  if (!this->_internal_isin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string figi = 2;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string class_code = 4;
  if (!this->_internal_class_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_code());
  }

  // string instrument_type = 5;
  if (!this->_internal_instrument_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_type());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uid = 7;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string position_uid = 8;
  if (!this->_internal_position_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_uid());
  }

  // .google.protobuf.Timestamp first_1min_candle_date = 26;
  if (this->_internal_has_first_1min_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1min_candle_date_);
  }

  // .google.protobuf.Timestamp first_1day_candle_date = 27;
  if (this->_internal_has_first_1day_candle_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_1day_candle_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  if (this->_internal_instrument_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_instrument_kind());
  }

  // bool api_trade_available_flag = 11;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool for_iis_flag = 12;
  if (this->_internal_for_iis_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool for_qual_investor_flag = 28;
  if (this->_internal_for_qual_investor_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool weekend_flag = 29;
  if (this->_internal_weekend_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool blocked_tca_flag = 30;
  if (this->_internal_blocked_tca_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentShort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentShort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentShort::GetClassData() const { return &_class_data_; }


void InstrumentShort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentShort*>(&to_msg);
  auto& from = static_cast<const InstrumentShort&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (from._internal_has_first_1min_candle_date()) {
    _this->_internal_mutable_first_1min_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1min_candle_date());
  }
  if (from._internal_has_first_1day_candle_date()) {
    _this->_internal_mutable_first_1day_candle_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_first_1day_candle_date());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_internal_set_instrument_kind(from._internal_instrument_kind());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_internal_set_for_iis_flag(from._internal_for_iis_flag());
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_internal_set_for_qual_investor_flag(from._internal_for_qual_investor_flag());
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_internal_set_weekend_flag(from._internal_weekend_flag());
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_internal_set_blocked_tca_flag(from._internal_blocked_tca_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentShort::CopyFrom(const InstrumentShort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentShort::IsInitialized() const {
  return true;
}

void InstrumentShort::InternalSwap(InstrumentShort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isin_, lhs_arena,
      &other->_impl_.isin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_code_, lhs_arena,
      &other->_impl_.class_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_type_, lhs_arena,
      &other->_impl_.instrument_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_uid_, lhs_arena,
      &other->_impl_.position_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.blocked_tca_flag_)
      + sizeof(InstrumentShort::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1min_candle_date_)>(
          reinterpret_cast<char*>(&_impl_.first_1min_candle_date_),
          reinterpret_cast<char*>(&other->_impl_.first_1min_candle_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentShort::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[71]);
}

// ===================================================================

class GetBrandsRequest::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Page& paging(const GetBrandsRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Page&
GetBrandsRequest::_Internal::paging(const GetBrandsRequest* msg) {
  return *msg->_impl_.paging_;
}
void GetBrandsRequest::clear_paging() {
  if (GetArenaForAllocation() == nullptr && _impl_.paging_ != nullptr) {
    delete _impl_.paging_;
  }
  _impl_.paging_ = nullptr;
}
GetBrandsRequest::GetBrandsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
}
GetBrandsRequest::GetBrandsRequest(const GetBrandsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBrandsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paging_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_paging()) {
    _this->_impl_.paging_ = new ::tinkoff::public_::invest::api::contract::v1::Page(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
}

inline void GetBrandsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paging_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBrandsRequest::~GetBrandsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBrandsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetBrandsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBrandsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.paging_ != nullptr) {
    delete _impl_.paging_;
  }
  _impl_.paging_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBrandsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBrandsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  if (this->_internal_has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  return target;
}

size_t GetBrandsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  if (this->_internal_has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBrandsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBrandsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBrandsRequest::GetClassData() const { return &_class_data_; }


void GetBrandsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBrandsRequest*>(&to_msg);
  auto& from = static_cast<const GetBrandsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_paging()) {
    _this->_internal_mutable_paging()->::tinkoff::public_::invest::api::contract::v1::Page::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandsRequest::CopyFrom(const GetBrandsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrandsRequest::IsInitialized() const {
  return true;
}

void GetBrandsRequest::InternalSwap(GetBrandsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBrandsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[72]);
}

// ===================================================================

class GetBrandRequest::_Internal {
 public:
};

GetBrandRequest::GetBrandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
}
GetBrandRequest::GetBrandRequest(const GetBrandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBrandRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
}

inline void GetBrandRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBrandRequest::~GetBrandRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBrandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GetBrandRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBrandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBrandRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBrandRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  return target;
}

size_t GetBrandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBrandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBrandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBrandRequest::GetClassData() const { return &_class_data_; }


void GetBrandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBrandRequest*>(&to_msg);
  auto& from = static_cast<const GetBrandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandRequest::CopyFrom(const GetBrandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrandRequest::IsInitialized() const {
  return true;
}

void GetBrandRequest::InternalSwap(GetBrandRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBrandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[73]);
}

// ===================================================================

class GetBrandsResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::PageResponse& paging(const GetBrandsResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::PageResponse&
GetBrandsResponse::_Internal::paging(const GetBrandsResponse* msg) {
  return *msg->_impl_.paging_;
}
void GetBrandsResponse::clear_paging() {
  if (GetArenaForAllocation() == nullptr && _impl_.paging_ != nullptr) {
    delete _impl_.paging_;
  }
  _impl_.paging_ = nullptr;
}
GetBrandsResponse::GetBrandsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
}
GetBrandsResponse::GetBrandsResponse(const GetBrandsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBrandsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brands_){from._impl_.brands_}
    , decltype(_impl_.paging_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_paging()) {
    _this->_impl_.paging_ = new ::tinkoff::public_::invest::api::contract::v1::PageResponse(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
}

inline void GetBrandsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brands_){arena}
    , decltype(_impl_.paging_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBrandsResponse::~GetBrandsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBrandsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.brands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetBrandsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBrandsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brands_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.paging_ != nullptr) {
    delete _impl_.paging_;
  }
  _impl_.paging_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBrandsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_brands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBrandsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_brands_size()); i < n; i++) {
    const auto& repfield = this->_internal_brands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
  if (this->_internal_has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  return target;
}

size_t GetBrandsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
  total_size += 1UL * this->_internal_brands_size();
  for (const auto& msg : this->_impl_.brands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
  if (this->_internal_has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBrandsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBrandsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBrandsResponse::GetClassData() const { return &_class_data_; }


void GetBrandsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBrandsResponse*>(&to_msg);
  auto& from = static_cast<const GetBrandsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.brands_.MergeFrom(from._impl_.brands_);
  if (from._internal_has_paging()) {
    _this->_internal_mutable_paging()->::tinkoff::public_::invest::api::contract::v1::PageResponse::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandsResponse::CopyFrom(const GetBrandsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrandsResponse::IsInitialized() const {
  return true;
}

void GetBrandsResponse::InternalSwap(GetBrandsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.brands_.InternalSwap(&other->_impl_.brands_);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBrandsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[74]);
}

// ===================================================================

class GetAssetFundamentalsRequest::_Internal {
 public:
};

GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
}
GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(const GetAssetFundamentalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetFundamentalsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.assets_){from._impl_.assets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
}

inline void GetAssetFundamentalsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.assets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAssetFundamentalsRequest::~GetAssetFundamentalsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetFundamentalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assets_.~RepeatedPtrField();
}

void GetAssetFundamentalsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetFundamentalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetFundamentalsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_assets();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssetFundamentalsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
  for (int i = 0, n = this->_internal_assets_size(); i < n; i++) {
    const auto& s = this->_internal_assets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  return target;
}

size_t GetAssetFundamentalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.assets_.size());
  for (int i = 0, n = _impl_.assets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.assets_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetFundamentalsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetFundamentalsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetFundamentalsRequest::GetClassData() const { return &_class_data_; }


void GetAssetFundamentalsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assets_.MergeFrom(from._impl_.assets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsRequest::CopyFrom(const GetAssetFundamentalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetFundamentalsRequest::IsInitialized() const {
  return true;
}

void GetAssetFundamentalsRequest::InternalSwap(GetAssetFundamentalsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assets_.InternalSwap(&other->_impl_.assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetFundamentalsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[75]);
}

// ===================================================================

class GetAssetFundamentalsResponse_StatisticResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ex_dividend_date(const GetAssetFundamentalsResponse_StatisticResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& fiscal_period_start_date(const GetAssetFundamentalsResponse_StatisticResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& fiscal_period_end_date(const GetAssetFundamentalsResponse_StatisticResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAssetFundamentalsResponse_StatisticResponse::_Internal::ex_dividend_date(const GetAssetFundamentalsResponse_StatisticResponse* msg) {
  return *msg->_impl_.ex_dividend_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAssetFundamentalsResponse_StatisticResponse::_Internal::fiscal_period_start_date(const GetAssetFundamentalsResponse_StatisticResponse* msg) {
  return *msg->_impl_.fiscal_period_start_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAssetFundamentalsResponse_StatisticResponse::_Internal::fiscal_period_end_date(const GetAssetFundamentalsResponse_StatisticResponse* msg) {
  return *msg->_impl_.fiscal_period_end_date_;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_ex_dividend_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.ex_dividend_date_ != nullptr) {
    delete _impl_.ex_dividend_date_;
  }
  _impl_.ex_dividend_date_ = nullptr;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_fiscal_period_start_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.fiscal_period_start_date_ != nullptr) {
    delete _impl_.fiscal_period_start_date_;
  }
  _impl_.fiscal_period_start_date_ = nullptr;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_fiscal_period_end_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.fiscal_period_end_date_ != nullptr) {
    delete _impl_.fiscal_period_end_date_;
  }
  _impl_.fiscal_period_end_date_ = nullptr;
}
GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
}
GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(const GetAssetFundamentalsResponse_StatisticResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetFundamentalsResponse_StatisticResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_uid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.domicile_indicator_code_){}
    , decltype(_impl_.ex_dividend_date_){nullptr}
    , decltype(_impl_.fiscal_period_start_date_){nullptr}
    , decltype(_impl_.fiscal_period_end_date_){nullptr}
    , decltype(_impl_.market_capitalization_){}
    , decltype(_impl_.high_price_last_52_weeks_){}
    , decltype(_impl_.low_price_last_52_weeks_){}
    , decltype(_impl_.average_daily_volume_last_10_days_){}
    , decltype(_impl_.average_daily_volume_last_4_weeks_){}
    , decltype(_impl_.beta_){}
    , decltype(_impl_.free_float_){}
    , decltype(_impl_.forward_annual_dividend_yield_){}
    , decltype(_impl_.shares_outstanding_){}
    , decltype(_impl_.revenue_ttm_){}
    , decltype(_impl_.ebitda_ttm_){}
    , decltype(_impl_.net_income_ttm_){}
    , decltype(_impl_.eps_ttm_){}
    , decltype(_impl_.diluted_eps_ttm_){}
    , decltype(_impl_.free_cash_flow_ttm_){}
    , decltype(_impl_.five_year_annual_revenue_growth_rate_){}
    , decltype(_impl_.three_year_annual_revenue_growth_rate_){}
    , decltype(_impl_.pe_ratio_ttm_){}
    , decltype(_impl_.price_to_sales_ttm_){}
    , decltype(_impl_.price_to_book_ttm_){}
    , decltype(_impl_.price_to_free_cash_flow_ttm_){}
    , decltype(_impl_.total_enterprise_value_mrq_){}
    , decltype(_impl_.ev_to_ebitda_mrq_){}
    , decltype(_impl_.net_margin_mrq_){}
    , decltype(_impl_.net_interest_margin_mrq_){}
    , decltype(_impl_.roe_){}
    , decltype(_impl_.roa_){}
    , decltype(_impl_.roic_){}
    , decltype(_impl_.total_debt_mrq_){}
    , decltype(_impl_.total_debt_to_equity_mrq_){}
    , decltype(_impl_.total_debt_to_ebitda_mrq_){}
    , decltype(_impl_.free_cash_flow_to_price_){}
    , decltype(_impl_.net_debt_to_ebitda_){}
    , decltype(_impl_.current_ratio_mrq_){}
    , decltype(_impl_.fixed_charge_coverage_ratio_fy_){}
    , decltype(_impl_.dividend_yield_daily_ttm_){}
    , decltype(_impl_.dividend_rate_ttm_){}
    , decltype(_impl_.dividends_per_share_){}
    , decltype(_impl_.five_years_average_dividend_yield_){}
    , decltype(_impl_.five_year_annual_dividend_growth_rate_){}
    , decltype(_impl_.dividend_payout_ratio_fy_){}
    , decltype(_impl_.buy_back_ttm_){}
    , decltype(_impl_.one_year_annual_revenue_growth_rate_){}
    , decltype(_impl_.adr_to_common_share_ratio_){}
    , decltype(_impl_.number_of_employees_){}
    , decltype(_impl_.revenue_change_five_years_){}
    , decltype(_impl_.eps_change_five_years_){}
    , decltype(_impl_.ebitda_change_five_years_){}
    , decltype(_impl_.total_debt_change_five_years_){}
    , decltype(_impl_.ev_to_sales_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domicile_indicator_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domicile_indicator_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domicile_indicator_code().empty()) {
    _this->_impl_.domicile_indicator_code_.Set(from._internal_domicile_indicator_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ex_dividend_date()) {
    _this->_impl_.ex_dividend_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ex_dividend_date_);
  }
  if (from._internal_has_fiscal_period_start_date()) {
    _this->_impl_.fiscal_period_start_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.fiscal_period_start_date_);
  }
  if (from._internal_has_fiscal_period_end_date()) {
    _this->_impl_.fiscal_period_end_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.fiscal_period_end_date_);
  }
  ::memcpy(&_impl_.market_capitalization_, &from._impl_.market_capitalization_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ev_to_sales_) -
    reinterpret_cast<char*>(&_impl_.market_capitalization_)) + sizeof(_impl_.ev_to_sales_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
}

inline void GetAssetFundamentalsResponse_StatisticResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_uid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.domicile_indicator_code_){}
    , decltype(_impl_.ex_dividend_date_){nullptr}
    , decltype(_impl_.fiscal_period_start_date_){nullptr}
    , decltype(_impl_.fiscal_period_end_date_){nullptr}
    , decltype(_impl_.market_capitalization_){0}
    , decltype(_impl_.high_price_last_52_weeks_){0}
    , decltype(_impl_.low_price_last_52_weeks_){0}
    , decltype(_impl_.average_daily_volume_last_10_days_){0}
    , decltype(_impl_.average_daily_volume_last_4_weeks_){0}
    , decltype(_impl_.beta_){0}
    , decltype(_impl_.free_float_){0}
    , decltype(_impl_.forward_annual_dividend_yield_){0}
    , decltype(_impl_.shares_outstanding_){0}
    , decltype(_impl_.revenue_ttm_){0}
    , decltype(_impl_.ebitda_ttm_){0}
    , decltype(_impl_.net_income_ttm_){0}
    , decltype(_impl_.eps_ttm_){0}
    , decltype(_impl_.diluted_eps_ttm_){0}
    , decltype(_impl_.free_cash_flow_ttm_){0}
    , decltype(_impl_.five_year_annual_revenue_growth_rate_){0}
    , decltype(_impl_.three_year_annual_revenue_growth_rate_){0}
    , decltype(_impl_.pe_ratio_ttm_){0}
    , decltype(_impl_.price_to_sales_ttm_){0}
    , decltype(_impl_.price_to_book_ttm_){0}
    , decltype(_impl_.price_to_free_cash_flow_ttm_){0}
    , decltype(_impl_.total_enterprise_value_mrq_){0}
    , decltype(_impl_.ev_to_ebitda_mrq_){0}
    , decltype(_impl_.net_margin_mrq_){0}
    , decltype(_impl_.net_interest_margin_mrq_){0}
    , decltype(_impl_.roe_){0}
    , decltype(_impl_.roa_){0}
    , decltype(_impl_.roic_){0}
    , decltype(_impl_.total_debt_mrq_){0}
    , decltype(_impl_.total_debt_to_equity_mrq_){0}
    , decltype(_impl_.total_debt_to_ebitda_mrq_){0}
    , decltype(_impl_.free_cash_flow_to_price_){0}
    , decltype(_impl_.net_debt_to_ebitda_){0}
    , decltype(_impl_.current_ratio_mrq_){0}
    , decltype(_impl_.fixed_charge_coverage_ratio_fy_){0}
    , decltype(_impl_.dividend_yield_daily_ttm_){0}
    , decltype(_impl_.dividend_rate_ttm_){0}
    , decltype(_impl_.dividends_per_share_){0}
    , decltype(_impl_.five_years_average_dividend_yield_){0}
    , decltype(_impl_.five_year_annual_dividend_growth_rate_){0}
    , decltype(_impl_.dividend_payout_ratio_fy_){0}
    , decltype(_impl_.buy_back_ttm_){0}
    , decltype(_impl_.one_year_annual_revenue_growth_rate_){0}
    , decltype(_impl_.adr_to_common_share_ratio_){0}
    , decltype(_impl_.number_of_employees_){0}
    , decltype(_impl_.revenue_change_five_years_){0}
    , decltype(_impl_.eps_change_five_years_){0}
    , decltype(_impl_.ebitda_change_five_years_){0}
    , decltype(_impl_.total_debt_change_five_years_){0}
    , decltype(_impl_.ev_to_sales_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domicile_indicator_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domicile_indicator_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAssetFundamentalsResponse_StatisticResponse::~GetAssetFundamentalsResponse_StatisticResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetFundamentalsResponse_StatisticResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_uid_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.domicile_indicator_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ex_dividend_date_;
  if (this != internal_default_instance()) delete _impl_.fiscal_period_start_date_;
  if (this != internal_default_instance()) delete _impl_.fiscal_period_end_date_;
}

void GetAssetFundamentalsResponse_StatisticResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetFundamentalsResponse_StatisticResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_uid_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.domicile_indicator_code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ex_dividend_date_ != nullptr) {
    delete _impl_.ex_dividend_date_;
  }
  _impl_.ex_dividend_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fiscal_period_start_date_ != nullptr) {
    delete _impl_.fiscal_period_start_date_;
  }
  _impl_.fiscal_period_start_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fiscal_period_end_date_ != nullptr) {
    delete _impl_.fiscal_period_end_date_;
  }
  _impl_.fiscal_period_end_date_ = nullptr;
  ::memset(&_impl_.market_capitalization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ev_to_sales_) -
      reinterpret_cast<char*>(&_impl_.market_capitalization_)) + sizeof(_impl_.ev_to_sales_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetFundamentalsResponse_StatisticResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // string currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency"));
        } else
          goto handle_unusual;
        continue;
      // double market_capitalization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.market_capitalization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double high_price_last_52_weeks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.high_price_last_52_weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double low_price_last_52_weeks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.low_price_last_52_weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double average_daily_volume_last_10_days = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.average_daily_volume_last_10_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double average_daily_volume_last_4_weeks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.average_daily_volume_last_4_weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double beta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double free_float = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.free_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_annual_dividend_yield = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.forward_annual_dividend_yield_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double shares_outstanding = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.shares_outstanding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double revenue_ttm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.revenue_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ebitda_ttm = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.ebitda_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double net_income_ttm = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.net_income_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eps_ttm = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.eps_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double diluted_eps_ttm = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.diluted_eps_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double free_cash_flow_ttm = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.free_cash_flow_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double five_year_annual_revenue_growth_rate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.five_year_annual_revenue_growth_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double three_year_annual_revenue_growth_rate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.three_year_annual_revenue_growth_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pe_ratio_ttm = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.pe_ratio_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double price_to_sales_ttm = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.price_to_sales_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double price_to_book_ttm = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.price_to_book_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double price_to_free_cash_flow_ttm = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.price_to_free_cash_flow_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_enterprise_value_mrq = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.total_enterprise_value_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ev_to_ebitda_mrq = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.ev_to_ebitda_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double net_margin_mrq = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.net_margin_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double net_interest_margin_mrq = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.net_interest_margin_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roe = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.roe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roa = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.roa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roic = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _impl_.roic_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_debt_mrq = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.total_debt_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_debt_to_equity_mrq = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.total_debt_to_equity_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_debt_to_ebitda_mrq = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.total_debt_to_ebitda_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double free_cash_flow_to_price = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.free_cash_flow_to_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double net_debt_to_ebitda = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.net_debt_to_ebitda_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_ratio_mrq = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.current_ratio_mrq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fixed_charge_coverage_ratio_fy = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.fixed_charge_coverage_ratio_fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dividend_yield_daily_ttm = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.dividend_yield_daily_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dividend_rate_ttm = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.dividend_rate_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dividends_per_share = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.dividends_per_share_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double five_years_average_dividend_yield = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.five_years_average_dividend_yield_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double five_year_annual_dividend_growth_rate = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.five_year_annual_dividend_growth_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dividend_payout_ratio_fy = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.dividend_payout_ratio_fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double buy_back_ttm = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.buy_back_ttm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double one_year_annual_revenue_growth_rate = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.one_year_annual_revenue_growth_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string domicile_indicator_code = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_domicile_indicator_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code"));
        } else
          goto handle_unusual;
        continue;
      // double adr_to_common_share_ratio = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.adr_to_common_share_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double number_of_employees = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.number_of_employees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ex_dividend_date = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex_dividend_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp fiscal_period_start_date = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_fiscal_period_start_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp fiscal_period_end_date = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_fiscal_period_end_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double revenue_change_five_years = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.revenue_change_five_years_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eps_change_five_years = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.eps_change_five_years_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ebitda_change_five_years = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.ebitda_change_five_years_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_debt_change_five_years = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.total_debt_change_five_years_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ev_to_sales = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.ev_to_sales_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssetFundamentalsResponse_StatisticResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_uid = 1;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_uid(), target);
  }

  // string currency = 2;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency(), target);
  }

  // double market_capitalization = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_market_capitalization = this->_internal_market_capitalization();
  uint64_t raw_market_capitalization;
  memcpy(&raw_market_capitalization, &tmp_market_capitalization, sizeof(tmp_market_capitalization));
  if (raw_market_capitalization != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_market_capitalization(), target);
  }

  // double high_price_last_52_weeks = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high_price_last_52_weeks = this->_internal_high_price_last_52_weeks();
  uint64_t raw_high_price_last_52_weeks;
  memcpy(&raw_high_price_last_52_weeks, &tmp_high_price_last_52_weeks, sizeof(tmp_high_price_last_52_weeks));
  if (raw_high_price_last_52_weeks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_high_price_last_52_weeks(), target);
  }

  // double low_price_last_52_weeks = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low_price_last_52_weeks = this->_internal_low_price_last_52_weeks();
  uint64_t raw_low_price_last_52_weeks;
  memcpy(&raw_low_price_last_52_weeks, &tmp_low_price_last_52_weeks, sizeof(tmp_low_price_last_52_weeks));
  if (raw_low_price_last_52_weeks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_low_price_last_52_weeks(), target);
  }

  // double average_daily_volume_last_10_days = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_10_days = this->_internal_average_daily_volume_last_10_days();
  uint64_t raw_average_daily_volume_last_10_days;
  memcpy(&raw_average_daily_volume_last_10_days, &tmp_average_daily_volume_last_10_days, sizeof(tmp_average_daily_volume_last_10_days));
  if (raw_average_daily_volume_last_10_days != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_average_daily_volume_last_10_days(), target);
  }

  // double average_daily_volume_last_4_weeks = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_4_weeks = this->_internal_average_daily_volume_last_4_weeks();
  uint64_t raw_average_daily_volume_last_4_weeks;
  memcpy(&raw_average_daily_volume_last_4_weeks, &tmp_average_daily_volume_last_4_weeks, sizeof(tmp_average_daily_volume_last_4_weeks));
  if (raw_average_daily_volume_last_4_weeks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_average_daily_volume_last_4_weeks(), target);
  }

  // double beta = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beta = this->_internal_beta();
  uint64_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_beta(), target);
  }

  // double free_float = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_float = this->_internal_free_float();
  uint64_t raw_free_float;
  memcpy(&raw_free_float, &tmp_free_float, sizeof(tmp_free_float));
  if (raw_free_float != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_free_float(), target);
  }

  // double forward_annual_dividend_yield = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_annual_dividend_yield = this->_internal_forward_annual_dividend_yield();
  uint64_t raw_forward_annual_dividend_yield;
  memcpy(&raw_forward_annual_dividend_yield, &tmp_forward_annual_dividend_yield, sizeof(tmp_forward_annual_dividend_yield));
  if (raw_forward_annual_dividend_yield != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_forward_annual_dividend_yield(), target);
  }

  // double shares_outstanding = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shares_outstanding = this->_internal_shares_outstanding();
  uint64_t raw_shares_outstanding;
  memcpy(&raw_shares_outstanding, &tmp_shares_outstanding, sizeof(tmp_shares_outstanding));
  if (raw_shares_outstanding != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_shares_outstanding(), target);
  }

  // double revenue_ttm = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_revenue_ttm = this->_internal_revenue_ttm();
  uint64_t raw_revenue_ttm;
  memcpy(&raw_revenue_ttm, &tmp_revenue_ttm, sizeof(tmp_revenue_ttm));
  if (raw_revenue_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_revenue_ttm(), target);
  }

  // double ebitda_ttm = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ebitda_ttm = this->_internal_ebitda_ttm();
  uint64_t raw_ebitda_ttm;
  memcpy(&raw_ebitda_ttm, &tmp_ebitda_ttm, sizeof(tmp_ebitda_ttm));
  if (raw_ebitda_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_ebitda_ttm(), target);
  }

  // double net_income_ttm = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_income_ttm = this->_internal_net_income_ttm();
  uint64_t raw_net_income_ttm;
  memcpy(&raw_net_income_ttm, &tmp_net_income_ttm, sizeof(tmp_net_income_ttm));
  if (raw_net_income_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_net_income_ttm(), target);
  }

  // double eps_ttm = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps_ttm = this->_internal_eps_ttm();
  uint64_t raw_eps_ttm;
  memcpy(&raw_eps_ttm, &tmp_eps_ttm, sizeof(tmp_eps_ttm));
  if (raw_eps_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_eps_ttm(), target);
  }

  // double diluted_eps_ttm = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diluted_eps_ttm = this->_internal_diluted_eps_ttm();
  uint64_t raw_diluted_eps_ttm;
  memcpy(&raw_diluted_eps_ttm, &tmp_diluted_eps_ttm, sizeof(tmp_diluted_eps_ttm));
  if (raw_diluted_eps_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_diluted_eps_ttm(), target);
  }

  // double free_cash_flow_ttm = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_cash_flow_ttm = this->_internal_free_cash_flow_ttm();
  uint64_t raw_free_cash_flow_ttm;
  memcpy(&raw_free_cash_flow_ttm, &tmp_free_cash_flow_ttm, sizeof(tmp_free_cash_flow_ttm));
  if (raw_free_cash_flow_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_free_cash_flow_ttm(), target);
  }

  // double five_year_annual_revenue_growth_rate = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_year_annual_revenue_growth_rate = this->_internal_five_year_annual_revenue_growth_rate();
  uint64_t raw_five_year_annual_revenue_growth_rate;
  memcpy(&raw_five_year_annual_revenue_growth_rate, &tmp_five_year_annual_revenue_growth_rate, sizeof(tmp_five_year_annual_revenue_growth_rate));
  if (raw_five_year_annual_revenue_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_five_year_annual_revenue_growth_rate(), target);
  }

  // double three_year_annual_revenue_growth_rate = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_three_year_annual_revenue_growth_rate = this->_internal_three_year_annual_revenue_growth_rate();
  uint64_t raw_three_year_annual_revenue_growth_rate;
  memcpy(&raw_three_year_annual_revenue_growth_rate, &tmp_three_year_annual_revenue_growth_rate, sizeof(tmp_three_year_annual_revenue_growth_rate));
  if (raw_three_year_annual_revenue_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_three_year_annual_revenue_growth_rate(), target);
  }

  // double pe_ratio_ttm = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pe_ratio_ttm = this->_internal_pe_ratio_ttm();
  uint64_t raw_pe_ratio_ttm;
  memcpy(&raw_pe_ratio_ttm, &tmp_pe_ratio_ttm, sizeof(tmp_pe_ratio_ttm));
  if (raw_pe_ratio_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_pe_ratio_ttm(), target);
  }

  // double price_to_sales_ttm = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_sales_ttm = this->_internal_price_to_sales_ttm();
  uint64_t raw_price_to_sales_ttm;
  memcpy(&raw_price_to_sales_ttm, &tmp_price_to_sales_ttm, sizeof(tmp_price_to_sales_ttm));
  if (raw_price_to_sales_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_price_to_sales_ttm(), target);
  }

  // double price_to_book_ttm = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_book_ttm = this->_internal_price_to_book_ttm();
  uint64_t raw_price_to_book_ttm;
  memcpy(&raw_price_to_book_ttm, &tmp_price_to_book_ttm, sizeof(tmp_price_to_book_ttm));
  if (raw_price_to_book_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_price_to_book_ttm(), target);
  }

  // double price_to_free_cash_flow_ttm = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_free_cash_flow_ttm = this->_internal_price_to_free_cash_flow_ttm();
  uint64_t raw_price_to_free_cash_flow_ttm;
  memcpy(&raw_price_to_free_cash_flow_ttm, &tmp_price_to_free_cash_flow_ttm, sizeof(tmp_price_to_free_cash_flow_ttm));
  if (raw_price_to_free_cash_flow_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_price_to_free_cash_flow_ttm(), target);
  }

  // double total_enterprise_value_mrq = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_enterprise_value_mrq = this->_internal_total_enterprise_value_mrq();
  uint64_t raw_total_enterprise_value_mrq;
  memcpy(&raw_total_enterprise_value_mrq, &tmp_total_enterprise_value_mrq, sizeof(tmp_total_enterprise_value_mrq));
  if (raw_total_enterprise_value_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_total_enterprise_value_mrq(), target);
  }

  // double ev_to_ebitda_mrq = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ev_to_ebitda_mrq = this->_internal_ev_to_ebitda_mrq();
  uint64_t raw_ev_to_ebitda_mrq;
  memcpy(&raw_ev_to_ebitda_mrq, &tmp_ev_to_ebitda_mrq, sizeof(tmp_ev_to_ebitda_mrq));
  if (raw_ev_to_ebitda_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_ev_to_ebitda_mrq(), target);
  }

  // double net_margin_mrq = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_margin_mrq = this->_internal_net_margin_mrq();
  uint64_t raw_net_margin_mrq;
  memcpy(&raw_net_margin_mrq, &tmp_net_margin_mrq, sizeof(tmp_net_margin_mrq));
  if (raw_net_margin_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_net_margin_mrq(), target);
  }

  // double net_interest_margin_mrq = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_interest_margin_mrq = this->_internal_net_interest_margin_mrq();
  uint64_t raw_net_interest_margin_mrq;
  memcpy(&raw_net_interest_margin_mrq, &tmp_net_interest_margin_mrq, sizeof(tmp_net_interest_margin_mrq));
  if (raw_net_interest_margin_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_net_interest_margin_mrq(), target);
  }

  // double roe = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roe = this->_internal_roe();
  uint64_t raw_roe;
  memcpy(&raw_roe, &tmp_roe, sizeof(tmp_roe));
  if (raw_roe != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_roe(), target);
  }

  // double roa = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roa = this->_internal_roa();
  uint64_t raw_roa;
  memcpy(&raw_roa, &tmp_roa, sizeof(tmp_roa));
  if (raw_roa != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_roa(), target);
  }

  // double roic = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roic = this->_internal_roic();
  uint64_t raw_roic;
  memcpy(&raw_roic, &tmp_roic, sizeof(tmp_roic));
  if (raw_roic != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_roic(), target);
  }

  // double total_debt_mrq = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_mrq = this->_internal_total_debt_mrq();
  uint64_t raw_total_debt_mrq;
  memcpy(&raw_total_debt_mrq, &tmp_total_debt_mrq, sizeof(tmp_total_debt_mrq));
  if (raw_total_debt_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_total_debt_mrq(), target);
  }

  // double total_debt_to_equity_mrq = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_to_equity_mrq = this->_internal_total_debt_to_equity_mrq();
  uint64_t raw_total_debt_to_equity_mrq;
  memcpy(&raw_total_debt_to_equity_mrq, &tmp_total_debt_to_equity_mrq, sizeof(tmp_total_debt_to_equity_mrq));
  if (raw_total_debt_to_equity_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_total_debt_to_equity_mrq(), target);
  }

  // double total_debt_to_ebitda_mrq = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_to_ebitda_mrq = this->_internal_total_debt_to_ebitda_mrq();
  uint64_t raw_total_debt_to_ebitda_mrq;
  memcpy(&raw_total_debt_to_ebitda_mrq, &tmp_total_debt_to_ebitda_mrq, sizeof(tmp_total_debt_to_ebitda_mrq));
  if (raw_total_debt_to_ebitda_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_total_debt_to_ebitda_mrq(), target);
  }

  // double free_cash_flow_to_price = 34;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_cash_flow_to_price = this->_internal_free_cash_flow_to_price();
  uint64_t raw_free_cash_flow_to_price;
  memcpy(&raw_free_cash_flow_to_price, &tmp_free_cash_flow_to_price, sizeof(tmp_free_cash_flow_to_price));
  if (raw_free_cash_flow_to_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_free_cash_flow_to_price(), target);
  }

  // double net_debt_to_ebitda = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_debt_to_ebitda = this->_internal_net_debt_to_ebitda();
  uint64_t raw_net_debt_to_ebitda;
  memcpy(&raw_net_debt_to_ebitda, &tmp_net_debt_to_ebitda, sizeof(tmp_net_debt_to_ebitda));
  if (raw_net_debt_to_ebitda != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_net_debt_to_ebitda(), target);
  }

  // double current_ratio_mrq = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ratio_mrq = this->_internal_current_ratio_mrq();
  uint64_t raw_current_ratio_mrq;
  memcpy(&raw_current_ratio_mrq, &tmp_current_ratio_mrq, sizeof(tmp_current_ratio_mrq));
  if (raw_current_ratio_mrq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(36, this->_internal_current_ratio_mrq(), target);
  }

  // double fixed_charge_coverage_ratio_fy = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_charge_coverage_ratio_fy = this->_internal_fixed_charge_coverage_ratio_fy();
  uint64_t raw_fixed_charge_coverage_ratio_fy;
  memcpy(&raw_fixed_charge_coverage_ratio_fy, &tmp_fixed_charge_coverage_ratio_fy, sizeof(tmp_fixed_charge_coverage_ratio_fy));
  if (raw_fixed_charge_coverage_ratio_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(37, this->_internal_fixed_charge_coverage_ratio_fy(), target);
  }

  // double dividend_yield_daily_ttm = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_yield_daily_ttm = this->_internal_dividend_yield_daily_ttm();
  uint64_t raw_dividend_yield_daily_ttm;
  memcpy(&raw_dividend_yield_daily_ttm, &tmp_dividend_yield_daily_ttm, sizeof(tmp_dividend_yield_daily_ttm));
  if (raw_dividend_yield_daily_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(38, this->_internal_dividend_yield_daily_ttm(), target);
  }

  // double dividend_rate_ttm = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_rate_ttm = this->_internal_dividend_rate_ttm();
  uint64_t raw_dividend_rate_ttm;
  memcpy(&raw_dividend_rate_ttm, &tmp_dividend_rate_ttm, sizeof(tmp_dividend_rate_ttm));
  if (raw_dividend_rate_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(39, this->_internal_dividend_rate_ttm(), target);
  }

  // double dividends_per_share = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividends_per_share = this->_internal_dividends_per_share();
  uint64_t raw_dividends_per_share;
  memcpy(&raw_dividends_per_share, &tmp_dividends_per_share, sizeof(tmp_dividends_per_share));
  if (raw_dividends_per_share != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(40, this->_internal_dividends_per_share(), target);
  }

  // double five_years_average_dividend_yield = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_years_average_dividend_yield = this->_internal_five_years_average_dividend_yield();
  uint64_t raw_five_years_average_dividend_yield;
  memcpy(&raw_five_years_average_dividend_yield, &tmp_five_years_average_dividend_yield, sizeof(tmp_five_years_average_dividend_yield));
  if (raw_five_years_average_dividend_yield != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(41, this->_internal_five_years_average_dividend_yield(), target);
  }

  // double five_year_annual_dividend_growth_rate = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_year_annual_dividend_growth_rate = this->_internal_five_year_annual_dividend_growth_rate();
  uint64_t raw_five_year_annual_dividend_growth_rate;
  memcpy(&raw_five_year_annual_dividend_growth_rate, &tmp_five_year_annual_dividend_growth_rate, sizeof(tmp_five_year_annual_dividend_growth_rate));
  if (raw_five_year_annual_dividend_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_five_year_annual_dividend_growth_rate(), target);
  }

  // double dividend_payout_ratio_fy = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_payout_ratio_fy = this->_internal_dividend_payout_ratio_fy();
  uint64_t raw_dividend_payout_ratio_fy;
  memcpy(&raw_dividend_payout_ratio_fy, &tmp_dividend_payout_ratio_fy, sizeof(tmp_dividend_payout_ratio_fy));
  if (raw_dividend_payout_ratio_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(43, this->_internal_dividend_payout_ratio_fy(), target);
  }

  // double buy_back_ttm = 44;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_buy_back_ttm = this->_internal_buy_back_ttm();
  uint64_t raw_buy_back_ttm;
  memcpy(&raw_buy_back_ttm, &tmp_buy_back_ttm, sizeof(tmp_buy_back_ttm));
  if (raw_buy_back_ttm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(44, this->_internal_buy_back_ttm(), target);
  }

  // double one_year_annual_revenue_growth_rate = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_one_year_annual_revenue_growth_rate = this->_internal_one_year_annual_revenue_growth_rate();
  uint64_t raw_one_year_annual_revenue_growth_rate;
  memcpy(&raw_one_year_annual_revenue_growth_rate, &tmp_one_year_annual_revenue_growth_rate, sizeof(tmp_one_year_annual_revenue_growth_rate));
  if (raw_one_year_annual_revenue_growth_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(45, this->_internal_one_year_annual_revenue_growth_rate(), target);
  }

  // string domicile_indicator_code = 46;
  if (!this->_internal_domicile_indicator_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domicile_indicator_code().data(), static_cast<int>(this->_internal_domicile_indicator_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_domicile_indicator_code(), target);
  }

  // double adr_to_common_share_ratio = 47;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adr_to_common_share_ratio = this->_internal_adr_to_common_share_ratio();
  uint64_t raw_adr_to_common_share_ratio;
  memcpy(&raw_adr_to_common_share_ratio, &tmp_adr_to_common_share_ratio, sizeof(tmp_adr_to_common_share_ratio));
  if (raw_adr_to_common_share_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(47, this->_internal_adr_to_common_share_ratio(), target);
  }

  // double number_of_employees = 48;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number_of_employees = this->_internal_number_of_employees();
  uint64_t raw_number_of_employees;
  memcpy(&raw_number_of_employees, &tmp_number_of_employees, sizeof(tmp_number_of_employees));
  if (raw_number_of_employees != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(48, this->_internal_number_of_employees(), target);
  }

  // .google.protobuf.Timestamp ex_dividend_date = 49;
  if (this->_internal_has_ex_dividend_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::ex_dividend_date(this),
        _Internal::ex_dividend_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp fiscal_period_start_date = 50;
  if (this->_internal_has_fiscal_period_start_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::fiscal_period_start_date(this),
        _Internal::fiscal_period_start_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp fiscal_period_end_date = 51;
  if (this->_internal_has_fiscal_period_end_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::fiscal_period_end_date(this),
        _Internal::fiscal_period_end_date(this).GetCachedSize(), target, stream);
  }

  // double revenue_change_five_years = 53;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_revenue_change_five_years = this->_internal_revenue_change_five_years();
  uint64_t raw_revenue_change_five_years;
  memcpy(&raw_revenue_change_five_years, &tmp_revenue_change_five_years, sizeof(tmp_revenue_change_five_years));
  if (raw_revenue_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(53, this->_internal_revenue_change_five_years(), target);
  }

  // double eps_change_five_years = 54;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps_change_five_years = this->_internal_eps_change_five_years();
  uint64_t raw_eps_change_five_years;
  memcpy(&raw_eps_change_five_years, &tmp_eps_change_five_years, sizeof(tmp_eps_change_five_years));
  if (raw_eps_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(54, this->_internal_eps_change_five_years(), target);
  }

  // double ebitda_change_five_years = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ebitda_change_five_years = this->_internal_ebitda_change_five_years();
  uint64_t raw_ebitda_change_five_years;
  memcpy(&raw_ebitda_change_five_years, &tmp_ebitda_change_five_years, sizeof(tmp_ebitda_change_five_years));
  if (raw_ebitda_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(55, this->_internal_ebitda_change_five_years(), target);
  }

  // double total_debt_change_five_years = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_change_five_years = this->_internal_total_debt_change_five_years();
  uint64_t raw_total_debt_change_five_years;
  memcpy(&raw_total_debt_change_five_years, &tmp_total_debt_change_five_years, sizeof(tmp_total_debt_change_five_years));
  if (raw_total_debt_change_five_years != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(56, this->_internal_total_debt_change_five_years(), target);
  }

  // double ev_to_sales = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ev_to_sales = this->_internal_ev_to_sales();
  uint64_t raw_ev_to_sales;
  memcpy(&raw_ev_to_sales, &tmp_ev_to_sales, sizeof(tmp_ev_to_sales));
  if (raw_ev_to_sales != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(57, this->_internal_ev_to_sales(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  return target;
}

size_t GetAssetFundamentalsResponse_StatisticResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_uid = 1;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // string currency = 2;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string domicile_indicator_code = 46;
  if (!this->_internal_domicile_indicator_code().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domicile_indicator_code());
  }

  // .google.protobuf.Timestamp ex_dividend_date = 49;
  if (this->_internal_has_ex_dividend_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ex_dividend_date_);
  }

  // .google.protobuf.Timestamp fiscal_period_start_date = 50;
  if (this->_internal_has_fiscal_period_start_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fiscal_period_start_date_);
  }

  // .google.protobuf.Timestamp fiscal_period_end_date = 51;
  if (this->_internal_has_fiscal_period_end_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fiscal_period_end_date_);
  }

  // double market_capitalization = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_market_capitalization = this->_internal_market_capitalization();
  uint64_t raw_market_capitalization;
  memcpy(&raw_market_capitalization, &tmp_market_capitalization, sizeof(tmp_market_capitalization));
  if (raw_market_capitalization != 0) {
    total_size += 1 + 8;
  }

  // double high_price_last_52_weeks = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high_price_last_52_weeks = this->_internal_high_price_last_52_weeks();
  uint64_t raw_high_price_last_52_weeks;
  memcpy(&raw_high_price_last_52_weeks, &tmp_high_price_last_52_weeks, sizeof(tmp_high_price_last_52_weeks));
  if (raw_high_price_last_52_weeks != 0) {
    total_size += 1 + 8;
  }

  // double low_price_last_52_weeks = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low_price_last_52_weeks = this->_internal_low_price_last_52_weeks();
  uint64_t raw_low_price_last_52_weeks;
  memcpy(&raw_low_price_last_52_weeks, &tmp_low_price_last_52_weeks, sizeof(tmp_low_price_last_52_weeks));
  if (raw_low_price_last_52_weeks != 0) {
    total_size += 1 + 8;
  }

  // double average_daily_volume_last_10_days = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_10_days = this->_internal_average_daily_volume_last_10_days();
  uint64_t raw_average_daily_volume_last_10_days;
  memcpy(&raw_average_daily_volume_last_10_days, &tmp_average_daily_volume_last_10_days, sizeof(tmp_average_daily_volume_last_10_days));
  if (raw_average_daily_volume_last_10_days != 0) {
    total_size += 1 + 8;
  }

  // double average_daily_volume_last_4_weeks = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_4_weeks = this->_internal_average_daily_volume_last_4_weeks();
  uint64_t raw_average_daily_volume_last_4_weeks;
  memcpy(&raw_average_daily_volume_last_4_weeks, &tmp_average_daily_volume_last_4_weeks, sizeof(tmp_average_daily_volume_last_4_weeks));
  if (raw_average_daily_volume_last_4_weeks != 0) {
    total_size += 1 + 8;
  }

  // double beta = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beta = this->_internal_beta();
  uint64_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    total_size += 1 + 8;
  }

  // double free_float = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_float = this->_internal_free_float();
  uint64_t raw_free_float;
  memcpy(&raw_free_float, &tmp_free_float, sizeof(tmp_free_float));
  if (raw_free_float != 0) {
    total_size += 1 + 8;
  }

  // double forward_annual_dividend_yield = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_annual_dividend_yield = this->_internal_forward_annual_dividend_yield();
  uint64_t raw_forward_annual_dividend_yield;
  memcpy(&raw_forward_annual_dividend_yield, &tmp_forward_annual_dividend_yield, sizeof(tmp_forward_annual_dividend_yield));
  if (raw_forward_annual_dividend_yield != 0) {
    total_size += 1 + 8;
  }

  // double shares_outstanding = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shares_outstanding = this->_internal_shares_outstanding();
  uint64_t raw_shares_outstanding;
  memcpy(&raw_shares_outstanding, &tmp_shares_outstanding, sizeof(tmp_shares_outstanding));
  if (raw_shares_outstanding != 0) {
    total_size += 1 + 8;
  }

  // double revenue_ttm = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_revenue_ttm = this->_internal_revenue_ttm();
  uint64_t raw_revenue_ttm;
  memcpy(&raw_revenue_ttm, &tmp_revenue_ttm, sizeof(tmp_revenue_ttm));
  if (raw_revenue_ttm != 0) {
    total_size += 1 + 8;
  }

  // double ebitda_ttm = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ebitda_ttm = this->_internal_ebitda_ttm();
  uint64_t raw_ebitda_ttm;
  memcpy(&raw_ebitda_ttm, &tmp_ebitda_ttm, sizeof(tmp_ebitda_ttm));
  if (raw_ebitda_ttm != 0) {
    total_size += 1 + 8;
  }

  // double net_income_ttm = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_income_ttm = this->_internal_net_income_ttm();
  uint64_t raw_net_income_ttm;
  memcpy(&raw_net_income_ttm, &tmp_net_income_ttm, sizeof(tmp_net_income_ttm));
  if (raw_net_income_ttm != 0) {
    total_size += 1 + 8;
  }

  // double eps_ttm = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps_ttm = this->_internal_eps_ttm();
  uint64_t raw_eps_ttm;
  memcpy(&raw_eps_ttm, &tmp_eps_ttm, sizeof(tmp_eps_ttm));
  if (raw_eps_ttm != 0) {
    total_size += 1 + 8;
  }

  // double diluted_eps_ttm = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diluted_eps_ttm = this->_internal_diluted_eps_ttm();
  uint64_t raw_diluted_eps_ttm;
  memcpy(&raw_diluted_eps_ttm, &tmp_diluted_eps_ttm, sizeof(tmp_diluted_eps_ttm));
  if (raw_diluted_eps_ttm != 0) {
    total_size += 2 + 8;
  }

  // double free_cash_flow_ttm = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_cash_flow_ttm = this->_internal_free_cash_flow_ttm();
  uint64_t raw_free_cash_flow_ttm;
  memcpy(&raw_free_cash_flow_ttm, &tmp_free_cash_flow_ttm, sizeof(tmp_free_cash_flow_ttm));
  if (raw_free_cash_flow_ttm != 0) {
    total_size += 2 + 8;
  }

  // double five_year_annual_revenue_growth_rate = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_year_annual_revenue_growth_rate = this->_internal_five_year_annual_revenue_growth_rate();
  uint64_t raw_five_year_annual_revenue_growth_rate;
  memcpy(&raw_five_year_annual_revenue_growth_rate, &tmp_five_year_annual_revenue_growth_rate, sizeof(tmp_five_year_annual_revenue_growth_rate));
  if (raw_five_year_annual_revenue_growth_rate != 0) {
    total_size += 2 + 8;
  }

  // double three_year_annual_revenue_growth_rate = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_three_year_annual_revenue_growth_rate = this->_internal_three_year_annual_revenue_growth_rate();
  uint64_t raw_three_year_annual_revenue_growth_rate;
  memcpy(&raw_three_year_annual_revenue_growth_rate, &tmp_three_year_annual_revenue_growth_rate, sizeof(tmp_three_year_annual_revenue_growth_rate));
  if (raw_three_year_annual_revenue_growth_rate != 0) {
    total_size += 2 + 8;
  }

  // double pe_ratio_ttm = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pe_ratio_ttm = this->_internal_pe_ratio_ttm();
  uint64_t raw_pe_ratio_ttm;
  memcpy(&raw_pe_ratio_ttm, &tmp_pe_ratio_ttm, sizeof(tmp_pe_ratio_ttm));
  if (raw_pe_ratio_ttm != 0) {
    total_size += 2 + 8;
  }

  // double price_to_sales_ttm = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_sales_ttm = this->_internal_price_to_sales_ttm();
  uint64_t raw_price_to_sales_ttm;
  memcpy(&raw_price_to_sales_ttm, &tmp_price_to_sales_ttm, sizeof(tmp_price_to_sales_ttm));
  if (raw_price_to_sales_ttm != 0) {
    total_size += 2 + 8;
  }

  // double price_to_book_ttm = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_book_ttm = this->_internal_price_to_book_ttm();
  uint64_t raw_price_to_book_ttm;
  memcpy(&raw_price_to_book_ttm, &tmp_price_to_book_ttm, sizeof(tmp_price_to_book_ttm));
  if (raw_price_to_book_ttm != 0) {
    total_size += 2 + 8;
  }

  // double price_to_free_cash_flow_ttm = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_free_cash_flow_ttm = this->_internal_price_to_free_cash_flow_ttm();
  uint64_t raw_price_to_free_cash_flow_ttm;
  memcpy(&raw_price_to_free_cash_flow_ttm, &tmp_price_to_free_cash_flow_ttm, sizeof(tmp_price_to_free_cash_flow_ttm));
  if (raw_price_to_free_cash_flow_ttm != 0) {
    total_size += 2 + 8;
  }

  // double total_enterprise_value_mrq = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_enterprise_value_mrq = this->_internal_total_enterprise_value_mrq();
  uint64_t raw_total_enterprise_value_mrq;
  memcpy(&raw_total_enterprise_value_mrq, &tmp_total_enterprise_value_mrq, sizeof(tmp_total_enterprise_value_mrq));
  if (raw_total_enterprise_value_mrq != 0) {
    total_size += 2 + 8;
  }

  // double ev_to_ebitda_mrq = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ev_to_ebitda_mrq = this->_internal_ev_to_ebitda_mrq();
  uint64_t raw_ev_to_ebitda_mrq;
  memcpy(&raw_ev_to_ebitda_mrq, &tmp_ev_to_ebitda_mrq, sizeof(tmp_ev_to_ebitda_mrq));
  if (raw_ev_to_ebitda_mrq != 0) {
    total_size += 2 + 8;
  }

  // double net_margin_mrq = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_margin_mrq = this->_internal_net_margin_mrq();
  uint64_t raw_net_margin_mrq;
  memcpy(&raw_net_margin_mrq, &tmp_net_margin_mrq, sizeof(tmp_net_margin_mrq));
  if (raw_net_margin_mrq != 0) {
    total_size += 2 + 8;
  }

  // double net_interest_margin_mrq = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_interest_margin_mrq = this->_internal_net_interest_margin_mrq();
  uint64_t raw_net_interest_margin_mrq;
  memcpy(&raw_net_interest_margin_mrq, &tmp_net_interest_margin_mrq, sizeof(tmp_net_interest_margin_mrq));
  if (raw_net_interest_margin_mrq != 0) {
    total_size += 2 + 8;
  }

  // double roe = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roe = this->_internal_roe();
  uint64_t raw_roe;
  memcpy(&raw_roe, &tmp_roe, sizeof(tmp_roe));
  if (raw_roe != 0) {
    total_size += 2 + 8;
  }

  // double roa = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roa = this->_internal_roa();
  uint64_t raw_roa;
  memcpy(&raw_roa, &tmp_roa, sizeof(tmp_roa));
  if (raw_roa != 0) {
    total_size += 2 + 8;
  }

  // double roic = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roic = this->_internal_roic();
  uint64_t raw_roic;
  memcpy(&raw_roic, &tmp_roic, sizeof(tmp_roic));
  if (raw_roic != 0) {
    total_size += 2 + 8;
  }

  // double total_debt_mrq = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_mrq = this->_internal_total_debt_mrq();
  uint64_t raw_total_debt_mrq;
  memcpy(&raw_total_debt_mrq, &tmp_total_debt_mrq, sizeof(tmp_total_debt_mrq));
  if (raw_total_debt_mrq != 0) {
    total_size += 2 + 8;
  }

  // double total_debt_to_equity_mrq = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_to_equity_mrq = this->_internal_total_debt_to_equity_mrq();
  uint64_t raw_total_debt_to_equity_mrq;
  memcpy(&raw_total_debt_to_equity_mrq, &tmp_total_debt_to_equity_mrq, sizeof(tmp_total_debt_to_equity_mrq));
  if (raw_total_debt_to_equity_mrq != 0) {
    total_size += 2 + 8;
  }

  // double total_debt_to_ebitda_mrq = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_to_ebitda_mrq = this->_internal_total_debt_to_ebitda_mrq();
  uint64_t raw_total_debt_to_ebitda_mrq;
  memcpy(&raw_total_debt_to_ebitda_mrq, &tmp_total_debt_to_ebitda_mrq, sizeof(tmp_total_debt_to_ebitda_mrq));
  if (raw_total_debt_to_ebitda_mrq != 0) {
    total_size += 2 + 8;
  }

  // double free_cash_flow_to_price = 34;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_cash_flow_to_price = this->_internal_free_cash_flow_to_price();
  uint64_t raw_free_cash_flow_to_price;
  memcpy(&raw_free_cash_flow_to_price, &tmp_free_cash_flow_to_price, sizeof(tmp_free_cash_flow_to_price));
  if (raw_free_cash_flow_to_price != 0) {
    total_size += 2 + 8;
  }

  // double net_debt_to_ebitda = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_debt_to_ebitda = this->_internal_net_debt_to_ebitda();
  uint64_t raw_net_debt_to_ebitda;
  memcpy(&raw_net_debt_to_ebitda, &tmp_net_debt_to_ebitda, sizeof(tmp_net_debt_to_ebitda));
  if (raw_net_debt_to_ebitda != 0) {
    total_size += 2 + 8;
  }

  // double current_ratio_mrq = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ratio_mrq = this->_internal_current_ratio_mrq();
  uint64_t raw_current_ratio_mrq;
  memcpy(&raw_current_ratio_mrq, &tmp_current_ratio_mrq, sizeof(tmp_current_ratio_mrq));
  if (raw_current_ratio_mrq != 0) {
    total_size += 2 + 8;
  }

  // double fixed_charge_coverage_ratio_fy = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_charge_coverage_ratio_fy = this->_internal_fixed_charge_coverage_ratio_fy();
  uint64_t raw_fixed_charge_coverage_ratio_fy;
  memcpy(&raw_fixed_charge_coverage_ratio_fy, &tmp_fixed_charge_coverage_ratio_fy, sizeof(tmp_fixed_charge_coverage_ratio_fy));
  if (raw_fixed_charge_coverage_ratio_fy != 0) {
    total_size += 2 + 8;
  }

  // double dividend_yield_daily_ttm = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_yield_daily_ttm = this->_internal_dividend_yield_daily_ttm();
  uint64_t raw_dividend_yield_daily_ttm;
  memcpy(&raw_dividend_yield_daily_ttm, &tmp_dividend_yield_daily_ttm, sizeof(tmp_dividend_yield_daily_ttm));
  if (raw_dividend_yield_daily_ttm != 0) {
    total_size += 2 + 8;
  }

  // double dividend_rate_ttm = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_rate_ttm = this->_internal_dividend_rate_ttm();
  uint64_t raw_dividend_rate_ttm;
  memcpy(&raw_dividend_rate_ttm, &tmp_dividend_rate_ttm, sizeof(tmp_dividend_rate_ttm));
  if (raw_dividend_rate_ttm != 0) {
    total_size += 2 + 8;
  }

  // double dividends_per_share = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividends_per_share = this->_internal_dividends_per_share();
  uint64_t raw_dividends_per_share;
  memcpy(&raw_dividends_per_share, &tmp_dividends_per_share, sizeof(tmp_dividends_per_share));
  if (raw_dividends_per_share != 0) {
    total_size += 2 + 8;
  }

  // double five_years_average_dividend_yield = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_years_average_dividend_yield = this->_internal_five_years_average_dividend_yield();
  uint64_t raw_five_years_average_dividend_yield;
  memcpy(&raw_five_years_average_dividend_yield, &tmp_five_years_average_dividend_yield, sizeof(tmp_five_years_average_dividend_yield));
  if (raw_five_years_average_dividend_yield != 0) {
    total_size += 2 + 8;
  }

  // double five_year_annual_dividend_growth_rate = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_year_annual_dividend_growth_rate = this->_internal_five_year_annual_dividend_growth_rate();
  uint64_t raw_five_year_annual_dividend_growth_rate;
  memcpy(&raw_five_year_annual_dividend_growth_rate, &tmp_five_year_annual_dividend_growth_rate, sizeof(tmp_five_year_annual_dividend_growth_rate));
  if (raw_five_year_annual_dividend_growth_rate != 0) {
    total_size += 2 + 8;
  }

  // double dividend_payout_ratio_fy = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_payout_ratio_fy = this->_internal_dividend_payout_ratio_fy();
  uint64_t raw_dividend_payout_ratio_fy;
  memcpy(&raw_dividend_payout_ratio_fy, &tmp_dividend_payout_ratio_fy, sizeof(tmp_dividend_payout_ratio_fy));
  if (raw_dividend_payout_ratio_fy != 0) {
    total_size += 2 + 8;
  }

  // double buy_back_ttm = 44;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_buy_back_ttm = this->_internal_buy_back_ttm();
  uint64_t raw_buy_back_ttm;
  memcpy(&raw_buy_back_ttm, &tmp_buy_back_ttm, sizeof(tmp_buy_back_ttm));
  if (raw_buy_back_ttm != 0) {
    total_size += 2 + 8;
  }

  // double one_year_annual_revenue_growth_rate = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_one_year_annual_revenue_growth_rate = this->_internal_one_year_annual_revenue_growth_rate();
  uint64_t raw_one_year_annual_revenue_growth_rate;
  memcpy(&raw_one_year_annual_revenue_growth_rate, &tmp_one_year_annual_revenue_growth_rate, sizeof(tmp_one_year_annual_revenue_growth_rate));
  if (raw_one_year_annual_revenue_growth_rate != 0) {
    total_size += 2 + 8;
  }

  // double adr_to_common_share_ratio = 47;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adr_to_common_share_ratio = this->_internal_adr_to_common_share_ratio();
  uint64_t raw_adr_to_common_share_ratio;
  memcpy(&raw_adr_to_common_share_ratio, &tmp_adr_to_common_share_ratio, sizeof(tmp_adr_to_common_share_ratio));
  if (raw_adr_to_common_share_ratio != 0) {
    total_size += 2 + 8;
  }

  // double number_of_employees = 48;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number_of_employees = this->_internal_number_of_employees();
  uint64_t raw_number_of_employees;
  memcpy(&raw_number_of_employees, &tmp_number_of_employees, sizeof(tmp_number_of_employees));
  if (raw_number_of_employees != 0) {
    total_size += 2 + 8;
  }

  // double revenue_change_five_years = 53;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_revenue_change_five_years = this->_internal_revenue_change_five_years();
  uint64_t raw_revenue_change_five_years;
  memcpy(&raw_revenue_change_five_years, &tmp_revenue_change_five_years, sizeof(tmp_revenue_change_five_years));
  if (raw_revenue_change_five_years != 0) {
    total_size += 2 + 8;
  }

  // double eps_change_five_years = 54;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps_change_five_years = this->_internal_eps_change_five_years();
  uint64_t raw_eps_change_five_years;
  memcpy(&raw_eps_change_five_years, &tmp_eps_change_five_years, sizeof(tmp_eps_change_five_years));
  if (raw_eps_change_five_years != 0) {
    total_size += 2 + 8;
  }

  // double ebitda_change_five_years = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ebitda_change_five_years = this->_internal_ebitda_change_five_years();
  uint64_t raw_ebitda_change_five_years;
  memcpy(&raw_ebitda_change_five_years, &tmp_ebitda_change_five_years, sizeof(tmp_ebitda_change_five_years));
  if (raw_ebitda_change_five_years != 0) {
    total_size += 2 + 8;
  }

  // double total_debt_change_five_years = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_change_five_years = this->_internal_total_debt_change_five_years();
  uint64_t raw_total_debt_change_five_years;
  memcpy(&raw_total_debt_change_five_years, &tmp_total_debt_change_five_years, sizeof(tmp_total_debt_change_five_years));
  if (raw_total_debt_change_five_years != 0) {
    total_size += 2 + 8;
  }

  // double ev_to_sales = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ev_to_sales = this->_internal_ev_to_sales();
  uint64_t raw_ev_to_sales;
  memcpy(&raw_ev_to_sales, &tmp_ev_to_sales, sizeof(tmp_ev_to_sales));
  if (raw_ev_to_sales != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetFundamentalsResponse_StatisticResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetFundamentalsResponse_StatisticResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetFundamentalsResponse_StatisticResponse::GetClassData() const { return &_class_data_; }


void GetAssetFundamentalsResponse_StatisticResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsResponse_StatisticResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsResponse_StatisticResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_domicile_indicator_code().empty()) {
    _this->_internal_set_domicile_indicator_code(from._internal_domicile_indicator_code());
  }
  if (from._internal_has_ex_dividend_date()) {
    _this->_internal_mutable_ex_dividend_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ex_dividend_date());
  }
  if (from._internal_has_fiscal_period_start_date()) {
    _this->_internal_mutable_fiscal_period_start_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_fiscal_period_start_date());
  }
  if (from._internal_has_fiscal_period_end_date()) {
    _this->_internal_mutable_fiscal_period_end_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_fiscal_period_end_date());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_market_capitalization = from._internal_market_capitalization();
  uint64_t raw_market_capitalization;
  memcpy(&raw_market_capitalization, &tmp_market_capitalization, sizeof(tmp_market_capitalization));
  if (raw_market_capitalization != 0) {
    _this->_internal_set_market_capitalization(from._internal_market_capitalization());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high_price_last_52_weeks = from._internal_high_price_last_52_weeks();
  uint64_t raw_high_price_last_52_weeks;
  memcpy(&raw_high_price_last_52_weeks, &tmp_high_price_last_52_weeks, sizeof(tmp_high_price_last_52_weeks));
  if (raw_high_price_last_52_weeks != 0) {
    _this->_internal_set_high_price_last_52_weeks(from._internal_high_price_last_52_weeks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low_price_last_52_weeks = from._internal_low_price_last_52_weeks();
  uint64_t raw_low_price_last_52_weeks;
  memcpy(&raw_low_price_last_52_weeks, &tmp_low_price_last_52_weeks, sizeof(tmp_low_price_last_52_weeks));
  if (raw_low_price_last_52_weeks != 0) {
    _this->_internal_set_low_price_last_52_weeks(from._internal_low_price_last_52_weeks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_10_days = from._internal_average_daily_volume_last_10_days();
  uint64_t raw_average_daily_volume_last_10_days;
  memcpy(&raw_average_daily_volume_last_10_days, &tmp_average_daily_volume_last_10_days, sizeof(tmp_average_daily_volume_last_10_days));
  if (raw_average_daily_volume_last_10_days != 0) {
    _this->_internal_set_average_daily_volume_last_10_days(from._internal_average_daily_volume_last_10_days());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_daily_volume_last_4_weeks = from._internal_average_daily_volume_last_4_weeks();
  uint64_t raw_average_daily_volume_last_4_weeks;
  memcpy(&raw_average_daily_volume_last_4_weeks, &tmp_average_daily_volume_last_4_weeks, sizeof(tmp_average_daily_volume_last_4_weeks));
  if (raw_average_daily_volume_last_4_weeks != 0) {
    _this->_internal_set_average_daily_volume_last_4_weeks(from._internal_average_daily_volume_last_4_weeks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beta = from._internal_beta();
  uint64_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    _this->_internal_set_beta(from._internal_beta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_float = from._internal_free_float();
  uint64_t raw_free_float;
  memcpy(&raw_free_float, &tmp_free_float, sizeof(tmp_free_float));
  if (raw_free_float != 0) {
    _this->_internal_set_free_float(from._internal_free_float());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_annual_dividend_yield = from._internal_forward_annual_dividend_yield();
  uint64_t raw_forward_annual_dividend_yield;
  memcpy(&raw_forward_annual_dividend_yield, &tmp_forward_annual_dividend_yield, sizeof(tmp_forward_annual_dividend_yield));
  if (raw_forward_annual_dividend_yield != 0) {
    _this->_internal_set_forward_annual_dividend_yield(from._internal_forward_annual_dividend_yield());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shares_outstanding = from._internal_shares_outstanding();
  uint64_t raw_shares_outstanding;
  memcpy(&raw_shares_outstanding, &tmp_shares_outstanding, sizeof(tmp_shares_outstanding));
  if (raw_shares_outstanding != 0) {
    _this->_internal_set_shares_outstanding(from._internal_shares_outstanding());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_revenue_ttm = from._internal_revenue_ttm();
  uint64_t raw_revenue_ttm;
  memcpy(&raw_revenue_ttm, &tmp_revenue_ttm, sizeof(tmp_revenue_ttm));
  if (raw_revenue_ttm != 0) {
    _this->_internal_set_revenue_ttm(from._internal_revenue_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ebitda_ttm = from._internal_ebitda_ttm();
  uint64_t raw_ebitda_ttm;
  memcpy(&raw_ebitda_ttm, &tmp_ebitda_ttm, sizeof(tmp_ebitda_ttm));
  if (raw_ebitda_ttm != 0) {
    _this->_internal_set_ebitda_ttm(from._internal_ebitda_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_income_ttm = from._internal_net_income_ttm();
  uint64_t raw_net_income_ttm;
  memcpy(&raw_net_income_ttm, &tmp_net_income_ttm, sizeof(tmp_net_income_ttm));
  if (raw_net_income_ttm != 0) {
    _this->_internal_set_net_income_ttm(from._internal_net_income_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps_ttm = from._internal_eps_ttm();
  uint64_t raw_eps_ttm;
  memcpy(&raw_eps_ttm, &tmp_eps_ttm, sizeof(tmp_eps_ttm));
  if (raw_eps_ttm != 0) {
    _this->_internal_set_eps_ttm(from._internal_eps_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diluted_eps_ttm = from._internal_diluted_eps_ttm();
  uint64_t raw_diluted_eps_ttm;
  memcpy(&raw_diluted_eps_ttm, &tmp_diluted_eps_ttm, sizeof(tmp_diluted_eps_ttm));
  if (raw_diluted_eps_ttm != 0) {
    _this->_internal_set_diluted_eps_ttm(from._internal_diluted_eps_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_cash_flow_ttm = from._internal_free_cash_flow_ttm();
  uint64_t raw_free_cash_flow_ttm;
  memcpy(&raw_free_cash_flow_ttm, &tmp_free_cash_flow_ttm, sizeof(tmp_free_cash_flow_ttm));
  if (raw_free_cash_flow_ttm != 0) {
    _this->_internal_set_free_cash_flow_ttm(from._internal_free_cash_flow_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_year_annual_revenue_growth_rate = from._internal_five_year_annual_revenue_growth_rate();
  uint64_t raw_five_year_annual_revenue_growth_rate;
  memcpy(&raw_five_year_annual_revenue_growth_rate, &tmp_five_year_annual_revenue_growth_rate, sizeof(tmp_five_year_annual_revenue_growth_rate));
  if (raw_five_year_annual_revenue_growth_rate != 0) {
    _this->_internal_set_five_year_annual_revenue_growth_rate(from._internal_five_year_annual_revenue_growth_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_three_year_annual_revenue_growth_rate = from._internal_three_year_annual_revenue_growth_rate();
  uint64_t raw_three_year_annual_revenue_growth_rate;
  memcpy(&raw_three_year_annual_revenue_growth_rate, &tmp_three_year_annual_revenue_growth_rate, sizeof(tmp_three_year_annual_revenue_growth_rate));
  if (raw_three_year_annual_revenue_growth_rate != 0) {
    _this->_internal_set_three_year_annual_revenue_growth_rate(from._internal_three_year_annual_revenue_growth_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pe_ratio_ttm = from._internal_pe_ratio_ttm();
  uint64_t raw_pe_ratio_ttm;
  memcpy(&raw_pe_ratio_ttm, &tmp_pe_ratio_ttm, sizeof(tmp_pe_ratio_ttm));
  if (raw_pe_ratio_ttm != 0) {
    _this->_internal_set_pe_ratio_ttm(from._internal_pe_ratio_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_sales_ttm = from._internal_price_to_sales_ttm();
  uint64_t raw_price_to_sales_ttm;
  memcpy(&raw_price_to_sales_ttm, &tmp_price_to_sales_ttm, sizeof(tmp_price_to_sales_ttm));
  if (raw_price_to_sales_ttm != 0) {
    _this->_internal_set_price_to_sales_ttm(from._internal_price_to_sales_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_book_ttm = from._internal_price_to_book_ttm();
  uint64_t raw_price_to_book_ttm;
  memcpy(&raw_price_to_book_ttm, &tmp_price_to_book_ttm, sizeof(tmp_price_to_book_ttm));
  if (raw_price_to_book_ttm != 0) {
    _this->_internal_set_price_to_book_ttm(from._internal_price_to_book_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_to_free_cash_flow_ttm = from._internal_price_to_free_cash_flow_ttm();
  uint64_t raw_price_to_free_cash_flow_ttm;
  memcpy(&raw_price_to_free_cash_flow_ttm, &tmp_price_to_free_cash_flow_ttm, sizeof(tmp_price_to_free_cash_flow_ttm));
  if (raw_price_to_free_cash_flow_ttm != 0) {
    _this->_internal_set_price_to_free_cash_flow_ttm(from._internal_price_to_free_cash_flow_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_enterprise_value_mrq = from._internal_total_enterprise_value_mrq();
  uint64_t raw_total_enterprise_value_mrq;
  memcpy(&raw_total_enterprise_value_mrq, &tmp_total_enterprise_value_mrq, sizeof(tmp_total_enterprise_value_mrq));
  if (raw_total_enterprise_value_mrq != 0) {
    _this->_internal_set_total_enterprise_value_mrq(from._internal_total_enterprise_value_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ev_to_ebitda_mrq = from._internal_ev_to_ebitda_mrq();
  uint64_t raw_ev_to_ebitda_mrq;
  memcpy(&raw_ev_to_ebitda_mrq, &tmp_ev_to_ebitda_mrq, sizeof(tmp_ev_to_ebitda_mrq));
  if (raw_ev_to_ebitda_mrq != 0) {
    _this->_internal_set_ev_to_ebitda_mrq(from._internal_ev_to_ebitda_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_margin_mrq = from._internal_net_margin_mrq();
  uint64_t raw_net_margin_mrq;
  memcpy(&raw_net_margin_mrq, &tmp_net_margin_mrq, sizeof(tmp_net_margin_mrq));
  if (raw_net_margin_mrq != 0) {
    _this->_internal_set_net_margin_mrq(from._internal_net_margin_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_interest_margin_mrq = from._internal_net_interest_margin_mrq();
  uint64_t raw_net_interest_margin_mrq;
  memcpy(&raw_net_interest_margin_mrq, &tmp_net_interest_margin_mrq, sizeof(tmp_net_interest_margin_mrq));
  if (raw_net_interest_margin_mrq != 0) {
    _this->_internal_set_net_interest_margin_mrq(from._internal_net_interest_margin_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roe = from._internal_roe();
  uint64_t raw_roe;
  memcpy(&raw_roe, &tmp_roe, sizeof(tmp_roe));
  if (raw_roe != 0) {
    _this->_internal_set_roe(from._internal_roe());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roa = from._internal_roa();
  uint64_t raw_roa;
  memcpy(&raw_roa, &tmp_roa, sizeof(tmp_roa));
  if (raw_roa != 0) {
    _this->_internal_set_roa(from._internal_roa());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roic = from._internal_roic();
  uint64_t raw_roic;
  memcpy(&raw_roic, &tmp_roic, sizeof(tmp_roic));
  if (raw_roic != 0) {
    _this->_internal_set_roic(from._internal_roic());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_mrq = from._internal_total_debt_mrq();
  uint64_t raw_total_debt_mrq;
  memcpy(&raw_total_debt_mrq, &tmp_total_debt_mrq, sizeof(tmp_total_debt_mrq));
  if (raw_total_debt_mrq != 0) {
    _this->_internal_set_total_debt_mrq(from._internal_total_debt_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_to_equity_mrq = from._internal_total_debt_to_equity_mrq();
  uint64_t raw_total_debt_to_equity_mrq;
  memcpy(&raw_total_debt_to_equity_mrq, &tmp_total_debt_to_equity_mrq, sizeof(tmp_total_debt_to_equity_mrq));
  if (raw_total_debt_to_equity_mrq != 0) {
    _this->_internal_set_total_debt_to_equity_mrq(from._internal_total_debt_to_equity_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_to_ebitda_mrq = from._internal_total_debt_to_ebitda_mrq();
  uint64_t raw_total_debt_to_ebitda_mrq;
  memcpy(&raw_total_debt_to_ebitda_mrq, &tmp_total_debt_to_ebitda_mrq, sizeof(tmp_total_debt_to_ebitda_mrq));
  if (raw_total_debt_to_ebitda_mrq != 0) {
    _this->_internal_set_total_debt_to_ebitda_mrq(from._internal_total_debt_to_ebitda_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_free_cash_flow_to_price = from._internal_free_cash_flow_to_price();
  uint64_t raw_free_cash_flow_to_price;
  memcpy(&raw_free_cash_flow_to_price, &tmp_free_cash_flow_to_price, sizeof(tmp_free_cash_flow_to_price));
  if (raw_free_cash_flow_to_price != 0) {
    _this->_internal_set_free_cash_flow_to_price(from._internal_free_cash_flow_to_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_net_debt_to_ebitda = from._internal_net_debt_to_ebitda();
  uint64_t raw_net_debt_to_ebitda;
  memcpy(&raw_net_debt_to_ebitda, &tmp_net_debt_to_ebitda, sizeof(tmp_net_debt_to_ebitda));
  if (raw_net_debt_to_ebitda != 0) {
    _this->_internal_set_net_debt_to_ebitda(from._internal_net_debt_to_ebitda());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ratio_mrq = from._internal_current_ratio_mrq();
  uint64_t raw_current_ratio_mrq;
  memcpy(&raw_current_ratio_mrq, &tmp_current_ratio_mrq, sizeof(tmp_current_ratio_mrq));
  if (raw_current_ratio_mrq != 0) {
    _this->_internal_set_current_ratio_mrq(from._internal_current_ratio_mrq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_charge_coverage_ratio_fy = from._internal_fixed_charge_coverage_ratio_fy();
  uint64_t raw_fixed_charge_coverage_ratio_fy;
  memcpy(&raw_fixed_charge_coverage_ratio_fy, &tmp_fixed_charge_coverage_ratio_fy, sizeof(tmp_fixed_charge_coverage_ratio_fy));
  if (raw_fixed_charge_coverage_ratio_fy != 0) {
    _this->_internal_set_fixed_charge_coverage_ratio_fy(from._internal_fixed_charge_coverage_ratio_fy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_yield_daily_ttm = from._internal_dividend_yield_daily_ttm();
  uint64_t raw_dividend_yield_daily_ttm;
  memcpy(&raw_dividend_yield_daily_ttm, &tmp_dividend_yield_daily_ttm, sizeof(tmp_dividend_yield_daily_ttm));
  if (raw_dividend_yield_daily_ttm != 0) {
    _this->_internal_set_dividend_yield_daily_ttm(from._internal_dividend_yield_daily_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_rate_ttm = from._internal_dividend_rate_ttm();
  uint64_t raw_dividend_rate_ttm;
  memcpy(&raw_dividend_rate_ttm, &tmp_dividend_rate_ttm, sizeof(tmp_dividend_rate_ttm));
  if (raw_dividend_rate_ttm != 0) {
    _this->_internal_set_dividend_rate_ttm(from._internal_dividend_rate_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividends_per_share = from._internal_dividends_per_share();
  uint64_t raw_dividends_per_share;
  memcpy(&raw_dividends_per_share, &tmp_dividends_per_share, sizeof(tmp_dividends_per_share));
  if (raw_dividends_per_share != 0) {
    _this->_internal_set_dividends_per_share(from._internal_dividends_per_share());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_years_average_dividend_yield = from._internal_five_years_average_dividend_yield();
  uint64_t raw_five_years_average_dividend_yield;
  memcpy(&raw_five_years_average_dividend_yield, &tmp_five_years_average_dividend_yield, sizeof(tmp_five_years_average_dividend_yield));
  if (raw_five_years_average_dividend_yield != 0) {
    _this->_internal_set_five_years_average_dividend_yield(from._internal_five_years_average_dividend_yield());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_five_year_annual_dividend_growth_rate = from._internal_five_year_annual_dividend_growth_rate();
  uint64_t raw_five_year_annual_dividend_growth_rate;
  memcpy(&raw_five_year_annual_dividend_growth_rate, &tmp_five_year_annual_dividend_growth_rate, sizeof(tmp_five_year_annual_dividend_growth_rate));
  if (raw_five_year_annual_dividend_growth_rate != 0) {
    _this->_internal_set_five_year_annual_dividend_growth_rate(from._internal_five_year_annual_dividend_growth_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividend_payout_ratio_fy = from._internal_dividend_payout_ratio_fy();
  uint64_t raw_dividend_payout_ratio_fy;
  memcpy(&raw_dividend_payout_ratio_fy, &tmp_dividend_payout_ratio_fy, sizeof(tmp_dividend_payout_ratio_fy));
  if (raw_dividend_payout_ratio_fy != 0) {
    _this->_internal_set_dividend_payout_ratio_fy(from._internal_dividend_payout_ratio_fy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_buy_back_ttm = from._internal_buy_back_ttm();
  uint64_t raw_buy_back_ttm;
  memcpy(&raw_buy_back_ttm, &tmp_buy_back_ttm, sizeof(tmp_buy_back_ttm));
  if (raw_buy_back_ttm != 0) {
    _this->_internal_set_buy_back_ttm(from._internal_buy_back_ttm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_one_year_annual_revenue_growth_rate = from._internal_one_year_annual_revenue_growth_rate();
  uint64_t raw_one_year_annual_revenue_growth_rate;
  memcpy(&raw_one_year_annual_revenue_growth_rate, &tmp_one_year_annual_revenue_growth_rate, sizeof(tmp_one_year_annual_revenue_growth_rate));
  if (raw_one_year_annual_revenue_growth_rate != 0) {
    _this->_internal_set_one_year_annual_revenue_growth_rate(from._internal_one_year_annual_revenue_growth_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adr_to_common_share_ratio = from._internal_adr_to_common_share_ratio();
  uint64_t raw_adr_to_common_share_ratio;
  memcpy(&raw_adr_to_common_share_ratio, &tmp_adr_to_common_share_ratio, sizeof(tmp_adr_to_common_share_ratio));
  if (raw_adr_to_common_share_ratio != 0) {
    _this->_internal_set_adr_to_common_share_ratio(from._internal_adr_to_common_share_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number_of_employees = from._internal_number_of_employees();
  uint64_t raw_number_of_employees;
  memcpy(&raw_number_of_employees, &tmp_number_of_employees, sizeof(tmp_number_of_employees));
  if (raw_number_of_employees != 0) {
    _this->_internal_set_number_of_employees(from._internal_number_of_employees());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_revenue_change_five_years = from._internal_revenue_change_five_years();
  uint64_t raw_revenue_change_five_years;
  memcpy(&raw_revenue_change_five_years, &tmp_revenue_change_five_years, sizeof(tmp_revenue_change_five_years));
  if (raw_revenue_change_five_years != 0) {
    _this->_internal_set_revenue_change_five_years(from._internal_revenue_change_five_years());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps_change_five_years = from._internal_eps_change_five_years();
  uint64_t raw_eps_change_five_years;
  memcpy(&raw_eps_change_five_years, &tmp_eps_change_five_years, sizeof(tmp_eps_change_five_years));
  if (raw_eps_change_five_years != 0) {
    _this->_internal_set_eps_change_five_years(from._internal_eps_change_five_years());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ebitda_change_five_years = from._internal_ebitda_change_five_years();
  uint64_t raw_ebitda_change_five_years;
  memcpy(&raw_ebitda_change_five_years, &tmp_ebitda_change_five_years, sizeof(tmp_ebitda_change_five_years));
  if (raw_ebitda_change_five_years != 0) {
    _this->_internal_set_ebitda_change_five_years(from._internal_ebitda_change_five_years());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_debt_change_five_years = from._internal_total_debt_change_five_years();
  uint64_t raw_total_debt_change_five_years;
  memcpy(&raw_total_debt_change_five_years, &tmp_total_debt_change_five_years, sizeof(tmp_total_debt_change_five_years));
  if (raw_total_debt_change_five_years != 0) {
    _this->_internal_set_total_debt_change_five_years(from._internal_total_debt_change_five_years());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ev_to_sales = from._internal_ev_to_sales();
  uint64_t raw_ev_to_sales;
  memcpy(&raw_ev_to_sales, &tmp_ev_to_sales, sizeof(tmp_ev_to_sales));
  if (raw_ev_to_sales != 0) {
    _this->_internal_set_ev_to_sales(from._internal_ev_to_sales());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsResponse_StatisticResponse::CopyFrom(const GetAssetFundamentalsResponse_StatisticResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetFundamentalsResponse_StatisticResponse::IsInitialized() const {
  return true;
}

void GetAssetFundamentalsResponse_StatisticResponse::InternalSwap(GetAssetFundamentalsResponse_StatisticResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domicile_indicator_code_, lhs_arena,
      &other->_impl_.domicile_indicator_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_)
      + sizeof(GetAssetFundamentalsResponse_StatisticResponse::_impl_.ev_to_sales_)
      - PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_)>(
          reinterpret_cast<char*>(&_impl_.ex_dividend_date_),
          reinterpret_cast<char*>(&other->_impl_.ex_dividend_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetFundamentalsResponse_StatisticResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[76]);
}

// ===================================================================

class GetAssetFundamentalsResponse::_Internal {
 public:
};

GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
}
GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(const GetAssetFundamentalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetFundamentalsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fundamentals_){from._impl_.fundamentals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
}

inline void GetAssetFundamentalsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fundamentals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAssetFundamentalsResponse::~GetAssetFundamentalsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetFundamentalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fundamentals_.~RepeatedPtrField();
}

void GetAssetFundamentalsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetFundamentalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fundamentals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetFundamentalsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fundamentals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssetFundamentalsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fundamentals_size()); i < n; i++) {
    const auto& repfield = this->_internal_fundamentals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  return target;
}

size_t GetAssetFundamentalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
  total_size += 1UL * this->_internal_fundamentals_size();
  for (const auto& msg : this->_impl_.fundamentals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetFundamentalsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetFundamentalsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetFundamentalsResponse::GetClassData() const { return &_class_data_; }


void GetAssetFundamentalsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fundamentals_.MergeFrom(from._impl_.fundamentals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsResponse::CopyFrom(const GetAssetFundamentalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetFundamentalsResponse::IsInitialized() const {
  return true;
}

void GetAssetFundamentalsResponse::InternalSwap(GetAssetFundamentalsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fundamentals_.InternalSwap(&other->_impl_.fundamentals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetFundamentalsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[77]);
}

// ===================================================================

class GetAssetReportsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAssetReportsRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetAssetReportsRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetAssetReportsRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAssetReportsRequest::_Internal::from(const GetAssetReportsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAssetReportsRequest::_Internal::to(const GetAssetReportsRequest* msg) {
  return *msg->_impl_.to_;
}
void GetAssetReportsRequest::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAssetReportsRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetAssetReportsRequest::GetAssetReportsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
}
GetAssetReportsRequest::GetAssetReportsRequest(const GetAssetReportsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetReportsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
}

inline void GetAssetReportsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
  };
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAssetReportsRequest::~GetAssetReportsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetReportsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetAssetReportsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetReportsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssetReportsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  // optional .google.protobuf.Timestamp from = 2;
  if (_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp to = 3;
  if (_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  return target;
}

size_t GetAssetReportsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // optional .google.protobuf.Timestamp to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetReportsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetReportsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetReportsRequest::GetClassData() const { return &_class_data_; }


void GetAssetReportsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetReportsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsRequest::CopyFrom(const GetAssetReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetReportsRequest::IsInitialized() const {
  return true;
}

void GetAssetReportsRequest::InternalSwap(GetAssetReportsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.to_)
      + sizeof(GetAssetReportsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetReportsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[78]);
}

// ===================================================================

class GetAssetReportsResponse_GetAssetReportsEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& report_date(const GetAssetReportsResponse_GetAssetReportsEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GetAssetReportsResponse_GetAssetReportsEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAssetReportsResponse_GetAssetReportsEvent::_Internal::report_date(const GetAssetReportsResponse_GetAssetReportsEvent* msg) {
  return *msg->_impl_.report_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetAssetReportsResponse_GetAssetReportsEvent::_Internal::created_at(const GetAssetReportsResponse_GetAssetReportsEvent* msg) {
  return *msg->_impl_.created_at_;
}
void GetAssetReportsResponse_GetAssetReportsEvent::clear_report_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.report_date_ != nullptr) {
    delete _impl_.report_date_;
  }
  _impl_.report_date_ = nullptr;
}
void GetAssetReportsResponse_GetAssetReportsEvent::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
}
GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(const GetAssetReportsResponse_GetAssetReportsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetReportsResponse_GetAssetReportsEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , decltype(_impl_.report_date_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.period_year_){}
    , decltype(_impl_.period_num_){}
    , decltype(_impl_.period_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_report_date()) {
    _this->_impl_.report_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.report_date_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.period_year_, &from._impl_.period_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.period_type_) -
    reinterpret_cast<char*>(&_impl_.period_year_)) + sizeof(_impl_.period_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
}

inline void GetAssetReportsResponse_GetAssetReportsEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , decltype(_impl_.report_date_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.period_year_){0}
    , decltype(_impl_.period_num_){0}
    , decltype(_impl_.period_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAssetReportsResponse_GetAssetReportsEvent::~GetAssetReportsResponse_GetAssetReportsEvent() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetReportsResponse_GetAssetReportsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.report_date_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void GetAssetReportsResponse_GetAssetReportsEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetReportsResponse_GetAssetReportsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.report_date_ != nullptr) {
    delete _impl_.report_date_;
  }
  _impl_.report_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  ::memset(&_impl_.period_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.period_type_) -
      reinterpret_cast<char*>(&_impl_.period_year_)) + sizeof(_impl_.period_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetReportsResponse_GetAssetReportsEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp report_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_report_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 period_year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.period_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 period_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.period_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_period_type(static_cast<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssetReportsResponse_GetAssetReportsEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  // .google.protobuf.Timestamp report_date = 2;
  if (this->_internal_has_report_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::report_date(this),
        _Internal::report_date(this).GetCachedSize(), target, stream);
  }

  // int32 period_year = 3;
  if (this->_internal_period_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_period_year(), target);
  }

  // int32 period_num = 4;
  if (this->_internal_period_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_period_num(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
  if (this->_internal_period_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_period_type(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  return target;
}

size_t GetAssetReportsResponse_GetAssetReportsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // .google.protobuf.Timestamp report_date = 2;
  if (this->_internal_has_report_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.report_date_);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 period_year = 3;
  if (this->_internal_period_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_period_year());
  }

  // int32 period_num = 4;
  if (this->_internal_period_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_period_num());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
  if (this->_internal_period_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_period_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetReportsResponse_GetAssetReportsEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetReportsResponse_GetAssetReportsEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetReportsResponse_GetAssetReportsEvent::GetClassData() const { return &_class_data_; }


void GetAssetReportsResponse_GetAssetReportsEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetReportsResponse_GetAssetReportsEvent*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsResponse_GetAssetReportsEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_has_report_date()) {
    _this->_internal_mutable_report_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_report_date());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_period_year() != 0) {
    _this->_internal_set_period_year(from._internal_period_year());
  }
  if (from._internal_period_num() != 0) {
    _this->_internal_set_period_num(from._internal_period_num());
  }
  if (from._internal_period_type() != 0) {
    _this->_internal_set_period_type(from._internal_period_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsResponse_GetAssetReportsEvent::CopyFrom(const GetAssetReportsResponse_GetAssetReportsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetReportsResponse_GetAssetReportsEvent::IsInitialized() const {
  return true;
}

void GetAssetReportsResponse_GetAssetReportsEvent::InternalSwap(GetAssetReportsResponse_GetAssetReportsEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_)
      + sizeof(GetAssetReportsResponse_GetAssetReportsEvent::_impl_.period_type_)
      - PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_)>(
          reinterpret_cast<char*>(&_impl_.report_date_),
          reinterpret_cast<char*>(&other->_impl_.report_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetReportsResponse_GetAssetReportsEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[79]);
}

// ===================================================================

class GetAssetReportsResponse::_Internal {
 public:
};

GetAssetReportsResponse::GetAssetReportsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
}
GetAssetReportsResponse::GetAssetReportsResponse(const GetAssetReportsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetReportsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
}

inline void GetAssetReportsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAssetReportsResponse::~GetAssetReportsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetReportsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void GetAssetReportsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetReportsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetReportsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssetReportsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  return target;
}

size_t GetAssetReportsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetReportsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetReportsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetReportsResponse::GetClassData() const { return &_class_data_; }


void GetAssetReportsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetReportsResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsResponse::CopyFrom(const GetAssetReportsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetReportsResponse::IsInitialized() const {
  return true;
}

void GetAssetReportsResponse::InternalSwap(GetAssetReportsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetReportsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[80]);
}

// ===================================================================

class GetConsensusForecastsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetConsensusForecastsRequest>()._impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Page& paging(const GetConsensusForecastsRequest* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Page&
GetConsensusForecastsRequest::_Internal::paging(const GetConsensusForecastsRequest* msg) {
  return *msg->_impl_.paging_;
}
void GetConsensusForecastsRequest::clear_paging() {
  if (_impl_.paging_ != nullptr) _impl_.paging_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetConsensusForecastsRequest::GetConsensusForecastsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
}
GetConsensusForecastsRequest::GetConsensusForecastsRequest(const GetConsensusForecastsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConsensusForecastsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_paging()) {
    _this->_impl_.paging_ = new ::tinkoff::public_::invest::api::contract::v1::Page(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
}

inline void GetConsensusForecastsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paging_){nullptr}
  };
}

GetConsensusForecastsRequest::~GetConsensusForecastsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConsensusForecastsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetConsensusForecastsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConsensusForecastsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsensusForecastsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConsensusForecastsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  if (_internal_has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  return target;
}

size_t GetConsensusForecastsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConsensusForecastsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConsensusForecastsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConsensusForecastsRequest::GetClassData() const { return &_class_data_; }


void GetConsensusForecastsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsRequest*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_paging()) {
    _this->_internal_mutable_paging()->::tinkoff::public_::invest::api::contract::v1::Page::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsRequest::CopyFrom(const GetConsensusForecastsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusForecastsRequest::IsInitialized() const {
  return true;
}

void GetConsensusForecastsRequest::InternalSwap(GetConsensusForecastsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsensusForecastsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[81]);
}

// ===================================================================

class GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_price(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_low(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_high(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& prognosis_date(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::created_at(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.created_at_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::best_target_price(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.best_target_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::best_target_low(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.best_target_low_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::best_target_high(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.best_target_high_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal::prognosis_date(const GetConsensusForecastsResponse_ConsensusForecastsItem* msg) {
  return *msg->_impl_.prognosis_date_;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.best_target_price_ != nullptr) {
    delete _impl_.best_target_price_;
  }
  _impl_.best_target_price_ = nullptr;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_low() {
  if (GetArenaForAllocation() == nullptr && _impl_.best_target_low_ != nullptr) {
    delete _impl_.best_target_low_;
  }
  _impl_.best_target_low_ = nullptr;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_high() {
  if (GetArenaForAllocation() == nullptr && _impl_.best_target_high_ != nullptr) {
    delete _impl_.best_target_high_;
  }
  _impl_.best_target_high_ = nullptr;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_prognosis_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.prognosis_date_ != nullptr) {
    delete _impl_.prognosis_date_;
  }
  _impl_.prognosis_date_ = nullptr;
}
GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
}
GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(const GetConsensusForecastsResponse_ConsensusForecastsItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConsensusForecastsResponse_ConsensusForecastsItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.best_target_price_){nullptr}
    , decltype(_impl_.best_target_low_){nullptr}
    , decltype(_impl_.best_target_high_){nullptr}
    , decltype(_impl_.prognosis_date_){nullptr}
    , decltype(_impl_.total_buy_recommend_){}
    , decltype(_impl_.total_hold_recommend_){}
    , decltype(_impl_.total_sell_recommend_){}
    , decltype(_impl_.consensus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_uid().empty()) {
    _this->_impl_.asset_uid_.Set(from._internal_asset_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_best_target_price()) {
    _this->_impl_.best_target_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.best_target_price_);
  }
  if (from._internal_has_best_target_low()) {
    _this->_impl_.best_target_low_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.best_target_low_);
  }
  if (from._internal_has_best_target_high()) {
    _this->_impl_.best_target_high_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.best_target_high_);
  }
  if (from._internal_has_prognosis_date()) {
    _this->_impl_.prognosis_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.prognosis_date_);
  }
  ::memcpy(&_impl_.total_buy_recommend_, &from._impl_.total_buy_recommend_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.consensus_) -
    reinterpret_cast<char*>(&_impl_.total_buy_recommend_)) + sizeof(_impl_.consensus_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
}

inline void GetConsensusForecastsResponse_ConsensusForecastsItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.asset_uid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.best_target_price_){nullptr}
    , decltype(_impl_.best_target_low_){nullptr}
    , decltype(_impl_.best_target_high_){nullptr}
    , decltype(_impl_.prognosis_date_){nullptr}
    , decltype(_impl_.total_buy_recommend_){0}
    , decltype(_impl_.total_hold_recommend_){0}
    , decltype(_impl_.total_sell_recommend_){0}
    , decltype(_impl_.consensus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetConsensusForecastsResponse_ConsensusForecastsItem::~GetConsensusForecastsResponse_ConsensusForecastsItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConsensusForecastsResponse_ConsensusForecastsItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.asset_uid_.Destroy();
  _impl_.currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.best_target_price_;
  if (this != internal_default_instance()) delete _impl_.best_target_low_;
  if (this != internal_default_instance()) delete _impl_.best_target_high_;
  if (this != internal_default_instance()) delete _impl_.prognosis_date_;
}

void GetConsensusForecastsResponse_ConsensusForecastsItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConsensusForecastsResponse_ConsensusForecastsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.best_target_price_ != nullptr) {
    delete _impl_.best_target_price_;
  }
  _impl_.best_target_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.best_target_low_ != nullptr) {
    delete _impl_.best_target_low_;
  }
  _impl_.best_target_low_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.best_target_high_ != nullptr) {
    delete _impl_.best_target_high_;
  }
  _impl_.best_target_high_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prognosis_date_ != nullptr) {
    delete _impl_.prognosis_date_;
  }
  _impl_.prognosis_date_ = nullptr;
  ::memset(&_impl_.total_buy_recommend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.consensus_) -
      reinterpret_cast<char*>(&_impl_.total_buy_recommend_)) + sizeof(_impl_.consensus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsensusForecastsResponse_ConsensusForecastsItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid"));
        } else
          goto handle_unusual;
        continue;
      // string asset_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_asset_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_target_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_target_low(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_target_high(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_buy_recommend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.total_buy_recommend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_hold_recommend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.total_hold_recommend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_sell_recommend = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.total_sell_recommend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consensus(static_cast<::tinkoff::public_::invest::api::contract::v1::Recommendation>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp prognosis_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_prognosis_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConsensusForecastsResponse_ConsensusForecastsItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string asset_uid = 2;
  if (!this->_internal_asset_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_uid().data(), static_cast<int>(this->_internal_asset_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset_uid(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
  if (this->_internal_has_best_target_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::best_target_price(this),
        _Internal::best_target_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
  if (this->_internal_has_best_target_low()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::best_target_low(this),
        _Internal::best_target_low(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
  if (this->_internal_has_best_target_high()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::best_target_high(this),
        _Internal::best_target_high(this).GetCachedSize(), target, stream);
  }

  // int32 total_buy_recommend = 7;
  if (this->_internal_total_buy_recommend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_buy_recommend(), target);
  }

  // int32 total_hold_recommend = 8;
  if (this->_internal_total_hold_recommend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_total_hold_recommend(), target);
  }

  // int32 total_sell_recommend = 9;
  if (this->_internal_total_sell_recommend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_total_sell_recommend(), target);
  }

  // string currency = 10;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
  if (this->_internal_consensus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_consensus(), target);
  }

  // .google.protobuf.Timestamp prognosis_date = 12;
  if (this->_internal_has_prognosis_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::prognosis_date(this),
        _Internal::prognosis_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  return target;
}

size_t GetConsensusForecastsResponse_ConsensusForecastsItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string asset_uid = 2;
  if (!this->_internal_asset_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_uid());
  }

  // string currency = 10;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
  if (this->_internal_has_best_target_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.best_target_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
  if (this->_internal_has_best_target_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.best_target_low_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
  if (this->_internal_has_best_target_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.best_target_high_);
  }

  // .google.protobuf.Timestamp prognosis_date = 12;
  if (this->_internal_has_prognosis_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prognosis_date_);
  }

  // int32 total_buy_recommend = 7;
  if (this->_internal_total_buy_recommend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_buy_recommend());
  }

  // int32 total_hold_recommend = 8;
  if (this->_internal_total_hold_recommend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_hold_recommend());
  }

  // int32 total_sell_recommend = 9;
  if (this->_internal_total_sell_recommend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_sell_recommend());
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
  if (this->_internal_consensus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_consensus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConsensusForecastsResponse_ConsensusForecastsItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConsensusForecastsResponse_ConsensusForecastsItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConsensusForecastsResponse_ConsensusForecastsItem::GetClassData() const { return &_class_data_; }


void GetConsensusForecastsResponse_ConsensusForecastsItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsResponse_ConsensusForecastsItem*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsResponse_ConsensusForecastsItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_best_target_price()) {
    _this->_internal_mutable_best_target_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_best_target_price());
  }
  if (from._internal_has_best_target_low()) {
    _this->_internal_mutable_best_target_low()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_best_target_low());
  }
  if (from._internal_has_best_target_high()) {
    _this->_internal_mutable_best_target_high()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_best_target_high());
  }
  if (from._internal_has_prognosis_date()) {
    _this->_internal_mutable_prognosis_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_prognosis_date());
  }
  if (from._internal_total_buy_recommend() != 0) {
    _this->_internal_set_total_buy_recommend(from._internal_total_buy_recommend());
  }
  if (from._internal_total_hold_recommend() != 0) {
    _this->_internal_set_total_hold_recommend(from._internal_total_hold_recommend());
  }
  if (from._internal_total_sell_recommend() != 0) {
    _this->_internal_set_total_sell_recommend(from._internal_total_sell_recommend());
  }
  if (from._internal_consensus() != 0) {
    _this->_internal_set_consensus(from._internal_consensus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsResponse_ConsensusForecastsItem::CopyFrom(const GetConsensusForecastsResponse_ConsensusForecastsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusForecastsResponse_ConsensusForecastsItem::IsInitialized() const {
  return true;
}

void GetConsensusForecastsResponse_ConsensusForecastsItem::InternalSwap(GetConsensusForecastsResponse_ConsensusForecastsItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_uid_, lhs_arena,
      &other->_impl_.asset_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_)
      + sizeof(GetConsensusForecastsResponse_ConsensusForecastsItem::_impl_.consensus_)
      - PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsensusForecastsResponse_ConsensusForecastsItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[82]);
}

// ===================================================================

class GetConsensusForecastsResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::PageResponse& page(const GetConsensusForecastsResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::PageResponse&
GetConsensusForecastsResponse::_Internal::page(const GetConsensusForecastsResponse* msg) {
  return *msg->_impl_.page_;
}
void GetConsensusForecastsResponse::clear_page() {
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
}
GetConsensusForecastsResponse::GetConsensusForecastsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
}
GetConsensusForecastsResponse::GetConsensusForecastsResponse(const GetConsensusForecastsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConsensusForecastsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page()) {
    _this->_impl_.page_ = new ::tinkoff::public_::invest::api::contract::v1::PageResponse(*from._impl_.page_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
}

inline void GetConsensusForecastsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetConsensusForecastsResponse::~GetConsensusForecastsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConsensusForecastsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.page_;
}

void GetConsensusForecastsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConsensusForecastsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsensusForecastsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_page(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConsensusForecastsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
  if (this->_internal_has_page()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::page(this),
        _Internal::page(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  return target;
}

size_t GetConsensusForecastsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
  if (this->_internal_has_page()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConsensusForecastsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConsensusForecastsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConsensusForecastsResponse::GetClassData() const { return &_class_data_; }


void GetConsensusForecastsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsResponse*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_page()) {
    _this->_internal_mutable_page()->::tinkoff::public_::invest::api::contract::v1::PageResponse::MergeFrom(
        from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsResponse::CopyFrom(const GetConsensusForecastsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusForecastsResponse::IsInitialized() const {
  return true;
}

void GetConsensusForecastsResponse::InternalSwap(GetConsensusForecastsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsensusForecastsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[83]);
}

// ===================================================================

class GetForecastRequest::_Internal {
 public:
};

GetForecastRequest::GetForecastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
}
GetForecastRequest::GetForecastRequest(const GetForecastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetForecastRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
}

inline void GetForecastRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetForecastRequest::~GetForecastRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetForecastRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_id_.Destroy();
}

void GetForecastRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetForecastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetForecastRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetForecastRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  return target;
}

size_t GetForecastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetForecastRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetForecastRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetForecastRequest::GetClassData() const { return &_class_data_; }


void GetForecastRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetForecastRequest*>(&to_msg);
  auto& from = static_cast<const GetForecastRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastRequest::CopyFrom(const GetForecastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForecastRequest::IsInitialized() const {
  return true;
}

void GetForecastRequest::InternalSwap(GetForecastRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetForecastRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[84]);
}

// ===================================================================

class GetForecastResponse_TargetItem::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& recommendation_date(const GetForecastResponse_TargetItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_price(const GetForecastResponse_TargetItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& target_price(const GetForecastResponse_TargetItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change(const GetForecastResponse_TargetItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change_rel(const GetForecastResponse_TargetItem* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetForecastResponse_TargetItem::_Internal::recommendation_date(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.recommendation_date_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_TargetItem::_Internal::current_price(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.current_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_TargetItem::_Internal::target_price(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.target_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_TargetItem::_Internal::price_change(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.price_change_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_TargetItem::_Internal::price_change_rel(const GetForecastResponse_TargetItem* msg) {
  return *msg->_impl_.price_change_rel_;
}
void GetForecastResponse_TargetItem::clear_recommendation_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendation_date_ != nullptr) {
    delete _impl_.recommendation_date_;
  }
  _impl_.recommendation_date_ = nullptr;
}
void GetForecastResponse_TargetItem::clear_current_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
}
void GetForecastResponse_TargetItem::clear_target_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_price_ != nullptr) {
    delete _impl_.target_price_;
  }
  _impl_.target_price_ = nullptr;
}
void GetForecastResponse_TargetItem::clear_price_change() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_ != nullptr) {
    delete _impl_.price_change_;
  }
  _impl_.price_change_ = nullptr;
}
void GetForecastResponse_TargetItem::clear_price_change_rel() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_rel_ != nullptr) {
    delete _impl_.price_change_rel_;
  }
  _impl_.price_change_rel_ = nullptr;
}
GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
}
GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(const GetForecastResponse_TargetItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetForecastResponse_TargetItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.show_name_){}
    , decltype(_impl_.recommendation_date_){nullptr}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.target_price_){nullptr}
    , decltype(_impl_.price_change_){nullptr}
    , decltype(_impl_.price_change_rel_){nullptr}
    , decltype(_impl_.recommendation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company().empty()) {
    _this->_impl_.company_.Set(from._internal_company(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.show_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.show_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_show_name().empty()) {
    _this->_impl_.show_name_.Set(from._internal_show_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_recommendation_date()) {
    _this->_impl_.recommendation_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.recommendation_date_);
  }
  if (from._internal_has_current_price()) {
    _this->_impl_.current_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.current_price_);
  }
  if (from._internal_has_target_price()) {
    _this->_impl_.target_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.target_price_);
  }
  if (from._internal_has_price_change()) {
    _this->_impl_.price_change_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_change_);
  }
  if (from._internal_has_price_change_rel()) {
    _this->_impl_.price_change_rel_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_change_rel_);
  }
  _this->_impl_.recommendation_ = from._impl_.recommendation_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
}

inline void GetForecastResponse_TargetItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.show_name_){}
    , decltype(_impl_.recommendation_date_){nullptr}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.target_price_){nullptr}
    , decltype(_impl_.price_change_){nullptr}
    , decltype(_impl_.price_change_rel_){nullptr}
    , decltype(_impl_.recommendation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.show_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.show_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetForecastResponse_TargetItem::~GetForecastResponse_TargetItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetForecastResponse_TargetItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.company_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.show_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.recommendation_date_;
  if (this != internal_default_instance()) delete _impl_.current_price_;
  if (this != internal_default_instance()) delete _impl_.target_price_;
  if (this != internal_default_instance()) delete _impl_.price_change_;
  if (this != internal_default_instance()) delete _impl_.price_change_rel_;
}

void GetForecastResponse_TargetItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetForecastResponse_TargetItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.show_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.recommendation_date_ != nullptr) {
    delete _impl_.recommendation_date_;
  }
  _impl_.recommendation_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_price_ != nullptr) {
    delete _impl_.target_price_;
  }
  _impl_.target_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_ != nullptr) {
    delete _impl_.price_change_;
  }
  _impl_.price_change_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_rel_ != nullptr) {
    delete _impl_.price_change_rel_;
  }
  _impl_.price_change_rel_ = nullptr;
  _impl_.recommendation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetForecastResponse_TargetItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker"));
        } else
          goto handle_unusual;
        continue;
      // string company = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_company();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_recommendation(static_cast<::tinkoff::public_::invest::api::contract::v1::Recommendation>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp recommendation_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendation_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_change_rel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string show_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_show_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetForecastResponse_TargetItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // string company = 3;
  if (!this->_internal_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_company(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
  if (this->_internal_recommendation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_recommendation(), target);
  }

  // .google.protobuf.Timestamp recommendation_date = 5;
  if (this->_internal_has_recommendation_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::recommendation_date(this),
        _Internal::recommendation_date(this).GetCachedSize(), target, stream);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
  if (this->_internal_has_current_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::current_price(this),
        _Internal::current_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
  if (this->_internal_has_target_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::target_price(this),
        _Internal::target_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  if (this->_internal_has_price_change()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::price_change(this),
        _Internal::price_change(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  if (this->_internal_has_price_change_rel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::price_change_rel(this),
        _Internal::price_change_rel(this).GetCachedSize(), target, stream);
  }

  // string show_name = 11;
  if (!this->_internal_show_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_show_name().data(), static_cast<int>(this->_internal_show_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_show_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  return target;
}

size_t GetForecastResponse_TargetItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string company = 3;
  if (!this->_internal_company().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string show_name = 11;
  if (!this->_internal_show_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_show_name());
  }

  // .google.protobuf.Timestamp recommendation_date = 5;
  if (this->_internal_has_recommendation_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendation_date_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
  if (this->_internal_has_current_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
  if (this->_internal_has_target_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  if (this->_internal_has_price_change()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_change_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  if (this->_internal_has_price_change_rel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_change_rel_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
  if (this->_internal_recommendation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_recommendation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetForecastResponse_TargetItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetForecastResponse_TargetItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetForecastResponse_TargetItem::GetClassData() const { return &_class_data_; }


void GetForecastResponse_TargetItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetForecastResponse_TargetItem*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse_TargetItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_show_name().empty()) {
    _this->_internal_set_show_name(from._internal_show_name());
  }
  if (from._internal_has_recommendation_date()) {
    _this->_internal_mutable_recommendation_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_recommendation_date());
  }
  if (from._internal_has_current_price()) {
    _this->_internal_mutable_current_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_current_price());
  }
  if (from._internal_has_target_price()) {
    _this->_internal_mutable_target_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_target_price());
  }
  if (from._internal_has_price_change()) {
    _this->_internal_mutable_price_change()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price_change());
  }
  if (from._internal_has_price_change_rel()) {
    _this->_internal_mutable_price_change_rel()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price_change_rel());
  }
  if (from._internal_recommendation() != 0) {
    _this->_internal_set_recommendation(from._internal_recommendation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse_TargetItem::CopyFrom(const GetForecastResponse_TargetItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForecastResponse_TargetItem::IsInitialized() const {
  return true;
}

void GetForecastResponse_TargetItem::InternalSwap(GetForecastResponse_TargetItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.company_, lhs_arena,
      &other->_impl_.company_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.show_name_, lhs_arena,
      &other->_impl_.show_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_)
      + sizeof(GetForecastResponse_TargetItem::_impl_.recommendation_)
      - PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_date_)>(
          reinterpret_cast<char*>(&_impl_.recommendation_date_),
          reinterpret_cast<char*>(&other->_impl_.recommendation_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetForecastResponse_TargetItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[85]);
}

// ===================================================================

class GetForecastResponse_ConsensusItem::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_price(const GetForecastResponse_ConsensusItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& consensus(const GetForecastResponse_ConsensusItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_target(const GetForecastResponse_ConsensusItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& max_target(const GetForecastResponse_ConsensusItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change(const GetForecastResponse_ConsensusItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change_rel(const GetForecastResponse_ConsensusItem* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_ConsensusItem::_Internal::current_price(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.current_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_ConsensusItem::_Internal::consensus(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.consensus_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_ConsensusItem::_Internal::min_target(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.min_target_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_ConsensusItem::_Internal::max_target(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.max_target_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_ConsensusItem::_Internal::price_change(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.price_change_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetForecastResponse_ConsensusItem::_Internal::price_change_rel(const GetForecastResponse_ConsensusItem* msg) {
  return *msg->_impl_.price_change_rel_;
}
void GetForecastResponse_ConsensusItem::clear_current_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
}
void GetForecastResponse_ConsensusItem::clear_consensus() {
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_ != nullptr) {
    delete _impl_.consensus_;
  }
  _impl_.consensus_ = nullptr;
}
void GetForecastResponse_ConsensusItem::clear_min_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_target_ != nullptr) {
    delete _impl_.min_target_;
  }
  _impl_.min_target_ = nullptr;
}
void GetForecastResponse_ConsensusItem::clear_max_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_target_ != nullptr) {
    delete _impl_.max_target_;
  }
  _impl_.max_target_ = nullptr;
}
void GetForecastResponse_ConsensusItem::clear_price_change() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_ != nullptr) {
    delete _impl_.price_change_;
  }
  _impl_.price_change_ = nullptr;
}
void GetForecastResponse_ConsensusItem::clear_price_change_rel() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_rel_ != nullptr) {
    delete _impl_.price_change_rel_;
  }
  _impl_.price_change_rel_ = nullptr;
}
GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
}
GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(const GetForecastResponse_ConsensusItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetForecastResponse_ConsensusItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.consensus_){nullptr}
    , decltype(_impl_.min_target_){nullptr}
    , decltype(_impl_.max_target_){nullptr}
    , decltype(_impl_.price_change_){nullptr}
    , decltype(_impl_.price_change_rel_){nullptr}
    , decltype(_impl_.recommendation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_current_price()) {
    _this->_impl_.current_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.current_price_);
  }
  if (from._internal_has_consensus()) {
    _this->_impl_.consensus_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.consensus_);
  }
  if (from._internal_has_min_target()) {
    _this->_impl_.min_target_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.min_target_);
  }
  if (from._internal_has_max_target()) {
    _this->_impl_.max_target_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.max_target_);
  }
  if (from._internal_has_price_change()) {
    _this->_impl_.price_change_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_change_);
  }
  if (from._internal_has_price_change_rel()) {
    _this->_impl_.price_change_rel_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_change_rel_);
  }
  _this->_impl_.recommendation_ = from._impl_.recommendation_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
}

inline void GetForecastResponse_ConsensusItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.ticker_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.current_price_){nullptr}
    , decltype(_impl_.consensus_){nullptr}
    , decltype(_impl_.min_target_){nullptr}
    , decltype(_impl_.max_target_){nullptr}
    , decltype(_impl_.price_change_){nullptr}
    , decltype(_impl_.price_change_rel_){nullptr}
    , decltype(_impl_.recommendation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetForecastResponse_ConsensusItem::~GetForecastResponse_ConsensusItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetForecastResponse_ConsensusItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.current_price_;
  if (this != internal_default_instance()) delete _impl_.consensus_;
  if (this != internal_default_instance()) delete _impl_.min_target_;
  if (this != internal_default_instance()) delete _impl_.max_target_;
  if (this != internal_default_instance()) delete _impl_.price_change_;
  if (this != internal_default_instance()) delete _impl_.price_change_rel_;
}

void GetForecastResponse_ConsensusItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetForecastResponse_ConsensusItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.current_price_ != nullptr) {
    delete _impl_.current_price_;
  }
  _impl_.current_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_ != nullptr) {
    delete _impl_.consensus_;
  }
  _impl_.consensus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_target_ != nullptr) {
    delete _impl_.min_target_;
  }
  _impl_.min_target_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_target_ != nullptr) {
    delete _impl_.max_target_;
  }
  _impl_.max_target_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_ != nullptr) {
    delete _impl_.price_change_;
  }
  _impl_.price_change_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_change_rel_ != nullptr) {
    delete _impl_.price_change_rel_;
  }
  _impl_.price_change_rel_ = nullptr;
  _impl_.recommendation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetForecastResponse_ConsensusItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid"));
        } else
          goto handle_unusual;
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_recommendation(static_cast<::tinkoff::public_::invest::api::contract::v1::Recommendation>(val));
        } else
          goto handle_unusual;
        continue;
      // string currency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_change_rel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetForecastResponse_ConsensusItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticker(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
  if (this->_internal_recommendation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_recommendation(), target);
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
  if (this->_internal_has_current_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::current_price(this),
        _Internal::current_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
  if (this->_internal_has_consensus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::consensus(this),
        _Internal::consensus(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
  if (this->_internal_has_min_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::min_target(this),
        _Internal::min_target(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
  if (this->_internal_has_max_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::max_target(this),
        _Internal::max_target(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  if (this->_internal_has_price_change()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::price_change(this),
        _Internal::price_change(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  if (this->_internal_has_price_change_rel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::price_change_rel(this),
        _Internal::price_change_rel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  return target;
}

size_t GetForecastResponse_ConsensusItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker());
  }

  // string currency = 4;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
  if (this->_internal_has_current_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
  if (this->_internal_has_consensus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
  if (this->_internal_has_min_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_target_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
  if (this->_internal_has_max_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_target_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  if (this->_internal_has_price_change()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_change_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  if (this->_internal_has_price_change_rel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_change_rel_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
  if (this->_internal_recommendation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_recommendation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetForecastResponse_ConsensusItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetForecastResponse_ConsensusItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetForecastResponse_ConsensusItem::GetClassData() const { return &_class_data_; }


void GetForecastResponse_ConsensusItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetForecastResponse_ConsensusItem*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse_ConsensusItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (from._internal_has_current_price()) {
    _this->_internal_mutable_current_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_current_price());
  }
  if (from._internal_has_consensus()) {
    _this->_internal_mutable_consensus()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_consensus());
  }
  if (from._internal_has_min_target()) {
    _this->_internal_mutable_min_target()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_min_target());
  }
  if (from._internal_has_max_target()) {
    _this->_internal_mutable_max_target()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_max_target());
  }
  if (from._internal_has_price_change()) {
    _this->_internal_mutable_price_change()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price_change());
  }
  if (from._internal_has_price_change_rel()) {
    _this->_internal_mutable_price_change_rel()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price_change_rel());
  }
  if (from._internal_recommendation() != 0) {
    _this->_internal_set_recommendation(from._internal_recommendation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse_ConsensusItem::CopyFrom(const GetForecastResponse_ConsensusItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForecastResponse_ConsensusItem::IsInitialized() const {
  return true;
}

void GetForecastResponse_ConsensusItem::InternalSwap(GetForecastResponse_ConsensusItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticker_, lhs_arena,
      &other->_impl_.ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.recommendation_)
      + sizeof(GetForecastResponse_ConsensusItem::_impl_.recommendation_)
      - PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.current_price_)>(
          reinterpret_cast<char*>(&_impl_.current_price_),
          reinterpret_cast<char*>(&other->_impl_.current_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetForecastResponse_ConsensusItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[86]);
}

// ===================================================================

class GetForecastResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& consensus(const GetForecastResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem&
GetForecastResponse::_Internal::consensus(const GetForecastResponse* msg) {
  return *msg->_impl_.consensus_;
}
GetForecastResponse::GetForecastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
}
GetForecastResponse::GetForecastResponse(const GetForecastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetForecastResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){from._impl_.targets_}
    , decltype(_impl_.consensus_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consensus()) {
    _this->_impl_.consensus_ = new ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem(*from._impl_.consensus_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
}

inline void GetForecastResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){arena}
    , decltype(_impl_.consensus_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetForecastResponse::~GetForecastResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetForecastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.consensus_;
}

void GetForecastResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetForecastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_ != nullptr) {
    delete _impl_.consensus_;
  }
  _impl_.consensus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetForecastResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetForecastResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
  if (this->_internal_has_consensus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consensus(this),
        _Internal::consensus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  return target;
}

size_t GetForecastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_impl_.targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
  if (this->_internal_has_consensus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetForecastResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetForecastResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetForecastResponse::GetClassData() const { return &_class_data_; }


void GetForecastResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetForecastResponse*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targets_.MergeFrom(from._impl_.targets_);
  if (from._internal_has_consensus()) {
    _this->_internal_mutable_consensus()->::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem::MergeFrom(
        from._internal_consensus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse::CopyFrom(const GetForecastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForecastResponse::IsInitialized() const {
  return true;
}

void GetForecastResponse::InternalSwap(GetForecastResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  swap(_impl_.consensus_, other->_impl_.consensus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetForecastResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[87]);
}

// ===================================================================

class TradingInterval_TimeInterval::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const TradingInterval_TimeInterval* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const TradingInterval_TimeInterval* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingInterval_TimeInterval::_Internal::start_ts(const TradingInterval_TimeInterval* msg) {
  return *msg->_impl_.start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingInterval_TimeInterval::_Internal::end_ts(const TradingInterval_TimeInterval* msg) {
  return *msg->_impl_.end_ts_;
}
void TradingInterval_TimeInterval::clear_start_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ts_ != nullptr) {
    delete _impl_.start_ts_;
  }
  _impl_.start_ts_ = nullptr;
}
void TradingInterval_TimeInterval::clear_end_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_ts_ != nullptr) {
    delete _impl_.end_ts_;
  }
  _impl_.end_ts_ = nullptr;
}
TradingInterval_TimeInterval::TradingInterval_TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
}
TradingInterval_TimeInterval::TradingInterval_TimeInterval(const TradingInterval_TimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingInterval_TimeInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_ts()) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  if (from._internal_has_end_ts()) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
}

inline void TradingInterval_TimeInterval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TradingInterval_TimeInterval::~TradingInterval_TimeInterval() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingInterval_TimeInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_ts_;
  if (this != internal_default_instance()) delete _impl_.end_ts_;
}

void TradingInterval_TimeInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingInterval_TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_ts_ != nullptr) {
    delete _impl_.start_ts_;
  }
  _impl_.start_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_ts_ != nullptr) {
    delete _impl_.end_ts_;
  }
  _impl_.end_ts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingInterval_TimeInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradingInterval_TimeInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_ts = 1;
  if (this->_internal_has_start_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_ts = 2;
  if (this->_internal_has_end_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  return target;
}

size_t TradingInterval_TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_ts = 1;
  if (this->_internal_has_start_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_ts_);
  }

  // .google.protobuf.Timestamp end_ts = 2;
  if (this->_internal_has_end_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_ts_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingInterval_TimeInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingInterval_TimeInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingInterval_TimeInterval::GetClassData() const { return &_class_data_; }


void TradingInterval_TimeInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingInterval_TimeInterval*>(&to_msg);
  auto& from = static_cast<const TradingInterval_TimeInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_ts()) {
    _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_ts());
  }
  if (from._internal_has_end_ts()) {
    _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingInterval_TimeInterval::CopyFrom(const TradingInterval_TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingInterval_TimeInterval::IsInitialized() const {
  return true;
}

void TradingInterval_TimeInterval::InternalSwap(TradingInterval_TimeInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.end_ts_)
      + sizeof(TradingInterval_TimeInterval::_impl_.end_ts_)
      - PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingInterval_TimeInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[88]);
}

// ===================================================================

class TradingInterval::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& interval(const TradingInterval* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval&
TradingInterval::_Internal::interval(const TradingInterval* msg) {
  return *msg->_impl_.interval_;
}
TradingInterval::TradingInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval)
}
TradingInterval::TradingInterval(const TradingInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.interval_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval(*from._impl_.interval_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingInterval)
}

inline void TradingInterval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.interval_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradingInterval::~TradingInterval() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void TradingInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradingInterval.type"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradingInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradingInterval.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  return target;
}

size_t TradingInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingInterval::GetClassData() const { return &_class_data_; }


void TradingInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingInterval*>(&to_msg);
  auto& from = static_cast<const TradingInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval::MergeFrom(
        from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingInterval::CopyFrom(const TradingInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingInterval::IsInitialized() const {
  return true;
}

void TradingInterval::InternalSwap(TradingInterval* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.interval_, other->_impl_.interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instruments_2eproto_getter, &descriptor_table_instruments_2eproto_once,
      file_level_metadata_instruments_2eproto[89]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradingSchedule*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradingSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradingSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradingDay*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradingDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradingDay >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::BondResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::BondResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::BondResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::BondsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::BondsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::BondsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Coupon*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Coupon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Coupon >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::EtfResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::EtfResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::EtfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::EtfsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::EtfsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::EtfsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::FutureResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::FutureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::FutureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::FuturesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::FuturesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::FuturesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OptionResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OptionsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Option*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Option >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Option >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::ShareResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::ShareResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::ShareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SharesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SharesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SharesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Bond*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Bond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Bond >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Currency*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Currency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Currency >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Etf*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Etf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Etf >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Future*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Future >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Future >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Share*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Share >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Share >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AccruedInterest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AccruedInterest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AccruedInterest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Instrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Instrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Instrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Dividend*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Dividend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Dividend >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetFull*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetFull >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetFull >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Asset*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetCurrency*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetCurrency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetCurrency >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetSecurity*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetSecurity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetShare*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetShare >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetBond*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetBond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetBond >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetEtf*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetEtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetEtf >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Brand*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Brand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Brand >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::AssetInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InstrumentLink*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InstrumentLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InstrumentLink >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::IndicativesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CountryResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CountryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CountryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InstrumentShort*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InstrumentShort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InstrumentShort >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradingInterval*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradingInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradingInterval >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
