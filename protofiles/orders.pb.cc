// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orders.proto

#include "orders.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR TradesStreamRequest::TradesStreamRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradesStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradesStreamRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradesStreamRequestDefaultTypeInternal() {}
  union {
    TradesStreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradesStreamRequestDefaultTypeInternal _TradesStreamRequest_default_instance_;
PROTOBUF_CONSTEXPR TradesStreamResponse::TradesStreamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TradesStreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradesStreamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradesStreamResponseDefaultTypeInternal() {}
  union {
    TradesStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradesStreamResponseDefaultTypeInternal _TradesStreamResponse_default_instance_;
PROTOBUF_CONSTEXPR OrderTrades::OrderTrades(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trades_)*/{}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderTradesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderTradesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderTradesDefaultTypeInternal() {}
  union {
    OrderTrades _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderTradesDefaultTypeInternal _OrderTrades_default_instance_;
PROTOBUF_CONSTEXPR OrderTrade::OrderTrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_time_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderTradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderTradeDefaultTypeInternal() {}
  union {
    OrderTrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderTradeDefaultTypeInternal _OrderTrade_default_instance_;
PROTOBUF_CONSTEXPR PostOrderRequest::PostOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.time_in_force_)*/0
  , /*decltype(_impl_.price_type_)*/0} {}
struct PostOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostOrderRequestDefaultTypeInternal() {}
  union {
    PostOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostOrderRequestDefaultTypeInternal _PostOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR PostOrderResponse::PostOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initial_order_price_)*/nullptr
  , /*decltype(_impl_.executed_order_price_)*/nullptr
  , /*decltype(_impl_.total_order_amount_)*/nullptr
  , /*decltype(_impl_.initial_commission_)*/nullptr
  , /*decltype(_impl_.executed_commission_)*/nullptr
  , /*decltype(_impl_.aci_value_)*/nullptr
  , /*decltype(_impl_.initial_security_price_)*/nullptr
  , /*decltype(_impl_.initial_order_price_pt_)*/nullptr
  , /*decltype(_impl_.response_metadata_)*/nullptr
  , /*decltype(_impl_.lots_requested_)*/int64_t{0}
  , /*decltype(_impl_.lots_executed_)*/int64_t{0}
  , /*decltype(_impl_.execution_report_status_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostOrderResponseDefaultTypeInternal() {}
  union {
    PostOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostOrderResponseDefaultTypeInternal _PostOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR CancelOrderRequest::CancelOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelOrderRequestDefaultTypeInternal() {}
  union {
    CancelOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelOrderRequestDefaultTypeInternal _CancelOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelOrderResponse::CancelOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.response_metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelOrderResponseDefaultTypeInternal() {}
  union {
    CancelOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelOrderResponseDefaultTypeInternal _CancelOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR GetOrderStateRequest::GetOrderStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrderStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderStateRequestDefaultTypeInternal() {}
  union {
    GetOrderStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderStateRequestDefaultTypeInternal _GetOrderStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOrdersRequest::GetOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrdersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrdersRequestDefaultTypeInternal() {}
  union {
    GetOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrdersRequestDefaultTypeInternal _GetOrdersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOrdersResponse::GetOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrdersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrdersResponseDefaultTypeInternal() {}
  union {
    GetOrdersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrdersResponseDefaultTypeInternal _GetOrdersResponse_default_instance_;
PROTOBUF_CONSTEXPR OrderState::OrderState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stages_)*/{}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initial_order_price_)*/nullptr
  , /*decltype(_impl_.executed_order_price_)*/nullptr
  , /*decltype(_impl_.total_order_amount_)*/nullptr
  , /*decltype(_impl_.average_position_price_)*/nullptr
  , /*decltype(_impl_.initial_commission_)*/nullptr
  , /*decltype(_impl_.executed_commission_)*/nullptr
  , /*decltype(_impl_.initial_security_price_)*/nullptr
  , /*decltype(_impl_.service_commission_)*/nullptr
  , /*decltype(_impl_.order_date_)*/nullptr
  , /*decltype(_impl_.lots_requested_)*/int64_t{0}
  , /*decltype(_impl_.lots_executed_)*/int64_t{0}
  , /*decltype(_impl_.execution_report_status_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderStateDefaultTypeInternal() {}
  union {
    OrderState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderStateDefaultTypeInternal _OrderState_default_instance_;
PROTOBUF_CONSTEXPR OrderStage::OrderStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.execution_time_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderStageDefaultTypeInternal() {}
  union {
    OrderStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderStageDefaultTypeInternal _OrderStage_default_instance_;
PROTOBUF_CONSTEXPR ReplaceOrderRequest::ReplaceOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idempotency_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_.price_type_)*/0} {}
struct ReplaceOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplaceOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplaceOrderRequestDefaultTypeInternal() {}
  union {
    ReplaceOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplaceOrderRequestDefaultTypeInternal _ReplaceOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMaxLotsRequest::GetMaxLotsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr} {}
struct GetMaxLotsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMaxLotsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMaxLotsRequestDefaultTypeInternal() {}
  union {
    GetMaxLotsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMaxLotsRequestDefaultTypeInternal _GetMaxLotsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMaxLotsResponse_BuyLimitsView::GetMaxLotsResponse_BuyLimitsView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buy_money_amount_)*/nullptr
  , /*decltype(_impl_.buy_max_lots_)*/int64_t{0}
  , /*decltype(_impl_.buy_max_market_lots_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMaxLotsResponse_BuyLimitsViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMaxLotsResponse_BuyLimitsViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMaxLotsResponse_BuyLimitsViewDefaultTypeInternal() {}
  union {
    GetMaxLotsResponse_BuyLimitsView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMaxLotsResponse_BuyLimitsViewDefaultTypeInternal _GetMaxLotsResponse_BuyLimitsView_default_instance_;
PROTOBUF_CONSTEXPR GetMaxLotsResponse_SellLimitsView::GetMaxLotsResponse_SellLimitsView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sell_max_lots_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMaxLotsResponse_SellLimitsViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMaxLotsResponse_SellLimitsViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMaxLotsResponse_SellLimitsViewDefaultTypeInternal() {}
  union {
    GetMaxLotsResponse_SellLimitsView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMaxLotsResponse_SellLimitsViewDefaultTypeInternal _GetMaxLotsResponse_SellLimitsView_default_instance_;
PROTOBUF_CONSTEXPR GetMaxLotsResponse::GetMaxLotsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buy_limits_)*/nullptr
  , /*decltype(_impl_.buy_margin_limits_)*/nullptr
  , /*decltype(_impl_.sell_limits_)*/nullptr
  , /*decltype(_impl_.sell_margin_limits_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMaxLotsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMaxLotsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMaxLotsResponseDefaultTypeInternal() {}
  union {
    GetMaxLotsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMaxLotsResponseDefaultTypeInternal _GetMaxLotsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetOrderPriceRequest::GetOrderPriceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrderPriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderPriceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderPriceRequestDefaultTypeInternal() {}
  union {
    GetOrderPriceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderPriceRequestDefaultTypeInternal _GetOrderPriceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOrderPriceResponse_ExtraBond::GetOrderPriceResponse_ExtraBond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aci_value_)*/nullptr
  , /*decltype(_impl_.nominal_conversion_rate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrderPriceResponse_ExtraBondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderPriceResponse_ExtraBondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderPriceResponse_ExtraBondDefaultTypeInternal() {}
  union {
    GetOrderPriceResponse_ExtraBond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderPriceResponse_ExtraBondDefaultTypeInternal _GetOrderPriceResponse_ExtraBond_default_instance_;
PROTOBUF_CONSTEXPR GetOrderPriceResponse_ExtraFuture::GetOrderPriceResponse_ExtraFuture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.initial_margin_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrderPriceResponse_ExtraFutureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderPriceResponse_ExtraFutureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderPriceResponse_ExtraFutureDefaultTypeInternal() {}
  union {
    GetOrderPriceResponse_ExtraFuture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderPriceResponse_ExtraFutureDefaultTypeInternal _GetOrderPriceResponse_ExtraFuture_default_instance_;
PROTOBUF_CONSTEXPR GetOrderPriceResponse::GetOrderPriceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_order_amount_)*/nullptr
  , /*decltype(_impl_.initial_order_amount_)*/nullptr
  , /*decltype(_impl_.executed_commission_)*/nullptr
  , /*decltype(_impl_.executed_commission_rub_)*/nullptr
  , /*decltype(_impl_.service_commission_)*/nullptr
  , /*decltype(_impl_.deal_commission_)*/nullptr
  , /*decltype(_impl_.lots_requested_)*/int64_t{0}
  , /*decltype(_impl_.instrument_extra_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetOrderPriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderPriceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderPriceResponseDefaultTypeInternal() {}
  union {
    GetOrderPriceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderPriceResponseDefaultTypeInternal _GetOrderPriceResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_orders_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_orders_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_orders_2eproto = nullptr;

const uint32_t TableStruct_orders_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest, _impl_.accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _impl_.trades_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrades, _impl_.instrument_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrade, _impl_.date_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrade, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrade, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderTrade, _impl_.trade_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.time_in_force_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest, _impl_.price_type_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.execution_report_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.lots_requested_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.lots_executed_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.initial_order_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.executed_order_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.total_order_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.initial_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.executed_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.aci_value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.initial_security_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.initial_order_price_pt_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.order_request_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse, _impl_.response_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest, _impl_.order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse, _impl_.response_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest, _impl_.price_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse, _impl_.orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.execution_report_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.lots_requested_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.lots_executed_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.initial_order_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.executed_order_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.total_order_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.average_position_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.initial_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.executed_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.initial_security_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.stages_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.service_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.order_date_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderState, _impl_.order_request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderStage, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderStage, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderStage, _impl_.trade_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderStage, _impl_.execution_time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _impl_.idempotency_key_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest, _impl_.price_type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest, _impl_.price_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView, _impl_.buy_money_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView, _impl_.buy_max_lots_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView, _impl_.buy_max_market_lots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView, _impl_.sell_max_lots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse, _impl_.buy_limits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse, _impl_.buy_margin_limits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse, _impl_.sell_limits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse, _impl_.sell_margin_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond, _impl_.aci_value_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond, _impl_.nominal_conversion_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture, _impl_.initial_margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.total_order_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.initial_order_amount_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.lots_requested_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.executed_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.executed_commission_rub_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.service_commission_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.deal_commission_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse, _impl_.instrument_extra_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest)},
  { 7, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse)},
  { 16, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderTrades)},
  { 29, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderTrade)},
  { 39, 55, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PostOrderRequest)},
  { 65, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PostOrderResponse)},
  { 90, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest)},
  { 98, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse)},
  { 106, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest)},
  { 115, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest)},
  { 122, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse)},
  { 129, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderState)},
  { 155, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderStage)},
  { 165, 177, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest)},
  { 183, 192, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest)},
  { 195, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView)},
  { 204, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView)},
  { 211, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse)},
  { 222, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest)},
  { 233, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond)},
  { 241, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture)},
  { 248, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_TradesStreamRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradesStreamResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OrderTrades_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OrderTrade_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PostOrderRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PostOrderResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CancelOrderRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CancelOrderResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrderStateRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrdersRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrdersResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OrderState_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OrderStage_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_ReplaceOrderRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsResponse_BuyLimitsView_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsResponse_SellLimitsView_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetMaxLotsResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrderPriceRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrderPriceResponse_ExtraBond_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrderPriceResponse_ExtraFuture_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrderPriceResponse_default_instance_._instance,
};

const char descriptor_table_protodef_orders_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014orders.proto\022&tinkoff.public_.invest.a"
  "pi.contract.v1\032\014common.proto\032\037google/pro"
  "tobuf/timestamp.proto\032\037google/api/field_"
  "behavior.proto\"\'\n\023TradesStreamRequest\022\020\n"
  "\010accounts\030\001 \003(\t\"\254\001\n\024TradesStreamResponse"
  "\022K\n\014order_trades\030\001 \001(\01323.tinkoff.public_"
  ".invest.api.contract.v1.OrderTradesH\000\022<\n"
  "\004ping\030\002 \001(\0132,.tinkoff.public_.invest.api"
  ".contract.v1.PingH\000B\t\n\007payload\"\230\002\n\013Order"
  "Trades\022\020\n\010order_id\030\001 \001(\t\022.\n\ncreated_at\030\002"
  " \001(\0132\032.google.protobuf.Timestamp\022I\n\tdire"
  "ction\030\003 \001(\01626.tinkoff.public_.invest.api"
  ".contract.v1.OrderDirection\022\014\n\004figi\030\004 \001("
  "\t\022B\n\006trades\030\005 \003(\01322.tinkoff.public_.inve"
  "st.api.contract.v1.OrderTrade\022\022\n\naccount"
  "_id\030\006 \001(\t\022\026\n\016instrument_uid\030\007 \001(\t\"\241\001\n\nOr"
  "derTrade\022-\n\tdate_time\030\001 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022@\n\005price\030\002 \001(\01321.tinkoff"
  ".public_.invest.api.contract.v1.Quotatio"
  "n\022\020\n\010quantity\030\003 \001(\003\022\020\n\010trade_id\030\004 \001(\t\"\224\004"
  "\n\020PostOrderRequest\022\025\n\004figi\030\001 \001(\tB\002\030\001H\000\210\001"
  "\001\022\025\n\010quantity\030\002 \001(\003B\003\340A\002\022E\n\005price\030\003 \001(\0132"
  "1.tinkoff.public_.invest.api.contract.v1"
  ".QuotationH\001\210\001\001\022N\n\tdirection\030\004 \001(\01626.tin"
  "koff.public_.invest.api.contract.v1.Orde"
  "rDirectionB\003\340A\002\022\027\n\naccount_id\030\005 \001(\tB\003\340A\002"
  "\022J\n\norder_type\030\006 \001(\01621.tinkoff.public_.i"
  "nvest.api.contract.v1.OrderTypeB\003\340A\002\022\025\n\010"
  "order_id\030\007 \001(\tB\003\340A\002\022\025\n\rinstrument_id\030\010 \001"
  "(\t\022N\n\rtime_in_force\030\t \001(\01627.tinkoff.publ"
  "ic_.invest.api.contract.v1.TimeInForceTy"
  "pe\022E\n\nprice_type\030\n \001(\01621.tinkoff.public_"
  ".invest.api.contract.v1.PriceTypeB\007\n\005_fi"
  "giB\010\n\006_price\"\364\010\n\021PostOrderResponse\022\020\n\010or"
  "der_id\030\001 \001(\t\022c\n\027execution_report_status\030"
  "\002 \001(\0162B.tinkoff.public_.invest.api.contr"
  "act.v1.OrderExecutionReportStatus\022\026\n\016lot"
  "s_requested\030\003 \001(\003\022\025\n\rlots_executed\030\004 \001(\003"
  "\022O\n\023initial_order_price\030\005 \001(\01322.tinkoff."
  "public_.invest.api.contract.v1.MoneyValu"
  "e\022P\n\024executed_order_price\030\006 \001(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022N\n\022total_order_amount\030\007 \001(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022N\n\022initial_commission\030\010 \001(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022O\n\023executed_commission\030\t \001(\01322.tinko"
  "ff.public_.invest.api.contract.v1.MoneyV"
  "alue\022E\n\taci_value\030\n \001(\01322.tinkoff.public"
  "_.invest.api.contract.v1.MoneyValue\022\014\n\004f"
  "igi\030\013 \001(\t\022I\n\tdirection\030\014 \001(\01626.tinkoff.p"
  "ublic_.invest.api.contract.v1.OrderDirec"
  "tion\022R\n\026initial_security_price\030\r \001(\01322.t"
  "inkoff.public_.invest.api.contract.v1.Mo"
  "neyValue\022E\n\norder_type\030\016 \001(\01621.tinkoff.p"
  "ublic_.invest.api.contract.v1.OrderType\022"
  "\017\n\007message\030\017 \001(\t\022Q\n\026initial_order_price_"
  "pt\030\020 \001(\01321.tinkoff.public_.invest.api.co"
  "ntract.v1.Quotation\022\026\n\016instrument_uid\030\021 "
  "\001(\t\022\030\n\020order_request_id\030\024 \001(\t\022T\n\021respons"
  "e_metadata\030\376\001 \001(\01328.tinkoff.public_.inve"
  "st.api.contract.v1.ResponseMetadata\"D\n\022C"
  "ancelOrderRequest\022\027\n\naccount_id\030\001 \001(\tB\003\340"
  "A\002\022\025\n\010order_id\030\002 \001(\tB\003\340A\002\"\225\001\n\023CancelOrde"
  "rResponse\022(\n\004time\030\001 \001(\0132\032.google.protobu"
  "f.Timestamp\022T\n\021response_metadata\030\376\001 \001(\0132"
  "8.tinkoff.public_.invest.api.contract.v1"
  ".ResponseMetadata\"\215\001\n\024GetOrderStateReque"
  "st\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\022\025\n\010order_id\030"
  "\002 \001(\tB\003\340A\002\022E\n\nprice_type\030\003 \001(\01621.tinkoff"
  ".public_.invest.api.contract.v1.PriceTyp"
  "e\"+\n\020GetOrdersRequest\022\027\n\naccount_id\030\001 \001("
  "\tB\003\340A\002\"W\n\021GetOrdersResponse\022B\n\006orders\030\001 "
  "\003(\01322.tinkoff.public_.invest.api.contrac"
  "t.v1.OrderState\"\226\t\n\nOrderState\022\020\n\010order_"
  "id\030\001 \001(\t\022c\n\027execution_report_status\030\002 \001("
  "\0162B.tinkoff.public_.invest.api.contract."
  "v1.OrderExecutionReportStatus\022\026\n\016lots_re"
  "quested\030\003 \001(\003\022\025\n\rlots_executed\030\004 \001(\003\022O\n\023"
  "initial_order_price\030\005 \001(\01322.tinkoff.publ"
  "ic_.invest.api.contract.v1.MoneyValue\022P\n"
  "\024executed_order_price\030\006 \001(\01322.tinkoff.pu"
  "blic_.invest.api.contract.v1.MoneyValue\022"
  "N\n\022total_order_amount\030\007 \001(\01322.tinkoff.pu"
  "blic_.invest.api.contract.v1.MoneyValue\022"
  "R\n\026average_position_price\030\010 \001(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022N\n\022initial_commission\030\t \001(\01322.tinkof"
  "f.public_.invest.api.contract.v1.MoneyVa"
  "lue\022O\n\023executed_commission\030\n \001(\01322.tinko"
  "ff.public_.invest.api.contract.v1.MoneyV"
  "alue\022\014\n\004figi\030\013 \001(\t\022I\n\tdirection\030\014 \001(\01626."
  "tinkoff.public_.invest.api.contract.v1.O"
  "rderDirection\022R\n\026initial_security_price\030"
  "\r \001(\01322.tinkoff.public_.invest.api.contr"
  "act.v1.MoneyValue\022B\n\006stages\030\016 \003(\01322.tink"
  "off.public_.invest.api.contract.v1.Order"
  "Stage\022N\n\022service_commission\030\017 \001(\01322.tink"
  "off.public_.invest.api.contract.v1.Money"
  "Value\022\020\n\010currency\030\020 \001(\t\022E\n\norder_type\030\021 "
  "\001(\01621.tinkoff.public_.invest.api.contrac"
  "t.v1.OrderType\022.\n\norder_date\030\022 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022\026\n\016instrument_uid"
  "\030\023 \001(\t\022\030\n\020order_request_id\030\024 \001(\t\"\247\001\n\nOrd"
  "erStage\022A\n\005price\030\001 \001(\01322.tinkoff.public_"
  ".invest.api.contract.v1.MoneyValue\022\020\n\010qu"
  "antity\030\002 \001(\003\022\020\n\010trade_id\030\003 \001(\t\0222\n\016execut"
  "ion_time\030\005 \001(\0132\032.google.protobuf.Timesta"
  "mp\"\246\002\n\023ReplaceOrderRequest\022\027\n\naccount_id"
  "\030\001 \001(\tB\003\340A\002\022\025\n\010order_id\030\006 \001(\tB\003\340A\002\022\034\n\017id"
  "empotency_key\030\007 \001(\tB\003\340A\002\022\025\n\010quantity\030\013 \001"
  "(\003B\003\340A\002\022E\n\005price\030\014 \001(\01321.tinkoff.public_"
  ".invest.api.contract.v1.QuotationH\000\210\001\001\022J"
  "\n\nprice_type\030\r \001(\01621.tinkoff.public_.inv"
  "est.api.contract.v1.PriceTypeH\001\210\001\001B\010\n\006_p"
  "riceB\r\n\013_price_type\"\231\001\n\021GetMaxLotsReques"
  "t\022\027\n\naccount_id\030\001 \001(\tB\003\340A\002\022\032\n\rinstrument"
  "_id\030\002 \001(\tB\003\340A\002\022E\n\005price\030\003 \001(\01321.tinkoff."
  "public_.invest.api.contract.v1.Quotation"
  "H\000\210\001\001B\010\n\006_price\"\353\004\n\022GetMaxLotsResponse\022\020"
  "\n\010currency\030\001 \001(\t\022\\\n\nbuy_limits\030\002 \001(\0132H.t"
  "inkoff.public_.invest.api.contract.v1.Ge"
  "tMaxLotsResponse.BuyLimitsView\022c\n\021buy_ma"
  "rgin_limits\030\003 \001(\0132H.tinkoff.public_.inve"
  "st.api.contract.v1.GetMaxLotsResponse.Bu"
  "yLimitsView\022^\n\013sell_limits\030\004 \001(\0132I.tinko"
  "ff.public_.invest.api.contract.v1.GetMax"
  "LotsResponse.SellLimitsView\022e\n\022sell_marg"
  "in_limits\030\005 \001(\0132I.tinkoff.public_.invest"
  ".api.contract.v1.GetMaxLotsResponse.Sell"
  "LimitsView\032\217\001\n\rBuyLimitsView\022K\n\020buy_mone"
  "y_amount\030\001 \001(\01321.tinkoff.public_.invest."
  "api.contract.v1.Quotation\022\024\n\014buy_max_lot"
  "s\030\002 \001(\003\022\033\n\023buy_max_market_lots\030\003 \001(\003\032\'\n\016"
  "SellLimitsView\022\025\n\rsell_max_lots\030\001 \001(\003\"\340\001"
  "\n\024GetOrderPriceRequest\022\022\n\naccount_id\030\001 \001"
  "(\t\022\025\n\rinstrument_id\030\002 \001(\t\022@\n\005price\030\003 \001(\013"
  "21.tinkoff.public_.invest.api.contract.v"
  "1.Quotation\022I\n\tdirection\030\014 \001(\01626.tinkoff"
  ".public_.invest.api.contract.v1.OrderDir"
  "ection\022\020\n\010quantity\030\r \001(\003\"\356\007\n\025GetOrderPri"
  "ceResponse\022N\n\022total_order_amount\030\001 \001(\01322"
  ".tinkoff.public_.invest.api.contract.v1."
  "MoneyValue\022P\n\024initial_order_amount\030\005 \001(\013"
  "22.tinkoff.public_.invest.api.contract.v"
  "1.MoneyValue\022\026\n\016lots_requested\030\003 \001(\003\022O\n\023"
  "executed_commission\030\007 \001(\01322.tinkoff.publ"
  "ic_.invest.api.contract.v1.MoneyValue\022S\n"
  "\027executed_commission_rub\030\010 \001(\01322.tinkoff"
  ".public_.invest.api.contract.v1.MoneyVal"
  "ue\022N\n\022service_commission\030\t \001(\01322.tinkoff"
  ".public_.invest.api.contract.v1.MoneyVal"
  "ue\022K\n\017deal_commission\030\n \001(\01322.tinkoff.pu"
  "blic_.invest.api.contract.v1.MoneyValue\022"
  "]\n\nextra_bond\030\014 \001(\0132G.tinkoff.public_.in"
  "vest.api.contract.v1.GetOrderPriceRespon"
  "se.ExtraBondH\000\022a\n\014extra_future\030\r \001(\0132I.t"
  "inkoff.public_.invest.api.contract.v1.Ge"
  "tOrderPriceResponse.ExtraFutureH\000\032\246\001\n\tEx"
  "traBond\022E\n\taci_value\030\002 \001(\01322.tinkoff.pub"
  "lic_.invest.api.contract.v1.MoneyValue\022R"
  "\n\027nominal_conversion_rate\030\003 \001(\01321.tinkof"
  "f.public_.invest.api.contract.v1.Quotati"
  "on\032Y\n\013ExtraFuture\022J\n\016initial_margin\030\002 \001("
  "\01322.tinkoff.public_.invest.api.contract."
  "v1.MoneyValueB\022\n\020instrument_extra*d\n\016Ord"
  "erDirection\022\037\n\033ORDER_DIRECTION_UNSPECIFI"
  "ED\020\000\022\027\n\023ORDER_DIRECTION_BUY\020\001\022\030\n\024ORDER_D"
  "IRECTION_SELL\020\002*n\n\tOrderType\022\032\n\026ORDER_TY"
  "PE_UNSPECIFIED\020\000\022\024\n\020ORDER_TYPE_LIMIT\020\001\022\025"
  "\n\021ORDER_TYPE_MARKET\020\002\022\030\n\024ORDER_TYPE_BEST"
  "PRICE\020\003*\200\002\n\032OrderExecutionReportStatus\022\'"
  "\n#EXECUTION_REPORT_STATUS_UNSPECIFIED\020\000\022"
  " \n\034EXECUTION_REPORT_STATUS_FILL\020\001\022$\n EXE"
  "CUTION_REPORT_STATUS_REJECTED\020\002\022%\n!EXECU"
  "TION_REPORT_STATUS_CANCELLED\020\003\022\037\n\033EXECUT"
  "ION_REPORT_STATUS_NEW\020\004\022)\n%EXECUTION_REP"
  "ORT_STATUS_PARTIALLYFILL\020\005*\210\001\n\017TimeInFor"
  "ceType\022\035\n\031TIME_IN_FORCE_UNSPECIFIED\020\000\022\025\n"
  "\021TIME_IN_FORCE_DAY\020\001\022\037\n\033TIME_IN_FORCE_FI"
  "LL_AND_KILL\020\002\022\036\n\032TIME_IN_FORCE_FILL_OR_K"
  "ILL\020\0032\243\001\n\023OrdersStreamService\022\213\001\n\014Trades"
  "Stream\022;.tinkoff.public_.invest.api.cont"
  "ract.v1.TradesStreamRequest\032<.tinkoff.pu"
  "blic_.invest.api.contract.v1.TradesStrea"
  "mResponse0\0012\300\007\n\rOrdersService\022\200\001\n\tPostOr"
  "der\0228.tinkoff.public_.invest.api.contrac"
  "t.v1.PostOrderRequest\0329.tinkoff.public_."
  "invest.api.contract.v1.PostOrderResponse"
  "\022\206\001\n\013CancelOrder\022:.tinkoff.public_.inves"
  "t.api.contract.v1.CancelOrderRequest\032;.t"
  "inkoff.public_.invest.api.contract.v1.Ca"
  "ncelOrderResponse\022\201\001\n\rGetOrderState\022<.ti"
  "nkoff.public_.invest.api.contract.v1.Get"
  "OrderStateRequest\0322.tinkoff.public_.inve"
  "st.api.contract.v1.OrderState\022\200\001\n\tGetOrd"
  "ers\0228.tinkoff.public_.invest.api.contrac"
  "t.v1.GetOrdersRequest\0329.tinkoff.public_."
  "invest.api.contract.v1.GetOrdersResponse"
  "\022\206\001\n\014ReplaceOrder\022;.tinkoff.public_.inve"
  "st.api.contract.v1.ReplaceOrderRequest\0329"
  ".tinkoff.public_.invest.api.contract.v1."
  "PostOrderResponse\022\203\001\n\nGetMaxLots\0229.tinko"
  "ff.public_.invest.api.contract.v1.GetMax"
  "LotsRequest\032:.tinkoff.public_.invest.api"
  ".contract.v1.GetMaxLotsResponse\022\214\001\n\rGetO"
  "rderPrice\022<.tinkoff.public_.invest.api.c"
  "ontract.v1.GetOrderPriceRequest\032=.tinkof"
  "f.public_.invest.api.contract.v1.GetOrde"
  "rPriceResponseBa\n\034ru.tinkoff.piapi.contr"
  "act.v1P\001Z\014./;investapi\242\002\005TIAPI\252\002\024Tinkoff"
  ".InvestApi.V1\312\002\021Tinkoff\\Invest\\V1b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_orders_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_orders_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_orders_2eproto = {
    false, false, 8481, descriptor_table_protodef_orders_2eproto,
    "orders.proto",
    &descriptor_table_orders_2eproto_once, descriptor_table_orders_2eproto_deps, 3, 22,
    schemas, file_default_instances, TableStruct_orders_2eproto::offsets,
    file_level_metadata_orders_2eproto, file_level_enum_descriptors_orders_2eproto,
    file_level_service_descriptors_orders_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_orders_2eproto_getter() {
  return &descriptor_table_orders_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_orders_2eproto(&descriptor_table_orders_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_orders_2eproto);
  return file_level_enum_descriptors_orders_2eproto[0];
}
bool OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_orders_2eproto);
  return file_level_enum_descriptors_orders_2eproto[1];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderExecutionReportStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_orders_2eproto);
  return file_level_enum_descriptors_orders_2eproto[2];
}
bool OrderExecutionReportStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeInForceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_orders_2eproto);
  return file_level_enum_descriptors_orders_2eproto[3];
}
bool TimeInForceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TradesStreamRequest::_Internal {
 public:
};

TradesStreamRequest::TradesStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
}
TradesStreamRequest::TradesStreamRequest(const TradesStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradesStreamRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
}

inline void TradesStreamRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TradesStreamRequest::~TradesStreamRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradesStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accounts_.~RepeatedPtrField();
}

void TradesStreamRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradesStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesStreamRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradesStreamRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1;
  for (int i = 0, n = this->_internal_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradesStreamRequest.accounts");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
  return target;
}

size_t TradesStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accounts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.accounts_.size());
  for (int i = 0, n = _impl_.accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.accounts_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradesStreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradesStreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradesStreamRequest::GetClassData() const { return &_class_data_; }


void TradesStreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradesStreamRequest*>(&to_msg);
  auto& from = static_cast<const TradesStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradesStreamRequest::CopyFrom(const TradesStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradesStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesStreamRequest::IsInitialized() const {
  return true;
}

void TradesStreamRequest::InternalSwap(TradesStreamRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesStreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[0]);
}

// ===================================================================

class TradesStreamResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::OrderTrades& order_trades(const TradesStreamResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Ping& ping(const TradesStreamResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::OrderTrades&
TradesStreamResponse::_Internal::order_trades(const TradesStreamResponse* msg) {
  return *msg->_impl_.payload_.order_trades_;
}
const ::tinkoff::public_::invest::api::contract::v1::Ping&
TradesStreamResponse::_Internal::ping(const TradesStreamResponse* msg) {
  return *msg->_impl_.payload_.ping_;
}
void TradesStreamResponse::set_allocated_order_trades(::tinkoff::public_::invest::api::contract::v1::OrderTrades* order_trades) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_trades) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_trades);
    if (message_arena != submessage_arena) {
      order_trades = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_trades, submessage_arena);
    }
    set_has_order_trades();
    _impl_.payload_.order_trades_ = order_trades;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.order_trades)
}
void TradesStreamResponse::set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping));
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse.ping)
}
void TradesStreamResponse::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.ping_;
    }
    clear_has_payload();
  }
}
TradesStreamResponse::TradesStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
}
TradesStreamResponse::TradesStreamResponse(const TradesStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradesStreamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kOrderTrades: {
      _this->_internal_mutable_order_trades()->::tinkoff::public_::invest::api::contract::v1::OrderTrades::MergeFrom(
          from._internal_order_trades());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
}

inline void TradesStreamResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

TradesStreamResponse::~TradesStreamResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradesStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void TradesStreamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradesStreamResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  switch (payload_case()) {
    case kOrderTrades: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_trades_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.ping_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TradesStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesStreamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.OrderTrades order_trades = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_trades(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Ping ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradesStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.OrderTrades order_trades = 1;
  if (_internal_has_order_trades()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order_trades(this),
        _Internal::order_trades(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Ping ping = 2;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  return target;
}

size_t TradesStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.OrderTrades order_trades = 1;
    case kOrderTrades: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_trades_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Ping ping = 2;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.ping_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradesStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradesStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradesStreamResponse::GetClassData() const { return &_class_data_; }


void TradesStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradesStreamResponse*>(&to_msg);
  auto& from = static_cast<const TradesStreamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kOrderTrades: {
      _this->_internal_mutable_order_trades()->::tinkoff::public_::invest::api::contract::v1::OrderTrades::MergeFrom(
          from._internal_order_trades());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradesStreamResponse::CopyFrom(const TradesStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradesStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesStreamResponse::IsInitialized() const {
  return true;
}

void TradesStreamResponse::InternalSwap(TradesStreamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesStreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[1]);
}

// ===================================================================

class OrderTrades::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const OrderTrades* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderTrades::_Internal::created_at(const OrderTrades* msg) {
  return *msg->_impl_.created_at_;
}
void OrderTrades::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
OrderTrades::OrderTrades(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderTrades)
}
OrderTrades::OrderTrades(const OrderTrades& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderTrades* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){from._impl_.trades_}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.direction_ = from._impl_.direction_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderTrades)
}

inline void OrderTrades::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){arena}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderTrades::~OrderTrades() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderTrades)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderTrades::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trades_.~RepeatedPtrField();
  _impl_.order_id_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void OrderTrades::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderTrades::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderTrades)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trades_.Clear();
  _impl_.order_id_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.direction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderTrades::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderTrades.order_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // string figi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderTrades.figi"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.OrderTrade trades = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderTrades.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderTrades.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderTrades::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderTrades)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderTrades.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 3;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_direction(), target);
  }

  // string figi = 4;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderTrades.figi");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_figi(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderTrade trades = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string account_id = 6;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderTrades.account_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_account_id(), target);
  }

  // string instrument_uid = 7;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderTrades.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderTrades)
  return target;
}

size_t OrderTrades::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderTrades)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderTrade trades = 5;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->_impl_.trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string figi = 4;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string account_id = 6;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string instrument_uid = 7;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 3;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderTrades::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderTrades::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderTrades::GetClassData() const { return &_class_data_; }


void OrderTrades::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderTrades*>(&to_msg);
  auto& from = static_cast<const OrderTrades&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderTrades)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trades_.MergeFrom(from._impl_.trades_);
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderTrades::CopyFrom(const OrderTrades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderTrades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderTrades::IsInitialized() const {
  return true;
}

void OrderTrades::InternalSwap(OrderTrades* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trades_.InternalSwap(&other->_impl_.trades_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderTrades, _impl_.direction_)
      + sizeof(OrderTrades::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(OrderTrades, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderTrades::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[2]);
}

// ===================================================================

class OrderTrade::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_time(const OrderTrade* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const OrderTrade* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderTrade::_Internal::date_time(const OrderTrade* msg) {
  return *msg->_impl_.date_time_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
OrderTrade::_Internal::price(const OrderTrade* msg) {
  return *msg->_impl_.price_;
}
void OrderTrade::clear_date_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_time_ != nullptr) {
    delete _impl_.date_time_;
  }
  _impl_.date_time_ = nullptr;
}
void OrderTrade::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
OrderTrade::OrderTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderTrade)
}
OrderTrade::OrderTrade(const OrderTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderTrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.date_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    _this->_impl_.trade_id_.Set(from._internal_trade_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_date_time()) {
    _this->_impl_.date_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_time_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  _this->_impl_.quantity_ = from._impl_.quantity_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderTrade)
}

inline void OrderTrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.date_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderTrade::~OrderTrade() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderTrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderTrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trade_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.date_time_;
  if (this != internal_default_instance()) delete _impl_.price_;
}

void OrderTrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderTrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trade_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.date_time_ != nullptr) {
    delete _impl_.date_time_;
  }
  _impl_.date_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  _impl_.quantity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderTrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp date_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderTrade.trade_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderTrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderTrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp date_time = 1;
  if (this->_internal_has_date_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::date_time(this),
        _Internal::date_time(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 3;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_quantity(), target);
  }

  // string trade_id = 4;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderTrade.trade_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_trade_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderTrade)
  return target;
}

size_t OrderTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderTrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_id = 4;
  if (!this->_internal_trade_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // .google.protobuf.Timestamp date_time = 1;
  if (this->_internal_has_date_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int64 quantity = 3;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderTrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderTrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderTrade::GetClassData() const { return &_class_data_; }


void OrderTrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderTrade*>(&to_msg);
  auto& from = static_cast<const OrderTrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderTrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_id().empty()) {
    _this->_internal_set_trade_id(from._internal_trade_id());
  }
  if (from._internal_has_date_time()) {
    _this->_internal_mutable_date_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_time());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderTrade::CopyFrom(const OrderTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderTrade::IsInitialized() const {
  return true;
}

void OrderTrade::InternalSwap(OrderTrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trade_id_, lhs_arena,
      &other->_impl_.trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderTrade, _impl_.quantity_)
      + sizeof(OrderTrade::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(OrderTrade, _impl_.date_time_)>(
          reinterpret_cast<char*>(&_impl_.date_time_),
          reinterpret_cast<char*>(&other->_impl_.date_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderTrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[3]);
}

// ===================================================================

class PostOrderRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PostOrderRequest>()._impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const PostOrderRequest* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PostOrderRequest::_Internal::price(const PostOrderRequest* msg) {
  return *msg->_impl_.price_;
}
void PostOrderRequest::clear_price() {
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PostOrderRequest::PostOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
}
PostOrderRequest::PostOrderRequest(const PostOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.time_in_force_){}
    , decltype(_impl_.price_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_type_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.price_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
}

inline void PostOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.time_in_force_){0}
    , decltype(_impl_.price_type_){0}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostOrderRequest::~PostOrderRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.order_id_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
}

void PostOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.figi_.ClearNonDefaultToEmpty();
  }
  _impl_.account_id_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  ::memset(&_impl_.quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_type_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.price_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // string account_id = 5 [(.google.api.field_behavior) = REQUIRED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 6 [(.google.api.field_behavior) = REQUIRED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 7 [(.google.api.field_behavior) = REQUIRED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_id"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TimeInForceType time_in_force = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_time_in_force(static_cast<::tinkoff::public_::invest::api::contract::v1::TimeInForceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_price_type(static_cast<::tinkoff::public_::invest::api::contract::v1::PriceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  // string account_id = 5 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_account_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_order_type(), target);
  }

  // string order_id = 7 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_order_id(), target);
  }

  // string instrument_id = 8;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_instrument_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.TimeInForceType time_in_force = 9;
  if (this->_internal_time_in_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_time_in_force(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 10;
  if (this->_internal_price_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_price_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
  return target;
}

size_t PostOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string account_id = 5 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string order_id = 7 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string instrument_id = 8;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int64 quantity = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_order_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.TimeInForceType time_in_force = 9;
  if (this->_internal_time_in_force() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_time_in_force());
  }

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 10;
  if (this->_internal_price_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_price_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostOrderRequest::GetClassData() const { return &_class_data_; }


void PostOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostOrderRequest*>(&to_msg);
  auto& from = static_cast<const PostOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_figi()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_order_type() != 0) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (from._internal_time_in_force() != 0) {
    _this->_internal_set_time_in_force(from._internal_time_in_force());
  }
  if (from._internal_price_type() != 0) {
    _this->_internal_set_price_type(from._internal_price_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostOrderRequest::CopyFrom(const PostOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PostOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOrderRequest::IsInitialized() const {
  return true;
}

void PostOrderRequest::InternalSwap(PostOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostOrderRequest, _impl_.price_type_)
      + sizeof(PostOrderRequest::_impl_.price_type_)
      - PROTOBUF_FIELD_OFFSET(PostOrderRequest, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[4]);
}

// ===================================================================

class PostOrderResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_price(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_order_price(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_commission(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_security_price(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& initial_order_price_pt(const PostOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& response_metadata(const PostOrderResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PostOrderResponse::_Internal::initial_order_price(const PostOrderResponse* msg) {
  return *msg->_impl_.initial_order_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PostOrderResponse::_Internal::executed_order_price(const PostOrderResponse* msg) {
  return *msg->_impl_.executed_order_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PostOrderResponse::_Internal::total_order_amount(const PostOrderResponse* msg) {
  return *msg->_impl_.total_order_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PostOrderResponse::_Internal::initial_commission(const PostOrderResponse* msg) {
  return *msg->_impl_.initial_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PostOrderResponse::_Internal::executed_commission(const PostOrderResponse* msg) {
  return *msg->_impl_.executed_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PostOrderResponse::_Internal::aci_value(const PostOrderResponse* msg) {
  return *msg->_impl_.aci_value_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
PostOrderResponse::_Internal::initial_security_price(const PostOrderResponse* msg) {
  return *msg->_impl_.initial_security_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
PostOrderResponse::_Internal::initial_order_price_pt(const PostOrderResponse* msg) {
  return *msg->_impl_.initial_order_price_pt_;
}
const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata&
PostOrderResponse::_Internal::response_metadata(const PostOrderResponse* msg) {
  return *msg->_impl_.response_metadata_;
}
void PostOrderResponse::clear_initial_order_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_price_ != nullptr) {
    delete _impl_.initial_order_price_;
  }
  _impl_.initial_order_price_ = nullptr;
}
void PostOrderResponse::clear_executed_order_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.executed_order_price_ != nullptr) {
    delete _impl_.executed_order_price_;
  }
  _impl_.executed_order_price_ = nullptr;
}
void PostOrderResponse::clear_total_order_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
}
void PostOrderResponse::clear_initial_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_commission_ != nullptr) {
    delete _impl_.initial_commission_;
  }
  _impl_.initial_commission_ = nullptr;
}
void PostOrderResponse::clear_executed_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_ != nullptr) {
    delete _impl_.executed_commission_;
  }
  _impl_.executed_commission_ = nullptr;
}
void PostOrderResponse::clear_aci_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
}
void PostOrderResponse::clear_initial_security_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_security_price_ != nullptr) {
    delete _impl_.initial_security_price_;
  }
  _impl_.initial_security_price_ = nullptr;
}
void PostOrderResponse::clear_initial_order_price_pt() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_price_pt_ != nullptr) {
    delete _impl_.initial_order_price_pt_;
  }
  _impl_.initial_order_price_pt_ = nullptr;
}
void PostOrderResponse::clear_response_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
}
PostOrderResponse::PostOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
}
PostOrderResponse::PostOrderResponse(const PostOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.order_request_id_){}
    , decltype(_impl_.initial_order_price_){nullptr}
    , decltype(_impl_.executed_order_price_){nullptr}
    , decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.initial_commission_){nullptr}
    , decltype(_impl_.executed_commission_){nullptr}
    , decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.initial_security_price_){nullptr}
    , decltype(_impl_.initial_order_price_pt_){nullptr}
    , decltype(_impl_.response_metadata_){nullptr}
    , decltype(_impl_.lots_requested_){}
    , decltype(_impl_.lots_executed_){}
    , decltype(_impl_.execution_report_status_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.order_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_request_id().empty()) {
    _this->_impl_.order_request_id_.Set(from._internal_order_request_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_initial_order_price()) {
    _this->_impl_.initial_order_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_order_price_);
  }
  if (from._internal_has_executed_order_price()) {
    _this->_impl_.executed_order_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.executed_order_price_);
  }
  if (from._internal_has_total_order_amount()) {
    _this->_impl_.total_order_amount_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_order_amount_);
  }
  if (from._internal_has_initial_commission()) {
    _this->_impl_.initial_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_commission_);
  }
  if (from._internal_has_executed_commission()) {
    _this->_impl_.executed_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.executed_commission_);
  }
  if (from._internal_has_aci_value()) {
    _this->_impl_.aci_value_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.aci_value_);
  }
  if (from._internal_has_initial_security_price()) {
    _this->_impl_.initial_security_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_security_price_);
  }
  if (from._internal_has_initial_order_price_pt()) {
    _this->_impl_.initial_order_price_pt_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.initial_order_price_pt_);
  }
  if (from._internal_has_response_metadata()) {
    _this->_impl_.response_metadata_ = new ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata(*from._impl_.response_metadata_);
  }
  ::memcpy(&_impl_.lots_requested_, &from._impl_.lots_requested_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_type_) -
    reinterpret_cast<char*>(&_impl_.lots_requested_)) + sizeof(_impl_.order_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
}

inline void PostOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.order_request_id_){}
    , decltype(_impl_.initial_order_price_){nullptr}
    , decltype(_impl_.executed_order_price_){nullptr}
    , decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.initial_commission_){nullptr}
    , decltype(_impl_.executed_commission_){nullptr}
    , decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.initial_security_price_){nullptr}
    , decltype(_impl_.initial_order_price_pt_){nullptr}
    , decltype(_impl_.response_metadata_){nullptr}
    , decltype(_impl_.lots_requested_){int64_t{0}}
    , decltype(_impl_.lots_executed_){int64_t{0}}
    , decltype(_impl_.execution_report_status_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.order_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostOrderResponse::~PostOrderResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_id_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.message_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.order_request_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.initial_order_price_;
  if (this != internal_default_instance()) delete _impl_.executed_order_price_;
  if (this != internal_default_instance()) delete _impl_.total_order_amount_;
  if (this != internal_default_instance()) delete _impl_.initial_commission_;
  if (this != internal_default_instance()) delete _impl_.executed_commission_;
  if (this != internal_default_instance()) delete _impl_.aci_value_;
  if (this != internal_default_instance()) delete _impl_.initial_security_price_;
  if (this != internal_default_instance()) delete _impl_.initial_order_price_pt_;
  if (this != internal_default_instance()) delete _impl_.response_metadata_;
}

void PostOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_id_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.order_request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_price_ != nullptr) {
    delete _impl_.initial_order_price_;
  }
  _impl_.initial_order_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.executed_order_price_ != nullptr) {
    delete _impl_.executed_order_price_;
  }
  _impl_.executed_order_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_commission_ != nullptr) {
    delete _impl_.initial_commission_;
  }
  _impl_.initial_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_ != nullptr) {
    delete _impl_.executed_commission_;
  }
  _impl_.executed_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_security_price_ != nullptr) {
    delete _impl_.initial_security_price_;
  }
  _impl_.initial_security_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_price_pt_ != nullptr) {
    delete _impl_.initial_order_price_pt_;
  }
  _impl_.initial_order_price_pt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
  ::memset(&_impl_.lots_requested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_type_) -
      reinterpret_cast<char*>(&_impl_.lots_requested_)) + sizeof(_impl_.order_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_execution_report_status(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 lots_requested = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lots_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lots_executed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lots_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_order_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_executed_order_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_order_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_executed_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_aci_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string figi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_security_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation initial_order_price_pt = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_order_price_pt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string order_request_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_order_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_request_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
  if (this->_internal_execution_report_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_execution_report_status(), target);
  }

  // int64 lots_requested = 3;
  if (this->_internal_lots_requested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lots_requested(), target);
  }

  // int64 lots_executed = 4;
  if (this->_internal_lots_executed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_lots_executed(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
  if (this->_internal_has_initial_order_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::initial_order_price(this),
        _Internal::initial_order_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
  if (this->_internal_has_executed_order_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::executed_order_price(this),
        _Internal::executed_order_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
  if (this->_internal_has_total_order_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::total_order_amount(this),
        _Internal::total_order_amount(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 8;
  if (this->_internal_has_initial_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::initial_commission(this),
        _Internal::initial_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 9;
  if (this->_internal_has_executed_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::executed_commission(this),
        _Internal::executed_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 10;
  if (this->_internal_has_aci_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::aci_value(this),
        _Internal::aci_value(this).GetCachedSize(), target, stream);
  }

  // string figi = 11;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.figi");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_direction(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
  if (this->_internal_has_initial_security_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::initial_security_price(this),
        _Internal::initial_security_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 14;
  if (this->_internal_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_order_type(), target);
  }

  // string message = 15;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.message");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_message(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation initial_order_price_pt = 16;
  if (this->_internal_has_initial_order_price_pt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::initial_order_price_pt(this),
        _Internal::initial_order_price_pt(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 17;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_instrument_uid(), target);
  }

  // string order_request_id = 20;
  if (!this->_internal_order_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_request_id().data(), static_cast<int>(this->_internal_order_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.PostOrderResponse.order_request_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_order_request_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  if (this->_internal_has_response_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(254, _Internal::response_metadata(this),
        _Internal::response_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
  return target;
}

size_t PostOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string figi = 11;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string message = 15;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string instrument_uid = 17;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string order_request_id = 20;
  if (!this->_internal_order_request_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_request_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
  if (this->_internal_has_initial_order_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_order_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
  if (this->_internal_has_executed_order_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executed_order_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
  if (this->_internal_has_total_order_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_order_amount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 8;
  if (this->_internal_has_initial_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 9;
  if (this->_internal_has_executed_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executed_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 10;
  if (this->_internal_has_aci_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aci_value_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
  if (this->_internal_has_initial_security_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_security_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation initial_order_price_pt = 16;
  if (this->_internal_has_initial_order_price_pt()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_order_price_pt_);
  }

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  if (this->_internal_has_response_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_metadata_);
  }

  // int64 lots_requested = 3;
  if (this->_internal_lots_requested() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lots_requested());
  }

  // int64 lots_executed = 4;
  if (this->_internal_lots_executed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lots_executed());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
  if (this->_internal_execution_report_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_execution_report_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 14;
  if (this->_internal_order_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostOrderResponse::GetClassData() const { return &_class_data_; }


void PostOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostOrderResponse*>(&to_msg);
  auto& from = static_cast<const PostOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_order_request_id().empty()) {
    _this->_internal_set_order_request_id(from._internal_order_request_id());
  }
  if (from._internal_has_initial_order_price()) {
    _this->_internal_mutable_initial_order_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_order_price());
  }
  if (from._internal_has_executed_order_price()) {
    _this->_internal_mutable_executed_order_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_executed_order_price());
  }
  if (from._internal_has_total_order_amount()) {
    _this->_internal_mutable_total_order_amount()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_order_amount());
  }
  if (from._internal_has_initial_commission()) {
    _this->_internal_mutable_initial_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_commission());
  }
  if (from._internal_has_executed_commission()) {
    _this->_internal_mutable_executed_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_executed_commission());
  }
  if (from._internal_has_aci_value()) {
    _this->_internal_mutable_aci_value()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_aci_value());
  }
  if (from._internal_has_initial_security_price()) {
    _this->_internal_mutable_initial_security_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_security_price());
  }
  if (from._internal_has_initial_order_price_pt()) {
    _this->_internal_mutable_initial_order_price_pt()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_initial_order_price_pt());
  }
  if (from._internal_has_response_metadata()) {
    _this->_internal_mutable_response_metadata()->::tinkoff::public_::invest::api::contract::v1::ResponseMetadata::MergeFrom(
        from._internal_response_metadata());
  }
  if (from._internal_lots_requested() != 0) {
    _this->_internal_set_lots_requested(from._internal_lots_requested());
  }
  if (from._internal_lots_executed() != 0) {
    _this->_internal_set_lots_executed(from._internal_lots_executed());
  }
  if (from._internal_execution_report_status() != 0) {
    _this->_internal_set_execution_report_status(from._internal_execution_report_status());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_order_type() != 0) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostOrderResponse::CopyFrom(const PostOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PostOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOrderResponse::IsInitialized() const {
  return true;
}

void PostOrderResponse::InternalSwap(PostOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_request_id_, lhs_arena,
      &other->_impl_.order_request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostOrderResponse, _impl_.order_type_)
      + sizeof(PostOrderResponse::_impl_.order_type_)
      - PROTOBUF_FIELD_OFFSET(PostOrderResponse, _impl_.initial_order_price_)>(
          reinterpret_cast<char*>(&_impl_.initial_order_price_),
          reinterpret_cast<char*>(&other->_impl_.initial_order_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[5]);
}

// ===================================================================

class CancelOrderRequest::_Internal {
 public:
};

CancelOrderRequest::CancelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
}
CancelOrderRequest::CancelOrderRequest(const CancelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
}

inline void CancelOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelOrderRequest::~CancelOrderRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.order_id_.Destroy();
}

void CancelOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.order_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CancelOrderRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
  return target;
}

size_t CancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelOrderRequest::GetClassData() const { return &_class_data_; }


void CancelOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelOrderRequest*>(&to_msg);
  auto& from = static_cast<const CancelOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelOrderRequest::CopyFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderRequest::IsInitialized() const {
  return true;
}

void CancelOrderRequest::InternalSwap(CancelOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[6]);
}

// ===================================================================

class CancelOrderResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const CancelOrderResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata& response_metadata(const CancelOrderResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CancelOrderResponse::_Internal::time(const CancelOrderResponse* msg) {
  return *msg->_impl_.time_;
}
const ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata&
CancelOrderResponse::_Internal::response_metadata(const CancelOrderResponse* msg) {
  return *msg->_impl_.response_metadata_;
}
void CancelOrderResponse::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void CancelOrderResponse::clear_response_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
}
CancelOrderResponse::CancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
}
CancelOrderResponse::CancelOrderResponse(const CancelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){nullptr}
    , decltype(_impl_.response_metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_response_metadata()) {
    _this->_impl_.response_metadata_ = new ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata(*from._impl_.response_metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
}

inline void CancelOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){nullptr}
    , decltype(_impl_.response_metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CancelOrderResponse::~CancelOrderResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.response_metadata_;
}

void CancelOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  if (this->_internal_has_response_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(254, _Internal::response_metadata(this),
        _Internal::response_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
  return target;
}

size_t CancelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.ResponseMetadata response_metadata = 254;
  if (this->_internal_has_response_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelOrderResponse::GetClassData() const { return &_class_data_; }


void CancelOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelOrderResponse*>(&to_msg);
  auto& from = static_cast<const CancelOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_response_metadata()) {
    _this->_internal_mutable_response_metadata()->::tinkoff::public_::invest::api::contract::v1::ResponseMetadata::MergeFrom(
        from._internal_response_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelOrderResponse::CopyFrom(const CancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderResponse::IsInitialized() const {
  return true;
}

void CancelOrderResponse::InternalSwap(CancelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelOrderResponse, _impl_.response_metadata_)
      + sizeof(CancelOrderResponse::_impl_.response_metadata_)
      - PROTOBUF_FIELD_OFFSET(CancelOrderResponse, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[7]);
}

// ===================================================================

class GetOrderStateRequest::_Internal {
 public:
};

GetOrderStateRequest::GetOrderStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
}
GetOrderStateRequest::GetOrderStateRequest(const GetOrderStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrderStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.price_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.price_type_ = from._impl_.price_type_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
}

inline void GetOrderStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.price_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOrderStateRequest::~GetOrderStateRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrderStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.order_id_.Destroy();
}

void GetOrderStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrderStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  _impl_.price_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.order_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_price_type(static_cast<::tinkoff::public_::invest::api::contract::v1::PriceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrderStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 3;
  if (this->_internal_price_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_price_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
  return target;
}

size_t GetOrderStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string order_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 3;
  if (this->_internal_price_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_price_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrderStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderStateRequest::GetClassData() const { return &_class_data_; }


void GetOrderStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrderStateRequest*>(&to_msg);
  auto& from = static_cast<const GetOrderStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (from._internal_price_type() != 0) {
    _this->_internal_set_price_type(from._internal_price_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderStateRequest::CopyFrom(const GetOrderStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderStateRequest::IsInitialized() const {
  return true;
}

void GetOrderStateRequest::InternalSwap(GetOrderStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  swap(_impl_.price_type_, other->_impl_.price_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[8]);
}

// ===================================================================

class GetOrdersRequest::_Internal {
 public:
};

GetOrdersRequest::GetOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
}
GetOrdersRequest::GetOrdersRequest(const GetOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
}

inline void GetOrdersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOrdersRequest::~GetOrdersRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void GetOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrdersRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrdersRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
  return target;
}

size_t GetOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrdersRequest::GetClassData() const { return &_class_data_; }


void GetOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrdersRequest*>(&to_msg);
  auto& from = static_cast<const GetOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrdersRequest::CopyFrom(const GetOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrdersRequest::IsInitialized() const {
  return true;
}

void GetOrdersRequest::InternalSwap(GetOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[9]);
}

// ===================================================================

class GetOrdersResponse::_Internal {
 public:
};

GetOrdersResponse::GetOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
}
GetOrdersResponse::GetOrdersResponse(const GetOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
}

inline void GetOrdersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetOrdersResponse::~GetOrdersResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrdersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orders_.~RepeatedPtrField();
}

void GetOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.OrderState orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrdersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderState orders = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
  return target;
}

size_t GetOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderState orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_impl_.orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrdersResponse::GetClassData() const { return &_class_data_; }


void GetOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrdersResponse*>(&to_msg);
  auto& from = static_cast<const GetOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.orders_.MergeFrom(from._impl_.orders_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrdersResponse::CopyFrom(const GetOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrdersResponse::IsInitialized() const {
  return true;
}

void GetOrdersResponse::InternalSwap(GetOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.orders_.InternalSwap(&other->_impl_.orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[10]);
}

// ===================================================================

class OrderState::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_price(const OrderState* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_order_price(const OrderState* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount(const OrderState* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price(const OrderState* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_commission(const OrderState* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission(const OrderState* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_security_price(const OrderState* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& service_commission(const OrderState* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& order_date(const OrderState* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::initial_order_price(const OrderState* msg) {
  return *msg->_impl_.initial_order_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::executed_order_price(const OrderState* msg) {
  return *msg->_impl_.executed_order_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::total_order_amount(const OrderState* msg) {
  return *msg->_impl_.total_order_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::average_position_price(const OrderState* msg) {
  return *msg->_impl_.average_position_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::initial_commission(const OrderState* msg) {
  return *msg->_impl_.initial_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::executed_commission(const OrderState* msg) {
  return *msg->_impl_.executed_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::initial_security_price(const OrderState* msg) {
  return *msg->_impl_.initial_security_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderState::_Internal::service_commission(const OrderState* msg) {
  return *msg->_impl_.service_commission_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderState::_Internal::order_date(const OrderState* msg) {
  return *msg->_impl_.order_date_;
}
void OrderState::clear_initial_order_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_price_ != nullptr) {
    delete _impl_.initial_order_price_;
  }
  _impl_.initial_order_price_ = nullptr;
}
void OrderState::clear_executed_order_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.executed_order_price_ != nullptr) {
    delete _impl_.executed_order_price_;
  }
  _impl_.executed_order_price_ = nullptr;
}
void OrderState::clear_total_order_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
}
void OrderState::clear_average_position_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_ != nullptr) {
    delete _impl_.average_position_price_;
  }
  _impl_.average_position_price_ = nullptr;
}
void OrderState::clear_initial_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_commission_ != nullptr) {
    delete _impl_.initial_commission_;
  }
  _impl_.initial_commission_ = nullptr;
}
void OrderState::clear_executed_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_ != nullptr) {
    delete _impl_.executed_commission_;
  }
  _impl_.executed_commission_ = nullptr;
}
void OrderState::clear_initial_security_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_security_price_ != nullptr) {
    delete _impl_.initial_security_price_;
  }
  _impl_.initial_security_price_ = nullptr;
}
void OrderState::clear_service_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.service_commission_ != nullptr) {
    delete _impl_.service_commission_;
  }
  _impl_.service_commission_ = nullptr;
}
void OrderState::clear_order_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_date_ != nullptr) {
    delete _impl_.order_date_;
  }
  _impl_.order_date_ = nullptr;
}
OrderState::OrderState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderState)
}
OrderState::OrderState(const OrderState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stages_){from._impl_.stages_}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.order_request_id_){}
    , decltype(_impl_.initial_order_price_){nullptr}
    , decltype(_impl_.executed_order_price_){nullptr}
    , decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.average_position_price_){nullptr}
    , decltype(_impl_.initial_commission_){nullptr}
    , decltype(_impl_.executed_commission_){nullptr}
    , decltype(_impl_.initial_security_price_){nullptr}
    , decltype(_impl_.service_commission_){nullptr}
    , decltype(_impl_.order_date_){nullptr}
    , decltype(_impl_.lots_requested_){}
    , decltype(_impl_.lots_executed_){}
    , decltype(_impl_.execution_report_status_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.order_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_request_id().empty()) {
    _this->_impl_.order_request_id_.Set(from._internal_order_request_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_initial_order_price()) {
    _this->_impl_.initial_order_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_order_price_);
  }
  if (from._internal_has_executed_order_price()) {
    _this->_impl_.executed_order_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.executed_order_price_);
  }
  if (from._internal_has_total_order_amount()) {
    _this->_impl_.total_order_amount_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_order_amount_);
  }
  if (from._internal_has_average_position_price()) {
    _this->_impl_.average_position_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.average_position_price_);
  }
  if (from._internal_has_initial_commission()) {
    _this->_impl_.initial_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_commission_);
  }
  if (from._internal_has_executed_commission()) {
    _this->_impl_.executed_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.executed_commission_);
  }
  if (from._internal_has_initial_security_price()) {
    _this->_impl_.initial_security_price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_security_price_);
  }
  if (from._internal_has_service_commission()) {
    _this->_impl_.service_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.service_commission_);
  }
  if (from._internal_has_order_date()) {
    _this->_impl_.order_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.order_date_);
  }
  ::memcpy(&_impl_.lots_requested_, &from._impl_.lots_requested_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_type_) -
    reinterpret_cast<char*>(&_impl_.lots_requested_)) + sizeof(_impl_.order_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderState)
}

inline void OrderState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stages_){arena}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.order_request_id_){}
    , decltype(_impl_.initial_order_price_){nullptr}
    , decltype(_impl_.executed_order_price_){nullptr}
    , decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.average_position_price_){nullptr}
    , decltype(_impl_.initial_commission_){nullptr}
    , decltype(_impl_.executed_commission_){nullptr}
    , decltype(_impl_.initial_security_price_){nullptr}
    , decltype(_impl_.service_commission_){nullptr}
    , decltype(_impl_.order_date_){nullptr}
    , decltype(_impl_.lots_requested_){int64_t{0}}
    , decltype(_impl_.lots_executed_){int64_t{0}}
    , decltype(_impl_.execution_report_status_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.order_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderState::~OrderState() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stages_.~RepeatedPtrField();
  _impl_.order_id_.Destroy();
  _impl_.figi_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.order_request_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.initial_order_price_;
  if (this != internal_default_instance()) delete _impl_.executed_order_price_;
  if (this != internal_default_instance()) delete _impl_.total_order_amount_;
  if (this != internal_default_instance()) delete _impl_.average_position_price_;
  if (this != internal_default_instance()) delete _impl_.initial_commission_;
  if (this != internal_default_instance()) delete _impl_.executed_commission_;
  if (this != internal_default_instance()) delete _impl_.initial_security_price_;
  if (this != internal_default_instance()) delete _impl_.service_commission_;
  if (this != internal_default_instance()) delete _impl_.order_date_;
}

void OrderState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderState::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stages_.Clear();
  _impl_.order_id_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.order_request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_price_ != nullptr) {
    delete _impl_.initial_order_price_;
  }
  _impl_.initial_order_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.executed_order_price_ != nullptr) {
    delete _impl_.executed_order_price_;
  }
  _impl_.executed_order_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.average_position_price_ != nullptr) {
    delete _impl_.average_position_price_;
  }
  _impl_.average_position_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_commission_ != nullptr) {
    delete _impl_.initial_commission_;
  }
  _impl_.initial_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_ != nullptr) {
    delete _impl_.executed_commission_;
  }
  _impl_.executed_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_security_price_ != nullptr) {
    delete _impl_.initial_security_price_;
  }
  _impl_.initial_security_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.service_commission_ != nullptr) {
    delete _impl_.service_commission_;
  }
  _impl_.service_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.order_date_ != nullptr) {
    delete _impl_.order_date_;
  }
  _impl_.order_date_ = nullptr;
  ::memset(&_impl_.lots_requested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_type_) -
      reinterpret_cast<char*>(&_impl_.lots_requested_)) + sizeof(_impl_.order_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderState.order_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_execution_report_status(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderExecutionReportStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 lots_requested = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lots_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lots_executed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lots_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_order_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_executed_order_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_order_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_position_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_executed_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string figi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderState.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_security_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.OrderStage stages = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderState.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp order_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderState.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string order_request_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_order_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderState.order_request_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderState.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
  if (this->_internal_execution_report_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_execution_report_status(), target);
  }

  // int64 lots_requested = 3;
  if (this->_internal_lots_requested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lots_requested(), target);
  }

  // int64 lots_executed = 4;
  if (this->_internal_lots_executed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_lots_executed(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
  if (this->_internal_has_initial_order_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::initial_order_price(this),
        _Internal::initial_order_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
  if (this->_internal_has_executed_order_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::executed_order_price(this),
        _Internal::executed_order_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
  if (this->_internal_has_total_order_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::total_order_amount(this),
        _Internal::total_order_amount(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 8;
  if (this->_internal_has_average_position_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::average_position_price(this),
        _Internal::average_position_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 9;
  if (this->_internal_has_initial_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::initial_commission(this),
        _Internal::initial_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 10;
  if (this->_internal_has_executed_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::executed_commission(this),
        _Internal::executed_commission(this).GetCachedSize(), target, stream);
  }

  // string figi = 11;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderState.figi");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_direction(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
  if (this->_internal_has_initial_security_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::initial_security_price(this),
        _Internal::initial_security_price(this).GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderStage stages = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stages_size()); i < n; i++) {
    const auto& repfield = this->_internal_stages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 15;
  if (this->_internal_has_service_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::service_commission(this),
        _Internal::service_commission(this).GetCachedSize(), target, stream);
  }

  // string currency = 16;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderState.currency");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 17;
  if (this->_internal_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_order_type(), target);
  }

  // .google.protobuf.Timestamp order_date = 18;
  if (this->_internal_has_order_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::order_date(this),
        _Internal::order_date(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 19;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderState.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_instrument_uid(), target);
  }

  // string order_request_id = 20;
  if (!this->_internal_order_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_request_id().data(), static_cast<int>(this->_internal_order_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderState.order_request_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_order_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderState)
  return target;
}

size_t OrderState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderStage stages = 14;
  total_size += 1UL * this->_internal_stages_size();
  for (const auto& msg : this->_impl_.stages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string figi = 11;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string currency = 16;
  if (!this->_internal_currency().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string instrument_uid = 19;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string order_request_id = 20;
  if (!this->_internal_order_request_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_request_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_price = 5;
  if (this->_internal_has_initial_order_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_order_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_order_price = 6;
  if (this->_internal_has_executed_order_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executed_order_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 7;
  if (this->_internal_has_total_order_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_order_amount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 8;
  if (this->_internal_has_average_position_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.average_position_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_commission = 9;
  if (this->_internal_has_initial_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 10;
  if (this->_internal_has_executed_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executed_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_security_price = 13;
  if (this->_internal_has_initial_security_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_security_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 15;
  if (this->_internal_has_service_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.service_commission_);
  }

  // .google.protobuf.Timestamp order_date = 18;
  if (this->_internal_has_order_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_date_);
  }

  // int64 lots_requested = 3;
  if (this->_internal_lots_requested() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lots_requested());
  }

  // int64 lots_executed = 4;
  if (this->_internal_lots_executed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lots_executed());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderExecutionReportStatus execution_report_status = 2;
  if (this->_internal_execution_report_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_execution_report_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderType order_type = 17;
  if (this->_internal_order_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderState::GetClassData() const { return &_class_data_; }


void OrderState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderState*>(&to_msg);
  auto& from = static_cast<const OrderState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stages_.MergeFrom(from._impl_.stages_);
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_order_request_id().empty()) {
    _this->_internal_set_order_request_id(from._internal_order_request_id());
  }
  if (from._internal_has_initial_order_price()) {
    _this->_internal_mutable_initial_order_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_order_price());
  }
  if (from._internal_has_executed_order_price()) {
    _this->_internal_mutable_executed_order_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_executed_order_price());
  }
  if (from._internal_has_total_order_amount()) {
    _this->_internal_mutable_total_order_amount()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_order_amount());
  }
  if (from._internal_has_average_position_price()) {
    _this->_internal_mutable_average_position_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_average_position_price());
  }
  if (from._internal_has_initial_commission()) {
    _this->_internal_mutable_initial_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_commission());
  }
  if (from._internal_has_executed_commission()) {
    _this->_internal_mutable_executed_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_executed_commission());
  }
  if (from._internal_has_initial_security_price()) {
    _this->_internal_mutable_initial_security_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_security_price());
  }
  if (from._internal_has_service_commission()) {
    _this->_internal_mutable_service_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_service_commission());
  }
  if (from._internal_has_order_date()) {
    _this->_internal_mutable_order_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_order_date());
  }
  if (from._internal_lots_requested() != 0) {
    _this->_internal_set_lots_requested(from._internal_lots_requested());
  }
  if (from._internal_lots_executed() != 0) {
    _this->_internal_set_lots_executed(from._internal_lots_executed());
  }
  if (from._internal_execution_report_status() != 0) {
    _this->_internal_set_execution_report_status(from._internal_execution_report_status());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_order_type() != 0) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderState::CopyFrom(const OrderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderState::IsInitialized() const {
  return true;
}

void OrderState::InternalSwap(OrderState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stages_.InternalSwap(&other->_impl_.stages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_request_id_, lhs_arena,
      &other->_impl_.order_request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderState, _impl_.order_type_)
      + sizeof(OrderState::_impl_.order_type_)
      - PROTOBUF_FIELD_OFFSET(OrderState, _impl_.initial_order_price_)>(
          reinterpret_cast<char*>(&_impl_.initial_order_price_),
          reinterpret_cast<char*>(&other->_impl_.initial_order_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[11]);
}

// ===================================================================

class OrderStage::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price(const OrderStage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& execution_time(const OrderStage* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
OrderStage::_Internal::price(const OrderStage* msg) {
  return *msg->_impl_.price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderStage::_Internal::execution_time(const OrderStage* msg) {
  return *msg->_impl_.execution_time_;
}
void OrderStage::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void OrderStage::clear_execution_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.execution_time_ != nullptr) {
    delete _impl_.execution_time_;
  }
  _impl_.execution_time_ = nullptr;
}
OrderStage::OrderStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderStage)
}
OrderStage::OrderStage(const OrderStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.execution_time_){nullptr}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    _this->_impl_.trade_id_.Set(from._internal_trade_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.price_);
  }
  if (from._internal_has_execution_time()) {
    _this->_impl_.execution_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.execution_time_);
  }
  _this->_impl_.quantity_ = from._impl_.quantity_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderStage)
}

inline void OrderStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.execution_time_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderStage::~OrderStage() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trade_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.execution_time_;
}

void OrderStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderStage::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trade_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.execution_time_ != nullptr) {
    delete _impl_.execution_time_;
  }
  _impl_.execution_time_ = nullptr;
  _impl_.quantity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderStage.trade_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp execution_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 1;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 2;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  // string trade_id = 3;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderStage.trade_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trade_id(), target);
  }

  // .google.protobuf.Timestamp execution_time = 5;
  if (this->_internal_has_execution_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::execution_time(this),
        _Internal::execution_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderStage)
  return target;
}

size_t OrderStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_id = 3;
  if (!this->_internal_trade_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 1;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .google.protobuf.Timestamp execution_time = 5;
  if (this->_internal_has_execution_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.execution_time_);
  }

  // int64 quantity = 2;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderStage::GetClassData() const { return &_class_data_; }


void OrderStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderStage*>(&to_msg);
  auto& from = static_cast<const OrderStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_id().empty()) {
    _this->_internal_set_trade_id(from._internal_trade_id());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_execution_time()) {
    _this->_internal_mutable_execution_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_execution_time());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderStage::CopyFrom(const OrderStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderStage::IsInitialized() const {
  return true;
}

void OrderStage::InternalSwap(OrderStage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trade_id_, lhs_arena,
      &other->_impl_.trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderStage, _impl_.quantity_)
      + sizeof(OrderStage::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(OrderStage, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[12]);
}

// ===================================================================

class ReplaceOrderRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplaceOrderRequest>()._impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const ReplaceOrderRequest* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
ReplaceOrderRequest::_Internal::price(const ReplaceOrderRequest* msg) {
  return *msg->_impl_.price_;
}
void ReplaceOrderRequest::clear_price() {
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReplaceOrderRequest::ReplaceOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
}
ReplaceOrderRequest::ReplaceOrderRequest(const ReplaceOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplaceOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.idempotency_key_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.price_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idempotency_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idempotency_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idempotency_key().empty()) {
    _this->_impl_.idempotency_key_.Set(from._internal_idempotency_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_type_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.price_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
}

inline void ReplaceOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.idempotency_key_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , decltype(_impl_.price_type_){0}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idempotency_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idempotency_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplaceOrderRequest::~ReplaceOrderRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplaceOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.order_id_.Destroy();
  _impl_.idempotency_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
}

void ReplaceOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplaceOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  _impl_.idempotency_key_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  _impl_.quantity_ = int64_t{0};
  _impl_.price_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaceOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 6 [(.google.api.field_behavior) = REQUIRED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.order_id"));
        } else
          goto handle_unusual;
        continue;
      // string idempotency_key = 7 [(.google.api.field_behavior) = REQUIRED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_idempotency_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key"));
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 11 [(.google.api.field_behavior) = REQUIRED];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_price_type(static_cast<::tinkoff::public_::invest::api::contract::v1::PriceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplaceOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string order_id = 6 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_order_id(), target);
  }

  // string idempotency_key = 7 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_idempotency_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idempotency_key().data(), static_cast<int>(this->_internal_idempotency_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest.idempotency_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_idempotency_key(), target);
  }

  // int64 quantity = 11 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_quantity(), target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 12;
  if (_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 13;
  if (_internal_has_price_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_price_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
  return target;
}

size_t ReplaceOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string order_id = 6 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string idempotency_key = 7 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_idempotency_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idempotency_key());
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 12;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int64 quantity = 11 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  // optional .tinkoff.public_.invest.api.contract.v1.PriceType price_type = 13;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_price_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplaceOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplaceOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplaceOrderRequest::GetClassData() const { return &_class_data_; }


void ReplaceOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplaceOrderRequest*>(&to_msg);
  auto& from = static_cast<const ReplaceOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_idempotency_key().empty()) {
    _this->_internal_set_idempotency_key(from._internal_idempotency_key());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_has_price_type()) {
    _this->_internal_set_price_type(from._internal_price_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplaceOrderRequest::CopyFrom(const ReplaceOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.ReplaceOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceOrderRequest::IsInitialized() const {
  return true;
}

void ReplaceOrderRequest::InternalSwap(ReplaceOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idempotency_key_, lhs_arena,
      &other->_impl_.idempotency_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplaceOrderRequest, _impl_.price_type_)
      + sizeof(ReplaceOrderRequest::_impl_.price_type_)
      - PROTOBUF_FIELD_OFFSET(ReplaceOrderRequest, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaceOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[13]);
}

// ===================================================================

class GetMaxLotsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMaxLotsRequest>()._impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const GetMaxLotsRequest* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetMaxLotsRequest::_Internal::price(const GetMaxLotsRequest* msg) {
  return *msg->_impl_.price_;
}
void GetMaxLotsRequest::clear_price() {
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetMaxLotsRequest::GetMaxLotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
}
GetMaxLotsRequest::GetMaxLotsRequest(const GetMaxLotsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMaxLotsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.price_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
}

inline void GetMaxLotsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.price_){nullptr}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMaxLotsRequest::~GetMaxLotsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMaxLotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
}

void GetMaxLotsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMaxLotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMaxLotsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMaxLotsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
  return target;
}

size_t GetMaxLotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMaxLotsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMaxLotsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMaxLotsRequest::GetClassData() const { return &_class_data_; }


void GetMaxLotsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMaxLotsRequest*>(&to_msg);
  auto& from = static_cast<const GetMaxLotsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMaxLotsRequest::CopyFrom(const GetMaxLotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaxLotsRequest::IsInitialized() const {
  return true;
}

void GetMaxLotsRequest::InternalSwap(GetMaxLotsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  swap(_impl_.price_, other->_impl_.price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMaxLotsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[14]);
}

// ===================================================================

class GetMaxLotsResponse_BuyLimitsView::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& buy_money_amount(const GetMaxLotsResponse_BuyLimitsView* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetMaxLotsResponse_BuyLimitsView::_Internal::buy_money_amount(const GetMaxLotsResponse_BuyLimitsView* msg) {
  return *msg->_impl_.buy_money_amount_;
}
void GetMaxLotsResponse_BuyLimitsView::clear_buy_money_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.buy_money_amount_ != nullptr) {
    delete _impl_.buy_money_amount_;
  }
  _impl_.buy_money_amount_ = nullptr;
}
GetMaxLotsResponse_BuyLimitsView::GetMaxLotsResponse_BuyLimitsView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
}
GetMaxLotsResponse_BuyLimitsView::GetMaxLotsResponse_BuyLimitsView(const GetMaxLotsResponse_BuyLimitsView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMaxLotsResponse_BuyLimitsView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buy_money_amount_){nullptr}
    , decltype(_impl_.buy_max_lots_){}
    , decltype(_impl_.buy_max_market_lots_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_buy_money_amount()) {
    _this->_impl_.buy_money_amount_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.buy_money_amount_);
  }
  ::memcpy(&_impl_.buy_max_lots_, &from._impl_.buy_max_lots_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buy_max_market_lots_) -
    reinterpret_cast<char*>(&_impl_.buy_max_lots_)) + sizeof(_impl_.buy_max_market_lots_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
}

inline void GetMaxLotsResponse_BuyLimitsView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buy_money_amount_){nullptr}
    , decltype(_impl_.buy_max_lots_){int64_t{0}}
    , decltype(_impl_.buy_max_market_lots_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMaxLotsResponse_BuyLimitsView::~GetMaxLotsResponse_BuyLimitsView() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMaxLotsResponse_BuyLimitsView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.buy_money_amount_;
}

void GetMaxLotsResponse_BuyLimitsView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMaxLotsResponse_BuyLimitsView::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.buy_money_amount_ != nullptr) {
    delete _impl_.buy_money_amount_;
  }
  _impl_.buy_money_amount_ = nullptr;
  ::memset(&_impl_.buy_max_lots_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buy_max_market_lots_) -
      reinterpret_cast<char*>(&_impl_.buy_max_lots_)) + sizeof(_impl_.buy_max_market_lots_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMaxLotsResponse_BuyLimitsView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation buy_money_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buy_money_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buy_max_lots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.buy_max_lots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buy_max_market_lots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buy_max_market_lots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMaxLotsResponse_BuyLimitsView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation buy_money_amount = 1;
  if (this->_internal_has_buy_money_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::buy_money_amount(this),
        _Internal::buy_money_amount(this).GetCachedSize(), target, stream);
  }

  // int64 buy_max_lots = 2;
  if (this->_internal_buy_max_lots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_buy_max_lots(), target);
  }

  // int64 buy_max_market_lots = 3;
  if (this->_internal_buy_max_market_lots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_buy_max_market_lots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
  return target;
}

size_t GetMaxLotsResponse_BuyLimitsView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation buy_money_amount = 1;
  if (this->_internal_has_buy_money_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buy_money_amount_);
  }

  // int64 buy_max_lots = 2;
  if (this->_internal_buy_max_lots() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buy_max_lots());
  }

  // int64 buy_max_market_lots = 3;
  if (this->_internal_buy_max_market_lots() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buy_max_market_lots());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMaxLotsResponse_BuyLimitsView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMaxLotsResponse_BuyLimitsView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMaxLotsResponse_BuyLimitsView::GetClassData() const { return &_class_data_; }


void GetMaxLotsResponse_BuyLimitsView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMaxLotsResponse_BuyLimitsView*>(&to_msg);
  auto& from = static_cast<const GetMaxLotsResponse_BuyLimitsView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_buy_money_amount()) {
    _this->_internal_mutable_buy_money_amount()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_buy_money_amount());
  }
  if (from._internal_buy_max_lots() != 0) {
    _this->_internal_set_buy_max_lots(from._internal_buy_max_lots());
  }
  if (from._internal_buy_max_market_lots() != 0) {
    _this->_internal_set_buy_max_market_lots(from._internal_buy_max_market_lots());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMaxLotsResponse_BuyLimitsView::CopyFrom(const GetMaxLotsResponse_BuyLimitsView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaxLotsResponse_BuyLimitsView::IsInitialized() const {
  return true;
}

void GetMaxLotsResponse_BuyLimitsView::InternalSwap(GetMaxLotsResponse_BuyLimitsView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMaxLotsResponse_BuyLimitsView, _impl_.buy_max_market_lots_)
      + sizeof(GetMaxLotsResponse_BuyLimitsView::_impl_.buy_max_market_lots_)
      - PROTOBUF_FIELD_OFFSET(GetMaxLotsResponse_BuyLimitsView, _impl_.buy_money_amount_)>(
          reinterpret_cast<char*>(&_impl_.buy_money_amount_),
          reinterpret_cast<char*>(&other->_impl_.buy_money_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMaxLotsResponse_BuyLimitsView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[15]);
}

// ===================================================================

class GetMaxLotsResponse_SellLimitsView::_Internal {
 public:
};

GetMaxLotsResponse_SellLimitsView::GetMaxLotsResponse_SellLimitsView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
}
GetMaxLotsResponse_SellLimitsView::GetMaxLotsResponse_SellLimitsView(const GetMaxLotsResponse_SellLimitsView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMaxLotsResponse_SellLimitsView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sell_max_lots_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sell_max_lots_ = from._impl_.sell_max_lots_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
}

inline void GetMaxLotsResponse_SellLimitsView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sell_max_lots_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMaxLotsResponse_SellLimitsView::~GetMaxLotsResponse_SellLimitsView() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMaxLotsResponse_SellLimitsView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMaxLotsResponse_SellLimitsView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMaxLotsResponse_SellLimitsView::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sell_max_lots_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMaxLotsResponse_SellLimitsView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sell_max_lots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sell_max_lots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMaxLotsResponse_SellLimitsView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sell_max_lots = 1;
  if (this->_internal_sell_max_lots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sell_max_lots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
  return target;
}

size_t GetMaxLotsResponse_SellLimitsView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sell_max_lots = 1;
  if (this->_internal_sell_max_lots() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sell_max_lots());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMaxLotsResponse_SellLimitsView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMaxLotsResponse_SellLimitsView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMaxLotsResponse_SellLimitsView::GetClassData() const { return &_class_data_; }


void GetMaxLotsResponse_SellLimitsView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMaxLotsResponse_SellLimitsView*>(&to_msg);
  auto& from = static_cast<const GetMaxLotsResponse_SellLimitsView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sell_max_lots() != 0) {
    _this->_internal_set_sell_max_lots(from._internal_sell_max_lots());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMaxLotsResponse_SellLimitsView::CopyFrom(const GetMaxLotsResponse_SellLimitsView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaxLotsResponse_SellLimitsView::IsInitialized() const {
  return true;
}

void GetMaxLotsResponse_SellLimitsView::InternalSwap(GetMaxLotsResponse_SellLimitsView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sell_max_lots_, other->_impl_.sell_max_lots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMaxLotsResponse_SellLimitsView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[16]);
}

// ===================================================================

class GetMaxLotsResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& buy_limits(const GetMaxLotsResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView& buy_margin_limits(const GetMaxLotsResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& sell_limits(const GetMaxLotsResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView& sell_margin_limits(const GetMaxLotsResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView&
GetMaxLotsResponse::_Internal::buy_limits(const GetMaxLotsResponse* msg) {
  return *msg->_impl_.buy_limits_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView&
GetMaxLotsResponse::_Internal::buy_margin_limits(const GetMaxLotsResponse* msg) {
  return *msg->_impl_.buy_margin_limits_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView&
GetMaxLotsResponse::_Internal::sell_limits(const GetMaxLotsResponse* msg) {
  return *msg->_impl_.sell_limits_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView&
GetMaxLotsResponse::_Internal::sell_margin_limits(const GetMaxLotsResponse* msg) {
  return *msg->_impl_.sell_margin_limits_;
}
GetMaxLotsResponse::GetMaxLotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
}
GetMaxLotsResponse::GetMaxLotsResponse(const GetMaxLotsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMaxLotsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currency_){}
    , decltype(_impl_.buy_limits_){nullptr}
    , decltype(_impl_.buy_margin_limits_){nullptr}
    , decltype(_impl_.sell_limits_){nullptr}
    , decltype(_impl_.sell_margin_limits_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_buy_limits()) {
    _this->_impl_.buy_limits_ = new ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView(*from._impl_.buy_limits_);
  }
  if (from._internal_has_buy_margin_limits()) {
    _this->_impl_.buy_margin_limits_ = new ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView(*from._impl_.buy_margin_limits_);
  }
  if (from._internal_has_sell_limits()) {
    _this->_impl_.sell_limits_ = new ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView(*from._impl_.sell_limits_);
  }
  if (from._internal_has_sell_margin_limits()) {
    _this->_impl_.sell_margin_limits_ = new ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView(*from._impl_.sell_margin_limits_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
}

inline void GetMaxLotsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currency_){}
    , decltype(_impl_.buy_limits_){nullptr}
    , decltype(_impl_.buy_margin_limits_){nullptr}
    , decltype(_impl_.sell_limits_){nullptr}
    , decltype(_impl_.sell_margin_limits_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMaxLotsResponse::~GetMaxLotsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMaxLotsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.buy_limits_;
  if (this != internal_default_instance()) delete _impl_.buy_margin_limits_;
  if (this != internal_default_instance()) delete _impl_.sell_limits_;
  if (this != internal_default_instance()) delete _impl_.sell_margin_limits_;
}

void GetMaxLotsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMaxLotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currency_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.buy_limits_ != nullptr) {
    delete _impl_.buy_limits_;
  }
  _impl_.buy_limits_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buy_margin_limits_ != nullptr) {
    delete _impl_.buy_margin_limits_;
  }
  _impl_.buy_margin_limits_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sell_limits_ != nullptr) {
    delete _impl_.sell_limits_;
  }
  _impl_.sell_limits_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sell_margin_limits_ != nullptr) {
    delete _impl_.sell_margin_limits_;
  }
  _impl_.sell_margin_limits_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMaxLotsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.currency"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_limits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buy_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_margin_limits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_buy_margin_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_limits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sell_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_margin_limits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sell_margin_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMaxLotsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_limits = 2;
  if (this->_internal_has_buy_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::buy_limits(this),
        _Internal::buy_limits(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_margin_limits = 3;
  if (this->_internal_has_buy_margin_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::buy_margin_limits(this),
        _Internal::buy_margin_limits(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_limits = 4;
  if (this->_internal_has_sell_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sell_limits(this),
        _Internal::sell_limits(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_margin_limits = 5;
  if (this->_internal_has_sell_margin_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::sell_margin_limits(this),
        _Internal::sell_margin_limits(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
  return target;
}

size_t GetMaxLotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_limits = 2;
  if (this->_internal_has_buy_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buy_limits_);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView buy_margin_limits = 3;
  if (this->_internal_has_buy_margin_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buy_margin_limits_);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_limits = 4;
  if (this->_internal_has_sell_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sell_limits_);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView sell_margin_limits = 5;
  if (this->_internal_has_sell_margin_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sell_margin_limits_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMaxLotsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMaxLotsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMaxLotsResponse::GetClassData() const { return &_class_data_; }


void GetMaxLotsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMaxLotsResponse*>(&to_msg);
  auto& from = static_cast<const GetMaxLotsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (from._internal_has_buy_limits()) {
    _this->_internal_mutable_buy_limits()->::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView::MergeFrom(
        from._internal_buy_limits());
  }
  if (from._internal_has_buy_margin_limits()) {
    _this->_internal_mutable_buy_margin_limits()->::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView::MergeFrom(
        from._internal_buy_margin_limits());
  }
  if (from._internal_has_sell_limits()) {
    _this->_internal_mutable_sell_limits()->::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView::MergeFrom(
        from._internal_sell_limits());
  }
  if (from._internal_has_sell_margin_limits()) {
    _this->_internal_mutable_sell_margin_limits()->::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView::MergeFrom(
        from._internal_sell_margin_limits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMaxLotsResponse::CopyFrom(const GetMaxLotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetMaxLotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaxLotsResponse::IsInitialized() const {
  return true;
}

void GetMaxLotsResponse::InternalSwap(GetMaxLotsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMaxLotsResponse, _impl_.sell_margin_limits_)
      + sizeof(GetMaxLotsResponse::_impl_.sell_margin_limits_)
      - PROTOBUF_FIELD_OFFSET(GetMaxLotsResponse, _impl_.buy_limits_)>(
          reinterpret_cast<char*>(&_impl_.buy_limits_),
          reinterpret_cast<char*>(&other->_impl_.buy_limits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMaxLotsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[17]);
}

// ===================================================================

class GetOrderPriceRequest::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const GetOrderPriceRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetOrderPriceRequest::_Internal::price(const GetOrderPriceRequest* msg) {
  return *msg->_impl_.price_;
}
void GetOrderPriceRequest::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
GetOrderPriceRequest::GetOrderPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
}
GetOrderPriceRequest::GetOrderPriceRequest(const GetOrderPriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrderPriceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
}

inline void GetOrderPriceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOrderPriceRequest::~GetOrderPriceRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrderPriceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
}

void GetOrderPriceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrderPriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  ::memset(&_impl_.quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderPriceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrderPriceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_direction(), target);
  }

  // int64 quantity = 13;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
  return target;
}

size_t GetOrderPriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int64 quantity = 13;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderDirection direction = 12;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderPriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrderPriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderPriceRequest::GetClassData() const { return &_class_data_; }


void GetOrderPriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrderPriceRequest*>(&to_msg);
  auto& from = static_cast<const GetOrderPriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderPriceRequest::CopyFrom(const GetOrderPriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderPriceRequest::IsInitialized() const {
  return true;
}

void GetOrderPriceRequest::InternalSwap(GetOrderPriceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrderPriceRequest, _impl_.direction_)
      + sizeof(GetOrderPriceRequest::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(GetOrderPriceRequest, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderPriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[18]);
}

// ===================================================================

class GetOrderPriceResponse_ExtraBond::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value(const GetOrderPriceResponse_ExtraBond* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal_conversion_rate(const GetOrderPriceResponse_ExtraBond* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse_ExtraBond::_Internal::aci_value(const GetOrderPriceResponse_ExtraBond* msg) {
  return *msg->_impl_.aci_value_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetOrderPriceResponse_ExtraBond::_Internal::nominal_conversion_rate(const GetOrderPriceResponse_ExtraBond* msg) {
  return *msg->_impl_.nominal_conversion_rate_;
}
void GetOrderPriceResponse_ExtraBond::clear_aci_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
}
void GetOrderPriceResponse_ExtraBond::clear_nominal_conversion_rate() {
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_conversion_rate_ != nullptr) {
    delete _impl_.nominal_conversion_rate_;
  }
  _impl_.nominal_conversion_rate_ = nullptr;
}
GetOrderPriceResponse_ExtraBond::GetOrderPriceResponse_ExtraBond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
}
GetOrderPriceResponse_ExtraBond::GetOrderPriceResponse_ExtraBond(const GetOrderPriceResponse_ExtraBond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrderPriceResponse_ExtraBond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.nominal_conversion_rate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aci_value()) {
    _this->_impl_.aci_value_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.aci_value_);
  }
  if (from._internal_has_nominal_conversion_rate()) {
    _this->_impl_.nominal_conversion_rate_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.nominal_conversion_rate_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
}

inline void GetOrderPriceResponse_ExtraBond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aci_value_){nullptr}
    , decltype(_impl_.nominal_conversion_rate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetOrderPriceResponse_ExtraBond::~GetOrderPriceResponse_ExtraBond() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrderPriceResponse_ExtraBond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.aci_value_;
  if (this != internal_default_instance()) delete _impl_.nominal_conversion_rate_;
}

void GetOrderPriceResponse_ExtraBond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrderPriceResponse_ExtraBond::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.aci_value_ != nullptr) {
    delete _impl_.aci_value_;
  }
  _impl_.aci_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nominal_conversion_rate_ != nullptr) {
    delete _impl_.nominal_conversion_rate_;
  }
  _impl_.nominal_conversion_rate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderPriceResponse_ExtraBond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aci_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation nominal_conversion_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominal_conversion_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrderPriceResponse_ExtraBond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 2;
  if (this->_internal_has_aci_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::aci_value(this),
        _Internal::aci_value(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal_conversion_rate = 3;
  if (this->_internal_has_nominal_conversion_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nominal_conversion_rate(this),
        _Internal::nominal_conversion_rate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
  return target;
}

size_t GetOrderPriceResponse_ExtraBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 2;
  if (this->_internal_has_aci_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aci_value_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal_conversion_rate = 3;
  if (this->_internal_has_nominal_conversion_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nominal_conversion_rate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderPriceResponse_ExtraBond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrderPriceResponse_ExtraBond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderPriceResponse_ExtraBond::GetClassData() const { return &_class_data_; }


void GetOrderPriceResponse_ExtraBond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrderPriceResponse_ExtraBond*>(&to_msg);
  auto& from = static_cast<const GetOrderPriceResponse_ExtraBond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_aci_value()) {
    _this->_internal_mutable_aci_value()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_aci_value());
  }
  if (from._internal_has_nominal_conversion_rate()) {
    _this->_internal_mutable_nominal_conversion_rate()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_nominal_conversion_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderPriceResponse_ExtraBond::CopyFrom(const GetOrderPriceResponse_ExtraBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderPriceResponse_ExtraBond::IsInitialized() const {
  return true;
}

void GetOrderPriceResponse_ExtraBond::InternalSwap(GetOrderPriceResponse_ExtraBond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrderPriceResponse_ExtraBond, _impl_.nominal_conversion_rate_)
      + sizeof(GetOrderPriceResponse_ExtraBond::_impl_.nominal_conversion_rate_)
      - PROTOBUF_FIELD_OFFSET(GetOrderPriceResponse_ExtraBond, _impl_.aci_value_)>(
          reinterpret_cast<char*>(&_impl_.aci_value_),
          reinterpret_cast<char*>(&other->_impl_.aci_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderPriceResponse_ExtraBond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[19]);
}

// ===================================================================

class GetOrderPriceResponse_ExtraFuture::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin(const GetOrderPriceResponse_ExtraFuture* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse_ExtraFuture::_Internal::initial_margin(const GetOrderPriceResponse_ExtraFuture* msg) {
  return *msg->_impl_.initial_margin_;
}
void GetOrderPriceResponse_ExtraFuture::clear_initial_margin() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_ != nullptr) {
    delete _impl_.initial_margin_;
  }
  _impl_.initial_margin_ = nullptr;
}
GetOrderPriceResponse_ExtraFuture::GetOrderPriceResponse_ExtraFuture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
}
GetOrderPriceResponse_ExtraFuture::GetOrderPriceResponse_ExtraFuture(const GetOrderPriceResponse_ExtraFuture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrderPriceResponse_ExtraFuture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.initial_margin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initial_margin()) {
    _this->_impl_.initial_margin_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_margin_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
}

inline void GetOrderPriceResponse_ExtraFuture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.initial_margin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetOrderPriceResponse_ExtraFuture::~GetOrderPriceResponse_ExtraFuture() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrderPriceResponse_ExtraFuture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.initial_margin_;
}

void GetOrderPriceResponse_ExtraFuture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrderPriceResponse_ExtraFuture::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.initial_margin_ != nullptr) {
    delete _impl_.initial_margin_;
  }
  _impl_.initial_margin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderPriceResponse_ExtraFuture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrderPriceResponse_ExtraFuture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin = 2;
  if (this->_internal_has_initial_margin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::initial_margin(this),
        _Internal::initial_margin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
  return target;
}

size_t GetOrderPriceResponse_ExtraFuture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin = 2;
  if (this->_internal_has_initial_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_margin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderPriceResponse_ExtraFuture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrderPriceResponse_ExtraFuture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderPriceResponse_ExtraFuture::GetClassData() const { return &_class_data_; }


void GetOrderPriceResponse_ExtraFuture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrderPriceResponse_ExtraFuture*>(&to_msg);
  auto& from = static_cast<const GetOrderPriceResponse_ExtraFuture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_initial_margin()) {
    _this->_internal_mutable_initial_margin()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_margin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderPriceResponse_ExtraFuture::CopyFrom(const GetOrderPriceResponse_ExtraFuture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderPriceResponse_ExtraFuture::IsInitialized() const {
  return true;
}

void GetOrderPriceResponse_ExtraFuture::InternalSwap(GetOrderPriceResponse_ExtraFuture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.initial_margin_, other->_impl_.initial_margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderPriceResponse_ExtraFuture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[20]);
}

// ===================================================================

class GetOrderPriceResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount(const GetOrderPriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_order_amount(const GetOrderPriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission(const GetOrderPriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& executed_commission_rub(const GetOrderPriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& service_commission(const GetOrderPriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& deal_commission(const GetOrderPriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond& extra_bond(const GetOrderPriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture& extra_future(const GetOrderPriceResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse::_Internal::total_order_amount(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.total_order_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse::_Internal::initial_order_amount(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.initial_order_amount_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse::_Internal::executed_commission(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.executed_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse::_Internal::executed_commission_rub(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.executed_commission_rub_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse::_Internal::service_commission(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.service_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&
GetOrderPriceResponse::_Internal::deal_commission(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.deal_commission_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond&
GetOrderPriceResponse::_Internal::extra_bond(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.instrument_extra_.extra_bond_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture&
GetOrderPriceResponse::_Internal::extra_future(const GetOrderPriceResponse* msg) {
  return *msg->_impl_.instrument_extra_.extra_future_;
}
void GetOrderPriceResponse::clear_total_order_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
}
void GetOrderPriceResponse::clear_initial_order_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_amount_ != nullptr) {
    delete _impl_.initial_order_amount_;
  }
  _impl_.initial_order_amount_ = nullptr;
}
void GetOrderPriceResponse::clear_executed_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_ != nullptr) {
    delete _impl_.executed_commission_;
  }
  _impl_.executed_commission_ = nullptr;
}
void GetOrderPriceResponse::clear_executed_commission_rub() {
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_rub_ != nullptr) {
    delete _impl_.executed_commission_rub_;
  }
  _impl_.executed_commission_rub_ = nullptr;
}
void GetOrderPriceResponse::clear_service_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.service_commission_ != nullptr) {
    delete _impl_.service_commission_;
  }
  _impl_.service_commission_ = nullptr;
}
void GetOrderPriceResponse::clear_deal_commission() {
  if (GetArenaForAllocation() == nullptr && _impl_.deal_commission_ != nullptr) {
    delete _impl_.deal_commission_;
  }
  _impl_.deal_commission_ = nullptr;
}
void GetOrderPriceResponse::set_allocated_extra_bond(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond* extra_bond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instrument_extra();
  if (extra_bond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extra_bond);
    if (message_arena != submessage_arena) {
      extra_bond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra_bond, submessage_arena);
    }
    set_has_extra_bond();
    _impl_.instrument_extra_.extra_bond_ = extra_bond;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_bond)
}
void GetOrderPriceResponse::set_allocated_extra_future(::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture* extra_future) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instrument_extra();
  if (extra_future) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extra_future);
    if (message_arena != submessage_arena) {
      extra_future = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra_future, submessage_arena);
    }
    set_has_extra_future();
    _impl_.instrument_extra_.extra_future_ = extra_future;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.extra_future)
}
GetOrderPriceResponse::GetOrderPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
}
GetOrderPriceResponse::GetOrderPriceResponse(const GetOrderPriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrderPriceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.initial_order_amount_){nullptr}
    , decltype(_impl_.executed_commission_){nullptr}
    , decltype(_impl_.executed_commission_rub_){nullptr}
    , decltype(_impl_.service_commission_){nullptr}
    , decltype(_impl_.deal_commission_){nullptr}
    , decltype(_impl_.lots_requested_){}
    , decltype(_impl_.instrument_extra_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_order_amount()) {
    _this->_impl_.total_order_amount_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.total_order_amount_);
  }
  if (from._internal_has_initial_order_amount()) {
    _this->_impl_.initial_order_amount_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.initial_order_amount_);
  }
  if (from._internal_has_executed_commission()) {
    _this->_impl_.executed_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.executed_commission_);
  }
  if (from._internal_has_executed_commission_rub()) {
    _this->_impl_.executed_commission_rub_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.executed_commission_rub_);
  }
  if (from._internal_has_service_commission()) {
    _this->_impl_.service_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.service_commission_);
  }
  if (from._internal_has_deal_commission()) {
    _this->_impl_.deal_commission_ = new ::tinkoff::public_::invest::api::contract::v1::MoneyValue(*from._impl_.deal_commission_);
  }
  _this->_impl_.lots_requested_ = from._impl_.lots_requested_;
  clear_has_instrument_extra();
  switch (from.instrument_extra_case()) {
    case kExtraBond: {
      _this->_internal_mutable_extra_bond()->::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond::MergeFrom(
          from._internal_extra_bond());
      break;
    }
    case kExtraFuture: {
      _this->_internal_mutable_extra_future()->::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture::MergeFrom(
          from._internal_extra_future());
      break;
    }
    case INSTRUMENT_EXTRA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
}

inline void GetOrderPriceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_order_amount_){nullptr}
    , decltype(_impl_.initial_order_amount_){nullptr}
    , decltype(_impl_.executed_commission_){nullptr}
    , decltype(_impl_.executed_commission_rub_){nullptr}
    , decltype(_impl_.service_commission_){nullptr}
    , decltype(_impl_.deal_commission_){nullptr}
    , decltype(_impl_.lots_requested_){int64_t{0}}
    , decltype(_impl_.instrument_extra_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_instrument_extra();
}

GetOrderPriceResponse::~GetOrderPriceResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrderPriceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.total_order_amount_;
  if (this != internal_default_instance()) delete _impl_.initial_order_amount_;
  if (this != internal_default_instance()) delete _impl_.executed_commission_;
  if (this != internal_default_instance()) delete _impl_.executed_commission_rub_;
  if (this != internal_default_instance()) delete _impl_.service_commission_;
  if (this != internal_default_instance()) delete _impl_.deal_commission_;
  if (has_instrument_extra()) {
    clear_instrument_extra();
  }
}

void GetOrderPriceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrderPriceResponse::clear_instrument_extra() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  switch (instrument_extra_case()) {
    case kExtraBond: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.instrument_extra_.extra_bond_;
      }
      break;
    }
    case kExtraFuture: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.instrument_extra_.extra_future_;
      }
      break;
    }
    case INSTRUMENT_EXTRA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INSTRUMENT_EXTRA_NOT_SET;
}


void GetOrderPriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.total_order_amount_ != nullptr) {
    delete _impl_.total_order_amount_;
  }
  _impl_.total_order_amount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_order_amount_ != nullptr) {
    delete _impl_.initial_order_amount_;
  }
  _impl_.initial_order_amount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_ != nullptr) {
    delete _impl_.executed_commission_;
  }
  _impl_.executed_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.executed_commission_rub_ != nullptr) {
    delete _impl_.executed_commission_rub_;
  }
  _impl_.executed_commission_rub_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.service_commission_ != nullptr) {
    delete _impl_.service_commission_;
  }
  _impl_.service_commission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deal_commission_ != nullptr) {
    delete _impl_.deal_commission_;
  }
  _impl_.deal_commission_ = nullptr;
  _impl_.lots_requested_ = int64_t{0};
  clear_instrument_extra();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderPriceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_order_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lots_requested = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lots_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_order_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_executed_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission_rub = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_executed_commission_rub(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.MoneyValue deal_commission = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deal_commission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond extra_bond = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_bond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture extra_future = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_future(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrderPriceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 1;
  if (this->_internal_has_total_order_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::total_order_amount(this),
        _Internal::total_order_amount(this).GetCachedSize(), target, stream);
  }

  // int64 lots_requested = 3;
  if (this->_internal_lots_requested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lots_requested(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_amount = 5;
  if (this->_internal_has_initial_order_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::initial_order_amount(this),
        _Internal::initial_order_amount(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 7;
  if (this->_internal_has_executed_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::executed_commission(this),
        _Internal::executed_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission_rub = 8;
  if (this->_internal_has_executed_commission_rub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::executed_commission_rub(this),
        _Internal::executed_commission_rub(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 9;
  if (this->_internal_has_service_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::service_commission(this),
        _Internal::service_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue deal_commission = 10;
  if (this->_internal_has_deal_commission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::deal_commission(this),
        _Internal::deal_commission(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond extra_bond = 12;
  if (_internal_has_extra_bond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::extra_bond(this),
        _Internal::extra_bond(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture extra_future = 13;
  if (_internal_has_extra_future()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::extra_future(this),
        _Internal::extra_future(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  return target;
}

size_t GetOrderPriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 1;
  if (this->_internal_has_total_order_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_order_amount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_order_amount = 5;
  if (this->_internal_has_initial_order_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_order_amount_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission = 7;
  if (this->_internal_has_executed_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executed_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue executed_commission_rub = 8;
  if (this->_internal_has_executed_commission_rub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executed_commission_rub_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue service_commission = 9;
  if (this->_internal_has_service_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.service_commission_);
  }

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue deal_commission = 10;
  if (this->_internal_has_deal_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deal_commission_);
  }

  // int64 lots_requested = 3;
  if (this->_internal_lots_requested() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lots_requested());
  }

  switch (instrument_extra_case()) {
    // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond extra_bond = 12;
    case kExtraBond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.instrument_extra_.extra_bond_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture extra_future = 13;
    case kExtraFuture: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.instrument_extra_.extra_future_);
      break;
    }
    case INSTRUMENT_EXTRA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderPriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrderPriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderPriceResponse::GetClassData() const { return &_class_data_; }


void GetOrderPriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrderPriceResponse*>(&to_msg);
  auto& from = static_cast<const GetOrderPriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_total_order_amount()) {
    _this->_internal_mutable_total_order_amount()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_total_order_amount());
  }
  if (from._internal_has_initial_order_amount()) {
    _this->_internal_mutable_initial_order_amount()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_initial_order_amount());
  }
  if (from._internal_has_executed_commission()) {
    _this->_internal_mutable_executed_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_executed_commission());
  }
  if (from._internal_has_executed_commission_rub()) {
    _this->_internal_mutable_executed_commission_rub()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_executed_commission_rub());
  }
  if (from._internal_has_service_commission()) {
    _this->_internal_mutable_service_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_service_commission());
  }
  if (from._internal_has_deal_commission()) {
    _this->_internal_mutable_deal_commission()->::tinkoff::public_::invest::api::contract::v1::MoneyValue::MergeFrom(
        from._internal_deal_commission());
  }
  if (from._internal_lots_requested() != 0) {
    _this->_internal_set_lots_requested(from._internal_lots_requested());
  }
  switch (from.instrument_extra_case()) {
    case kExtraBond: {
      _this->_internal_mutable_extra_bond()->::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond::MergeFrom(
          from._internal_extra_bond());
      break;
    }
    case kExtraFuture: {
      _this->_internal_mutable_extra_future()->::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture::MergeFrom(
          from._internal_extra_future());
      break;
    }
    case INSTRUMENT_EXTRA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderPriceResponse::CopyFrom(const GetOrderPriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderPriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderPriceResponse::IsInitialized() const {
  return true;
}

void GetOrderPriceResponse::InternalSwap(GetOrderPriceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrderPriceResponse, _impl_.lots_requested_)
      + sizeof(GetOrderPriceResponse::_impl_.lots_requested_)
      - PROTOBUF_FIELD_OFFSET(GetOrderPriceResponse, _impl_.total_order_amount_)>(
          reinterpret_cast<char*>(&_impl_.total_order_amount_),
          reinterpret_cast<char*>(&other->_impl_.total_order_amount_));
  swap(_impl_.instrument_extra_, other->_impl_.instrument_extra_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderPriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orders_2eproto_getter, &descriptor_table_orders_2eproto_once,
      file_level_metadata_orders_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradesStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradesStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OrderTrades*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderTrades >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OrderTrades >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OrderTrade*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OrderTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PostOrderRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PostOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PostOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PostOrderResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PostOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PostOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrderStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OrderState*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OrderState >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OrderStage*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OrderStage >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::ReplaceOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_BuyLimitsView >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse_SellLimitsView >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetMaxLotsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraBond >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse_ExtraFuture >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrderPriceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
