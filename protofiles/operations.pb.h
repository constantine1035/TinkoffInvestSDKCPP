// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_operations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_operations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "common.pb.h"
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_operations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_operations_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_operations_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class AccountSubscriptionStatus;
struct AccountSubscriptionStatusDefaultTypeInternal;
extern AccountSubscriptionStatusDefaultTypeInternal _AccountSubscriptionStatus_default_instance_;
class BrokerReport;
struct BrokerReportDefaultTypeInternal;
extern BrokerReportDefaultTypeInternal _BrokerReport_default_instance_;
class BrokerReportRequest;
struct BrokerReportRequestDefaultTypeInternal;
extern BrokerReportRequestDefaultTypeInternal _BrokerReportRequest_default_instance_;
class BrokerReportResponse;
struct BrokerReportResponseDefaultTypeInternal;
extern BrokerReportResponseDefaultTypeInternal _BrokerReportResponse_default_instance_;
class DividendsForeignIssuerReport;
struct DividendsForeignIssuerReportDefaultTypeInternal;
extern DividendsForeignIssuerReportDefaultTypeInternal _DividendsForeignIssuerReport_default_instance_;
class GenerateBrokerReportRequest;
struct GenerateBrokerReportRequestDefaultTypeInternal;
extern GenerateBrokerReportRequestDefaultTypeInternal _GenerateBrokerReportRequest_default_instance_;
class GenerateBrokerReportResponse;
struct GenerateBrokerReportResponseDefaultTypeInternal;
extern GenerateBrokerReportResponseDefaultTypeInternal _GenerateBrokerReportResponse_default_instance_;
class GenerateDividendsForeignIssuerReportRequest;
struct GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal;
extern GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal _GenerateDividendsForeignIssuerReportRequest_default_instance_;
class GenerateDividendsForeignIssuerReportResponse;
struct GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal;
extern GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal _GenerateDividendsForeignIssuerReportResponse_default_instance_;
class GetBrokerReportRequest;
struct GetBrokerReportRequestDefaultTypeInternal;
extern GetBrokerReportRequestDefaultTypeInternal _GetBrokerReportRequest_default_instance_;
class GetBrokerReportResponse;
struct GetBrokerReportResponseDefaultTypeInternal;
extern GetBrokerReportResponseDefaultTypeInternal _GetBrokerReportResponse_default_instance_;
class GetDividendsForeignIssuerReportRequest;
struct GetDividendsForeignIssuerReportRequestDefaultTypeInternal;
extern GetDividendsForeignIssuerReportRequestDefaultTypeInternal _GetDividendsForeignIssuerReportRequest_default_instance_;
class GetDividendsForeignIssuerReportResponse;
struct GetDividendsForeignIssuerReportResponseDefaultTypeInternal;
extern GetDividendsForeignIssuerReportResponseDefaultTypeInternal _GetDividendsForeignIssuerReportResponse_default_instance_;
class GetDividendsForeignIssuerRequest;
struct GetDividendsForeignIssuerRequestDefaultTypeInternal;
extern GetDividendsForeignIssuerRequestDefaultTypeInternal _GetDividendsForeignIssuerRequest_default_instance_;
class GetDividendsForeignIssuerResponse;
struct GetDividendsForeignIssuerResponseDefaultTypeInternal;
extern GetDividendsForeignIssuerResponseDefaultTypeInternal _GetDividendsForeignIssuerResponse_default_instance_;
class GetOperationsByCursorRequest;
struct GetOperationsByCursorRequestDefaultTypeInternal;
extern GetOperationsByCursorRequestDefaultTypeInternal _GetOperationsByCursorRequest_default_instance_;
class GetOperationsByCursorResponse;
struct GetOperationsByCursorResponseDefaultTypeInternal;
extern GetOperationsByCursorResponseDefaultTypeInternal _GetOperationsByCursorResponse_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class OperationItem;
struct OperationItemDefaultTypeInternal;
extern OperationItemDefaultTypeInternal _OperationItem_default_instance_;
class OperationItemTrade;
struct OperationItemTradeDefaultTypeInternal;
extern OperationItemTradeDefaultTypeInternal _OperationItemTrade_default_instance_;
class OperationItemTrades;
struct OperationItemTradesDefaultTypeInternal;
extern OperationItemTradesDefaultTypeInternal _OperationItemTrades_default_instance_;
class OperationTrade;
struct OperationTradeDefaultTypeInternal;
extern OperationTradeDefaultTypeInternal _OperationTrade_default_instance_;
class OperationsRequest;
struct OperationsRequestDefaultTypeInternal;
extern OperationsRequestDefaultTypeInternal _OperationsRequest_default_instance_;
class OperationsResponse;
struct OperationsResponseDefaultTypeInternal;
extern OperationsResponseDefaultTypeInternal _OperationsResponse_default_instance_;
class PortfolioPosition;
struct PortfolioPositionDefaultTypeInternal;
extern PortfolioPositionDefaultTypeInternal _PortfolioPosition_default_instance_;
class PortfolioRequest;
struct PortfolioRequestDefaultTypeInternal;
extern PortfolioRequestDefaultTypeInternal _PortfolioRequest_default_instance_;
class PortfolioResponse;
struct PortfolioResponseDefaultTypeInternal;
extern PortfolioResponseDefaultTypeInternal _PortfolioResponse_default_instance_;
class PortfolioStreamRequest;
struct PortfolioStreamRequestDefaultTypeInternal;
extern PortfolioStreamRequestDefaultTypeInternal _PortfolioStreamRequest_default_instance_;
class PortfolioStreamResponse;
struct PortfolioStreamResponseDefaultTypeInternal;
extern PortfolioStreamResponseDefaultTypeInternal _PortfolioStreamResponse_default_instance_;
class PortfolioSubscriptionResult;
struct PortfolioSubscriptionResultDefaultTypeInternal;
extern PortfolioSubscriptionResultDefaultTypeInternal _PortfolioSubscriptionResult_default_instance_;
class PositionData;
struct PositionDataDefaultTypeInternal;
extern PositionDataDefaultTypeInternal _PositionData_default_instance_;
class PositionsFutures;
struct PositionsFuturesDefaultTypeInternal;
extern PositionsFuturesDefaultTypeInternal _PositionsFutures_default_instance_;
class PositionsMoney;
struct PositionsMoneyDefaultTypeInternal;
extern PositionsMoneyDefaultTypeInternal _PositionsMoney_default_instance_;
class PositionsOptions;
struct PositionsOptionsDefaultTypeInternal;
extern PositionsOptionsDefaultTypeInternal _PositionsOptions_default_instance_;
class PositionsRequest;
struct PositionsRequestDefaultTypeInternal;
extern PositionsRequestDefaultTypeInternal _PositionsRequest_default_instance_;
class PositionsResponse;
struct PositionsResponseDefaultTypeInternal;
extern PositionsResponseDefaultTypeInternal _PositionsResponse_default_instance_;
class PositionsSecurities;
struct PositionsSecuritiesDefaultTypeInternal;
extern PositionsSecuritiesDefaultTypeInternal _PositionsSecurities_default_instance_;
class PositionsStreamRequest;
struct PositionsStreamRequestDefaultTypeInternal;
extern PositionsStreamRequestDefaultTypeInternal _PositionsStreamRequest_default_instance_;
class PositionsStreamResponse;
struct PositionsStreamResponseDefaultTypeInternal;
extern PositionsStreamResponseDefaultTypeInternal _PositionsStreamResponse_default_instance_;
class PositionsSubscriptionResult;
struct PositionsSubscriptionResultDefaultTypeInternal;
extern PositionsSubscriptionResultDefaultTypeInternal _PositionsSubscriptionResult_default_instance_;
class PositionsSubscriptionStatus;
struct PositionsSubscriptionStatusDefaultTypeInternal;
extern PositionsSubscriptionStatusDefaultTypeInternal _PositionsSubscriptionStatus_default_instance_;
class VirtualPortfolioPosition;
struct VirtualPortfolioPositionDefaultTypeInternal;
extern VirtualPortfolioPositionDefaultTypeInternal _VirtualPortfolioPosition_default_instance_;
class WithdrawLimitsRequest;
struct WithdrawLimitsRequestDefaultTypeInternal;
extern WithdrawLimitsRequestDefaultTypeInternal _WithdrawLimitsRequest_default_instance_;
class WithdrawLimitsResponse;
struct WithdrawLimitsResponseDefaultTypeInternal;
extern WithdrawLimitsResponseDefaultTypeInternal _WithdrawLimitsResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::BrokerReport* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrokerReport>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrokerReportRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrokerReportResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetOperationsByCursorResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::Operation* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Operation>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OperationItem* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OperationItem>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OperationItemTrades>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OperationTrade* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OperationTrade>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OperationsRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OperationsRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::OperationsResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OperationsResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PortfolioRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PortfolioResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PortfolioStreamRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PortfolioStreamResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionData* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionData>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsStreamRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsStreamResponse>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsRequest>(Arena*);
template<> ::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse* Arena::CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::WithdrawLimitsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

enum PortfolioRequest_CurrencyRequest : int {
  PortfolioRequest_CurrencyRequest_RUB = 0,
  PortfolioRequest_CurrencyRequest_USD = 1,
  PortfolioRequest_CurrencyRequest_EUR = 2,
  PortfolioRequest_CurrencyRequest_PortfolioRequest_CurrencyRequest_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PortfolioRequest_CurrencyRequest_PortfolioRequest_CurrencyRequest_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PortfolioRequest_CurrencyRequest_IsValid(int value);
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest_CurrencyRequest_CurrencyRequest_MIN = PortfolioRequest_CurrencyRequest_RUB;
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest_CurrencyRequest_CurrencyRequest_MAX = PortfolioRequest_CurrencyRequest_EUR;
constexpr int PortfolioRequest_CurrencyRequest_CurrencyRequest_ARRAYSIZE = PortfolioRequest_CurrencyRequest_CurrencyRequest_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortfolioRequest_CurrencyRequest_descriptor();
template<typename T>
inline const std::string& PortfolioRequest_CurrencyRequest_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PortfolioRequest_CurrencyRequest>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PortfolioRequest_CurrencyRequest_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PortfolioRequest_CurrencyRequest_descriptor(), enum_t_value);
}
inline bool PortfolioRequest_CurrencyRequest_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PortfolioRequest_CurrencyRequest* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PortfolioRequest_CurrencyRequest>(
    PortfolioRequest_CurrencyRequest_descriptor(), name, value);
}
enum OperationState : int {
  OPERATION_STATE_UNSPECIFIED = 0,
  OPERATION_STATE_EXECUTED = 1,
  OPERATION_STATE_CANCELED = 2,
  OPERATION_STATE_PROGRESS = 3,
  OperationState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OperationState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OperationState_IsValid(int value);
constexpr OperationState OperationState_MIN = OPERATION_STATE_UNSPECIFIED;
constexpr OperationState OperationState_MAX = OPERATION_STATE_PROGRESS;
constexpr int OperationState_ARRAYSIZE = OperationState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationState_descriptor();
template<typename T>
inline const std::string& OperationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationState_descriptor(), enum_t_value);
}
inline bool OperationState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperationState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationState>(
    OperationState_descriptor(), name, value);
}
enum OperationType : int {
  OPERATION_TYPE_UNSPECIFIED = 0,
  OPERATION_TYPE_INPUT = 1,
  OPERATION_TYPE_BOND_TAX = 2,
  OPERATION_TYPE_OUTPUT_SECURITIES = 3,
  OPERATION_TYPE_OVERNIGHT = 4,
  OPERATION_TYPE_TAX = 5,
  OPERATION_TYPE_BOND_REPAYMENT_FULL = 6,
  OPERATION_TYPE_SELL_CARD = 7,
  OPERATION_TYPE_DIVIDEND_TAX = 8,
  OPERATION_TYPE_OUTPUT = 9,
  OPERATION_TYPE_BOND_REPAYMENT = 10,
  OPERATION_TYPE_TAX_CORRECTION = 11,
  OPERATION_TYPE_SERVICE_FEE = 12,
  OPERATION_TYPE_BENEFIT_TAX = 13,
  OPERATION_TYPE_MARGIN_FEE = 14,
  OPERATION_TYPE_BUY = 15,
  OPERATION_TYPE_BUY_CARD = 16,
  OPERATION_TYPE_INPUT_SECURITIES = 17,
  OPERATION_TYPE_SELL_MARGIN = 18,
  OPERATION_TYPE_BROKER_FEE = 19,
  OPERATION_TYPE_BUY_MARGIN = 20,
  OPERATION_TYPE_DIVIDEND = 21,
  OPERATION_TYPE_SELL = 22,
  OPERATION_TYPE_COUPON = 23,
  OPERATION_TYPE_SUCCESS_FEE = 24,
  OPERATION_TYPE_DIVIDEND_TRANSFER = 25,
  OPERATION_TYPE_ACCRUING_VARMARGIN = 26,
  OPERATION_TYPE_WRITING_OFF_VARMARGIN = 27,
  OPERATION_TYPE_DELIVERY_BUY = 28,
  OPERATION_TYPE_DELIVERY_SELL = 29,
  OPERATION_TYPE_TRACK_MFEE = 30,
  OPERATION_TYPE_TRACK_PFEE = 31,
  OPERATION_TYPE_TAX_PROGRESSIVE = 32,
  OPERATION_TYPE_BOND_TAX_PROGRESSIVE = 33,
  OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE = 34,
  OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE = 35,
  OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE = 36,
  OPERATION_TYPE_TAX_REPO_PROGRESSIVE = 37,
  OPERATION_TYPE_TAX_REPO = 38,
  OPERATION_TYPE_TAX_REPO_HOLD = 39,
  OPERATION_TYPE_TAX_REPO_REFUND = 40,
  OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE = 41,
  OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE = 42,
  OPERATION_TYPE_DIV_EXT = 43,
  OPERATION_TYPE_TAX_CORRECTION_COUPON = 44,
  OPERATION_TYPE_CASH_FEE = 45,
  OPERATION_TYPE_OUT_FEE = 46,
  OPERATION_TYPE_OUT_STAMP_DUTY = 47,
  OPERATION_TYPE_OUTPUT_SWIFT = 50,
  OPERATION_TYPE_INPUT_SWIFT = 51,
  OPERATION_TYPE_OUTPUT_ACQUIRING = 53,
  OPERATION_TYPE_INPUT_ACQUIRING = 54,
  OPERATION_TYPE_OUTPUT_PENALTY = 55,
  OPERATION_TYPE_ADVICE_FEE = 56,
  OPERATION_TYPE_TRANS_IIS_BS = 57,
  OPERATION_TYPE_TRANS_BS_BS = 58,
  OPERATION_TYPE_OUT_MULTI = 59,
  OPERATION_TYPE_INP_MULTI = 60,
  OPERATION_TYPE_OVER_PLACEMENT = 61,
  OPERATION_TYPE_OVER_COM = 62,
  OPERATION_TYPE_OVER_INCOME = 63,
  OPERATION_TYPE_OPTION_EXPIRATION = 64,
  OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OperationType_IsValid(int value);
constexpr OperationType OperationType_MIN = OPERATION_TYPE_UNSPECIFIED;
constexpr OperationType OperationType_MAX = OPERATION_TYPE_OPTION_EXPIRATION;
constexpr int OperationType_ARRAYSIZE = OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor();
template<typename T>
inline const std::string& OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationType_descriptor(), enum_t_value);
}
inline bool OperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationType>(
    OperationType_descriptor(), name, value);
}
enum PortfolioSubscriptionStatus : int {
  PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED = 0,
  PORTFOLIO_SUBSCRIPTION_STATUS_SUCCESS = 1,
  PORTFOLIO_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND = 2,
  PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR = 3,
  PortfolioSubscriptionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PortfolioSubscriptionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PortfolioSubscriptionStatus_IsValid(int value);
constexpr PortfolioSubscriptionStatus PortfolioSubscriptionStatus_MIN = PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED;
constexpr PortfolioSubscriptionStatus PortfolioSubscriptionStatus_MAX = PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR;
constexpr int PortfolioSubscriptionStatus_ARRAYSIZE = PortfolioSubscriptionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortfolioSubscriptionStatus_descriptor();
template<typename T>
inline const std::string& PortfolioSubscriptionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PortfolioSubscriptionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PortfolioSubscriptionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PortfolioSubscriptionStatus_descriptor(), enum_t_value);
}
inline bool PortfolioSubscriptionStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PortfolioSubscriptionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PortfolioSubscriptionStatus>(
    PortfolioSubscriptionStatus_descriptor(), name, value);
}
enum PositionsAccountSubscriptionStatus : int {
  POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED = 0,
  POSITIONS_SUBSCRIPTION_STATUS_SUCCESS = 1,
  POSITIONS_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND = 2,
  POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR = 3,
  PositionsAccountSubscriptionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PositionsAccountSubscriptionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PositionsAccountSubscriptionStatus_IsValid(int value);
constexpr PositionsAccountSubscriptionStatus PositionsAccountSubscriptionStatus_MIN = POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED;
constexpr PositionsAccountSubscriptionStatus PositionsAccountSubscriptionStatus_MAX = POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR;
constexpr int PositionsAccountSubscriptionStatus_ARRAYSIZE = PositionsAccountSubscriptionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionsAccountSubscriptionStatus_descriptor();
template<typename T>
inline const std::string& PositionsAccountSubscriptionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionsAccountSubscriptionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionsAccountSubscriptionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionsAccountSubscriptionStatus_descriptor(), enum_t_value);
}
inline bool PositionsAccountSubscriptionStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PositionsAccountSubscriptionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionsAccountSubscriptionStatus>(
    PositionsAccountSubscriptionStatus_descriptor(), name, value);
}
// ===================================================================

class OperationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OperationsRequest) */ {
 public:
  inline OperationsRequest() : OperationsRequest(nullptr) {}
  ~OperationsRequest() override;
  explicit PROTOBUF_CONSTEXPR OperationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationsRequest(const OperationsRequest& from);
  OperationsRequest(OperationsRequest&& from) noexcept
    : OperationsRequest() {
    *this = ::std::move(from);
  }

  inline OperationsRequest& operator=(const OperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationsRequest& operator=(OperationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationsRequest* internal_default_instance() {
    return reinterpret_cast<const OperationsRequest*>(
               &_OperationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OperationsRequest& a, OperationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationsRequest& from) {
    OperationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OperationsRequest";
  }
  protected:
  explicit OperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kFigiFieldNumber = 5,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // optional string figi = 5;
  bool has_figi() const;
  private:
  bool _internal_has_figi() const;
  public:
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // optional .google.protobuf.Timestamp from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& from() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_from();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from();
  void set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_from();

  // optional .google.protobuf.Timestamp to = 3;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& to() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_to();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_to();
  void set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_to() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_to();

  // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
  void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
  void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OperationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OperationsResponse) */ {
 public:
  inline OperationsResponse() : OperationsResponse(nullptr) {}
  ~OperationsResponse() override;
  explicit PROTOBUF_CONSTEXPR OperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationsResponse(const OperationsResponse& from);
  OperationsResponse(OperationsResponse&& from) noexcept
    : OperationsResponse() {
    *this = ::std::move(from);
  }

  inline OperationsResponse& operator=(const OperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationsResponse& operator=(OperationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationsResponse* internal_default_instance() {
    return reinterpret_cast<const OperationsResponse*>(
               &_OperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OperationsResponse& a, OperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationsResponse& from) {
    OperationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OperationsResponse";
  }
  protected:
  explicit OperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Operation operations = 1;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::tinkoff::public_::invest::api::contract::v1::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Operation >*
      mutable_operations();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Operation& _internal_operations(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Operation* _internal_add_operations();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Operation& operations(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Operation >&
      operations() const;

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Operation > operations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit PROTOBUF_CONSTEXPR Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Operation& from) {
    Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 14,
    kIdFieldNumber = 1,
    kParentOperationIdFieldNumber = 2,
    kCurrencyFieldNumber = 3,
    kFigiFieldNumber = 9,
    kInstrumentTypeFieldNumber = 10,
    kTypeFieldNumber = 12,
    kAssetUidFieldNumber = 16,
    kPositionUidFieldNumber = 17,
    kInstrumentUidFieldNumber = 18,
    kPaymentFieldNumber = 4,
    kPriceFieldNumber = 5,
    kDateFieldNumber = 11,
    kQuantityFieldNumber = 7,
    kQuantityRestFieldNumber = 8,
    kStateFieldNumber = 6,
    kOperationTypeFieldNumber = 13,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.OperationTrade trades = 14;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::tinkoff::public_::invest::api::contract::v1::OperationTrade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationTrade >*
      mutable_trades();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OperationTrade& _internal_trades(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OperationTrade* _internal_add_trades();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::OperationTrade& trades(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OperationTrade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationTrade >&
      trades() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string parent_operation_id = 2;
  void clear_parent_operation_id();
  const std::string& parent_operation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_operation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_operation_id();
  PROTOBUF_NODISCARD std::string* release_parent_operation_id();
  void set_allocated_parent_operation_id(std::string* parent_operation_id);
  private:
  const std::string& _internal_parent_operation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_operation_id(const std::string& value);
  std::string* _internal_mutable_parent_operation_id();
  public:

  // string currency = 3;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string figi = 9;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string instrument_type = 10;
  void clear_instrument_type();
  const std::string& instrument_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* instrument_type);
  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(const std::string& value);
  std::string* _internal_mutable_instrument_type();
  public:

  // string type = 12;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string asset_uid = 16;
  void clear_asset_uid();
  const std::string& asset_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* asset_uid);
  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(const std::string& value);
  std::string* _internal_mutable_asset_uid();
  public:

  // string position_uid = 17;
  void clear_position_uid();
  const std::string& position_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* position_uid);
  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(const std::string& value);
  std::string* _internal_mutable_position_uid();
  public:

  // string instrument_uid = 18;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 4;
  bool has_payment() const;
  private:
  bool _internal_has_payment() const;
  public:
  void clear_payment();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& payment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_payment();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_payment();
  void set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_payment() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_payment();
  public:
  void unsafe_arena_set_allocated_payment(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_payment();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 5;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

  // .google.protobuf.Timestamp date = 11;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date();
  void set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date();

  // int64 quantity = 7;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // int64 quantity_rest = 8;
  void clear_quantity_rest();
  int64_t quantity_rest() const;
  void set_quantity_rest(int64_t value);
  private:
  int64_t _internal_quantity_rest() const;
  void _internal_set_quantity_rest(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OperationState state = 6;
  void clear_state();
  ::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
  void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
  void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OperationType operation_type = 13;
  void clear_operation_type();
  ::tinkoff::public_::invest::api::contract::v1::OperationType operation_type() const;
  void set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OperationType _internal_operation_type() const;
  void _internal_set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationTrade > trades_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_operation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_;
    int64_t quantity_;
    int64_t quantity_rest_;
    int state_;
    int operation_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationTrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OperationTrade) */ {
 public:
  inline OperationTrade() : OperationTrade(nullptr) {}
  ~OperationTrade() override;
  explicit PROTOBUF_CONSTEXPR OperationTrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationTrade(const OperationTrade& from);
  OperationTrade(OperationTrade&& from) noexcept
    : OperationTrade() {
    *this = ::std::move(from);
  }

  inline OperationTrade& operator=(const OperationTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationTrade& operator=(OperationTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationTrade* internal_default_instance() {
    return reinterpret_cast<const OperationTrade*>(
               &_OperationTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OperationTrade& a, OperationTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationTrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationTrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationTrade& from) {
    OperationTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationTrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OperationTrade";
  }
  protected:
  explicit OperationTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeIdFieldNumber = 1,
    kDateTimeFieldNumber = 2,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 3,
  };
  // string trade_id = 1;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // .google.protobuf.Timestamp date_time = 2;
  bool has_date_time() const;
  private:
  bool _internal_has_date_time() const;
  public:
  void clear_date_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_date_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_time();
  void set_allocated_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* date_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_time();
  public:
  void unsafe_arena_set_allocated_date_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* date_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date_time();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

  // int64 quantity = 3;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OperationTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_time_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    int64_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PortfolioRequest) */ {
 public:
  inline PortfolioRequest() : PortfolioRequest(nullptr) {}
  ~PortfolioRequest() override;
  explicit PROTOBUF_CONSTEXPR PortfolioRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortfolioRequest(const PortfolioRequest& from);
  PortfolioRequest(PortfolioRequest&& from) noexcept
    : PortfolioRequest() {
    *this = ::std::move(from);
  }

  inline PortfolioRequest& operator=(const PortfolioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioRequest& operator=(PortfolioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioRequest* internal_default_instance() {
    return reinterpret_cast<const PortfolioRequest*>(
               &_PortfolioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PortfolioRequest& a, PortfolioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortfolioRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortfolioRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PortfolioRequest& from) {
    PortfolioRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PortfolioRequest";
  }
  protected:
  explicit PortfolioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PortfolioRequest_CurrencyRequest CurrencyRequest;
  static constexpr CurrencyRequest RUB =
    PortfolioRequest_CurrencyRequest_RUB;
  static constexpr CurrencyRequest USD =
    PortfolioRequest_CurrencyRequest_USD;
  static constexpr CurrencyRequest EUR =
    PortfolioRequest_CurrencyRequest_EUR;
  static inline bool CurrencyRequest_IsValid(int value) {
    return PortfolioRequest_CurrencyRequest_IsValid(value);
  }
  static constexpr CurrencyRequest CurrencyRequest_MIN =
    PortfolioRequest_CurrencyRequest_CurrencyRequest_MIN;
  static constexpr CurrencyRequest CurrencyRequest_MAX =
    PortfolioRequest_CurrencyRequest_CurrencyRequest_MAX;
  static constexpr int CurrencyRequest_ARRAYSIZE =
    PortfolioRequest_CurrencyRequest_CurrencyRequest_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CurrencyRequest_descriptor() {
    return PortfolioRequest_CurrencyRequest_descriptor();
  }
  template<typename T>
  static inline const std::string& CurrencyRequest_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CurrencyRequest>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CurrencyRequest_Name.");
    return PortfolioRequest_CurrencyRequest_Name(enum_t_value);
  }
  static inline bool CurrencyRequest_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CurrencyRequest* value) {
    return PortfolioRequest_CurrencyRequest_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kCurrencyFieldNumber = 2,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // optional .tinkoff.public_.invest.api.contract.v1.PortfolioRequest.CurrencyRequest currency = 2;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest currency() const;
  void set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest _internal_currency() const;
  void _internal_set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PortfolioRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    int currency_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PortfolioResponse) */ {
 public:
  inline PortfolioResponse() : PortfolioResponse(nullptr) {}
  ~PortfolioResponse() override;
  explicit PROTOBUF_CONSTEXPR PortfolioResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortfolioResponse(const PortfolioResponse& from);
  PortfolioResponse(PortfolioResponse&& from) noexcept
    : PortfolioResponse() {
    *this = ::std::move(from);
  }

  inline PortfolioResponse& operator=(const PortfolioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioResponse& operator=(PortfolioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioResponse* internal_default_instance() {
    return reinterpret_cast<const PortfolioResponse*>(
               &_PortfolioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PortfolioResponse& a, PortfolioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortfolioResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortfolioResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PortfolioResponse& from) {
    PortfolioResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PortfolioResponse";
  }
  protected:
  explicit PortfolioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 7,
    kVirtualPositionsFieldNumber = 12,
    kAccountIdFieldNumber = 8,
    kTotalAmountSharesFieldNumber = 1,
    kTotalAmountBondsFieldNumber = 2,
    kTotalAmountEtfFieldNumber = 3,
    kTotalAmountCurrenciesFieldNumber = 4,
    kTotalAmountFuturesFieldNumber = 5,
    kExpectedYieldFieldNumber = 6,
    kTotalAmountOptionsFieldNumber = 9,
    kTotalAmountSpFieldNumber = 10,
    kTotalAmountPortfolioFieldNumber = 11,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.PortfolioPosition positions = 7;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition >*
      mutable_positions();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition& _internal_positions(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* _internal_add_positions();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition& positions(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition >&
      positions() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition virtual_positions = 12;
  int virtual_positions_size() const;
  private:
  int _internal_virtual_positions_size() const;
  public:
  void clear_virtual_positions();
  ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* mutable_virtual_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition >*
      mutable_virtual_positions();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition& _internal_virtual_positions(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* _internal_add_virtual_positions();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition& virtual_positions(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* add_virtual_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition >&
      virtual_positions() const;

  // string account_id = 8;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_shares = 1;
  bool has_total_amount_shares() const;
  private:
  bool _internal_has_total_amount_shares() const;
  public:
  void clear_total_amount_shares();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_shares() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_shares();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_shares();
  void set_allocated_total_amount_shares(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_shares);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_shares() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_shares();
  public:
  void unsafe_arena_set_allocated_total_amount_shares(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_shares);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_shares();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_bonds = 2;
  bool has_total_amount_bonds() const;
  private:
  bool _internal_has_total_amount_bonds() const;
  public:
  void clear_total_amount_bonds();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_bonds() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_bonds();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_bonds();
  void set_allocated_total_amount_bonds(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_bonds);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_bonds() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_bonds();
  public:
  void unsafe_arena_set_allocated_total_amount_bonds(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_bonds);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_bonds();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_etf = 3;
  bool has_total_amount_etf() const;
  private:
  bool _internal_has_total_amount_etf() const;
  public:
  void clear_total_amount_etf();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_etf() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_etf();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_etf();
  void set_allocated_total_amount_etf(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_etf);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_etf() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_etf();
  public:
  void unsafe_arena_set_allocated_total_amount_etf(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_etf);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_etf();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_currencies = 4;
  bool has_total_amount_currencies() const;
  private:
  bool _internal_has_total_amount_currencies() const;
  public:
  void clear_total_amount_currencies();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_currencies() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_currencies();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_currencies();
  void set_allocated_total_amount_currencies(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_currencies);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_currencies() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_currencies();
  public:
  void unsafe_arena_set_allocated_total_amount_currencies(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_currencies);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_currencies();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_futures = 5;
  bool has_total_amount_futures() const;
  private:
  bool _internal_has_total_amount_futures() const;
  public:
  void clear_total_amount_futures();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_futures() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_futures();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_futures();
  void set_allocated_total_amount_futures(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_futures);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_futures() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_futures();
  public:
  void unsafe_arena_set_allocated_total_amount_futures(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_futures);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_futures();

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 6;
  bool has_expected_yield() const;
  private:
  bool _internal_has_expected_yield() const;
  public:
  void clear_expected_yield();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield();
  void set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield();
  public:
  void unsafe_arena_set_allocated_expected_yield(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_options = 9;
  bool has_total_amount_options() const;
  private:
  bool _internal_has_total_amount_options() const;
  public:
  void clear_total_amount_options();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_options() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_options();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_options();
  void set_allocated_total_amount_options(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_options);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_options() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_options();
  public:
  void unsafe_arena_set_allocated_total_amount_options(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_options);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_options();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_sp = 10;
  bool has_total_amount_sp() const;
  private:
  bool _internal_has_total_amount_sp() const;
  public:
  void clear_total_amount_sp();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_sp() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_sp();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_sp();
  void set_allocated_total_amount_sp(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_sp);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_sp() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_sp();
  public:
  void unsafe_arena_set_allocated_total_amount_sp(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_sp);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_sp();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_portfolio = 11;
  bool has_total_amount_portfolio() const;
  private:
  bool _internal_has_total_amount_portfolio() const;
  public:
  void clear_total_amount_portfolio();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_portfolio() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_portfolio();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_portfolio();
  void set_allocated_total_amount_portfolio(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_portfolio);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_portfolio() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_portfolio();
  public:
  void unsafe_arena_set_allocated_total_amount_portfolio(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_portfolio);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_portfolio();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PortfolioResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition > positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition > virtual_positions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_shares_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_bonds_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_etf_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_currencies_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_futures_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_options_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_sp_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_portfolio_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsRequest) */ {
 public:
  inline PositionsRequest() : PositionsRequest(nullptr) {}
  ~PositionsRequest() override;
  explicit PROTOBUF_CONSTEXPR PositionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsRequest(const PositionsRequest& from);
  PositionsRequest(PositionsRequest&& from) noexcept
    : PositionsRequest() {
    *this = ::std::move(from);
  }

  inline PositionsRequest& operator=(const PositionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsRequest& operator=(PositionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsRequest* internal_default_instance() {
    return reinterpret_cast<const PositionsRequest*>(
               &_PositionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionsRequest& a, PositionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsRequest& from) {
    PositionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsRequest";
  }
  protected:
  explicit PositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsResponse) */ {
 public:
  inline PositionsResponse() : PositionsResponse(nullptr) {}
  ~PositionsResponse() override;
  explicit PROTOBUF_CONSTEXPR PositionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsResponse(const PositionsResponse& from);
  PositionsResponse(PositionsResponse&& from) noexcept
    : PositionsResponse() {
    *this = ::std::move(from);
  }

  inline PositionsResponse& operator=(const PositionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsResponse& operator=(PositionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsResponse* internal_default_instance() {
    return reinterpret_cast<const PositionsResponse*>(
               &_PositionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PositionsResponse& a, PositionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsResponse& from) {
    PositionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsResponse";
  }
  protected:
  explicit PositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 1,
    kBlockedFieldNumber = 2,
    kSecuritiesFieldNumber = 3,
    kFuturesFieldNumber = 5,
    kOptionsFieldNumber = 6,
    kLimitsLoadingInProgressFieldNumber = 4,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
  int money_size() const;
  private:
  int _internal_money_size() const;
  public:
  void clear_money();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_money(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
      mutable_money();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_money(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_add_money();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& money(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_money();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
      money() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
  int blocked_size() const;
  private:
  int _internal_blocked_size() const;
  public:
  void clear_blocked();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
      mutable_blocked();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_blocked(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_add_blocked();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_blocked();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
      blocked() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
  int securities_size() const;
  private:
  int _internal_securities_size() const;
  public:
  void clear_securities();
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* mutable_securities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >*
      mutable_securities();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& _internal_securities(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* _internal_add_securities();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& securities(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* add_securities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >&
      securities() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 5;
  int futures_size() const;
  private:
  int _internal_futures_size() const;
  public:
  void clear_futures();
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* mutable_futures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >*
      mutable_futures();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& _internal_futures(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* _internal_add_futures();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& futures(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* add_futures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >&
      futures() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 6;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >*
      mutable_options();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& _internal_options(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* _internal_add_options();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& options(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >&
      options() const;

  // bool limits_loading_in_progress = 4;
  void clear_limits_loading_in_progress();
  bool limits_loading_in_progress() const;
  void set_limits_loading_in_progress(bool value);
  private:
  bool _internal_limits_loading_in_progress() const;
  void _internal_set_limits_loading_in_progress(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > money_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > blocked_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities > securities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures > futures_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions > options_;
    bool limits_loading_in_progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class WithdrawLimitsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest) */ {
 public:
  inline WithdrawLimitsRequest() : WithdrawLimitsRequest(nullptr) {}
  ~WithdrawLimitsRequest() override;
  explicit PROTOBUF_CONSTEXPR WithdrawLimitsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WithdrawLimitsRequest(const WithdrawLimitsRequest& from);
  WithdrawLimitsRequest(WithdrawLimitsRequest&& from) noexcept
    : WithdrawLimitsRequest() {
    *this = ::std::move(from);
  }

  inline WithdrawLimitsRequest& operator=(const WithdrawLimitsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawLimitsRequest& operator=(WithdrawLimitsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WithdrawLimitsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WithdrawLimitsRequest* internal_default_instance() {
    return reinterpret_cast<const WithdrawLimitsRequest*>(
               &_WithdrawLimitsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WithdrawLimitsRequest& a, WithdrawLimitsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawLimitsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawLimitsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WithdrawLimitsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WithdrawLimitsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WithdrawLimitsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WithdrawLimitsRequest& from) {
    WithdrawLimitsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawLimitsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest";
  }
  protected:
  explicit WithdrawLimitsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class WithdrawLimitsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse) */ {
 public:
  inline WithdrawLimitsResponse() : WithdrawLimitsResponse(nullptr) {}
  ~WithdrawLimitsResponse() override;
  explicit PROTOBUF_CONSTEXPR WithdrawLimitsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WithdrawLimitsResponse(const WithdrawLimitsResponse& from);
  WithdrawLimitsResponse(WithdrawLimitsResponse&& from) noexcept
    : WithdrawLimitsResponse() {
    *this = ::std::move(from);
  }

  inline WithdrawLimitsResponse& operator=(const WithdrawLimitsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawLimitsResponse& operator=(WithdrawLimitsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WithdrawLimitsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WithdrawLimitsResponse* internal_default_instance() {
    return reinterpret_cast<const WithdrawLimitsResponse*>(
               &_WithdrawLimitsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WithdrawLimitsResponse& a, WithdrawLimitsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawLimitsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawLimitsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WithdrawLimitsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WithdrawLimitsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WithdrawLimitsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WithdrawLimitsResponse& from) {
    WithdrawLimitsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawLimitsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse";
  }
  protected:
  explicit WithdrawLimitsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 1,
    kBlockedFieldNumber = 2,
    kBlockedGuaranteeFieldNumber = 3,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
  int money_size() const;
  private:
  int _internal_money_size() const;
  public:
  void clear_money();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_money(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
      mutable_money();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_money(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_add_money();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& money(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_money();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
      money() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
  int blocked_size() const;
  private:
  int _internal_blocked_size() const;
  public:
  void clear_blocked();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
      mutable_blocked();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_blocked(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_add_blocked();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_blocked();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
      blocked() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_guarantee = 3;
  int blocked_guarantee_size() const;
  private:
  int _internal_blocked_guarantee_size() const;
  public:
  void clear_blocked_guarantee();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked_guarantee(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
      mutable_blocked_guarantee();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_blocked_guarantee(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_add_blocked_guarantee();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked_guarantee(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_blocked_guarantee();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
      blocked_guarantee() const;

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > money_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > blocked_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > blocked_guarantee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PortfolioPosition) */ {
 public:
  inline PortfolioPosition() : PortfolioPosition(nullptr) {}
  ~PortfolioPosition() override;
  explicit PROTOBUF_CONSTEXPR PortfolioPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortfolioPosition(const PortfolioPosition& from);
  PortfolioPosition(PortfolioPosition&& from) noexcept
    : PortfolioPosition() {
    *this = ::std::move(from);
  }

  inline PortfolioPosition& operator=(const PortfolioPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioPosition& operator=(PortfolioPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioPosition* internal_default_instance() {
    return reinterpret_cast<const PortfolioPosition*>(
               &_PortfolioPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PortfolioPosition& a, PortfolioPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortfolioPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortfolioPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PortfolioPosition& from) {
    PortfolioPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PortfolioPosition";
  }
  protected:
  explicit PortfolioPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentTypeFieldNumber = 2,
    kPositionUidFieldNumber = 24,
    kInstrumentUidFieldNumber = 25,
    kQuantityFieldNumber = 3,
    kAveragePositionPriceFieldNumber = 4,
    kExpectedYieldFieldNumber = 5,
    kCurrentNkdFieldNumber = 6,
    kAveragePositionPricePtFieldNumber = 7,
    kCurrentPriceFieldNumber = 8,
    kAveragePositionPriceFifoFieldNumber = 9,
    kQuantityLotsFieldNumber = 10,
    kBlockedLotsFieldNumber = 22,
    kVarMarginFieldNumber = 26,
    kExpectedYieldFifoFieldNumber = 27,
    kBlockedFieldNumber = 21,
  };
  // string figi = 1;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string instrument_type = 2;
  void clear_instrument_type();
  const std::string& instrument_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* instrument_type);
  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(const std::string& value);
  std::string* _internal_mutable_instrument_type();
  public:

  // string position_uid = 24;
  void clear_position_uid();
  const std::string& position_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* position_uid);
  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(const std::string& value);
  std::string* _internal_mutable_position_uid();
  public:

  // string instrument_uid = 25;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 3;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_quantity();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_quantity();
  void set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* quantity);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_quantity() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_quantity();
  public:
  void unsafe_arena_set_allocated_quantity(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_quantity();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 4;
  bool has_average_position_price() const;
  private:
  bool _internal_has_average_position_price() const;
  public:
  void clear_average_position_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price();
  void set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price();
  public:
  void unsafe_arena_set_allocated_average_position_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price();

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 5;
  bool has_expected_yield() const;
  private:
  bool _internal_has_expected_yield() const;
  public:
  void clear_expected_yield();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield();
  void set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield();
  public:
  void unsafe_arena_set_allocated_expected_yield(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_nkd = 6;
  bool has_current_nkd() const;
  private:
  bool _internal_has_current_nkd() const;
  public:
  void clear_current_nkd();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_nkd() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_current_nkd();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_current_nkd();
  void set_allocated_current_nkd(::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_nkd);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_current_nkd() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_current_nkd();
  public:
  void unsafe_arena_set_allocated_current_nkd(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_nkd);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_current_nkd();

  // .tinkoff.public_.invest.api.contract.v1.Quotation average_position_price_pt = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_average_position_price_pt() const;
  private:
  bool _internal_has_average_position_price_pt() const;
  public:
  PROTOBUF_DEPRECATED void clear_average_position_price_pt();
  PROTOBUF_DEPRECATED const ::tinkoff::public_::invest::api::contract::v1::Quotation& average_position_price_pt() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::tinkoff::public_::invest::api::contract::v1::Quotation* release_average_position_price_pt();
  PROTOBUF_DEPRECATED ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_average_position_price_pt();
  PROTOBUF_DEPRECATED void set_allocated_average_position_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* average_position_price_pt);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_average_position_price_pt() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_average_position_price_pt();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_average_position_price_pt(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* average_position_price_pt);
  PROTOBUF_DEPRECATED ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_average_position_price_pt();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 8;
  bool has_current_price() const;
  private:
  bool _internal_has_current_price() const;
  public:
  void clear_current_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_current_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_current_price();
  void set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_current_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_current_price();
  public:
  void unsafe_arena_set_allocated_current_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_current_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 9;
  bool has_average_position_price_fifo() const;
  private:
  bool _internal_has_average_position_price_fifo() const;
  public:
  void clear_average_position_price_fifo();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price_fifo() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price_fifo();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price_fifo();
  void set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price_fifo() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price_fifo();
  public:
  void unsafe_arena_set_allocated_average_position_price_fifo(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price_fifo();

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity_lots = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_quantity_lots() const;
  private:
  bool _internal_has_quantity_lots() const;
  public:
  PROTOBUF_DEPRECATED void clear_quantity_lots();
  PROTOBUF_DEPRECATED const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity_lots() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::tinkoff::public_::invest::api::contract::v1::Quotation* release_quantity_lots();
  PROTOBUF_DEPRECATED ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_quantity_lots();
  PROTOBUF_DEPRECATED void set_allocated_quantity_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_lots);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_quantity_lots() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_quantity_lots();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_quantity_lots(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_lots);
  PROTOBUF_DEPRECATED ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_quantity_lots();

  // .tinkoff.public_.invest.api.contract.v1.Quotation blocked_lots = 22;
  bool has_blocked_lots() const;
  private:
  bool _internal_has_blocked_lots() const;
  public:
  void clear_blocked_lots();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& blocked_lots() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_blocked_lots();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_blocked_lots();
  void set_allocated_blocked_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* blocked_lots);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_blocked_lots() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_blocked_lots();
  public:
  void unsafe_arena_set_allocated_blocked_lots(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* blocked_lots);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_blocked_lots();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue var_margin = 26;
  bool has_var_margin() const;
  private:
  bool _internal_has_var_margin() const;
  public:
  void clear_var_margin();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& var_margin() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_var_margin();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_var_margin();
  void set_allocated_var_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* var_margin);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_var_margin() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_var_margin();
  public:
  void unsafe_arena_set_allocated_var_margin(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* var_margin);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_var_margin();

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 27;
  bool has_expected_yield_fifo() const;
  private:
  bool _internal_has_expected_yield_fifo() const;
  public:
  void clear_expected_yield_fifo();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield_fifo() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield_fifo();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield_fifo();
  void set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield_fifo() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield_fifo();
  public:
  void unsafe_arena_set_allocated_expected_yield_fifo(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield_fifo();

  // bool blocked = 21;
  void clear_blocked();
  bool blocked() const;
  void set_blocked(bool value);
  private:
  bool _internal_blocked() const;
  void _internal_set_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PortfolioPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_nkd_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* average_position_price_pt_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_lots_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* blocked_lots_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* var_margin_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo_;
    bool blocked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class VirtualPortfolioPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition) */ {
 public:
  inline VirtualPortfolioPosition() : VirtualPortfolioPosition(nullptr) {}
  ~VirtualPortfolioPosition() override;
  explicit PROTOBUF_CONSTEXPR VirtualPortfolioPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtualPortfolioPosition(const VirtualPortfolioPosition& from);
  VirtualPortfolioPosition(VirtualPortfolioPosition&& from) noexcept
    : VirtualPortfolioPosition() {
    *this = ::std::move(from);
  }

  inline VirtualPortfolioPosition& operator=(const VirtualPortfolioPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualPortfolioPosition& operator=(VirtualPortfolioPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtualPortfolioPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtualPortfolioPosition* internal_default_instance() {
    return reinterpret_cast<const VirtualPortfolioPosition*>(
               &_VirtualPortfolioPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VirtualPortfolioPosition& a, VirtualPortfolioPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualPortfolioPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualPortfolioPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtualPortfolioPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtualPortfolioPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtualPortfolioPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtualPortfolioPosition& from) {
    VirtualPortfolioPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualPortfolioPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition";
  }
  protected:
  explicit VirtualPortfolioPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionUidFieldNumber = 1,
    kInstrumentUidFieldNumber = 2,
    kFigiFieldNumber = 3,
    kInstrumentTypeFieldNumber = 4,
    kQuantityFieldNumber = 5,
    kAveragePositionPriceFieldNumber = 6,
    kExpectedYieldFieldNumber = 7,
    kExpectedYieldFifoFieldNumber = 8,
    kExpireDateFieldNumber = 9,
    kCurrentPriceFieldNumber = 10,
    kAveragePositionPriceFifoFieldNumber = 11,
  };
  // string position_uid = 1;
  void clear_position_uid();
  const std::string& position_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* position_uid);
  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(const std::string& value);
  std::string* _internal_mutable_position_uid();
  public:

  // string instrument_uid = 2;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // string figi = 3;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string instrument_type = 4;
  void clear_instrument_type();
  const std::string& instrument_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* instrument_type);
  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(const std::string& value);
  std::string* _internal_mutable_instrument_type();
  public:

  // .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 5;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_quantity();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_quantity();
  void set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* quantity);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_quantity() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_quantity();
  public:
  void unsafe_arena_set_allocated_quantity(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_quantity();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 6;
  bool has_average_position_price() const;
  private:
  bool _internal_has_average_position_price() const;
  public:
  void clear_average_position_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price();
  void set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price();
  public:
  void unsafe_arena_set_allocated_average_position_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price();

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 7;
  bool has_expected_yield() const;
  private:
  bool _internal_has_expected_yield() const;
  public:
  void clear_expected_yield();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield();
  void set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield();
  public:
  void unsafe_arena_set_allocated_expected_yield(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield();

  // .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 8;
  bool has_expected_yield_fifo() const;
  private:
  bool _internal_has_expected_yield_fifo() const;
  public:
  void clear_expected_yield_fifo();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield_fifo() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield_fifo();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield_fifo();
  void set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield_fifo() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield_fifo();
  public:
  void unsafe_arena_set_allocated_expected_yield_fifo(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield_fifo();

  // .google.protobuf.Timestamp expire_date = 9;
  bool has_expire_date() const;
  private:
  bool _internal_has_expire_date() const;
  public:
  void clear_expire_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_date();
  void set_allocated_expire_date(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_date();
  public:
  void unsafe_arena_set_allocated_expire_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_date();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 10;
  bool has_current_price() const;
  private:
  bool _internal_has_current_price() const;
  public:
  void clear_current_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_current_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_current_price();
  void set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_current_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_current_price();
  public:
  void unsafe_arena_set_allocated_current_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_current_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 11;
  bool has_average_position_price_fifo() const;
  private:
  bool _internal_has_average_position_price_fifo() const;
  public:
  void clear_average_position_price_fifo();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price_fifo() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price_fifo();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price_fifo();
  void set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price_fifo() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price_fifo();
  public:
  void unsafe_arena_set_allocated_average_position_price_fifo(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price_fifo();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_type_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsSecurities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsSecurities) */ {
 public:
  inline PositionsSecurities() : PositionsSecurities(nullptr) {}
  ~PositionsSecurities() override;
  explicit PROTOBUF_CONSTEXPR PositionsSecurities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsSecurities(const PositionsSecurities& from);
  PositionsSecurities(PositionsSecurities&& from) noexcept
    : PositionsSecurities() {
    *this = ::std::move(from);
  }

  inline PositionsSecurities& operator=(const PositionsSecurities& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsSecurities& operator=(PositionsSecurities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsSecurities& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsSecurities* internal_default_instance() {
    return reinterpret_cast<const PositionsSecurities*>(
               &_PositionsSecurities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PositionsSecurities& a, PositionsSecurities& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsSecurities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsSecurities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsSecurities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsSecurities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsSecurities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsSecurities& from) {
    PositionsSecurities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsSecurities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsSecurities";
  }
  protected:
  explicit PositionsSecurities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kPositionUidFieldNumber = 4,
    kInstrumentUidFieldNumber = 5,
    kInstrumentTypeFieldNumber = 16,
    kBlockedFieldNumber = 2,
    kBalanceFieldNumber = 3,
    kExchangeBlockedFieldNumber = 11,
  };
  // string figi = 1;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string position_uid = 4;
  void clear_position_uid();
  const std::string& position_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* position_uid);
  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(const std::string& value);
  std::string* _internal_mutable_position_uid();
  public:

  // string instrument_uid = 5;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // string instrument_type = 16;
  void clear_instrument_type();
  const std::string& instrument_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* instrument_type);
  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(const std::string& value);
  std::string* _internal_mutable_instrument_type();
  public:

  // int64 blocked = 2;
  void clear_blocked();
  int64_t blocked() const;
  void set_blocked(int64_t value);
  private:
  int64_t _internal_blocked() const;
  void _internal_set_blocked(int64_t value);
  public:

  // int64 balance = 3;
  void clear_balance();
  int64_t balance() const;
  void set_balance(int64_t value);
  private:
  int64_t _internal_balance() const;
  void _internal_set_balance(int64_t value);
  public:

  // bool exchange_blocked = 11;
  void clear_exchange_blocked();
  bool exchange_blocked() const;
  void set_exchange_blocked(bool value);
  private:
  bool _internal_exchange_blocked() const;
  void _internal_set_exchange_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsSecurities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_type_;
    int64_t blocked_;
    int64_t balance_;
    bool exchange_blocked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsFutures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsFutures) */ {
 public:
  inline PositionsFutures() : PositionsFutures(nullptr) {}
  ~PositionsFutures() override;
  explicit PROTOBUF_CONSTEXPR PositionsFutures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsFutures(const PositionsFutures& from);
  PositionsFutures(PositionsFutures&& from) noexcept
    : PositionsFutures() {
    *this = ::std::move(from);
  }

  inline PositionsFutures& operator=(const PositionsFutures& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsFutures& operator=(PositionsFutures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsFutures& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsFutures* internal_default_instance() {
    return reinterpret_cast<const PositionsFutures*>(
               &_PositionsFutures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PositionsFutures& a, PositionsFutures& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsFutures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsFutures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsFutures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsFutures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsFutures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsFutures& from) {
    PositionsFutures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsFutures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsFutures";
  }
  protected:
  explicit PositionsFutures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kPositionUidFieldNumber = 4,
    kInstrumentUidFieldNumber = 5,
    kBlockedFieldNumber = 2,
    kBalanceFieldNumber = 3,
  };
  // string figi = 1;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string position_uid = 4;
  void clear_position_uid();
  const std::string& position_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* position_uid);
  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(const std::string& value);
  std::string* _internal_mutable_position_uid();
  public:

  // string instrument_uid = 5;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // int64 blocked = 2;
  void clear_blocked();
  int64_t blocked() const;
  void set_blocked(int64_t value);
  private:
  int64_t _internal_blocked() const;
  void _internal_set_blocked(int64_t value);
  public:

  // int64 balance = 3;
  void clear_balance();
  int64_t balance() const;
  void set_balance(int64_t value);
  private:
  int64_t _internal_balance() const;
  void _internal_set_balance(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsFutures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    int64_t blocked_;
    int64_t balance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsOptions) */ {
 public:
  inline PositionsOptions() : PositionsOptions(nullptr) {}
  ~PositionsOptions() override;
  explicit PROTOBUF_CONSTEXPR PositionsOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsOptions(const PositionsOptions& from);
  PositionsOptions(PositionsOptions&& from) noexcept
    : PositionsOptions() {
    *this = ::std::move(from);
  }

  inline PositionsOptions& operator=(const PositionsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsOptions& operator=(PositionsOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsOptions* internal_default_instance() {
    return reinterpret_cast<const PositionsOptions*>(
               &_PositionsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PositionsOptions& a, PositionsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsOptions& from) {
    PositionsOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsOptions";
  }
  protected:
  explicit PositionsOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionUidFieldNumber = 1,
    kInstrumentUidFieldNumber = 2,
    kBlockedFieldNumber = 11,
    kBalanceFieldNumber = 21,
  };
  // string position_uid = 1;
  void clear_position_uid();
  const std::string& position_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* position_uid);
  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(const std::string& value);
  std::string* _internal_mutable_position_uid();
  public:

  // string instrument_uid = 2;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // int64 blocked = 11;
  void clear_blocked();
  int64_t blocked() const;
  void set_blocked(int64_t value);
  private:
  int64_t _internal_blocked() const;
  void _internal_set_blocked(int64_t value);
  public:

  // int64 balance = 21;
  void clear_balance();
  int64_t balance() const;
  void set_balance(int64_t value);
  private:
  int64_t _internal_balance() const;
  void _internal_set_balance(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    int64_t blocked_;
    int64_t balance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class BrokerReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest) */ {
 public:
  inline BrokerReportRequest() : BrokerReportRequest(nullptr) {}
  ~BrokerReportRequest() override;
  explicit PROTOBUF_CONSTEXPR BrokerReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerReportRequest(const BrokerReportRequest& from);
  BrokerReportRequest(BrokerReportRequest&& from) noexcept
    : BrokerReportRequest() {
    *this = ::std::move(from);
  }

  inline BrokerReportRequest& operator=(const BrokerReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerReportRequest& operator=(BrokerReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerReportRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kGenerateBrokerReportRequest = 1,
    kGetBrokerReportRequest = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const BrokerReportRequest* internal_default_instance() {
    return reinterpret_cast<const BrokerReportRequest*>(
               &_BrokerReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BrokerReportRequest& a, BrokerReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrokerReportRequest& from) {
    BrokerReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.BrokerReportRequest";
  }
  protected:
  explicit BrokerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateBrokerReportRequestFieldNumber = 1,
    kGetBrokerReportRequestFieldNumber = 2,
  };
  // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest generate_broker_report_request = 1;
  bool has_generate_broker_report_request() const;
  private:
  bool _internal_has_generate_broker_report_request() const;
  public:
  void clear_generate_broker_report_request();
  const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& generate_broker_report_request() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* release_generate_broker_report_request();
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* mutable_generate_broker_report_request();
  void set_allocated_generate_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* generate_broker_report_request);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& _internal_generate_broker_report_request() const;
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* _internal_mutable_generate_broker_report_request();
  public:
  void unsafe_arena_set_allocated_generate_broker_report_request(
      ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* generate_broker_report_request);
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* unsafe_arena_release_generate_broker_report_request();

  // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest get_broker_report_request = 2;
  bool has_get_broker_report_request() const;
  private:
  bool _internal_has_get_broker_report_request() const;
  public:
  void clear_get_broker_report_request();
  const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& get_broker_report_request() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* release_get_broker_report_request();
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* mutable_get_broker_report_request();
  void set_allocated_get_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* get_broker_report_request);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& _internal_get_broker_report_request() const;
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* _internal_mutable_get_broker_report_request();
  public:
  void unsafe_arena_set_allocated_get_broker_report_request(
      ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* get_broker_report_request);
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* unsafe_arena_release_get_broker_report_request();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest)
 private:
  class _Internal;
  void set_has_generate_broker_report_request();
  void set_has_get_broker_report_request();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* generate_broker_report_request_;
      ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* get_broker_report_request_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class BrokerReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse) */ {
 public:
  inline BrokerReportResponse() : BrokerReportResponse(nullptr) {}
  ~BrokerReportResponse() override;
  explicit PROTOBUF_CONSTEXPR BrokerReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerReportResponse(const BrokerReportResponse& from);
  BrokerReportResponse(BrokerReportResponse&& from) noexcept
    : BrokerReportResponse() {
    *this = ::std::move(from);
  }

  inline BrokerReportResponse& operator=(const BrokerReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerReportResponse& operator=(BrokerReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerReportResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kGenerateBrokerReportResponse = 1,
    kGetBrokerReportResponse = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const BrokerReportResponse* internal_default_instance() {
    return reinterpret_cast<const BrokerReportResponse*>(
               &_BrokerReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BrokerReportResponse& a, BrokerReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrokerReportResponse& from) {
    BrokerReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.BrokerReportResponse";
  }
  protected:
  explicit BrokerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateBrokerReportResponseFieldNumber = 1,
    kGetBrokerReportResponseFieldNumber = 2,
  };
  // .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse generate_broker_report_response = 1;
  bool has_generate_broker_report_response() const;
  private:
  bool _internal_has_generate_broker_report_response() const;
  public:
  void clear_generate_broker_report_response();
  const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& generate_broker_report_response() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* release_generate_broker_report_response();
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* mutable_generate_broker_report_response();
  void set_allocated_generate_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* generate_broker_report_response);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& _internal_generate_broker_report_response() const;
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* _internal_mutable_generate_broker_report_response();
  public:
  void unsafe_arena_set_allocated_generate_broker_report_response(
      ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* generate_broker_report_response);
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* unsafe_arena_release_generate_broker_report_response();

  // .tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse get_broker_report_response = 2;
  bool has_get_broker_report_response() const;
  private:
  bool _internal_has_get_broker_report_response() const;
  public:
  void clear_get_broker_report_response();
  const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& get_broker_report_response() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* release_get_broker_report_response();
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* mutable_get_broker_report_response();
  void set_allocated_get_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* get_broker_report_response);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& _internal_get_broker_report_response() const;
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* _internal_mutable_get_broker_report_response();
  public:
  void unsafe_arena_set_allocated_get_broker_report_response(
      ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* get_broker_report_response);
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* unsafe_arena_release_get_broker_report_response();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse)
 private:
  class _Internal;
  void set_has_generate_broker_report_response();
  void set_has_get_broker_report_response();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* generate_broker_report_response_;
      ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* get_broker_report_response_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateBrokerReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest) */ {
 public:
  inline GenerateBrokerReportRequest() : GenerateBrokerReportRequest(nullptr) {}
  ~GenerateBrokerReportRequest() override;
  explicit PROTOBUF_CONSTEXPR GenerateBrokerReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateBrokerReportRequest(const GenerateBrokerReportRequest& from);
  GenerateBrokerReportRequest(GenerateBrokerReportRequest&& from) noexcept
    : GenerateBrokerReportRequest() {
    *this = ::std::move(from);
  }

  inline GenerateBrokerReportRequest& operator=(const GenerateBrokerReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateBrokerReportRequest& operator=(GenerateBrokerReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateBrokerReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateBrokerReportRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateBrokerReportRequest*>(
               &_GenerateBrokerReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GenerateBrokerReportRequest& a, GenerateBrokerReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateBrokerReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateBrokerReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateBrokerReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateBrokerReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateBrokerReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateBrokerReportRequest& from) {
    GenerateBrokerReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateBrokerReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest";
  }
  protected:
  explicit GenerateBrokerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& from() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_from();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from();
  void set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_from();

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& to() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_to();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_to();
  void set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_to() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_to();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateBrokerReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse) */ {
 public:
  inline GenerateBrokerReportResponse() : GenerateBrokerReportResponse(nullptr) {}
  ~GenerateBrokerReportResponse() override;
  explicit PROTOBUF_CONSTEXPR GenerateBrokerReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateBrokerReportResponse(const GenerateBrokerReportResponse& from);
  GenerateBrokerReportResponse(GenerateBrokerReportResponse&& from) noexcept
    : GenerateBrokerReportResponse() {
    *this = ::std::move(from);
  }

  inline GenerateBrokerReportResponse& operator=(const GenerateBrokerReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateBrokerReportResponse& operator=(GenerateBrokerReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateBrokerReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateBrokerReportResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateBrokerReportResponse*>(
               &_GenerateBrokerReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GenerateBrokerReportResponse& a, GenerateBrokerReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateBrokerReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateBrokerReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateBrokerReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateBrokerReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateBrokerReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateBrokerReportResponse& from) {
    GenerateBrokerReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateBrokerReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse";
  }
  protected:
  explicit GenerateBrokerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetBrokerReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest) */ {
 public:
  inline GetBrokerReportRequest() : GetBrokerReportRequest(nullptr) {}
  ~GetBrokerReportRequest() override;
  explicit PROTOBUF_CONSTEXPR GetBrokerReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBrokerReportRequest(const GetBrokerReportRequest& from);
  GetBrokerReportRequest(GetBrokerReportRequest&& from) noexcept
    : GetBrokerReportRequest() {
    *this = ::std::move(from);
  }

  inline GetBrokerReportRequest& operator=(const GetBrokerReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBrokerReportRequest& operator=(GetBrokerReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBrokerReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBrokerReportRequest* internal_default_instance() {
    return reinterpret_cast<const GetBrokerReportRequest*>(
               &_GetBrokerReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetBrokerReportRequest& a, GetBrokerReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBrokerReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBrokerReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBrokerReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBrokerReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBrokerReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBrokerReportRequest& from) {
    GetBrokerReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBrokerReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest";
  }
  protected:
  explicit GetBrokerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // optional int32 page = 2;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    int32_t page_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetBrokerReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse) */ {
 public:
  inline GetBrokerReportResponse() : GetBrokerReportResponse(nullptr) {}
  ~GetBrokerReportResponse() override;
  explicit PROTOBUF_CONSTEXPR GetBrokerReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBrokerReportResponse(const GetBrokerReportResponse& from);
  GetBrokerReportResponse(GetBrokerReportResponse&& from) noexcept
    : GetBrokerReportResponse() {
    *this = ::std::move(from);
  }

  inline GetBrokerReportResponse& operator=(const GetBrokerReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBrokerReportResponse& operator=(GetBrokerReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBrokerReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBrokerReportResponse* internal_default_instance() {
    return reinterpret_cast<const GetBrokerReportResponse*>(
               &_GetBrokerReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetBrokerReportResponse& a, GetBrokerReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBrokerReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBrokerReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBrokerReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBrokerReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBrokerReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBrokerReportResponse& from) {
    GetBrokerReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBrokerReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse";
  }
  protected:
  explicit GetBrokerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerReportFieldNumber = 1,
    kItemsCountFieldNumber = 2,
    kPagesCountFieldNumber = 3,
    kPageFieldNumber = 4,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.BrokerReport broker_report = 1;
  int broker_report_size() const;
  private:
  int _internal_broker_report_size() const;
  public:
  void clear_broker_report();
  ::tinkoff::public_::invest::api::contract::v1::BrokerReport* mutable_broker_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::BrokerReport >*
      mutable_broker_report();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrokerReport& _internal_broker_report(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::BrokerReport* _internal_add_broker_report();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::BrokerReport& broker_report(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::BrokerReport* add_broker_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::BrokerReport >&
      broker_report() const;

  // int32 itemsCount = 2;
  void clear_itemscount();
  int32_t itemscount() const;
  void set_itemscount(int32_t value);
  private:
  int32_t _internal_itemscount() const;
  void _internal_set_itemscount(int32_t value);
  public:

  // int32 pagesCount = 3;
  void clear_pagescount();
  int32_t pagescount() const;
  void set_pagescount(int32_t value);
  private:
  int32_t _internal_pagescount() const;
  void _internal_set_pagescount(int32_t value);
  public:

  // int32 page = 4;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::BrokerReport > broker_report_;
    int32_t itemscount_;
    int32_t pagescount_;
    int32_t page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class BrokerReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.BrokerReport) */ {
 public:
  inline BrokerReport() : BrokerReport(nullptr) {}
  ~BrokerReport() override;
  explicit PROTOBUF_CONSTEXPR BrokerReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerReport(const BrokerReport& from);
  BrokerReport(BrokerReport&& from) noexcept
    : BrokerReport() {
    *this = ::std::move(from);
  }

  inline BrokerReport& operator=(const BrokerReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerReport& operator=(BrokerReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerReport* internal_default_instance() {
    return reinterpret_cast<const BrokerReport*>(
               &_BrokerReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BrokerReport& a, BrokerReport& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrokerReport& from) {
    BrokerReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.BrokerReport";
  }
  protected:
  explicit BrokerReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    kFigiFieldNumber = 3,
    kExecuteSignFieldNumber = 4,
    kExchangeFieldNumber = 6,
    kClassCodeFieldNumber = 7,
    kDirectionFieldNumber = 8,
    kNameFieldNumber = 9,
    kTickerFieldNumber = 10,
    kPartyFieldNumber = 20,
    kBrokerStatusFieldNumber = 23,
    kSeparateAgreementTypeFieldNumber = 24,
    kSeparateAgreementNumberFieldNumber = 25,
    kSeparateAgreementDateFieldNumber = 26,
    kDeliveryTypeFieldNumber = 27,
    kTradeDatetimeFieldNumber = 5,
    kPriceFieldNumber = 11,
    kOrderAmountFieldNumber = 13,
    kAciValueFieldNumber = 14,
    kTotalOrderAmountFieldNumber = 15,
    kBrokerCommissionFieldNumber = 16,
    kExchangeCommissionFieldNumber = 17,
    kExchangeClearingCommissionFieldNumber = 18,
    kRepoRateFieldNumber = 19,
    kClearValueDateFieldNumber = 21,
    kSecValueDateFieldNumber = 22,
    kQuantityFieldNumber = 12,
  };
  // string trade_id = 1;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // string order_id = 2;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string figi = 3;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string execute_sign = 4;
  void clear_execute_sign();
  const std::string& execute_sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_execute_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_execute_sign();
  PROTOBUF_NODISCARD std::string* release_execute_sign();
  void set_allocated_execute_sign(std::string* execute_sign);
  private:
  const std::string& _internal_execute_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execute_sign(const std::string& value);
  std::string* _internal_mutable_execute_sign();
  public:

  // string exchange = 6;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string class_code = 7;
  void clear_class_code();
  const std::string& class_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* class_code);
  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(const std::string& value);
  std::string* _internal_mutable_class_code();
  public:

  // string direction = 8;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string name = 9;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ticker = 10;
  void clear_ticker();
  const std::string& ticker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* ticker);
  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(const std::string& value);
  std::string* _internal_mutable_ticker();
  public:

  // string party = 20;
  void clear_party();
  const std::string& party() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_party(ArgT0&& arg0, ArgT... args);
  std::string* mutable_party();
  PROTOBUF_NODISCARD std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string broker_status = 23;
  void clear_broker_status();
  const std::string& broker_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_status();
  PROTOBUF_NODISCARD std::string* release_broker_status();
  void set_allocated_broker_status(std::string* broker_status);
  private:
  const std::string& _internal_broker_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_status(const std::string& value);
  std::string* _internal_mutable_broker_status();
  public:

  // string separate_agreement_type = 24;
  void clear_separate_agreement_type();
  const std::string& separate_agreement_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_separate_agreement_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_separate_agreement_type();
  PROTOBUF_NODISCARD std::string* release_separate_agreement_type();
  void set_allocated_separate_agreement_type(std::string* separate_agreement_type);
  private:
  const std::string& _internal_separate_agreement_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_separate_agreement_type(const std::string& value);
  std::string* _internal_mutable_separate_agreement_type();
  public:

  // string separate_agreement_number = 25;
  void clear_separate_agreement_number();
  const std::string& separate_agreement_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_separate_agreement_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_separate_agreement_number();
  PROTOBUF_NODISCARD std::string* release_separate_agreement_number();
  void set_allocated_separate_agreement_number(std::string* separate_agreement_number);
  private:
  const std::string& _internal_separate_agreement_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_separate_agreement_number(const std::string& value);
  std::string* _internal_mutable_separate_agreement_number();
  public:

  // string separate_agreement_date = 26;
  void clear_separate_agreement_date();
  const std::string& separate_agreement_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_separate_agreement_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_separate_agreement_date();
  PROTOBUF_NODISCARD std::string* release_separate_agreement_date();
  void set_allocated_separate_agreement_date(std::string* separate_agreement_date);
  private:
  const std::string& _internal_separate_agreement_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_separate_agreement_date(const std::string& value);
  std::string* _internal_mutable_separate_agreement_date();
  public:

  // string delivery_type = 27;
  void clear_delivery_type();
  const std::string& delivery_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delivery_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delivery_type();
  PROTOBUF_NODISCARD std::string* release_delivery_type();
  void set_allocated_delivery_type(std::string* delivery_type);
  private:
  const std::string& _internal_delivery_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delivery_type(const std::string& value);
  std::string* _internal_mutable_delivery_type();
  public:

  // .google.protobuf.Timestamp trade_datetime = 5;
  bool has_trade_datetime() const;
  private:
  bool _internal_has_trade_datetime() const;
  public:
  void clear_trade_datetime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& trade_datetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_trade_datetime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_trade_datetime();
  void set_allocated_trade_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* trade_datetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_trade_datetime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_trade_datetime();
  public:
  void unsafe_arena_set_allocated_trade_datetime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* trade_datetime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_trade_datetime();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 11;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue order_amount = 13;
  bool has_order_amount() const;
  private:
  bool _internal_has_order_amount() const;
  public:
  void clear_order_amount();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& order_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_order_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_order_amount();
  void set_allocated_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* order_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_order_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_order_amount();
  public:
  void unsafe_arena_set_allocated_order_amount(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* order_amount);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_order_amount();

  // .tinkoff.public_.invest.api.contract.v1.Quotation aci_value = 14;
  bool has_aci_value() const;
  private:
  bool _internal_has_aci_value() const;
  public:
  void clear_aci_value();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& aci_value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_aci_value();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_aci_value();
  void set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::Quotation* aci_value);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_aci_value() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_aci_value();
  public:
  void unsafe_arena_set_allocated_aci_value(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* aci_value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_aci_value();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 15;
  bool has_total_order_amount() const;
  private:
  bool _internal_has_total_order_amount() const;
  public:
  void clear_total_order_amount();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_order_amount();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_order_amount();
  void set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_order_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_order_amount();
  public:
  void unsafe_arena_set_allocated_total_order_amount(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_order_amount();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue broker_commission = 16;
  bool has_broker_commission() const;
  private:
  bool _internal_has_broker_commission() const;
  public:
  void clear_broker_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& broker_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_broker_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_broker_commission();
  void set_allocated_broker_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* broker_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_broker_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_broker_commission();
  public:
  void unsafe_arena_set_allocated_broker_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* broker_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_broker_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_commission = 17;
  bool has_exchange_commission() const;
  private:
  bool _internal_has_exchange_commission() const;
  public:
  void clear_exchange_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& exchange_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_exchange_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_exchange_commission();
  void set_allocated_exchange_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_exchange_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_exchange_commission();
  public:
  void unsafe_arena_set_allocated_exchange_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_exchange_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_clearing_commission = 18;
  bool has_exchange_clearing_commission() const;
  private:
  bool _internal_has_exchange_clearing_commission() const;
  public:
  void clear_exchange_clearing_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& exchange_clearing_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_exchange_clearing_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_exchange_clearing_commission();
  void set_allocated_exchange_clearing_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_clearing_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_exchange_clearing_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_exchange_clearing_commission();
  public:
  void unsafe_arena_set_allocated_exchange_clearing_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_clearing_commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_exchange_clearing_commission();

  // .tinkoff.public_.invest.api.contract.v1.Quotation repo_rate = 19;
  bool has_repo_rate() const;
  private:
  bool _internal_has_repo_rate() const;
  public:
  void clear_repo_rate();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& repo_rate() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_repo_rate();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_repo_rate();
  void set_allocated_repo_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* repo_rate);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_repo_rate() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_repo_rate();
  public:
  void unsafe_arena_set_allocated_repo_rate(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* repo_rate);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_repo_rate();

  // .google.protobuf.Timestamp clear_value_date = 21;
  bool has_clear_value_date() const;
  private:
  bool _internal_has_clear_value_date() const;
  public:
  void clear_clear_value_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& clear_value_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_clear_value_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_clear_value_date();
  void set_allocated_clear_value_date(::PROTOBUF_NAMESPACE_ID::Timestamp* clear_value_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_clear_value_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_clear_value_date();
  public:
  void unsafe_arena_set_allocated_clear_value_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* clear_value_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_clear_value_date();

  // .google.protobuf.Timestamp sec_value_date = 22;
  bool has_sec_value_date() const;
  private:
  bool _internal_has_sec_value_date() const;
  public:
  void clear_sec_value_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& sec_value_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_sec_value_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_sec_value_date();
  void set_allocated_sec_value_date(::PROTOBUF_NAMESPACE_ID::Timestamp* sec_value_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_sec_value_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_sec_value_date();
  public:
  void unsafe_arena_set_allocated_sec_value_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* sec_value_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_sec_value_date();

  // int64 quantity = 12;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.BrokerReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execute_sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr separate_agreement_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr separate_agreement_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr separate_agreement_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delivery_type_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* trade_datetime_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* aci_value_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* broker_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_clearing_commission_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* repo_rate_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* clear_value_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* sec_value_date_;
    int64_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest) */ {
 public:
  inline GetDividendsForeignIssuerRequest() : GetDividendsForeignIssuerRequest(nullptr) {}
  ~GetDividendsForeignIssuerRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDividendsForeignIssuerRequest(const GetDividendsForeignIssuerRequest& from);
  GetDividendsForeignIssuerRequest(GetDividendsForeignIssuerRequest&& from) noexcept
    : GetDividendsForeignIssuerRequest() {
    *this = ::std::move(from);
  }

  inline GetDividendsForeignIssuerRequest& operator=(const GetDividendsForeignIssuerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDividendsForeignIssuerRequest& operator=(GetDividendsForeignIssuerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDividendsForeignIssuerRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kGenerateDivForeignIssuerReport = 1,
    kGetDivForeignIssuerReport = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const GetDividendsForeignIssuerRequest* internal_default_instance() {
    return reinterpret_cast<const GetDividendsForeignIssuerRequest*>(
               &_GetDividendsForeignIssuerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetDividendsForeignIssuerRequest& a, GetDividendsForeignIssuerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDividendsForeignIssuerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDividendsForeignIssuerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDividendsForeignIssuerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDividendsForeignIssuerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDividendsForeignIssuerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDividendsForeignIssuerRequest& from) {
    GetDividendsForeignIssuerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDividendsForeignIssuerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest";
  }
  protected:
  explicit GetDividendsForeignIssuerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateDivForeignIssuerReportFieldNumber = 1,
    kGetDivForeignIssuerReportFieldNumber = 2,
  };
  // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest generate_div_foreign_issuer_report = 1;
  bool has_generate_div_foreign_issuer_report() const;
  private:
  bool _internal_has_generate_div_foreign_issuer_report() const;
  public:
  void clear_generate_div_foreign_issuer_report();
  const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& generate_div_foreign_issuer_report() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* release_generate_div_foreign_issuer_report();
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* mutable_generate_div_foreign_issuer_report();
  void set_allocated_generate_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* generate_div_foreign_issuer_report);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& _internal_generate_div_foreign_issuer_report() const;
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* _internal_mutable_generate_div_foreign_issuer_report();
  public:
  void unsafe_arena_set_allocated_generate_div_foreign_issuer_report(
      ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* generate_div_foreign_issuer_report);
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* unsafe_arena_release_generate_div_foreign_issuer_report();

  // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest get_div_foreign_issuer_report = 2;
  bool has_get_div_foreign_issuer_report() const;
  private:
  bool _internal_has_get_div_foreign_issuer_report() const;
  public:
  void clear_get_div_foreign_issuer_report();
  const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& get_div_foreign_issuer_report() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* release_get_div_foreign_issuer_report();
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* mutable_get_div_foreign_issuer_report();
  void set_allocated_get_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* get_div_foreign_issuer_report);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& _internal_get_div_foreign_issuer_report() const;
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* _internal_mutable_get_div_foreign_issuer_report();
  public:
  void unsafe_arena_set_allocated_get_div_foreign_issuer_report(
      ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* get_div_foreign_issuer_report);
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* unsafe_arena_release_get_div_foreign_issuer_report();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
 private:
  class _Internal;
  void set_has_generate_div_foreign_issuer_report();
  void set_has_get_div_foreign_issuer_report();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* generate_div_foreign_issuer_report_;
      ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* get_div_foreign_issuer_report_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse) */ {
 public:
  inline GetDividendsForeignIssuerResponse() : GetDividendsForeignIssuerResponse(nullptr) {}
  ~GetDividendsForeignIssuerResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDividendsForeignIssuerResponse(const GetDividendsForeignIssuerResponse& from);
  GetDividendsForeignIssuerResponse(GetDividendsForeignIssuerResponse&& from) noexcept
    : GetDividendsForeignIssuerResponse() {
    *this = ::std::move(from);
  }

  inline GetDividendsForeignIssuerResponse& operator=(const GetDividendsForeignIssuerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDividendsForeignIssuerResponse& operator=(GetDividendsForeignIssuerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDividendsForeignIssuerResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kGenerateDivForeignIssuerReportResponse = 1,
    kDivForeignIssuerReport = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const GetDividendsForeignIssuerResponse* internal_default_instance() {
    return reinterpret_cast<const GetDividendsForeignIssuerResponse*>(
               &_GetDividendsForeignIssuerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetDividendsForeignIssuerResponse& a, GetDividendsForeignIssuerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDividendsForeignIssuerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDividendsForeignIssuerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDividendsForeignIssuerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDividendsForeignIssuerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDividendsForeignIssuerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDividendsForeignIssuerResponse& from) {
    GetDividendsForeignIssuerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDividendsForeignIssuerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse";
  }
  protected:
  explicit GetDividendsForeignIssuerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateDivForeignIssuerReportResponseFieldNumber = 1,
    kDivForeignIssuerReportFieldNumber = 2,
  };
  // .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse generate_div_foreign_issuer_report_response = 1;
  bool has_generate_div_foreign_issuer_report_response() const;
  private:
  bool _internal_has_generate_div_foreign_issuer_report_response() const;
  public:
  void clear_generate_div_foreign_issuer_report_response();
  const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& generate_div_foreign_issuer_report_response() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* release_generate_div_foreign_issuer_report_response();
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* mutable_generate_div_foreign_issuer_report_response();
  void set_allocated_generate_div_foreign_issuer_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* generate_div_foreign_issuer_report_response);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& _internal_generate_div_foreign_issuer_report_response() const;
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* _internal_mutable_generate_div_foreign_issuer_report_response();
  public:
  void unsafe_arena_set_allocated_generate_div_foreign_issuer_report_response(
      ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* generate_div_foreign_issuer_report_response);
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* unsafe_arena_release_generate_div_foreign_issuer_report_response();

  // .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse div_foreign_issuer_report = 2;
  bool has_div_foreign_issuer_report() const;
  private:
  bool _internal_has_div_foreign_issuer_report() const;
  public:
  void clear_div_foreign_issuer_report();
  const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& div_foreign_issuer_report() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* release_div_foreign_issuer_report();
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* mutable_div_foreign_issuer_report();
  void set_allocated_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* div_foreign_issuer_report);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& _internal_div_foreign_issuer_report() const;
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* _internal_mutable_div_foreign_issuer_report();
  public:
  void unsafe_arena_set_allocated_div_foreign_issuer_report(
      ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* div_foreign_issuer_report);
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* unsafe_arena_release_div_foreign_issuer_report();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
 private:
  class _Internal;
  void set_has_generate_div_foreign_issuer_report_response();
  void set_has_div_foreign_issuer_report();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* generate_div_foreign_issuer_report_response_;
      ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* div_foreign_issuer_report_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateDividendsForeignIssuerReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest) */ {
 public:
  inline GenerateDividendsForeignIssuerReportRequest() : GenerateDividendsForeignIssuerReportRequest(nullptr) {}
  ~GenerateDividendsForeignIssuerReportRequest() override;
  explicit PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateDividendsForeignIssuerReportRequest(const GenerateDividendsForeignIssuerReportRequest& from);
  GenerateDividendsForeignIssuerReportRequest(GenerateDividendsForeignIssuerReportRequest&& from) noexcept
    : GenerateDividendsForeignIssuerReportRequest() {
    *this = ::std::move(from);
  }

  inline GenerateDividendsForeignIssuerReportRequest& operator=(const GenerateDividendsForeignIssuerReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateDividendsForeignIssuerReportRequest& operator=(GenerateDividendsForeignIssuerReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateDividendsForeignIssuerReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateDividendsForeignIssuerReportRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateDividendsForeignIssuerReportRequest*>(
               &_GenerateDividendsForeignIssuerReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GenerateDividendsForeignIssuerReportRequest& a, GenerateDividendsForeignIssuerReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateDividendsForeignIssuerReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateDividendsForeignIssuerReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateDividendsForeignIssuerReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateDividendsForeignIssuerReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateDividendsForeignIssuerReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateDividendsForeignIssuerReportRequest& from) {
    GenerateDividendsForeignIssuerReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateDividendsForeignIssuerReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest";
  }
  protected:
  explicit GenerateDividendsForeignIssuerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& from() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_from();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from();
  void set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_from();

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& to() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_to();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_to();
  void set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_to() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_to();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest) */ {
 public:
  inline GetDividendsForeignIssuerReportRequest() : GetDividendsForeignIssuerReportRequest(nullptr) {}
  ~GetDividendsForeignIssuerReportRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDividendsForeignIssuerReportRequest(const GetDividendsForeignIssuerReportRequest& from);
  GetDividendsForeignIssuerReportRequest(GetDividendsForeignIssuerReportRequest&& from) noexcept
    : GetDividendsForeignIssuerReportRequest() {
    *this = ::std::move(from);
  }

  inline GetDividendsForeignIssuerReportRequest& operator=(const GetDividendsForeignIssuerReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDividendsForeignIssuerReportRequest& operator=(GetDividendsForeignIssuerReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDividendsForeignIssuerReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDividendsForeignIssuerReportRequest* internal_default_instance() {
    return reinterpret_cast<const GetDividendsForeignIssuerReportRequest*>(
               &_GetDividendsForeignIssuerReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetDividendsForeignIssuerReportRequest& a, GetDividendsForeignIssuerReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDividendsForeignIssuerReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDividendsForeignIssuerReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDividendsForeignIssuerReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDividendsForeignIssuerReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDividendsForeignIssuerReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDividendsForeignIssuerReportRequest& from) {
    GetDividendsForeignIssuerReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDividendsForeignIssuerReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest";
  }
  protected:
  explicit GetDividendsForeignIssuerReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // optional int32 page = 2;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    int32_t page_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateDividendsForeignIssuerReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse) */ {
 public:
  inline GenerateDividendsForeignIssuerReportResponse() : GenerateDividendsForeignIssuerReportResponse(nullptr) {}
  ~GenerateDividendsForeignIssuerReportResponse() override;
  explicit PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateDividendsForeignIssuerReportResponse(const GenerateDividendsForeignIssuerReportResponse& from);
  GenerateDividendsForeignIssuerReportResponse(GenerateDividendsForeignIssuerReportResponse&& from) noexcept
    : GenerateDividendsForeignIssuerReportResponse() {
    *this = ::std::move(from);
  }

  inline GenerateDividendsForeignIssuerReportResponse& operator=(const GenerateDividendsForeignIssuerReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateDividendsForeignIssuerReportResponse& operator=(GenerateDividendsForeignIssuerReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateDividendsForeignIssuerReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateDividendsForeignIssuerReportResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateDividendsForeignIssuerReportResponse*>(
               &_GenerateDividendsForeignIssuerReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GenerateDividendsForeignIssuerReportResponse& a, GenerateDividendsForeignIssuerReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateDividendsForeignIssuerReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateDividendsForeignIssuerReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateDividendsForeignIssuerReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateDividendsForeignIssuerReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateDividendsForeignIssuerReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateDividendsForeignIssuerReportResponse& from) {
    GenerateDividendsForeignIssuerReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateDividendsForeignIssuerReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse";
  }
  protected:
  explicit GenerateDividendsForeignIssuerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse) */ {
 public:
  inline GetDividendsForeignIssuerReportResponse() : GetDividendsForeignIssuerReportResponse(nullptr) {}
  ~GetDividendsForeignIssuerReportResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDividendsForeignIssuerReportResponse(const GetDividendsForeignIssuerReportResponse& from);
  GetDividendsForeignIssuerReportResponse(GetDividendsForeignIssuerReportResponse&& from) noexcept
    : GetDividendsForeignIssuerReportResponse() {
    *this = ::std::move(from);
  }

  inline GetDividendsForeignIssuerReportResponse& operator=(const GetDividendsForeignIssuerReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDividendsForeignIssuerReportResponse& operator=(GetDividendsForeignIssuerReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDividendsForeignIssuerReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDividendsForeignIssuerReportResponse* internal_default_instance() {
    return reinterpret_cast<const GetDividendsForeignIssuerReportResponse*>(
               &_GetDividendsForeignIssuerReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetDividendsForeignIssuerReportResponse& a, GetDividendsForeignIssuerReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDividendsForeignIssuerReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDividendsForeignIssuerReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDividendsForeignIssuerReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDividendsForeignIssuerReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDividendsForeignIssuerReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDividendsForeignIssuerReportResponse& from) {
    GetDividendsForeignIssuerReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDividendsForeignIssuerReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse";
  }
  protected:
  explicit GetDividendsForeignIssuerReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDividendsForeignIssuerReportFieldNumber = 1,
    kItemsCountFieldNumber = 2,
    kPagesCountFieldNumber = 3,
    kPageFieldNumber = 4,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport dividends_foreign_issuer_report = 1;
  int dividends_foreign_issuer_report_size() const;
  private:
  int _internal_dividends_foreign_issuer_report_size() const;
  public:
  void clear_dividends_foreign_issuer_report();
  ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* mutable_dividends_foreign_issuer_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport >*
      mutable_dividends_foreign_issuer_report();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport& _internal_dividends_foreign_issuer_report(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* _internal_add_dividends_foreign_issuer_report();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport& dividends_foreign_issuer_report(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* add_dividends_foreign_issuer_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport >&
      dividends_foreign_issuer_report() const;

  // int32 itemsCount = 2;
  void clear_itemscount();
  int32_t itemscount() const;
  void set_itemscount(int32_t value);
  private:
  int32_t _internal_itemscount() const;
  void _internal_set_itemscount(int32_t value);
  public:

  // int32 pagesCount = 3;
  void clear_pagescount();
  int32_t pagescount() const;
  void set_pagescount(int32_t value);
  private:
  int32_t _internal_pagescount() const;
  void _internal_set_pagescount(int32_t value);
  public:

  // int32 page = 4;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport > dividends_foreign_issuer_report_;
    int32_t itemscount_;
    int32_t pagescount_;
    int32_t page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class DividendsForeignIssuerReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport) */ {
 public:
  inline DividendsForeignIssuerReport() : DividendsForeignIssuerReport(nullptr) {}
  ~DividendsForeignIssuerReport() override;
  explicit PROTOBUF_CONSTEXPR DividendsForeignIssuerReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DividendsForeignIssuerReport(const DividendsForeignIssuerReport& from);
  DividendsForeignIssuerReport(DividendsForeignIssuerReport&& from) noexcept
    : DividendsForeignIssuerReport() {
    *this = ::std::move(from);
  }

  inline DividendsForeignIssuerReport& operator=(const DividendsForeignIssuerReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline DividendsForeignIssuerReport& operator=(DividendsForeignIssuerReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DividendsForeignIssuerReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const DividendsForeignIssuerReport* internal_default_instance() {
    return reinterpret_cast<const DividendsForeignIssuerReport*>(
               &_DividendsForeignIssuerReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DividendsForeignIssuerReport& a, DividendsForeignIssuerReport& b) {
    a.Swap(&b);
  }
  inline void Swap(DividendsForeignIssuerReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DividendsForeignIssuerReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DividendsForeignIssuerReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DividendsForeignIssuerReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DividendsForeignIssuerReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DividendsForeignIssuerReport& from) {
    DividendsForeignIssuerReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DividendsForeignIssuerReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport";
  }
  protected:
  explicit DividendsForeignIssuerReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityNameFieldNumber = 3,
    kIsinFieldNumber = 4,
    kIssuerCountryFieldNumber = 5,
    kCurrencyFieldNumber = 12,
    kRecordDateFieldNumber = 1,
    kPaymentDateFieldNumber = 2,
    kDividendFieldNumber = 7,
    kExternalCommissionFieldNumber = 8,
    kDividendGrossFieldNumber = 9,
    kTaxFieldNumber = 10,
    kDividendAmountFieldNumber = 11,
    kQuantityFieldNumber = 6,
  };
  // string security_name = 3;
  void clear_security_name();
  const std::string& security_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_security_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_security_name();
  PROTOBUF_NODISCARD std::string* release_security_name();
  void set_allocated_security_name(std::string* security_name);
  private:
  const std::string& _internal_security_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_name(const std::string& value);
  std::string* _internal_mutable_security_name();
  public:

  // string isin = 4;
  void clear_isin();
  const std::string& isin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* isin);
  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(const std::string& value);
  std::string* _internal_mutable_isin();
  public:

  // string issuer_country = 5;
  void clear_issuer_country();
  const std::string& issuer_country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuer_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuer_country();
  PROTOBUF_NODISCARD std::string* release_issuer_country();
  void set_allocated_issuer_country(std::string* issuer_country);
  private:
  const std::string& _internal_issuer_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuer_country(const std::string& value);
  std::string* _internal_mutable_issuer_country();
  public:

  // string currency = 12;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // .google.protobuf.Timestamp record_date = 1;
  bool has_record_date() const;
  private:
  bool _internal_has_record_date() const;
  public:
  void clear_record_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& record_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_record_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_record_date();
  void set_allocated_record_date(::PROTOBUF_NAMESPACE_ID::Timestamp* record_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_record_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_record_date();
  public:
  void unsafe_arena_set_allocated_record_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* record_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_record_date();

  // .google.protobuf.Timestamp payment_date = 2;
  bool has_payment_date() const;
  private:
  bool _internal_has_payment_date() const;
  public:
  void clear_payment_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& payment_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_payment_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_payment_date();
  void set_allocated_payment_date(::PROTOBUF_NAMESPACE_ID::Timestamp* payment_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_payment_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_payment_date();
  public:
  void unsafe_arena_set_allocated_payment_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* payment_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_payment_date();

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend = 7;
  bool has_dividend() const;
  private:
  bool _internal_has_dividend() const;
  public:
  void clear_dividend();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dividend();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dividend();
  void set_allocated_dividend(::tinkoff::public_::invest::api::contract::v1::Quotation* dividend);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dividend() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dividend();
  public:
  void unsafe_arena_set_allocated_dividend(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dividend();

  // .tinkoff.public_.invest.api.contract.v1.Quotation external_commission = 8;
  bool has_external_commission() const;
  private:
  bool _internal_has_external_commission() const;
  public:
  void clear_external_commission();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& external_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_external_commission();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_external_commission();
  void set_allocated_external_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* external_commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_external_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_external_commission();
  public:
  void unsafe_arena_set_allocated_external_commission(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* external_commission);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_external_commission();

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_gross = 9;
  bool has_dividend_gross() const;
  private:
  bool _internal_has_dividend_gross() const;
  public:
  void clear_dividend_gross();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_gross() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dividend_gross();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dividend_gross();
  void set_allocated_dividend_gross(::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_gross);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dividend_gross() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dividend_gross();
  public:
  void unsafe_arena_set_allocated_dividend_gross(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_gross);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dividend_gross();

  // .tinkoff.public_.invest.api.contract.v1.Quotation tax = 10;
  bool has_tax() const;
  private:
  bool _internal_has_tax() const;
  public:
  void clear_tax();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& tax() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_tax();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_tax();
  void set_allocated_tax(::tinkoff::public_::invest::api::contract::v1::Quotation* tax);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_tax() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_tax();
  public:
  void unsafe_arena_set_allocated_tax(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* tax);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_tax();

  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_amount = 11;
  bool has_dividend_amount() const;
  private:
  bool _internal_has_dividend_amount() const;
  public:
  void clear_dividend_amount();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dividend_amount();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dividend_amount();
  void set_allocated_dividend_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_amount);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dividend_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dividend_amount();
  public:
  void unsafe_arena_set_allocated_dividend_amount(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_amount);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dividend_amount();

  // int64 quantity = 6;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* record_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* payment_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* external_commission_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_gross_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* tax_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_amount_;
    int64_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest) */ {
 public:
  inline PortfolioStreamRequest() : PortfolioStreamRequest(nullptr) {}
  ~PortfolioStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR PortfolioStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortfolioStreamRequest(const PortfolioStreamRequest& from);
  PortfolioStreamRequest(PortfolioStreamRequest&& from) noexcept
    : PortfolioStreamRequest() {
    *this = ::std::move(from);
  }

  inline PortfolioStreamRequest& operator=(const PortfolioStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioStreamRequest& operator=(PortfolioStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioStreamRequest* internal_default_instance() {
    return reinterpret_cast<const PortfolioStreamRequest*>(
               &_PortfolioStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PortfolioStreamRequest& a, PortfolioStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortfolioStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortfolioStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PortfolioStreamRequest& from) {
    PortfolioStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest";
  }
  protected:
  explicit PortfolioStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated string accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  const std::string& accounts(int index) const;
  std::string* mutable_accounts(int index);
  void set_accounts(int index, const std::string& value);
  void set_accounts(int index, std::string&& value);
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  std::string* add_accounts();
  void add_accounts(const std::string& value);
  void add_accounts(std::string&& value);
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accounts();
  private:
  const std::string& _internal_accounts(int index) const;
  std::string* _internal_add_accounts();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse) */ {
 public:
  inline PortfolioStreamResponse() : PortfolioStreamResponse(nullptr) {}
  ~PortfolioStreamResponse() override;
  explicit PROTOBUF_CONSTEXPR PortfolioStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortfolioStreamResponse(const PortfolioStreamResponse& from);
  PortfolioStreamResponse(PortfolioStreamResponse&& from) noexcept
    : PortfolioStreamResponse() {
    *this = ::std::move(from);
  }

  inline PortfolioStreamResponse& operator=(const PortfolioStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioStreamResponse& operator=(PortfolioStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSubscriptions = 1,
    kPortfolio = 2,
    kPing = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const PortfolioStreamResponse* internal_default_instance() {
    return reinterpret_cast<const PortfolioStreamResponse*>(
               &_PortfolioStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PortfolioStreamResponse& a, PortfolioStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortfolioStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortfolioStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PortfolioStreamResponse& from) {
    PortfolioStreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse";
  }
  protected:
  explicit PortfolioStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
    kPortfolioFieldNumber = 2,
    kPingFieldNumber = 3,
  };
  // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult subscriptions = 1;
  bool has_subscriptions() const;
  private:
  bool _internal_has_subscriptions() const;
  public:
  void clear_subscriptions();
  const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& subscriptions() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* release_subscriptions();
  ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* mutable_subscriptions();
  void set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* subscriptions);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& _internal_subscriptions() const;
  ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* _internal_mutable_subscriptions();
  public:
  void unsafe_arena_set_allocated_subscriptions(
      ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* subscriptions);
  ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* unsafe_arena_release_subscriptions();

  // .tinkoff.public_.invest.api.contract.v1.PortfolioResponse portfolio = 2;
  bool has_portfolio() const;
  private:
  bool _internal_has_portfolio() const;
  public:
  void clear_portfolio();
  const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& portfolio() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* release_portfolio();
  ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* mutable_portfolio();
  void set_allocated_portfolio(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* portfolio);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& _internal_portfolio() const;
  ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* _internal_mutable_portfolio();
  public:
  void unsafe_arena_set_allocated_portfolio(
      ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* portfolio);
  ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* unsafe_arena_release_portfolio();

  // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::tinkoff::public_::invest::api::contract::v1::Ping& ping() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Ping* release_ping();
  ::tinkoff::public_::invest::api::contract::v1::Ping* mutable_ping();
  void set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Ping& _internal_ping() const;
  ::tinkoff::public_::invest::api::contract::v1::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::tinkoff::public_::invest::api::contract::v1::Ping* ping);
  ::tinkoff::public_::invest::api::contract::v1::Ping* unsafe_arena_release_ping();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse)
 private:
  class _Internal;
  void set_has_subscriptions();
  void set_has_portfolio();
  void set_has_ping();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* subscriptions_;
      ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* portfolio_;
      ::tinkoff::public_::invest::api::contract::v1::Ping* ping_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioSubscriptionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult) */ {
 public:
  inline PortfolioSubscriptionResult() : PortfolioSubscriptionResult(nullptr) {}
  ~PortfolioSubscriptionResult() override;
  explicit PROTOBUF_CONSTEXPR PortfolioSubscriptionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortfolioSubscriptionResult(const PortfolioSubscriptionResult& from);
  PortfolioSubscriptionResult(PortfolioSubscriptionResult&& from) noexcept
    : PortfolioSubscriptionResult() {
    *this = ::std::move(from);
  }

  inline PortfolioSubscriptionResult& operator=(const PortfolioSubscriptionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioSubscriptionResult& operator=(PortfolioSubscriptionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioSubscriptionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioSubscriptionResult* internal_default_instance() {
    return reinterpret_cast<const PortfolioSubscriptionResult*>(
               &_PortfolioSubscriptionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PortfolioSubscriptionResult& a, PortfolioSubscriptionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioSubscriptionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioSubscriptionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioSubscriptionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortfolioSubscriptionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortfolioSubscriptionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PortfolioSubscriptionResult& from) {
    PortfolioSubscriptionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioSubscriptionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult";
  }
  protected:
  explicit PortfolioSubscriptionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus >*
      mutable_accounts();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus& _internal_accounts(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* _internal_add_accounts();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus& accounts(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus > accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class AccountSubscriptionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus) */ {
 public:
  inline AccountSubscriptionStatus() : AccountSubscriptionStatus(nullptr) {}
  ~AccountSubscriptionStatus() override;
  explicit PROTOBUF_CONSTEXPR AccountSubscriptionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountSubscriptionStatus(const AccountSubscriptionStatus& from);
  AccountSubscriptionStatus(AccountSubscriptionStatus&& from) noexcept
    : AccountSubscriptionStatus() {
    *this = ::std::move(from);
  }

  inline AccountSubscriptionStatus& operator=(const AccountSubscriptionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSubscriptionStatus& operator=(AccountSubscriptionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountSubscriptionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountSubscriptionStatus* internal_default_instance() {
    return reinterpret_cast<const AccountSubscriptionStatus*>(
               &_AccountSubscriptionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AccountSubscriptionStatus& a, AccountSubscriptionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountSubscriptionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountSubscriptionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountSubscriptionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountSubscriptionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountSubscriptionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountSubscriptionStatus& from) {
    AccountSubscriptionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSubscriptionStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus";
  }
  protected:
  explicit AccountSubscriptionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kSubscriptionStatusFieldNumber = 6,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionStatus subscription_status = 6;
  void clear_subscription_status();
  ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus subscription_status() const;
  void set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus _internal_subscription_status() const;
  void _internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    int subscription_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsByCursorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest) */ {
 public:
  inline GetOperationsByCursorRequest() : GetOperationsByCursorRequest(nullptr) {}
  ~GetOperationsByCursorRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOperationsByCursorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOperationsByCursorRequest(const GetOperationsByCursorRequest& from);
  GetOperationsByCursorRequest(GetOperationsByCursorRequest&& from) noexcept
    : GetOperationsByCursorRequest() {
    *this = ::std::move(from);
  }

  inline GetOperationsByCursorRequest& operator=(const GetOperationsByCursorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsByCursorRequest& operator=(GetOperationsByCursorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOperationsByCursorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOperationsByCursorRequest* internal_default_instance() {
    return reinterpret_cast<const GetOperationsByCursorRequest*>(
               &_GetOperationsByCursorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetOperationsByCursorRequest& a, GetOperationsByCursorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsByCursorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsByCursorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOperationsByCursorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOperationsByCursorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOperationsByCursorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOperationsByCursorRequest& from) {
    GetOperationsByCursorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOperationsByCursorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest";
  }
  protected:
  explicit GetOperationsByCursorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationTypesFieldNumber = 13,
    kAccountIdFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
    kCursorFieldNumber = 11,
    kFromFieldNumber = 6,
    kToFieldNumber = 7,
    kLimitFieldNumber = 12,
    kStateFieldNumber = 14,
    kWithoutCommissionsFieldNumber = 15,
    kWithoutTradesFieldNumber = 16,
    kWithoutOvernightsFieldNumber = 17,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.OperationType operation_types = 13;
  int operation_types_size() const;
  private:
  int _internal_operation_types_size() const;
  public:
  void clear_operation_types();
  private:
  ::tinkoff::public_::invest::api::contract::v1::OperationType _internal_operation_types(int index) const;
  void _internal_add_operation_types(::tinkoff::public_::invest::api::contract::v1::OperationType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_operation_types();
  public:
  ::tinkoff::public_::invest::api::contract::v1::OperationType operation_types(int index) const;
  void set_operation_types(int index, ::tinkoff::public_::invest::api::contract::v1::OperationType value);
  void add_operation_types(::tinkoff::public_::invest::api::contract::v1::OperationType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& operation_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_operation_types();

  // string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // optional string instrument_id = 2;
  bool has_instrument_id() const;
  private:
  bool _internal_has_instrument_id() const;
  public:
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // optional string cursor = 11;
  bool has_cursor() const;
  private:
  bool _internal_has_cursor() const;
  public:
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // optional .google.protobuf.Timestamp from = 6;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& from() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_from();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from();
  void set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* from);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_from();

  // optional .google.protobuf.Timestamp to = 7;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& to() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_to();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_to();
  void set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_to() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* to);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_to();

  // optional int32 limit = 12;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 14;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
  void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
  void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  public:

  // optional bool without_commissions = 15;
  bool has_without_commissions() const;
  private:
  bool _internal_has_without_commissions() const;
  public:
  void clear_without_commissions();
  bool without_commissions() const;
  void set_without_commissions(bool value);
  private:
  bool _internal_without_commissions() const;
  void _internal_set_without_commissions(bool value);
  public:

  // optional bool without_trades = 16;
  bool has_without_trades() const;
  private:
  bool _internal_has_without_trades() const;
  public:
  void clear_without_trades();
  bool without_trades() const;
  void set_without_trades(bool value);
  private:
  bool _internal_without_trades() const;
  void _internal_set_without_trades(bool value);
  public:

  // optional bool without_overnights = 17;
  bool has_without_overnights() const;
  private:
  bool _internal_has_without_overnights() const;
  public:
  void clear_without_overnights();
  bool without_overnights() const;
  void set_without_overnights(bool value);
  private:
  bool _internal_without_overnights() const;
  void _internal_set_without_overnights(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> operation_types_;
    mutable std::atomic<int> _operation_types_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to_;
    int32_t limit_;
    int state_;
    bool without_commissions_;
    bool without_trades_;
    bool without_overnights_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsByCursorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse) */ {
 public:
  inline GetOperationsByCursorResponse() : GetOperationsByCursorResponse(nullptr) {}
  ~GetOperationsByCursorResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOperationsByCursorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOperationsByCursorResponse(const GetOperationsByCursorResponse& from);
  GetOperationsByCursorResponse(GetOperationsByCursorResponse&& from) noexcept
    : GetOperationsByCursorResponse() {
    *this = ::std::move(from);
  }

  inline GetOperationsByCursorResponse& operator=(const GetOperationsByCursorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsByCursorResponse& operator=(GetOperationsByCursorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOperationsByCursorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOperationsByCursorResponse* internal_default_instance() {
    return reinterpret_cast<const GetOperationsByCursorResponse*>(
               &_GetOperationsByCursorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetOperationsByCursorResponse& a, GetOperationsByCursorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsByCursorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsByCursorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOperationsByCursorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOperationsByCursorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOperationsByCursorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOperationsByCursorResponse& from) {
    GetOperationsByCursorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOperationsByCursorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse";
  }
  protected:
  explicit GetOperationsByCursorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 6,
    kNextCursorFieldNumber = 2,
    kHasNextFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.OperationItem items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::tinkoff::public_::invest::api::contract::v1::OperationItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItem >*
      mutable_items();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OperationItem& _internal_items(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OperationItem* _internal_add_items();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::OperationItem& items(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OperationItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItem >&
      items() const;

  // string next_cursor = 2;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // bool has_next = 1;
  void clear_has_next();
  bool has_next() const;
  void set_has_next(bool value);
  private:
  bool _internal_has_next() const;
  void _internal_set_has_next(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    bool has_next_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OperationItem) */ {
 public:
  inline OperationItem() : OperationItem(nullptr) {}
  ~OperationItem() override;
  explicit PROTOBUF_CONSTEXPR OperationItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationItem(const OperationItem& from);
  OperationItem(OperationItem&& from) noexcept
    : OperationItem() {
    *this = ::std::move(from);
  }

  inline OperationItem& operator=(const OperationItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationItem& operator=(OperationItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationItem* internal_default_instance() {
    return reinterpret_cast<const OperationItem*>(
               &_OperationItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(OperationItem& a, OperationItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationItem& from) {
    OperationItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OperationItem";
  }
  protected:
  explicit OperationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 1,
    kBrokerAccountIdFieldNumber = 6,
    kIdFieldNumber = 16,
    kParentOperationIdFieldNumber = 17,
    kNameFieldNumber = 18,
    kDescriptionFieldNumber = 23,
    kInstrumentUidFieldNumber = 31,
    kFigiFieldNumber = 32,
    kInstrumentTypeFieldNumber = 33,
    kPositionUidFieldNumber = 35,
    kCancelReasonFieldNumber = 57,
    kAssetUidFieldNumber = 64,
    kDateFieldNumber = 21,
    kPaymentFieldNumber = 41,
    kPriceFieldNumber = 42,
    kCommissionFieldNumber = 43,
    kYieldFieldNumber = 44,
    kYieldRelativeFieldNumber = 45,
    kAccruedIntFieldNumber = 46,
    kCancelDateTimeFieldNumber = 56,
    kTradesInfoFieldNumber = 61,
    kTypeFieldNumber = 22,
    kStateFieldNumber = 24,
    kQuantityFieldNumber = 51,
    kQuantityRestFieldNumber = 52,
    kQuantityDoneFieldNumber = 53,
    kInstrumentKindFieldNumber = 34,
  };
  // string cursor = 1;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // string broker_account_id = 6;
  void clear_broker_account_id();
  const std::string& broker_account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_account_id();
  PROTOBUF_NODISCARD std::string* release_broker_account_id();
  void set_allocated_broker_account_id(std::string* broker_account_id);
  private:
  const std::string& _internal_broker_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_account_id(const std::string& value);
  std::string* _internal_mutable_broker_account_id();
  public:

  // string id = 16;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string parent_operation_id = 17;
  void clear_parent_operation_id();
  const std::string& parent_operation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_operation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_operation_id();
  PROTOBUF_NODISCARD std::string* release_parent_operation_id();
  void set_allocated_parent_operation_id(std::string* parent_operation_id);
  private:
  const std::string& _internal_parent_operation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_operation_id(const std::string& value);
  std::string* _internal_mutable_parent_operation_id();
  public:

  // string name = 18;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 23;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string instrument_uid = 31;
  void clear_instrument_uid();
  const std::string& instrument_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* instrument_uid);
  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(const std::string& value);
  std::string* _internal_mutable_instrument_uid();
  public:

  // string figi = 32;
  void clear_figi();
  const std::string& figi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_figi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* figi);
  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(const std::string& value);
  std::string* _internal_mutable_figi();
  public:

  // string instrument_type = 33;
  void clear_instrument_type();
  const std::string& instrument_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* instrument_type);
  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(const std::string& value);
  std::string* _internal_mutable_instrument_type();
  public:

  // string position_uid = 35;
  void clear_position_uid();
  const std::string& position_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* position_uid);
  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(const std::string& value);
  std::string* _internal_mutable_position_uid();
  public:

  // string cancel_reason = 57;
  void clear_cancel_reason();
  const std::string& cancel_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cancel_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cancel_reason();
  PROTOBUF_NODISCARD std::string* release_cancel_reason();
  void set_allocated_cancel_reason(std::string* cancel_reason);
  private:
  const std::string& _internal_cancel_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_reason(const std::string& value);
  std::string* _internal_mutable_cancel_reason();
  public:

  // string asset_uid = 64;
  void clear_asset_uid();
  const std::string& asset_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* asset_uid);
  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(const std::string& value);
  std::string* _internal_mutable_asset_uid();
  public:

  // .google.protobuf.Timestamp date = 21;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date();
  void set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 41;
  bool has_payment() const;
  private:
  bool _internal_has_payment() const;
  public:
  void clear_payment();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& payment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_payment();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_payment();
  void set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_payment() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_payment();
  public:
  void unsafe_arena_set_allocated_payment(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_payment();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 42;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue commission = 43;
  bool has_commission() const;
  private:
  bool _internal_has_commission() const;
  public:
  void clear_commission();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_commission();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_commission();
  void set_allocated_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* commission);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_commission();
  public:
  void unsafe_arena_set_allocated_commission(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* commission);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_commission();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 44;
  bool has_yield() const;
  private:
  bool _internal_has_yield() const;
  public:
  void clear_yield();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& yield() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_yield();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_yield();
  void set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_yield() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_yield();
  public:
  void unsafe_arena_set_allocated_yield(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_yield();

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 45;
  bool has_yield_relative() const;
  private:
  bool _internal_has_yield_relative() const;
  public:
  void clear_yield_relative();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_relative() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_yield_relative();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_yield_relative();
  void set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_yield_relative() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_yield_relative();
  public:
  void unsafe_arena_set_allocated_yield_relative(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_yield_relative();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue accrued_int = 46;
  bool has_accrued_int() const;
  private:
  bool _internal_has_accrued_int() const;
  public:
  void clear_accrued_int();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& accrued_int() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_accrued_int();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_accrued_int();
  void set_allocated_accrued_int(::tinkoff::public_::invest::api::contract::v1::MoneyValue* accrued_int);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_accrued_int() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_accrued_int();
  public:
  void unsafe_arena_set_allocated_accrued_int(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* accrued_int);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_accrued_int();

  // .google.protobuf.Timestamp cancel_date_time = 56;
  bool has_cancel_date_time() const;
  private:
  bool _internal_has_cancel_date_time() const;
  public:
  void clear_cancel_date_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& cancel_date_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_cancel_date_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cancel_date_time();
  void set_allocated_cancel_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_date_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cancel_date_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cancel_date_time();
  public:
  void unsafe_arena_set_allocated_cancel_date_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_date_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cancel_date_time();

  // .tinkoff.public_.invest.api.contract.v1.OperationItemTrades trades_info = 61;
  bool has_trades_info() const;
  private:
  bool _internal_has_trades_info() const;
  public:
  void clear_trades_info();
  const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& trades_info() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* release_trades_info();
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* mutable_trades_info();
  void set_allocated_trades_info(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* trades_info);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& _internal_trades_info() const;
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* _internal_mutable_trades_info();
  public:
  void unsafe_arena_set_allocated_trades_info(
      ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* trades_info);
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* unsafe_arena_release_trades_info();

  // .tinkoff.public_.invest.api.contract.v1.OperationType type = 22;
  void clear_type();
  ::tinkoff::public_::invest::api::contract::v1::OperationType type() const;
  void set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OperationType _internal_type() const;
  void _internal_set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.OperationState state = 24;
  void clear_state();
  ::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
  void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
  void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);
  public:

  // int64 quantity = 51;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // int64 quantity_rest = 52;
  void clear_quantity_rest();
  int64_t quantity_rest() const;
  void set_quantity_rest(int64_t value);
  private:
  int64_t _internal_quantity_rest() const;
  void _internal_set_quantity_rest(int64_t value);
  public:

  // int64 quantity_done = 53;
  void clear_quantity_done();
  int64_t quantity_done() const;
  void set_quantity_done(int64_t value);
  private:
  int64_t _internal_quantity_done() const;
  void _internal_set_quantity_done(int64_t value);
  public:

  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 34;
  void clear_instrument_kind();
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OperationItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_operation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr figi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_reason_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_uid_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* commission_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* accrued_int_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_date_time_;
    ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* trades_info_;
    int type_;
    int state_;
    int64_t quantity_;
    int64_t quantity_rest_;
    int64_t quantity_done_;
    int instrument_kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationItemTrades final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OperationItemTrades) */ {
 public:
  inline OperationItemTrades() : OperationItemTrades(nullptr) {}
  ~OperationItemTrades() override;
  explicit PROTOBUF_CONSTEXPR OperationItemTrades(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationItemTrades(const OperationItemTrades& from);
  OperationItemTrades(OperationItemTrades&& from) noexcept
    : OperationItemTrades() {
    *this = ::std::move(from);
  }

  inline OperationItemTrades& operator=(const OperationItemTrades& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationItemTrades& operator=(OperationItemTrades&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationItemTrades& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationItemTrades* internal_default_instance() {
    return reinterpret_cast<const OperationItemTrades*>(
               &_OperationItemTrades_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(OperationItemTrades& a, OperationItemTrades& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationItemTrades* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationItemTrades* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationItemTrades* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationItemTrades>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationItemTrades& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationItemTrades& from) {
    OperationItemTrades::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationItemTrades* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OperationItemTrades";
  }
  protected:
  explicit OperationItemTrades(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 6,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.OperationItemTrade trades = 6;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade >*
      mutable_trades();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade& _internal_trades(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* _internal_add_trades();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade& trades(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OperationItemTrades)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade > trades_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationItemTrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OperationItemTrade) */ {
 public:
  inline OperationItemTrade() : OperationItemTrade(nullptr) {}
  ~OperationItemTrade() override;
  explicit PROTOBUF_CONSTEXPR OperationItemTrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationItemTrade(const OperationItemTrade& from);
  OperationItemTrade(OperationItemTrade&& from) noexcept
    : OperationItemTrade() {
    *this = ::std::move(from);
  }

  inline OperationItemTrade& operator=(const OperationItemTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationItemTrade& operator=(OperationItemTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationItemTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationItemTrade* internal_default_instance() {
    return reinterpret_cast<const OperationItemTrade*>(
               &_OperationItemTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(OperationItemTrade& a, OperationItemTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationItemTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationItemTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationItemTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationItemTrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationItemTrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationItemTrade& from) {
    OperationItemTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationItemTrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OperationItemTrade";
  }
  protected:
  explicit OperationItemTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kDateFieldNumber = 6,
    kPriceFieldNumber = 16,
    kYieldFieldNumber = 21,
    kYieldRelativeFieldNumber = 22,
    kQuantityFieldNumber = 11,
  };
  // string num = 1;
  void clear_num();
  const std::string& num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_num();
  PROTOBUF_NODISCARD std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // .google.protobuf.Timestamp date = 6;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date();
  void set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 16;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
  void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 21;
  bool has_yield() const;
  private:
  bool _internal_has_yield() const;
  public:
  void clear_yield();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& yield() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_yield();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_yield();
  void set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_yield() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_yield();
  public:
  void unsafe_arena_set_allocated_yield(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_yield();

  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 22;
  bool has_yield_relative() const;
  private:
  bool _internal_has_yield_relative() const;
  public:
  void clear_yield_relative();
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_relative() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_yield_relative();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_yield_relative();
  void set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_yield_relative() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_yield_relative();
  public:
  void unsafe_arena_set_allocated_yield_relative(
      ::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_yield_relative();

  // int64 quantity = 11;
  void clear_quantity();
  int64_t quantity() const;
  void set_quantity(int64_t value);
  private:
  int64_t _internal_quantity() const;
  void _internal_set_quantity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OperationItemTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative_;
    int64_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest) */ {
 public:
  inline PositionsStreamRequest() : PositionsStreamRequest(nullptr) {}
  ~PositionsStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR PositionsStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsStreamRequest(const PositionsStreamRequest& from);
  PositionsStreamRequest(PositionsStreamRequest&& from) noexcept
    : PositionsStreamRequest() {
    *this = ::std::move(from);
  }

  inline PositionsStreamRequest& operator=(const PositionsStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsStreamRequest& operator=(PositionsStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsStreamRequest* internal_default_instance() {
    return reinterpret_cast<const PositionsStreamRequest*>(
               &_PositionsStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PositionsStreamRequest& a, PositionsStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsStreamRequest& from) {
    PositionsStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest";
  }
  protected:
  explicit PositionsStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated string accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  const std::string& accounts(int index) const;
  std::string* mutable_accounts(int index);
  void set_accounts(int index, const std::string& value);
  void set_accounts(int index, std::string&& value);
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  std::string* add_accounts();
  void add_accounts(const std::string& value);
  void add_accounts(std::string&& value);
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accounts();
  private:
  const std::string& _internal_accounts(int index) const;
  std::string* _internal_add_accounts();
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse) */ {
 public:
  inline PositionsStreamResponse() : PositionsStreamResponse(nullptr) {}
  ~PositionsStreamResponse() override;
  explicit PROTOBUF_CONSTEXPR PositionsStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsStreamResponse(const PositionsStreamResponse& from);
  PositionsStreamResponse(PositionsStreamResponse&& from) noexcept
    : PositionsStreamResponse() {
    *this = ::std::move(from);
  }

  inline PositionsStreamResponse& operator=(const PositionsStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsStreamResponse& operator=(PositionsStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSubscriptions = 1,
    kPosition = 2,
    kPing = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const PositionsStreamResponse* internal_default_instance() {
    return reinterpret_cast<const PositionsStreamResponse*>(
               &_PositionsStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(PositionsStreamResponse& a, PositionsStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsStreamResponse& from) {
    PositionsStreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse";
  }
  protected:
  explicit PositionsStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
    kPositionFieldNumber = 2,
    kPingFieldNumber = 3,
  };
  // .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult subscriptions = 1;
  bool has_subscriptions() const;
  private:
  bool _internal_has_subscriptions() const;
  public:
  void clear_subscriptions();
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& subscriptions() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* release_subscriptions();
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* mutable_subscriptions();
  void set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* subscriptions);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& _internal_subscriptions() const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* _internal_mutable_subscriptions();
  public:
  void unsafe_arena_set_allocated_subscriptions(
      ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* subscriptions);
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* unsafe_arena_release_subscriptions();

  // .tinkoff.public_.invest.api.contract.v1.PositionData position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::tinkoff::public_::invest::api::contract::v1::PositionData& position() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PositionData* release_position();
  ::tinkoff::public_::invest::api::contract::v1::PositionData* mutable_position();
  void set_allocated_position(::tinkoff::public_::invest::api::contract::v1::PositionData* position);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionData& _internal_position() const;
  ::tinkoff::public_::invest::api::contract::v1::PositionData* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::tinkoff::public_::invest::api::contract::v1::PositionData* position);
  ::tinkoff::public_::invest::api::contract::v1::PositionData* unsafe_arena_release_position();

  // .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::tinkoff::public_::invest::api::contract::v1::Ping& ping() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Ping* release_ping();
  ::tinkoff::public_::invest::api::contract::v1::Ping* mutable_ping();
  void set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::Ping& _internal_ping() const;
  ::tinkoff::public_::invest::api::contract::v1::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::tinkoff::public_::invest::api::contract::v1::Ping* ping);
  ::tinkoff::public_::invest::api::contract::v1::Ping* unsafe_arena_release_ping();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse)
 private:
  class _Internal;
  void set_has_subscriptions();
  void set_has_position();
  void set_has_ping();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* subscriptions_;
      ::tinkoff::public_::invest::api::contract::v1::PositionData* position_;
      ::tinkoff::public_::invest::api::contract::v1::Ping* ping_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsSubscriptionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult) */ {
 public:
  inline PositionsSubscriptionResult() : PositionsSubscriptionResult(nullptr) {}
  ~PositionsSubscriptionResult() override;
  explicit PROTOBUF_CONSTEXPR PositionsSubscriptionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsSubscriptionResult(const PositionsSubscriptionResult& from);
  PositionsSubscriptionResult(PositionsSubscriptionResult&& from) noexcept
    : PositionsSubscriptionResult() {
    *this = ::std::move(from);
  }

  inline PositionsSubscriptionResult& operator=(const PositionsSubscriptionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsSubscriptionResult& operator=(PositionsSubscriptionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsSubscriptionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsSubscriptionResult* internal_default_instance() {
    return reinterpret_cast<const PositionsSubscriptionResult*>(
               &_PositionsSubscriptionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PositionsSubscriptionResult& a, PositionsSubscriptionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsSubscriptionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsSubscriptionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsSubscriptionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsSubscriptionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsSubscriptionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsSubscriptionResult& from) {
    PositionsSubscriptionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsSubscriptionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult";
  }
  protected:
  explicit PositionsSubscriptionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus >*
      mutable_accounts();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus& _internal_accounts(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* _internal_add_accounts();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus& accounts(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus > accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsSubscriptionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus) */ {
 public:
  inline PositionsSubscriptionStatus() : PositionsSubscriptionStatus(nullptr) {}
  ~PositionsSubscriptionStatus() override;
  explicit PROTOBUF_CONSTEXPR PositionsSubscriptionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsSubscriptionStatus(const PositionsSubscriptionStatus& from);
  PositionsSubscriptionStatus(PositionsSubscriptionStatus&& from) noexcept
    : PositionsSubscriptionStatus() {
    *this = ::std::move(from);
  }

  inline PositionsSubscriptionStatus& operator=(const PositionsSubscriptionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsSubscriptionStatus& operator=(PositionsSubscriptionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsSubscriptionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsSubscriptionStatus* internal_default_instance() {
    return reinterpret_cast<const PositionsSubscriptionStatus*>(
               &_PositionsSubscriptionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PositionsSubscriptionStatus& a, PositionsSubscriptionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsSubscriptionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsSubscriptionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsSubscriptionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsSubscriptionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsSubscriptionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsSubscriptionStatus& from) {
    PositionsSubscriptionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsSubscriptionStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus";
  }
  protected:
  explicit PositionsSubscriptionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kSubscriptionStatusFieldNumber = 6,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .tinkoff.public_.invest.api.contract.v1.PositionsAccountSubscriptionStatus subscription_status = 6;
  void clear_subscription_status();
  ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus subscription_status() const;
  void set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value);
  private:
  ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus _internal_subscription_status() const;
  void _internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value);
  public:

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    int subscription_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionData) */ {
 public:
  inline PositionData() : PositionData(nullptr) {}
  ~PositionData() override;
  explicit PROTOBUF_CONSTEXPR PositionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionData(const PositionData& from);
  PositionData(PositionData&& from) noexcept
    : PositionData() {
    *this = ::std::move(from);
  }

  inline PositionData& operator=(const PositionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionData& operator=(PositionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionData* internal_default_instance() {
    return reinterpret_cast<const PositionData*>(
               &_PositionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PositionData& a, PositionData& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionData& from) {
    PositionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionData";
  }
  protected:
  explicit PositionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 2,
    kSecuritiesFieldNumber = 3,
    kFuturesFieldNumber = 4,
    kOptionsFieldNumber = 5,
    kAccountIdFieldNumber = 1,
    kDateFieldNumber = 6,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsMoney money = 2;
  int money_size() const;
  private:
  int _internal_money_size() const;
  public:
  void clear_money();
  ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* mutable_money(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney >*
      mutable_money();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsMoney& _internal_money(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* _internal_add_money();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsMoney& money(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* add_money();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney >&
      money() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
  int securities_size() const;
  private:
  int _internal_securities_size() const;
  public:
  void clear_securities();
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* mutable_securities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >*
      mutable_securities();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& _internal_securities(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* _internal_add_securities();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& securities(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* add_securities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >&
      securities() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 4;
  int futures_size() const;
  private:
  int _internal_futures_size() const;
  public:
  void clear_futures();
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* mutable_futures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >*
      mutable_futures();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& _internal_futures(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* _internal_add_futures();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& futures(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* add_futures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >&
      futures() const;

  // repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 5;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >*
      mutable_options();
  private:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& _internal_options(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* _internal_add_options();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& options(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >&
      options() const;

  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .google.protobuf.Timestamp date = 6;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date();
  void set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney > money_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities > securities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures > futures_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions > options_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsMoney final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.PositionsMoney) */ {
 public:
  inline PositionsMoney() : PositionsMoney(nullptr) {}
  ~PositionsMoney() override;
  explicit PROTOBUF_CONSTEXPR PositionsMoney(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionsMoney(const PositionsMoney& from);
  PositionsMoney(PositionsMoney&& from) noexcept
    : PositionsMoney() {
    *this = ::std::move(from);
  }

  inline PositionsMoney& operator=(const PositionsMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsMoney& operator=(PositionsMoney&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionsMoney& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionsMoney* internal_default_instance() {
    return reinterpret_cast<const PositionsMoney*>(
               &_PositionsMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PositionsMoney& a, PositionsMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsMoney* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionsMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionsMoney>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionsMoney& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionsMoney& from) {
    PositionsMoney::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsMoney* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.PositionsMoney";
  }
  protected:
  explicit PositionsMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableValueFieldNumber = 1,
    kBlockedValueFieldNumber = 2,
  };
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue available_value = 1;
  bool has_available_value() const;
  private:
  bool _internal_has_available_value() const;
  public:
  void clear_available_value();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& available_value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_available_value();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_available_value();
  void set_allocated_available_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* available_value);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_available_value() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_available_value();
  public:
  void unsafe_arena_set_allocated_available_value(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* available_value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_available_value();

  // .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_value = 2;
  bool has_blocked_value() const;
  private:
  bool _internal_has_blocked_value() const;
  public:
  void clear_blocked_value();
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked_value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_blocked_value();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked_value();
  void set_allocated_blocked_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* blocked_value);
  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_blocked_value() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_blocked_value();
  public:
  void unsafe_arena_set_allocated_blocked_value(
      ::tinkoff::public_::invest::api::contract::v1::MoneyValue* blocked_value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_blocked_value();

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.PositionsMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* available_value_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* blocked_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OperationsRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void OperationsRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OperationsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationsRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationsRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationsRequest.account_id)
}
inline std::string* OperationsRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationsRequest.account_id)
  return _s;
}
inline const std::string& OperationsRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OperationsRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationsRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationsRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationsRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void OperationsRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationsRequest.account_id)
}

// optional .google.protobuf.Timestamp from = 2;
inline bool OperationsRequest::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline bool OperationsRequest::has_from() const {
  return _internal_has_from();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationsRequest::_internal_from() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationsRequest::from() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationsRequest.from)
  return _internal_from();
}
inline void OperationsRequest::unsafe_arena_set_allocated_from(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationsRequest.from)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::release_from() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationsRequest.from)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::mutable_from() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationsRequest.from)
  return _msg;
}
inline void OperationsRequest::set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationsRequest.from)
}

// optional .google.protobuf.Timestamp to = 3;
inline bool OperationsRequest::_internal_has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline bool OperationsRequest::has_to() const {
  return _internal_has_to();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationsRequest::_internal_to() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationsRequest::to() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationsRequest.to)
  return _internal_to();
}
inline void OperationsRequest::unsafe_arena_set_allocated_to(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationsRequest.to)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::release_to() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationsRequest.to)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::_internal_mutable_to() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationsRequest::mutable_to() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationsRequest.to)
  return _msg;
}
inline void OperationsRequest::set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationsRequest.to)
}

// optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 4;
inline bool OperationsRequest::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OperationsRequest::has_state() const {
  return _internal_has_state();
}
inline void OperationsRequest::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationsRequest::_internal_state() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OperationState >(_impl_.state_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationsRequest::state() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationsRequest.state)
  return _internal_state();
}
inline void OperationsRequest::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}
inline void OperationsRequest::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationsRequest.state)
}

// optional string figi = 5;
inline bool OperationsRequest::_internal_has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationsRequest::has_figi() const {
  return _internal_has_figi();
}
inline void OperationsRequest::clear_figi() {
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OperationsRequest::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationsRequest.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationsRequest::set_figi(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationsRequest.figi)
}
inline std::string* OperationsRequest::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationsRequest.figi)
  return _s;
}
inline const std::string& OperationsRequest::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void OperationsRequest::_internal_set_figi(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationsRequest::_internal_mutable_figi() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationsRequest::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationsRequest.figi)
  if (!_internal_has_figi()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.figi_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OperationsRequest::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationsRequest.figi)
}

// -------------------------------------------------------------------

// OperationsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Operation operations = 1;
inline int OperationsResponse::_internal_operations_size() const {
  return _impl_.operations_.size();
}
inline int OperationsResponse::operations_size() const {
  return _internal_operations_size();
}
inline void OperationsResponse::clear_operations() {
  _impl_.operations_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Operation* OperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationsResponse.operations)
  return _impl_.operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Operation >*
OperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.OperationsResponse.operations)
  return &_impl_.operations_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Operation& OperationsResponse::_internal_operations(int index) const {
  return _impl_.operations_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Operation& OperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationsResponse.operations)
  return _internal_operations(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Operation* OperationsResponse::_internal_add_operations() {
  return _impl_.operations_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::Operation* OperationsResponse::add_operations() {
  ::tinkoff::public_::invest::api::contract::v1::Operation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.OperationsResponse.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Operation >&
OperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.OperationsResponse.operations)
  return _impl_.operations_;
}

// -------------------------------------------------------------------

// Operation

// string id = 1;
inline void Operation::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Operation::id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.id)
}
inline std::string* Operation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.id)
  return _s;
}
inline const std::string& Operation::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Operation::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.id)
  return _impl_.id_.Release();
}
inline void Operation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.id)
}

// string parent_operation_id = 2;
inline void Operation::clear_parent_operation_id() {
  _impl_.parent_operation_id_.ClearToEmpty();
}
inline const std::string& Operation::parent_operation_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.parent_operation_id)
  return _internal_parent_operation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_parent_operation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_operation_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.parent_operation_id)
}
inline std::string* Operation::mutable_parent_operation_id() {
  std::string* _s = _internal_mutable_parent_operation_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.parent_operation_id)
  return _s;
}
inline const std::string& Operation::_internal_parent_operation_id() const {
  return _impl_.parent_operation_id_.Get();
}
inline void Operation::_internal_set_parent_operation_id(const std::string& value) {
  
  _impl_.parent_operation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_parent_operation_id() {
  
  return _impl_.parent_operation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_parent_operation_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.parent_operation_id)
  return _impl_.parent_operation_id_.Release();
}
inline void Operation::set_allocated_parent_operation_id(std::string* parent_operation_id) {
  if (parent_operation_id != nullptr) {
    
  } else {
    
  }
  _impl_.parent_operation_id_.SetAllocated(parent_operation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_operation_id_.IsDefault()) {
    _impl_.parent_operation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.parent_operation_id)
}

// string currency = 3;
inline void Operation::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Operation::currency() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_currency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.currency)
}
inline std::string* Operation::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.currency)
  return _s;
}
inline const std::string& Operation::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void Operation::_internal_set_currency(const std::string& value) {
  
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_currency() {
  
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_currency() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.currency)
  return _impl_.currency_.Release();
}
inline void Operation::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.currency)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 4;
inline bool Operation::_internal_has_payment() const {
  return this != internal_default_instance() && _impl_.payment_ != nullptr;
}
inline bool Operation::has_payment() const {
  return _internal_has_payment();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::_internal_payment() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.payment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::payment() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.payment)
  return _internal_payment();
}
inline void Operation::unsafe_arena_set_allocated_payment(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_);
  }
  _impl_.payment_ = payment;
  if (payment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.payment)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::release_payment() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.payment_;
  _impl_.payment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::unsafe_arena_release_payment() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.payment)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.payment_;
  _impl_.payment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::_internal_mutable_payment() {
  
  if (_impl_.payment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.payment_ = p;
  }
  return _impl_.payment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::mutable_payment() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_payment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.payment)
  return _msg;
}
inline void Operation::set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_);
  }
  if (payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment));
    if (message_arena != submessage_arena) {
      payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payment_ = payment;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.payment)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 5;
inline bool Operation::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool Operation::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.price)
  return _internal_price();
}
inline void Operation::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.price)
  return _msg;
}
inline void Operation::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.price)
}

// .tinkoff.public_.invest.api.contract.v1.OperationState state = 6;
inline void Operation::clear_state() {
  _impl_.state_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState Operation::_internal_state() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OperationState >(_impl_.state_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState Operation::state() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.state)
  return _internal_state();
}
inline void Operation::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  
  _impl_.state_ = value;
}
inline void Operation::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.state)
}

// int64 quantity = 7;
inline void Operation::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t Operation::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t Operation::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.quantity)
  return _internal_quantity();
}
inline void Operation::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void Operation::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.quantity)
}

// int64 quantity_rest = 8;
inline void Operation::clear_quantity_rest() {
  _impl_.quantity_rest_ = int64_t{0};
}
inline int64_t Operation::_internal_quantity_rest() const {
  return _impl_.quantity_rest_;
}
inline int64_t Operation::quantity_rest() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.quantity_rest)
  return _internal_quantity_rest();
}
inline void Operation::_internal_set_quantity_rest(int64_t value) {
  
  _impl_.quantity_rest_ = value;
}
inline void Operation::set_quantity_rest(int64_t value) {
  _internal_set_quantity_rest(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.quantity_rest)
}

// string figi = 9;
inline void Operation::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Operation::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.figi)
}
inline std::string* Operation::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.figi)
  return _s;
}
inline const std::string& Operation::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void Operation::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.figi)
  return _impl_.figi_.Release();
}
inline void Operation::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.figi)
}

// string instrument_type = 10;
inline void Operation::clear_instrument_type() {
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& Operation::instrument_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.instrument_type)
  return _internal_instrument_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_instrument_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.instrument_type)
}
inline std::string* Operation::mutable_instrument_type() {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.instrument_type)
  return _s;
}
inline const std::string& Operation::_internal_instrument_type() const {
  return _impl_.instrument_type_.Get();
}
inline void Operation::_internal_set_instrument_type(const std::string& value) {
  
  _impl_.instrument_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_instrument_type() {
  
  return _impl_.instrument_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_instrument_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void Operation::set_allocated_instrument_type(std::string* instrument_type) {
  if (instrument_type != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_type_.SetAllocated(instrument_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_type_.IsDefault()) {
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.instrument_type)
}

// .google.protobuf.Timestamp date = 11;
inline bool Operation::_internal_has_date() const {
  return this != internal_default_instance() && _impl_.date_ != nullptr;
}
inline bool Operation::has_date() const {
  return _internal_has_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::_internal_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.date)
  return _internal_date();
}
inline void Operation::unsafe_arena_set_allocated_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = date;
  if (date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::release_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::_internal_mutable_date() {
  
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.date_ = p;
  }
  return _impl_.date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::mutable_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.date)
  return _msg;
}
inline void Operation::set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date));
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_ = date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.date)
}

// string type = 12;
inline void Operation::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Operation::type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.type)
}
inline std::string* Operation::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.type)
  return _s;
}
inline const std::string& Operation::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Operation::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.type)
  return _impl_.type_.Release();
}
inline void Operation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.type)
}

// .tinkoff.public_.invest.api.contract.v1.OperationType operation_type = 13;
inline void Operation::clear_operation_type() {
  _impl_.operation_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType Operation::_internal_operation_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OperationType >(_impl_.operation_type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType Operation::operation_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.operation_type)
  return _internal_operation_type();
}
inline void Operation::_internal_set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
  
  _impl_.operation_type_ = value;
}
inline void Operation::set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
  _internal_set_operation_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.operation_type)
}

// repeated .tinkoff.public_.invest.api.contract.v1.OperationTrade trades = 14;
inline int Operation::_internal_trades_size() const {
  return _impl_.trades_.size();
}
inline int Operation::trades_size() const {
  return _internal_trades_size();
}
inline void Operation::clear_trades() {
  _impl_.trades_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationTrade* Operation::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.trades)
  return _impl_.trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationTrade >*
Operation::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.Operation.trades)
  return &_impl_.trades_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationTrade& Operation::_internal_trades(int index) const {
  return _impl_.trades_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationTrade& Operation::trades(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.trades)
  return _internal_trades(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationTrade* Operation::_internal_add_trades() {
  return _impl_.trades_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationTrade* Operation::add_trades() {
  ::tinkoff::public_::invest::api::contract::v1::OperationTrade* _add = _internal_add_trades();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.Operation.trades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationTrade >&
Operation::trades() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.Operation.trades)
  return _impl_.trades_;
}

// string asset_uid = 16;
inline void Operation::clear_asset_uid() {
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& Operation::asset_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.asset_uid)
  return _internal_asset_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_asset_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.asset_uid)
}
inline std::string* Operation::mutable_asset_uid() {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.asset_uid)
  return _s;
}
inline const std::string& Operation::_internal_asset_uid() const {
  return _impl_.asset_uid_.Get();
}
inline void Operation::_internal_set_asset_uid(const std::string& value) {
  
  _impl_.asset_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_asset_uid() {
  
  return _impl_.asset_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_asset_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void Operation::set_allocated_asset_uid(std::string* asset_uid) {
  if (asset_uid != nullptr) {
    
  } else {
    
  }
  _impl_.asset_uid_.SetAllocated(asset_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_uid_.IsDefault()) {
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.asset_uid)
}

// string position_uid = 17;
inline void Operation::clear_position_uid() {
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Operation::position_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.position_uid)
  return _internal_position_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_position_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.position_uid)
}
inline std::string* Operation::mutable_position_uid() {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.position_uid)
  return _s;
}
inline const std::string& Operation::_internal_position_uid() const {
  return _impl_.position_uid_.Get();
}
inline void Operation::_internal_set_position_uid(const std::string& value) {
  
  _impl_.position_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_position_uid() {
  
  return _impl_.position_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_position_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Operation::set_allocated_position_uid(std::string* position_uid) {
  if (position_uid != nullptr) {
    
  } else {
    
  }
  _impl_.position_uid_.SetAllocated(position_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_uid_.IsDefault()) {
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.position_uid)
}

// string instrument_uid = 18;
inline void Operation::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& Operation::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Operation.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Operation.instrument_uid)
}
inline std::string* Operation::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Operation.instrument_uid)
  return _s;
}
inline const std::string& Operation::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void Operation::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Operation.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void Operation::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Operation.instrument_uid)
}

// -------------------------------------------------------------------

// OperationTrade

// string trade_id = 1;
inline void OperationTrade::clear_trade_id() {
  _impl_.trade_id_.ClearToEmpty();
}
inline const std::string& OperationTrade::trade_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationTrade.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationTrade::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationTrade.trade_id)
}
inline std::string* OperationTrade::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationTrade.trade_id)
  return _s;
}
inline const std::string& OperationTrade::_internal_trade_id() const {
  return _impl_.trade_id_.Get();
}
inline void OperationTrade::_internal_set_trade_id(const std::string& value) {
  
  _impl_.trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationTrade::_internal_mutable_trade_id() {
  
  return _impl_.trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationTrade::release_trade_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationTrade.trade_id)
  return _impl_.trade_id_.Release();
}
inline void OperationTrade::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  _impl_.trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trade_id_.IsDefault()) {
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationTrade.trade_id)
}

// .google.protobuf.Timestamp date_time = 2;
inline bool OperationTrade::_internal_has_date_time() const {
  return this != internal_default_instance() && _impl_.date_time_ != nullptr;
}
inline bool OperationTrade::has_date_time() const {
  return _internal_has_date_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationTrade::_internal_date_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.date_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationTrade::date_time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationTrade.date_time)
  return _internal_date_time();
}
inline void OperationTrade::unsafe_arena_set_allocated_date_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_time_);
  }
  _impl_.date_time_ = date_time;
  if (date_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationTrade.date_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationTrade::release_date_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_time_;
  _impl_.date_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationTrade::unsafe_arena_release_date_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationTrade.date_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_time_;
  _impl_.date_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationTrade::_internal_mutable_date_time() {
  
  if (_impl_.date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.date_time_ = p;
  }
  return _impl_.date_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationTrade::mutable_date_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_date_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationTrade.date_time)
  return _msg;
}
inline void OperationTrade::set_allocated_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_time_);
  }
  if (date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_time));
    if (message_arena != submessage_arena) {
      date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_time_ = date_time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationTrade.date_time)
}

// int64 quantity = 3;
inline void OperationTrade::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t OperationTrade::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t OperationTrade::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationTrade.quantity)
  return _internal_quantity();
}
inline void OperationTrade::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void OperationTrade::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationTrade.quantity)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 4;
inline bool OperationTrade::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OperationTrade::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationTrade::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationTrade::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationTrade.price)
  return _internal_price();
}
inline void OperationTrade::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationTrade.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationTrade.price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationTrade.price)
  return _msg;
}
inline void OperationTrade::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationTrade.price)
}

// -------------------------------------------------------------------

// PortfolioRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void PortfolioRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PortfolioRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PortfolioRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioRequest.account_id)
}
inline std::string* PortfolioRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioRequest.account_id)
  return _s;
}
inline const std::string& PortfolioRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void PortfolioRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PortfolioRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PortfolioRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void PortfolioRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioRequest.account_id)
}

// optional .tinkoff.public_.invest.api.contract.v1.PortfolioRequest.CurrencyRequest currency = 2;
inline bool PortfolioRequest::_internal_has_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PortfolioRequest::has_currency() const {
  return _internal_has_currency();
}
inline void PortfolioRequest::clear_currency() {
  _impl_.currency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest PortfolioRequest::_internal_currency() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest >(_impl_.currency_);
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest PortfolioRequest::currency() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioRequest.currency)
  return _internal_currency();
}
inline void PortfolioRequest::_internal_set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.currency_ = value;
}
inline void PortfolioRequest::set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioRequest.currency)
}

// -------------------------------------------------------------------

// PortfolioResponse

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_shares = 1;
inline bool PortfolioResponse::_internal_has_total_amount_shares() const {
  return this != internal_default_instance() && _impl_.total_amount_shares_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_shares() const {
  return _internal_has_total_amount_shares();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_shares() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_shares_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_shares() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
  return _internal_total_amount_shares();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_shares(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_shares) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_shares_);
  }
  _impl_.total_amount_shares_ = total_amount_shares;
  if (total_amount_shares) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_shares() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_shares_;
  _impl_.total_amount_shares_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_shares() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_shares_;
  _impl_.total_amount_shares_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_shares() {
  
  if (_impl_.total_amount_shares_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_shares_ = p;
  }
  return _impl_.total_amount_shares_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_shares() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_shares();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_shares(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_shares) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_shares_);
  }
  if (total_amount_shares) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_shares));
    if (message_arena != submessage_arena) {
      total_amount_shares = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_shares, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_shares_ = total_amount_shares;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_bonds = 2;
inline bool PortfolioResponse::_internal_has_total_amount_bonds() const {
  return this != internal_default_instance() && _impl_.total_amount_bonds_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_bonds() const {
  return _internal_has_total_amount_bonds();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_bonds() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_bonds_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_bonds() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
  return _internal_total_amount_bonds();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_bonds(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_bonds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_bonds_);
  }
  _impl_.total_amount_bonds_ = total_amount_bonds;
  if (total_amount_bonds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_bonds() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_bonds_;
  _impl_.total_amount_bonds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_bonds() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_bonds_;
  _impl_.total_amount_bonds_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_bonds() {
  
  if (_impl_.total_amount_bonds_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_bonds_ = p;
  }
  return _impl_.total_amount_bonds_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_bonds() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_bonds();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_bonds(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_bonds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_bonds_);
  }
  if (total_amount_bonds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_bonds));
    if (message_arena != submessage_arena) {
      total_amount_bonds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_bonds, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_bonds_ = total_amount_bonds;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_etf = 3;
inline bool PortfolioResponse::_internal_has_total_amount_etf() const {
  return this != internal_default_instance() && _impl_.total_amount_etf_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_etf() const {
  return _internal_has_total_amount_etf();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_etf() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_etf_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_etf() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
  return _internal_total_amount_etf();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_etf(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_etf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_etf_);
  }
  _impl_.total_amount_etf_ = total_amount_etf;
  if (total_amount_etf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_etf() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_etf_;
  _impl_.total_amount_etf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_etf() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_etf_;
  _impl_.total_amount_etf_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_etf() {
  
  if (_impl_.total_amount_etf_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_etf_ = p;
  }
  return _impl_.total_amount_etf_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_etf() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_etf();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_etf(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_etf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_etf_);
  }
  if (total_amount_etf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_etf));
    if (message_arena != submessage_arena) {
      total_amount_etf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_etf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_etf_ = total_amount_etf;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_currencies = 4;
inline bool PortfolioResponse::_internal_has_total_amount_currencies() const {
  return this != internal_default_instance() && _impl_.total_amount_currencies_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_currencies() const {
  return _internal_has_total_amount_currencies();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_currencies() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_currencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_currencies() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
  return _internal_total_amount_currencies();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_currencies(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_currencies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_currencies_);
  }
  _impl_.total_amount_currencies_ = total_amount_currencies;
  if (total_amount_currencies) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_currencies() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_currencies_;
  _impl_.total_amount_currencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_currencies() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_currencies_;
  _impl_.total_amount_currencies_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_currencies() {
  
  if (_impl_.total_amount_currencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_currencies_ = p;
  }
  return _impl_.total_amount_currencies_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_currencies() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_currencies();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_currencies(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_currencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_currencies_);
  }
  if (total_amount_currencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_currencies));
    if (message_arena != submessage_arena) {
      total_amount_currencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_currencies, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_currencies_ = total_amount_currencies;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_futures = 5;
inline bool PortfolioResponse::_internal_has_total_amount_futures() const {
  return this != internal_default_instance() && _impl_.total_amount_futures_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_futures() const {
  return _internal_has_total_amount_futures();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_futures() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_futures_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_futures() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
  return _internal_total_amount_futures();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_futures(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_futures) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_futures_);
  }
  _impl_.total_amount_futures_ = total_amount_futures;
  if (total_amount_futures) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_futures() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_futures_;
  _impl_.total_amount_futures_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_futures() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_futures_;
  _impl_.total_amount_futures_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_futures() {
  
  if (_impl_.total_amount_futures_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_futures_ = p;
  }
  return _impl_.total_amount_futures_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_futures() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_futures();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_futures(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_futures) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_futures_);
  }
  if (total_amount_futures) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_futures));
    if (message_arena != submessage_arena) {
      total_amount_futures = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_futures, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_futures_ = total_amount_futures;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 6;
inline bool PortfolioResponse::_internal_has_expected_yield() const {
  return this != internal_default_instance() && _impl_.expected_yield_ != nullptr;
}
inline bool PortfolioResponse::has_expected_yield() const {
  return _internal_has_expected_yield();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioResponse::_internal_expected_yield() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioResponse::expected_yield() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.expected_yield)
  return _internal_expected_yield();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_expected_yield(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_);
  }
  _impl_.expected_yield_ = expected_yield;
  if (expected_yield) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.expected_yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::release_expected_yield() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
  _impl_.expected_yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::unsafe_arena_release_expected_yield() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.expected_yield)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
  _impl_.expected_yield_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::_internal_mutable_expected_yield() {
  
  if (_impl_.expected_yield_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.expected_yield_ = p;
  }
  return _impl_.expected_yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::mutable_expected_yield() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.expected_yield)
  return _msg;
}
inline void PortfolioResponse::set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_);
  }
  if (expected_yield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_yield));
    if (message_arena != submessage_arena) {
      expected_yield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_yield, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expected_yield_ = expected_yield;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.expected_yield)
}

// repeated .tinkoff.public_.invest.api.contract.v1.PortfolioPosition positions = 7;
inline int PortfolioResponse::_internal_positions_size() const {
  return _impl_.positions_.size();
}
inline int PortfolioResponse::positions_size() const {
  return _internal_positions_size();
}
inline void PortfolioResponse::clear_positions() {
  _impl_.positions_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* PortfolioResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.positions)
  return _impl_.positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition >*
PortfolioResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.positions)
  return &_impl_.positions_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition& PortfolioResponse::_internal_positions(int index) const {
  return _impl_.positions_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition& PortfolioResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.positions)
  return _internal_positions(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* PortfolioResponse::_internal_add_positions() {
  return _impl_.positions_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* PortfolioResponse::add_positions() {
  ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* _add = _internal_add_positions();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition >&
PortfolioResponse::positions() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.positions)
  return _impl_.positions_;
}

// string account_id = 8;
inline void PortfolioResponse::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PortfolioResponse::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PortfolioResponse::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.account_id)
}
inline std::string* PortfolioResponse::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.account_id)
  return _s;
}
inline const std::string& PortfolioResponse::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void PortfolioResponse::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PortfolioResponse::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PortfolioResponse::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.account_id)
  return _impl_.account_id_.Release();
}
inline void PortfolioResponse::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_options = 9;
inline bool PortfolioResponse::_internal_has_total_amount_options() const {
  return this != internal_default_instance() && _impl_.total_amount_options_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_options() const {
  return _internal_has_total_amount_options();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_options() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_options() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_options)
  return _internal_total_amount_options();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_options(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_options_);
  }
  _impl_.total_amount_options_ = total_amount_options;
  if (total_amount_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_options)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_options() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_options_;
  _impl_.total_amount_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_options() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_options)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_options_;
  _impl_.total_amount_options_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_options() {
  
  if (_impl_.total_amount_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_options_ = p;
  }
  return _impl_.total_amount_options_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_options() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_options();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_options)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_options(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_options_);
  }
  if (total_amount_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_options));
    if (message_arena != submessage_arena) {
      total_amount_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_options_ = total_amount_options;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_options)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_sp = 10;
inline bool PortfolioResponse::_internal_has_total_amount_sp() const {
  return this != internal_default_instance() && _impl_.total_amount_sp_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_sp() const {
  return _internal_has_total_amount_sp();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_sp() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_sp_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_sp() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
  return _internal_total_amount_sp();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_sp(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_sp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_sp_);
  }
  _impl_.total_amount_sp_ = total_amount_sp;
  if (total_amount_sp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_sp() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_sp_;
  _impl_.total_amount_sp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_sp() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_sp_;
  _impl_.total_amount_sp_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_sp() {
  
  if (_impl_.total_amount_sp_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_sp_ = p;
  }
  return _impl_.total_amount_sp_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_sp() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_sp();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_sp(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_sp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_sp_);
  }
  if (total_amount_sp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_sp));
    if (message_arena != submessage_arena) {
      total_amount_sp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_sp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_sp_ = total_amount_sp;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_amount_portfolio = 11;
inline bool PortfolioResponse::_internal_has_total_amount_portfolio() const {
  return this != internal_default_instance() && _impl_.total_amount_portfolio_ != nullptr;
}
inline bool PortfolioResponse::has_total_amount_portfolio() const {
  return _internal_has_total_amount_portfolio();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_portfolio() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_portfolio_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_portfolio() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
  return _internal_total_amount_portfolio();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_portfolio(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_portfolio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_portfolio_);
  }
  _impl_.total_amount_portfolio_ = total_amount_portfolio;
  if (total_amount_portfolio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_portfolio() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_portfolio_;
  _impl_.total_amount_portfolio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_portfolio() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_portfolio_;
  _impl_.total_amount_portfolio_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_portfolio() {
  
  if (_impl_.total_amount_portfolio_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_amount_portfolio_ = p;
  }
  return _impl_.total_amount_portfolio_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_portfolio() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_portfolio();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
  return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_portfolio(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_portfolio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_amount_portfolio_);
  }
  if (total_amount_portfolio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_amount_portfolio));
    if (message_arena != submessage_arena) {
      total_amount_portfolio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_amount_portfolio, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_amount_portfolio_ = total_amount_portfolio;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
}

// repeated .tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition virtual_positions = 12;
inline int PortfolioResponse::_internal_virtual_positions_size() const {
  return _impl_.virtual_positions_.size();
}
inline int PortfolioResponse::virtual_positions_size() const {
  return _internal_virtual_positions_size();
}
inline void PortfolioResponse::clear_virtual_positions() {
  _impl_.virtual_positions_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* PortfolioResponse::mutable_virtual_positions(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.virtual_positions)
  return _impl_.virtual_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition >*
PortfolioResponse::mutable_virtual_positions() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.virtual_positions)
  return &_impl_.virtual_positions_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition& PortfolioResponse::_internal_virtual_positions(int index) const {
  return _impl_.virtual_positions_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition& PortfolioResponse::virtual_positions(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.virtual_positions)
  return _internal_virtual_positions(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* PortfolioResponse::_internal_add_virtual_positions() {
  return _impl_.virtual_positions_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* PortfolioResponse::add_virtual_positions() {
  ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* _add = _internal_add_virtual_positions();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.virtual_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition >&
PortfolioResponse::virtual_positions() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PortfolioResponse.virtual_positions)
  return _impl_.virtual_positions_;
}

// -------------------------------------------------------------------

// PositionsRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void PositionsRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PositionsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsRequest.account_id)
}
inline std::string* PositionsRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsRequest.account_id)
  return _s;
}
inline const std::string& PositionsRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void PositionsRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void PositionsRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsRequest.account_id)
}

// -------------------------------------------------------------------

// PositionsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
inline int PositionsResponse::_internal_money_size() const {
  return _impl_.money_.size();
}
inline int PositionsResponse::money_size() const {
  return _internal_money_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::mutable_money(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsResponse.money)
  return _impl_.money_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
PositionsResponse::mutable_money() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.money)
  return &_impl_.money_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsResponse::_internal_money(int index) const {
  return _impl_.money_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsResponse::money(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsResponse.money)
  return _internal_money(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::_internal_add_money() {
  return _impl_.money_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::add_money() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_add_money();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsResponse.money)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
PositionsResponse::money() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.money)
  return _impl_.money_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
inline int PositionsResponse::_internal_blocked_size() const {
  return _impl_.blocked_.size();
}
inline int PositionsResponse::blocked_size() const {
  return _internal_blocked_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::mutable_blocked(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsResponse.blocked)
  return _impl_.blocked_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
PositionsResponse::mutable_blocked() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.blocked)
  return &_impl_.blocked_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsResponse::_internal_blocked(int index) const {
  return _impl_.blocked_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsResponse::blocked(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsResponse.blocked)
  return _internal_blocked(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::_internal_add_blocked() {
  return _impl_.blocked_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::add_blocked() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_add_blocked();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsResponse.blocked)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
PositionsResponse::blocked() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.blocked)
  return _impl_.blocked_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
inline int PositionsResponse::_internal_securities_size() const {
  return _impl_.securities_.size();
}
inline int PositionsResponse::securities_size() const {
  return _internal_securities_size();
}
inline void PositionsResponse::clear_securities() {
  _impl_.securities_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionsResponse::mutable_securities(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsResponse.securities)
  return _impl_.securities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >*
PositionsResponse::mutable_securities() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.securities)
  return &_impl_.securities_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& PositionsResponse::_internal_securities(int index) const {
  return _impl_.securities_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& PositionsResponse::securities(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsResponse.securities)
  return _internal_securities(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionsResponse::_internal_add_securities() {
  return _impl_.securities_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionsResponse::add_securities() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* _add = _internal_add_securities();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsResponse.securities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >&
PositionsResponse::securities() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.securities)
  return _impl_.securities_;
}

// bool limits_loading_in_progress = 4;
inline void PositionsResponse::clear_limits_loading_in_progress() {
  _impl_.limits_loading_in_progress_ = false;
}
inline bool PositionsResponse::_internal_limits_loading_in_progress() const {
  return _impl_.limits_loading_in_progress_;
}
inline bool PositionsResponse::limits_loading_in_progress() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsResponse.limits_loading_in_progress)
  return _internal_limits_loading_in_progress();
}
inline void PositionsResponse::_internal_set_limits_loading_in_progress(bool value) {
  
  _impl_.limits_loading_in_progress_ = value;
}
inline void PositionsResponse::set_limits_loading_in_progress(bool value) {
  _internal_set_limits_loading_in_progress(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsResponse.limits_loading_in_progress)
}

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 5;
inline int PositionsResponse::_internal_futures_size() const {
  return _impl_.futures_.size();
}
inline int PositionsResponse::futures_size() const {
  return _internal_futures_size();
}
inline void PositionsResponse::clear_futures() {
  _impl_.futures_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionsResponse::mutable_futures(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsResponse.futures)
  return _impl_.futures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >*
PositionsResponse::mutable_futures() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.futures)
  return &_impl_.futures_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& PositionsResponse::_internal_futures(int index) const {
  return _impl_.futures_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& PositionsResponse::futures(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsResponse.futures)
  return _internal_futures(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionsResponse::_internal_add_futures() {
  return _impl_.futures_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionsResponse::add_futures() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* _add = _internal_add_futures();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsResponse.futures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >&
PositionsResponse::futures() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.futures)
  return _impl_.futures_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 6;
inline int PositionsResponse::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int PositionsResponse::options_size() const {
  return _internal_options_size();
}
inline void PositionsResponse::clear_options() {
  _impl_.options_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionsResponse::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsResponse.options)
  return _impl_.options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >*
PositionsResponse::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.options)
  return &_impl_.options_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& PositionsResponse::_internal_options(int index) const {
  return _impl_.options_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& PositionsResponse::options(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsResponse.options)
  return _internal_options(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionsResponse::_internal_add_options() {
  return _impl_.options_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionsResponse::add_options() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsResponse.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >&
PositionsResponse::options() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionsResponse.options)
  return _impl_.options_;
}

// -------------------------------------------------------------------

// WithdrawLimitsRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void WithdrawLimitsRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& WithdrawLimitsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WithdrawLimitsRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
}
inline std::string* WithdrawLimitsRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
  return _s;
}
inline const std::string& WithdrawLimitsRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void WithdrawLimitsRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WithdrawLimitsRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WithdrawLimitsRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void WithdrawLimitsRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
}

// -------------------------------------------------------------------

// WithdrawLimitsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue money = 1;
inline int WithdrawLimitsResponse::_internal_money_size() const {
  return _impl_.money_.size();
}
inline int WithdrawLimitsResponse::money_size() const {
  return _internal_money_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::mutable_money(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.money)
  return _impl_.money_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
WithdrawLimitsResponse::mutable_money() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.money)
  return &_impl_.money_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::_internal_money(int index) const {
  return _impl_.money_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::money(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.money)
  return _internal_money(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::_internal_add_money() {
  return _impl_.money_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::add_money() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_add_money();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.money)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
WithdrawLimitsResponse::money() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.money)
  return _impl_.money_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked = 2;
inline int WithdrawLimitsResponse::_internal_blocked_size() const {
  return _impl_.blocked_.size();
}
inline int WithdrawLimitsResponse::blocked_size() const {
  return _internal_blocked_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::mutable_blocked(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
  return _impl_.blocked_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
WithdrawLimitsResponse::mutable_blocked() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
  return &_impl_.blocked_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::_internal_blocked(int index) const {
  return _impl_.blocked_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::blocked(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
  return _internal_blocked(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::_internal_add_blocked() {
  return _impl_.blocked_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::add_blocked() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_add_blocked();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
WithdrawLimitsResponse::blocked() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
  return _impl_.blocked_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_guarantee = 3;
inline int WithdrawLimitsResponse::_internal_blocked_guarantee_size() const {
  return _impl_.blocked_guarantee_.size();
}
inline int WithdrawLimitsResponse::blocked_guarantee_size() const {
  return _internal_blocked_guarantee_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::mutable_blocked_guarantee(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
  return _impl_.blocked_guarantee_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >*
WithdrawLimitsResponse::mutable_blocked_guarantee() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
  return &_impl_.blocked_guarantee_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::_internal_blocked_guarantee(int index) const {
  return _impl_.blocked_guarantee_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::blocked_guarantee(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
  return _internal_blocked_guarantee(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::_internal_add_blocked_guarantee() {
  return _impl_.blocked_guarantee_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::add_blocked_guarantee() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_add_blocked_guarantee();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >&
WithdrawLimitsResponse::blocked_guarantee() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
  return _impl_.blocked_guarantee_;
}

// -------------------------------------------------------------------

// PortfolioPosition

// string figi = 1;
inline void PortfolioPosition::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PortfolioPosition::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.figi)
}
inline std::string* PortfolioPosition::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.figi)
  return _s;
}
inline const std::string& PortfolioPosition::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void PortfolioPosition::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* PortfolioPosition::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* PortfolioPosition::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.figi)
  return _impl_.figi_.Release();
}
inline void PortfolioPosition::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.figi)
}

// string instrument_type = 2;
inline void PortfolioPosition::clear_instrument_type() {
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::instrument_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_type)
  return _internal_instrument_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PortfolioPosition::set_instrument_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_type)
}
inline std::string* PortfolioPosition::mutable_instrument_type() {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_type)
  return _s;
}
inline const std::string& PortfolioPosition::_internal_instrument_type() const {
  return _impl_.instrument_type_.Get();
}
inline void PortfolioPosition::_internal_set_instrument_type(const std::string& value) {
  
  _impl_.instrument_type_.Set(value, GetArenaForAllocation());
}
inline std::string* PortfolioPosition::_internal_mutable_instrument_type() {
  
  return _impl_.instrument_type_.Mutable(GetArenaForAllocation());
}
inline std::string* PortfolioPosition::release_instrument_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void PortfolioPosition::set_allocated_instrument_type(std::string* instrument_type) {
  if (instrument_type != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_type_.SetAllocated(instrument_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_type_.IsDefault()) {
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_type)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 3;
inline bool PortfolioPosition::_internal_has_quantity() const {
  return this != internal_default_instance() && _impl_.quantity_ != nullptr;
}
inline bool PortfolioPosition::has_quantity() const {
  return _internal_has_quantity();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_quantity() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.quantity_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity)
  return _internal_quantity();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_quantity(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quantity_);
  }
  _impl_.quantity_ = quantity;
  if (quantity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_quantity() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_;
  _impl_.quantity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_quantity() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_;
  _impl_.quantity_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_quantity() {
  
  if (_impl_.quantity_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.quantity_ = p;
  }
  return _impl_.quantity_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_quantity() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_quantity();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity)
  return _msg;
}
inline void PortfolioPosition::set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* quantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quantity_);
  }
  if (quantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantity));
    if (message_arena != submessage_arena) {
      quantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quantity_ = quantity;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 4;
inline bool PortfolioPosition::_internal_has_average_position_price() const {
  return this != internal_default_instance() && _impl_.average_position_price_ != nullptr;
}
inline bool PortfolioPosition::has_average_position_price() const {
  return _internal_has_average_position_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_average_position_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::average_position_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price)
  return _internal_average_position_price();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_average_position_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_);
  }
  _impl_.average_position_price_ = average_position_price;
  if (average_position_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_average_position_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
  _impl_.average_position_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_average_position_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
  _impl_.average_position_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_average_position_price() {
  
  if (_impl_.average_position_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.average_position_price_ = p;
  }
  return _impl_.average_position_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_average_position_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price)
  return _msg;
}
inline void PortfolioPosition::set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_);
  }
  if (average_position_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(average_position_price));
    if (message_arena != submessage_arena) {
      average_position_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_position_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.average_position_price_ = average_position_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 5;
inline bool PortfolioPosition::_internal_has_expected_yield() const {
  return this != internal_default_instance() && _impl_.expected_yield_ != nullptr;
}
inline bool PortfolioPosition::has_expected_yield() const {
  return _internal_has_expected_yield();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_expected_yield() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::expected_yield() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield)
  return _internal_expected_yield();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_expected_yield(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_);
  }
  _impl_.expected_yield_ = expected_yield;
  if (expected_yield) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_expected_yield() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
  _impl_.expected_yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_expected_yield() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
  _impl_.expected_yield_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_expected_yield() {
  
  if (_impl_.expected_yield_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.expected_yield_ = p;
  }
  return _impl_.expected_yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_expected_yield() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield)
  return _msg;
}
inline void PortfolioPosition::set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_);
  }
  if (expected_yield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_yield));
    if (message_arena != submessage_arena) {
      expected_yield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_yield, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expected_yield_ = expected_yield;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue current_nkd = 6;
inline bool PortfolioPosition::_internal_has_current_nkd() const {
  return this != internal_default_instance() && _impl_.current_nkd_ != nullptr;
}
inline bool PortfolioPosition::has_current_nkd() const {
  return _internal_has_current_nkd();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_current_nkd() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.current_nkd_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::current_nkd() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_nkd)
  return _internal_current_nkd();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_current_nkd(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_nkd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_nkd_);
  }
  _impl_.current_nkd_ = current_nkd;
  if (current_nkd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_nkd)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_current_nkd() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_nkd_;
  _impl_.current_nkd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_current_nkd() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_nkd)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_nkd_;
  _impl_.current_nkd_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_current_nkd() {
  
  if (_impl_.current_nkd_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.current_nkd_ = p;
  }
  return _impl_.current_nkd_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_current_nkd() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_current_nkd();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_nkd)
  return _msg;
}
inline void PortfolioPosition::set_allocated_current_nkd(::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_nkd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_nkd_);
  }
  if (current_nkd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_nkd));
    if (message_arena != submessage_arena) {
      current_nkd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_nkd, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_nkd_ = current_nkd;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_nkd)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation average_position_price_pt = 7 [deprecated = true];
inline bool PortfolioPosition::_internal_has_average_position_price_pt() const {
  return this != internal_default_instance() && _impl_.average_position_price_pt_ != nullptr;
}
inline bool PortfolioPosition::has_average_position_price_pt() const {
  return _internal_has_average_position_price_pt();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_average_position_price_pt() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.average_position_price_pt_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::average_position_price_pt() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
  return _internal_average_position_price_pt();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_average_position_price_pt(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* average_position_price_pt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_pt_);
  }
  _impl_.average_position_price_pt_ = average_position_price_pt;
  if (average_position_price_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_average_position_price_pt() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.average_position_price_pt_;
  _impl_.average_position_price_pt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_average_position_price_pt() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.average_position_price_pt_;
  _impl_.average_position_price_pt_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_average_position_price_pt() {
  
  if (_impl_.average_position_price_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.average_position_price_pt_ = p;
  }
  return _impl_.average_position_price_pt_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_average_position_price_pt() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_average_position_price_pt();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
  return _msg;
}
inline void PortfolioPosition::set_allocated_average_position_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* average_position_price_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_pt_);
  }
  if (average_position_price_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(average_position_price_pt));
    if (message_arena != submessage_arena) {
      average_position_price_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_position_price_pt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.average_position_price_pt_ = average_position_price_pt;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 8;
inline bool PortfolioPosition::_internal_has_current_price() const {
  return this != internal_default_instance() && _impl_.current_price_ != nullptr;
}
inline bool PortfolioPosition::has_current_price() const {
  return _internal_has_current_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_current_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.current_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::current_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_price)
  return _internal_current_price();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_current_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_price_);
  }
  _impl_.current_price_ = current_price;
  if (current_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_current_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_current_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_current_price() {
  
  if (_impl_.current_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.current_price_ = p;
  }
  return _impl_.current_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_current_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_current_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_price)
  return _msg;
}
inline void PortfolioPosition::set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_price_);
  }
  if (current_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_price));
    if (message_arena != submessage_arena) {
      current_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_price_ = current_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.current_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 9;
inline bool PortfolioPosition::_internal_has_average_position_price_fifo() const {
  return this != internal_default_instance() && _impl_.average_position_price_fifo_ != nullptr;
}
inline bool PortfolioPosition::has_average_position_price_fifo() const {
  return _internal_has_average_position_price_fifo();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_average_position_price_fifo() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_fifo_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::average_position_price_fifo() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
  return _internal_average_position_price_fifo();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_average_position_price_fifo(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_fifo_);
  }
  _impl_.average_position_price_fifo_ = average_position_price_fifo;
  if (average_position_price_fifo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_average_position_price_fifo() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_fifo_;
  _impl_.average_position_price_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_average_position_price_fifo() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_fifo_;
  _impl_.average_position_price_fifo_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_average_position_price_fifo() {
  
  if (_impl_.average_position_price_fifo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.average_position_price_fifo_ = p;
  }
  return _impl_.average_position_price_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_average_position_price_fifo() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price_fifo();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
  return _msg;
}
inline void PortfolioPosition::set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_fifo_);
  }
  if (average_position_price_fifo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(average_position_price_fifo));
    if (message_arena != submessage_arena) {
      average_position_price_fifo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_position_price_fifo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.average_position_price_fifo_ = average_position_price_fifo;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation quantity_lots = 10 [deprecated = true];
inline bool PortfolioPosition::_internal_has_quantity_lots() const {
  return this != internal_default_instance() && _impl_.quantity_lots_ != nullptr;
}
inline bool PortfolioPosition::has_quantity_lots() const {
  return _internal_has_quantity_lots();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_quantity_lots() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.quantity_lots_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::quantity_lots() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity_lots)
  return _internal_quantity_lots();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_quantity_lots(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_lots) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quantity_lots_);
  }
  _impl_.quantity_lots_ = quantity_lots;
  if (quantity_lots) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity_lots)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_quantity_lots() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_lots_;
  _impl_.quantity_lots_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_quantity_lots() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity_lots)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_lots_;
  _impl_.quantity_lots_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_quantity_lots() {
  
  if (_impl_.quantity_lots_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.quantity_lots_ = p;
  }
  return _impl_.quantity_lots_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_quantity_lots() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_quantity_lots();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity_lots)
  return _msg;
}
inline void PortfolioPosition::set_allocated_quantity_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_lots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quantity_lots_);
  }
  if (quantity_lots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantity_lots));
    if (message_arena != submessage_arena) {
      quantity_lots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantity_lots, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quantity_lots_ = quantity_lots;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.quantity_lots)
}

// bool blocked = 21;
inline void PortfolioPosition::clear_blocked() {
  _impl_.blocked_ = false;
}
inline bool PortfolioPosition::_internal_blocked() const {
  return _impl_.blocked_;
}
inline bool PortfolioPosition::blocked() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.blocked)
  return _internal_blocked();
}
inline void PortfolioPosition::_internal_set_blocked(bool value) {
  
  _impl_.blocked_ = value;
}
inline void PortfolioPosition::set_blocked(bool value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.blocked)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation blocked_lots = 22;
inline bool PortfolioPosition::_internal_has_blocked_lots() const {
  return this != internal_default_instance() && _impl_.blocked_lots_ != nullptr;
}
inline bool PortfolioPosition::has_blocked_lots() const {
  return _internal_has_blocked_lots();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_blocked_lots() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.blocked_lots_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::blocked_lots() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.blocked_lots)
  return _internal_blocked_lots();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_blocked_lots(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* blocked_lots) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blocked_lots_);
  }
  _impl_.blocked_lots_ = blocked_lots;
  if (blocked_lots) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.blocked_lots)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_blocked_lots() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.blocked_lots_;
  _impl_.blocked_lots_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_blocked_lots() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.blocked_lots)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.blocked_lots_;
  _impl_.blocked_lots_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_blocked_lots() {
  
  if (_impl_.blocked_lots_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.blocked_lots_ = p;
  }
  return _impl_.blocked_lots_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_blocked_lots() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_blocked_lots();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.blocked_lots)
  return _msg;
}
inline void PortfolioPosition::set_allocated_blocked_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* blocked_lots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blocked_lots_);
  }
  if (blocked_lots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blocked_lots));
    if (message_arena != submessage_arena) {
      blocked_lots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blocked_lots, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blocked_lots_ = blocked_lots;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.blocked_lots)
}

// string position_uid = 24;
inline void PortfolioPosition::clear_position_uid() {
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::position_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.position_uid)
  return _internal_position_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PortfolioPosition::set_position_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.position_uid)
}
inline std::string* PortfolioPosition::mutable_position_uid() {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.position_uid)
  return _s;
}
inline const std::string& PortfolioPosition::_internal_position_uid() const {
  return _impl_.position_uid_.Get();
}
inline void PortfolioPosition::_internal_set_position_uid(const std::string& value) {
  
  _impl_.position_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PortfolioPosition::_internal_mutable_position_uid() {
  
  return _impl_.position_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PortfolioPosition::release_position_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.position_uid)
  return _impl_.position_uid_.Release();
}
inline void PortfolioPosition::set_allocated_position_uid(std::string* position_uid) {
  if (position_uid != nullptr) {
    
  } else {
    
  }
  _impl_.position_uid_.SetAllocated(position_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_uid_.IsDefault()) {
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.position_uid)
}

// string instrument_uid = 25;
inline void PortfolioPosition::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PortfolioPosition::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_uid)
}
inline std::string* PortfolioPosition::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_uid)
  return _s;
}
inline const std::string& PortfolioPosition::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void PortfolioPosition::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PortfolioPosition::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PortfolioPosition::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void PortfolioPosition::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.instrument_uid)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue var_margin = 26;
inline bool PortfolioPosition::_internal_has_var_margin() const {
  return this != internal_default_instance() && _impl_.var_margin_ != nullptr;
}
inline bool PortfolioPosition::has_var_margin() const {
  return _internal_has_var_margin();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_var_margin() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.var_margin_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::var_margin() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.var_margin)
  return _internal_var_margin();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_var_margin(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* var_margin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.var_margin_);
  }
  _impl_.var_margin_ = var_margin;
  if (var_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.var_margin)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_var_margin() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.var_margin_;
  _impl_.var_margin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_var_margin() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.var_margin)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.var_margin_;
  _impl_.var_margin_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_var_margin() {
  
  if (_impl_.var_margin_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.var_margin_ = p;
  }
  return _impl_.var_margin_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_var_margin() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_var_margin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.var_margin)
  return _msg;
}
inline void PortfolioPosition::set_allocated_var_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* var_margin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.var_margin_);
  }
  if (var_margin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_margin));
    if (message_arena != submessage_arena) {
      var_margin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_margin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.var_margin_ = var_margin;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.var_margin)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 27;
inline bool PortfolioPosition::_internal_has_expected_yield_fifo() const {
  return this != internal_default_instance() && _impl_.expected_yield_fifo_ != nullptr;
}
inline bool PortfolioPosition::has_expected_yield_fifo() const {
  return _internal_has_expected_yield_fifo();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_expected_yield_fifo() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_fifo_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::expected_yield_fifo() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
  return _internal_expected_yield_fifo();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_expected_yield_fifo(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_fifo_);
  }
  _impl_.expected_yield_fifo_ = expected_yield_fifo;
  if (expected_yield_fifo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_expected_yield_fifo() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_fifo_;
  _impl_.expected_yield_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_expected_yield_fifo() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_fifo_;
  _impl_.expected_yield_fifo_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_expected_yield_fifo() {
  
  if (_impl_.expected_yield_fifo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.expected_yield_fifo_ = p;
  }
  return _impl_.expected_yield_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_expected_yield_fifo() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield_fifo();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
  return _msg;
}
inline void PortfolioPosition::set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_fifo_);
  }
  if (expected_yield_fifo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_yield_fifo));
    if (message_arena != submessage_arena) {
      expected_yield_fifo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_yield_fifo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expected_yield_fifo_ = expected_yield_fifo;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
}

// -------------------------------------------------------------------

// VirtualPortfolioPosition

// string position_uid = 1;
inline void VirtualPortfolioPosition::clear_position_uid() {
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::position_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
  return _internal_position_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtualPortfolioPosition::set_position_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
}
inline std::string* VirtualPortfolioPosition::mutable_position_uid() {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
  return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_position_uid() const {
  return _impl_.position_uid_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_position_uid(const std::string& value) {
  
  _impl_.position_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_position_uid() {
  
  return _impl_.position_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::release_position_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
  return _impl_.position_uid_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_position_uid(std::string* position_uid) {
  if (position_uid != nullptr) {
    
  } else {
    
  }
  _impl_.position_uid_.SetAllocated(position_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_uid_.IsDefault()) {
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
}

// string instrument_uid = 2;
inline void VirtualPortfolioPosition::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtualPortfolioPosition::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
}
inline std::string* VirtualPortfolioPosition::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
  return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
}

// string figi = 3;
inline void VirtualPortfolioPosition::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtualPortfolioPosition::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.figi)
}
inline std::string* VirtualPortfolioPosition::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.figi)
  return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.figi)
  return _impl_.figi_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.figi)
}

// string instrument_type = 4;
inline void VirtualPortfolioPosition::clear_instrument_type() {
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::instrument_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
  return _internal_instrument_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtualPortfolioPosition::set_instrument_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
}
inline std::string* VirtualPortfolioPosition::mutable_instrument_type() {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
  return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_instrument_type() const {
  return _impl_.instrument_type_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_instrument_type(const std::string& value) {
  
  _impl_.instrument_type_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_instrument_type() {
  
  return _impl_.instrument_type_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtualPortfolioPosition::release_instrument_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_instrument_type(std::string* instrument_type) {
  if (instrument_type != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_type_.SetAllocated(instrument_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_type_.IsDefault()) {
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation quantity = 5;
inline bool VirtualPortfolioPosition::_internal_has_quantity() const {
  return this != internal_default_instance() && _impl_.quantity_ != nullptr;
}
inline bool VirtualPortfolioPosition::has_quantity() const {
  return _internal_has_quantity();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::_internal_quantity() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.quantity_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
  return _internal_quantity();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_quantity(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* quantity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quantity_);
  }
  _impl_.quantity_ = quantity;
  if (quantity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::release_quantity() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_;
  _impl_.quantity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::unsafe_arena_release_quantity() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_;
  _impl_.quantity_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::_internal_mutable_quantity() {
  
  if (_impl_.quantity_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.quantity_ = p;
  }
  return _impl_.quantity_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::mutable_quantity() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_quantity();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
  return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* quantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quantity_);
  }
  if (quantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantity));
    if (message_arena != submessage_arena) {
      quantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quantity_ = quantity;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price = 6;
inline bool VirtualPortfolioPosition::_internal_has_average_position_price() const {
  return this != internal_default_instance() && _impl_.average_position_price_ != nullptr;
}
inline bool VirtualPortfolioPosition::has_average_position_price() const {
  return _internal_has_average_position_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::_internal_average_position_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::average_position_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
  return _internal_average_position_price();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_average_position_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_);
  }
  _impl_.average_position_price_ = average_position_price;
  if (average_position_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::release_average_position_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
  _impl_.average_position_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::unsafe_arena_release_average_position_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
  _impl_.average_position_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::_internal_mutable_average_position_price() {
  
  if (_impl_.average_position_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.average_position_price_ = p;
  }
  return _impl_.average_position_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::mutable_average_position_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
  return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_);
  }
  if (average_position_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(average_position_price));
    if (message_arena != submessage_arena) {
      average_position_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_position_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.average_position_price_ = average_position_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield = 7;
inline bool VirtualPortfolioPosition::_internal_has_expected_yield() const {
  return this != internal_default_instance() && _impl_.expected_yield_ != nullptr;
}
inline bool VirtualPortfolioPosition::has_expected_yield() const {
  return _internal_has_expected_yield();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::_internal_expected_yield() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::expected_yield() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
  return _internal_expected_yield();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_expected_yield(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_);
  }
  _impl_.expected_yield_ = expected_yield;
  if (expected_yield) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::release_expected_yield() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
  _impl_.expected_yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::unsafe_arena_release_expected_yield() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
  _impl_.expected_yield_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::_internal_mutable_expected_yield() {
  
  if (_impl_.expected_yield_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.expected_yield_ = p;
  }
  return _impl_.expected_yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::mutable_expected_yield() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
  return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_);
  }
  if (expected_yield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_yield));
    if (message_arena != submessage_arena) {
      expected_yield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_yield, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expected_yield_ = expected_yield;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation expected_yield_fifo = 8;
inline bool VirtualPortfolioPosition::_internal_has_expected_yield_fifo() const {
  return this != internal_default_instance() && _impl_.expected_yield_fifo_ != nullptr;
}
inline bool VirtualPortfolioPosition::has_expected_yield_fifo() const {
  return _internal_has_expected_yield_fifo();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::_internal_expected_yield_fifo() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_fifo_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::expected_yield_fifo() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
  return _internal_expected_yield_fifo();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_expected_yield_fifo(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_fifo_);
  }
  _impl_.expected_yield_fifo_ = expected_yield_fifo;
  if (expected_yield_fifo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::release_expected_yield_fifo() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_fifo_;
  _impl_.expected_yield_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::unsafe_arena_release_expected_yield_fifo() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_fifo_;
  _impl_.expected_yield_fifo_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::_internal_mutable_expected_yield_fifo() {
  
  if (_impl_.expected_yield_fifo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.expected_yield_fifo_ = p;
  }
  return _impl_.expected_yield_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::mutable_expected_yield_fifo() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield_fifo();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
  return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_yield_fifo_);
  }
  if (expected_yield_fifo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_yield_fifo));
    if (message_arena != submessage_arena) {
      expected_yield_fifo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_yield_fifo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expected_yield_fifo_ = expected_yield_fifo;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
}

// .google.protobuf.Timestamp expire_date = 9;
inline bool VirtualPortfolioPosition::_internal_has_expire_date() const {
  return this != internal_default_instance() && _impl_.expire_date_ != nullptr;
}
inline bool VirtualPortfolioPosition::has_expire_date() const {
  return _internal_has_expire_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& VirtualPortfolioPosition::_internal_expire_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& VirtualPortfolioPosition::expire_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
  return _internal_expire_date();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_expire_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_date_);
  }
  _impl_.expire_date_ = expire_date;
  if (expire_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VirtualPortfolioPosition::release_expire_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_date_;
  _impl_.expire_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VirtualPortfolioPosition::unsafe_arena_release_expire_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_date_;
  _impl_.expire_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VirtualPortfolioPosition::_internal_mutable_expire_date() {
  
  if (_impl_.expire_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_date_ = p;
  }
  return _impl_.expire_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VirtualPortfolioPosition::mutable_expire_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
  return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_expire_date(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_date_);
  }
  if (expire_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_date));
    if (message_arena != submessage_arena) {
      expire_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_date_ = expire_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue current_price = 10;
inline bool VirtualPortfolioPosition::_internal_has_current_price() const {
  return this != internal_default_instance() && _impl_.current_price_ != nullptr;
}
inline bool VirtualPortfolioPosition::has_current_price() const {
  return _internal_has_current_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::_internal_current_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.current_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::current_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
  return _internal_current_price();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_current_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_price_);
  }
  _impl_.current_price_ = current_price;
  if (current_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::release_current_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::unsafe_arena_release_current_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::_internal_mutable_current_price() {
  
  if (_impl_.current_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.current_price_ = p;
  }
  return _impl_.current_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::mutable_current_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_current_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
  return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_price_);
  }
  if (current_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_price));
    if (message_arena != submessage_arena) {
      current_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_price_ = current_price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue average_position_price_fifo = 11;
inline bool VirtualPortfolioPosition::_internal_has_average_position_price_fifo() const {
  return this != internal_default_instance() && _impl_.average_position_price_fifo_ != nullptr;
}
inline bool VirtualPortfolioPosition::has_average_position_price_fifo() const {
  return _internal_has_average_position_price_fifo();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::_internal_average_position_price_fifo() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_fifo_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::average_position_price_fifo() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
  return _internal_average_position_price_fifo();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_average_position_price_fifo(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_fifo_);
  }
  _impl_.average_position_price_fifo_ = average_position_price_fifo;
  if (average_position_price_fifo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::release_average_position_price_fifo() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_fifo_;
  _impl_.average_position_price_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::unsafe_arena_release_average_position_price_fifo() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_fifo_;
  _impl_.average_position_price_fifo_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::_internal_mutable_average_position_price_fifo() {
  
  if (_impl_.average_position_price_fifo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.average_position_price_fifo_ = p;
  }
  return _impl_.average_position_price_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::mutable_average_position_price_fifo() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price_fifo();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
  return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_position_price_fifo_);
  }
  if (average_position_price_fifo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(average_position_price_fifo));
    if (message_arena != submessage_arena) {
      average_position_price_fifo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_position_price_fifo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.average_position_price_fifo_ = average_position_price_fifo;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
}

// -------------------------------------------------------------------

// PositionsSecurities

// string figi = 1;
inline void PositionsSecurities::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsSecurities::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.figi)
}
inline std::string* PositionsSecurities::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.figi)
  return _s;
}
inline const std::string& PositionsSecurities::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void PositionsSecurities::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsSecurities::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsSecurities::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.figi)
  return _impl_.figi_.Release();
}
inline void PositionsSecurities::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.figi)
}

// int64 blocked = 2;
inline void PositionsSecurities::clear_blocked() {
  _impl_.blocked_ = int64_t{0};
}
inline int64_t PositionsSecurities::_internal_blocked() const {
  return _impl_.blocked_;
}
inline int64_t PositionsSecurities::blocked() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.blocked)
  return _internal_blocked();
}
inline void PositionsSecurities::_internal_set_blocked(int64_t value) {
  
  _impl_.blocked_ = value;
}
inline void PositionsSecurities::set_blocked(int64_t value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.blocked)
}

// int64 balance = 3;
inline void PositionsSecurities::clear_balance() {
  _impl_.balance_ = int64_t{0};
}
inline int64_t PositionsSecurities::_internal_balance() const {
  return _impl_.balance_;
}
inline int64_t PositionsSecurities::balance() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.balance)
  return _internal_balance();
}
inline void PositionsSecurities::_internal_set_balance(int64_t value) {
  
  _impl_.balance_ = value;
}
inline void PositionsSecurities::set_balance(int64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.balance)
}

// string position_uid = 4;
inline void PositionsSecurities::clear_position_uid() {
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::position_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.position_uid)
  return _internal_position_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsSecurities::set_position_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.position_uid)
}
inline std::string* PositionsSecurities::mutable_position_uid() {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.position_uid)
  return _s;
}
inline const std::string& PositionsSecurities::_internal_position_uid() const {
  return _impl_.position_uid_.Get();
}
inline void PositionsSecurities::_internal_set_position_uid(const std::string& value) {
  
  _impl_.position_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsSecurities::_internal_mutable_position_uid() {
  
  return _impl_.position_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsSecurities::release_position_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.position_uid)
  return _impl_.position_uid_.Release();
}
inline void PositionsSecurities::set_allocated_position_uid(std::string* position_uid) {
  if (position_uid != nullptr) {
    
  } else {
    
  }
  _impl_.position_uid_.SetAllocated(position_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_uid_.IsDefault()) {
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.position_uid)
}

// string instrument_uid = 5;
inline void PositionsSecurities::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsSecurities::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_uid)
}
inline std::string* PositionsSecurities::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_uid)
  return _s;
}
inline const std::string& PositionsSecurities::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void PositionsSecurities::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsSecurities::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsSecurities::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void PositionsSecurities::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_uid)
}

// bool exchange_blocked = 11;
inline void PositionsSecurities::clear_exchange_blocked() {
  _impl_.exchange_blocked_ = false;
}
inline bool PositionsSecurities::_internal_exchange_blocked() const {
  return _impl_.exchange_blocked_;
}
inline bool PositionsSecurities::exchange_blocked() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.exchange_blocked)
  return _internal_exchange_blocked();
}
inline void PositionsSecurities::_internal_set_exchange_blocked(bool value) {
  
  _impl_.exchange_blocked_ = value;
}
inline void PositionsSecurities::set_exchange_blocked(bool value) {
  _internal_set_exchange_blocked(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.exchange_blocked)
}

// string instrument_type = 16;
inline void PositionsSecurities::clear_instrument_type() {
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::instrument_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_type)
  return _internal_instrument_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsSecurities::set_instrument_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_type)
}
inline std::string* PositionsSecurities::mutable_instrument_type() {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_type)
  return _s;
}
inline const std::string& PositionsSecurities::_internal_instrument_type() const {
  return _impl_.instrument_type_.Get();
}
inline void PositionsSecurities::_internal_set_instrument_type(const std::string& value) {
  
  _impl_.instrument_type_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsSecurities::_internal_mutable_instrument_type() {
  
  return _impl_.instrument_type_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsSecurities::release_instrument_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void PositionsSecurities::set_allocated_instrument_type(std::string* instrument_type) {
  if (instrument_type != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_type_.SetAllocated(instrument_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_type_.IsDefault()) {
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsSecurities.instrument_type)
}

// -------------------------------------------------------------------

// PositionsFutures

// string figi = 1;
inline void PositionsFutures::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& PositionsFutures::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsFutures.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsFutures::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsFutures.figi)
}
inline std::string* PositionsFutures::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsFutures.figi)
  return _s;
}
inline const std::string& PositionsFutures::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void PositionsFutures::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsFutures::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsFutures::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsFutures.figi)
  return _impl_.figi_.Release();
}
inline void PositionsFutures::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsFutures.figi)
}

// int64 blocked = 2;
inline void PositionsFutures::clear_blocked() {
  _impl_.blocked_ = int64_t{0};
}
inline int64_t PositionsFutures::_internal_blocked() const {
  return _impl_.blocked_;
}
inline int64_t PositionsFutures::blocked() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsFutures.blocked)
  return _internal_blocked();
}
inline void PositionsFutures::_internal_set_blocked(int64_t value) {
  
  _impl_.blocked_ = value;
}
inline void PositionsFutures::set_blocked(int64_t value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsFutures.blocked)
}

// int64 balance = 3;
inline void PositionsFutures::clear_balance() {
  _impl_.balance_ = int64_t{0};
}
inline int64_t PositionsFutures::_internal_balance() const {
  return _impl_.balance_;
}
inline int64_t PositionsFutures::balance() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsFutures.balance)
  return _internal_balance();
}
inline void PositionsFutures::_internal_set_balance(int64_t value) {
  
  _impl_.balance_ = value;
}
inline void PositionsFutures::set_balance(int64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsFutures.balance)
}

// string position_uid = 4;
inline void PositionsFutures::clear_position_uid() {
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PositionsFutures::position_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsFutures.position_uid)
  return _internal_position_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsFutures::set_position_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsFutures.position_uid)
}
inline std::string* PositionsFutures::mutable_position_uid() {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsFutures.position_uid)
  return _s;
}
inline const std::string& PositionsFutures::_internal_position_uid() const {
  return _impl_.position_uid_.Get();
}
inline void PositionsFutures::_internal_set_position_uid(const std::string& value) {
  
  _impl_.position_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsFutures::_internal_mutable_position_uid() {
  
  return _impl_.position_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsFutures::release_position_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsFutures.position_uid)
  return _impl_.position_uid_.Release();
}
inline void PositionsFutures::set_allocated_position_uid(std::string* position_uid) {
  if (position_uid != nullptr) {
    
  } else {
    
  }
  _impl_.position_uid_.SetAllocated(position_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_uid_.IsDefault()) {
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsFutures.position_uid)
}

// string instrument_uid = 5;
inline void PositionsFutures::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PositionsFutures::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsFutures.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsFutures::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsFutures.instrument_uid)
}
inline std::string* PositionsFutures::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsFutures.instrument_uid)
  return _s;
}
inline const std::string& PositionsFutures::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void PositionsFutures::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsFutures::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsFutures::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsFutures.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void PositionsFutures::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsFutures.instrument_uid)
}

// -------------------------------------------------------------------

// PositionsOptions

// string position_uid = 1;
inline void PositionsOptions::clear_position_uid() {
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PositionsOptions::position_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsOptions.position_uid)
  return _internal_position_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsOptions::set_position_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsOptions.position_uid)
}
inline std::string* PositionsOptions::mutable_position_uid() {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsOptions.position_uid)
  return _s;
}
inline const std::string& PositionsOptions::_internal_position_uid() const {
  return _impl_.position_uid_.Get();
}
inline void PositionsOptions::_internal_set_position_uid(const std::string& value) {
  
  _impl_.position_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsOptions::_internal_mutable_position_uid() {
  
  return _impl_.position_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsOptions::release_position_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsOptions.position_uid)
  return _impl_.position_uid_.Release();
}
inline void PositionsOptions::set_allocated_position_uid(std::string* position_uid) {
  if (position_uid != nullptr) {
    
  } else {
    
  }
  _impl_.position_uid_.SetAllocated(position_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_uid_.IsDefault()) {
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsOptions.position_uid)
}

// string instrument_uid = 2;
inline void PositionsOptions::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PositionsOptions::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsOptions.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsOptions::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsOptions.instrument_uid)
}
inline std::string* PositionsOptions::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsOptions.instrument_uid)
  return _s;
}
inline const std::string& PositionsOptions::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void PositionsOptions::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsOptions::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsOptions::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsOptions.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void PositionsOptions::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsOptions.instrument_uid)
}

// int64 blocked = 11;
inline void PositionsOptions::clear_blocked() {
  _impl_.blocked_ = int64_t{0};
}
inline int64_t PositionsOptions::_internal_blocked() const {
  return _impl_.blocked_;
}
inline int64_t PositionsOptions::blocked() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsOptions.blocked)
  return _internal_blocked();
}
inline void PositionsOptions::_internal_set_blocked(int64_t value) {
  
  _impl_.blocked_ = value;
}
inline void PositionsOptions::set_blocked(int64_t value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsOptions.blocked)
}

// int64 balance = 21;
inline void PositionsOptions::clear_balance() {
  _impl_.balance_ = int64_t{0};
}
inline int64_t PositionsOptions::_internal_balance() const {
  return _impl_.balance_;
}
inline int64_t PositionsOptions::balance() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsOptions.balance)
  return _internal_balance();
}
inline void PositionsOptions::_internal_set_balance(int64_t value) {
  
  _impl_.balance_ = value;
}
inline void PositionsOptions::set_balance(int64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsOptions.balance)
}

// -------------------------------------------------------------------

// BrokerReportRequest

// .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest generate_broker_report_request = 1;
inline bool BrokerReportRequest::_internal_has_generate_broker_report_request() const {
  return payload_case() == kGenerateBrokerReportRequest;
}
inline bool BrokerReportRequest::has_generate_broker_report_request() const {
  return _internal_has_generate_broker_report_request();
}
inline void BrokerReportRequest::set_has_generate_broker_report_request() {
  _impl_._oneof_case_[0] = kGenerateBrokerReportRequest;
}
inline void BrokerReportRequest::clear_generate_broker_report_request() {
  if (_internal_has_generate_broker_report_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.generate_broker_report_request_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::release_generate_broker_report_request() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
  if (_internal_has_generate_broker_report_request()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* temp = _impl_.payload_.generate_broker_report_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.generate_broker_report_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& BrokerReportRequest::_internal_generate_broker_report_request() const {
  return _internal_has_generate_broker_report_request()
      ? *_impl_.payload_.generate_broker_report_request_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GenerateBrokerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& BrokerReportRequest::generate_broker_report_request() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
  return _internal_generate_broker_report_request();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::unsafe_arena_release_generate_broker_report_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
  if (_internal_has_generate_broker_report_request()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* temp = _impl_.payload_.generate_broker_report_request_;
    _impl_.payload_.generate_broker_report_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BrokerReportRequest::unsafe_arena_set_allocated_generate_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* generate_broker_report_request) {
  clear_payload();
  if (generate_broker_report_request) {
    set_has_generate_broker_report_request();
    _impl_.payload_.generate_broker_report_request_ = generate_broker_report_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::_internal_mutable_generate_broker_report_request() {
  if (!_internal_has_generate_broker_report_request()) {
    clear_payload();
    set_has_generate_broker_report_request();
    _impl_.payload_.generate_broker_report_request_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest >(GetArenaForAllocation());
  }
  return _impl_.payload_.generate_broker_report_request_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::mutable_generate_broker_report_request() {
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* _msg = _internal_mutable_generate_broker_report_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest get_broker_report_request = 2;
inline bool BrokerReportRequest::_internal_has_get_broker_report_request() const {
  return payload_case() == kGetBrokerReportRequest;
}
inline bool BrokerReportRequest::has_get_broker_report_request() const {
  return _internal_has_get_broker_report_request();
}
inline void BrokerReportRequest::set_has_get_broker_report_request() {
  _impl_._oneof_case_[0] = kGetBrokerReportRequest;
}
inline void BrokerReportRequest::clear_get_broker_report_request() {
  if (_internal_has_get_broker_report_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.get_broker_report_request_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::release_get_broker_report_request() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
  if (_internal_has_get_broker_report_request()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* temp = _impl_.payload_.get_broker_report_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_broker_report_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& BrokerReportRequest::_internal_get_broker_report_request() const {
  return _internal_has_get_broker_report_request()
      ? *_impl_.payload_.get_broker_report_request_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GetBrokerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& BrokerReportRequest::get_broker_report_request() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
  return _internal_get_broker_report_request();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::unsafe_arena_release_get_broker_report_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
  if (_internal_has_get_broker_report_request()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* temp = _impl_.payload_.get_broker_report_request_;
    _impl_.payload_.get_broker_report_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BrokerReportRequest::unsafe_arena_set_allocated_get_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* get_broker_report_request) {
  clear_payload();
  if (get_broker_report_request) {
    set_has_get_broker_report_request();
    _impl_.payload_.get_broker_report_request_ = get_broker_report_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::_internal_mutable_get_broker_report_request() {
  if (!_internal_has_get_broker_report_request()) {
    clear_payload();
    set_has_get_broker_report_request();
    _impl_.payload_.get_broker_report_request_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest >(GetArenaForAllocation());
  }
  return _impl_.payload_.get_broker_report_request_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::mutable_get_broker_report_request() {
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* _msg = _internal_mutable_get_broker_report_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
  return _msg;
}

inline bool BrokerReportRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void BrokerReportRequest::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline BrokerReportRequest::PayloadCase BrokerReportRequest::payload_case() const {
  return BrokerReportRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BrokerReportResponse

// .tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse generate_broker_report_response = 1;
inline bool BrokerReportResponse::_internal_has_generate_broker_report_response() const {
  return payload_case() == kGenerateBrokerReportResponse;
}
inline bool BrokerReportResponse::has_generate_broker_report_response() const {
  return _internal_has_generate_broker_report_response();
}
inline void BrokerReportResponse::set_has_generate_broker_report_response() {
  _impl_._oneof_case_[0] = kGenerateBrokerReportResponse;
}
inline void BrokerReportResponse::clear_generate_broker_report_response() {
  if (_internal_has_generate_broker_report_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.generate_broker_report_response_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::release_generate_broker_report_response() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
  if (_internal_has_generate_broker_report_response()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* temp = _impl_.payload_.generate_broker_report_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.generate_broker_report_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& BrokerReportResponse::_internal_generate_broker_report_response() const {
  return _internal_has_generate_broker_report_response()
      ? *_impl_.payload_.generate_broker_report_response_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GenerateBrokerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& BrokerReportResponse::generate_broker_report_response() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
  return _internal_generate_broker_report_response();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::unsafe_arena_release_generate_broker_report_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
  if (_internal_has_generate_broker_report_response()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* temp = _impl_.payload_.generate_broker_report_response_;
    _impl_.payload_.generate_broker_report_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BrokerReportResponse::unsafe_arena_set_allocated_generate_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* generate_broker_report_response) {
  clear_payload();
  if (generate_broker_report_response) {
    set_has_generate_broker_report_response();
    _impl_.payload_.generate_broker_report_response_ = generate_broker_report_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::_internal_mutable_generate_broker_report_response() {
  if (!_internal_has_generate_broker_report_response()) {
    clear_payload();
    set_has_generate_broker_report_response();
    _impl_.payload_.generate_broker_report_response_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse >(GetArenaForAllocation());
  }
  return _impl_.payload_.generate_broker_report_response_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::mutable_generate_broker_report_response() {
  ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* _msg = _internal_mutable_generate_broker_report_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse get_broker_report_response = 2;
inline bool BrokerReportResponse::_internal_has_get_broker_report_response() const {
  return payload_case() == kGetBrokerReportResponse;
}
inline bool BrokerReportResponse::has_get_broker_report_response() const {
  return _internal_has_get_broker_report_response();
}
inline void BrokerReportResponse::set_has_get_broker_report_response() {
  _impl_._oneof_case_[0] = kGetBrokerReportResponse;
}
inline void BrokerReportResponse::clear_get_broker_report_response() {
  if (_internal_has_get_broker_report_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.get_broker_report_response_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::release_get_broker_report_response() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
  if (_internal_has_get_broker_report_response()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* temp = _impl_.payload_.get_broker_report_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_broker_report_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& BrokerReportResponse::_internal_get_broker_report_response() const {
  return _internal_has_get_broker_report_response()
      ? *_impl_.payload_.get_broker_report_response_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GetBrokerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& BrokerReportResponse::get_broker_report_response() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
  return _internal_get_broker_report_response();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::unsafe_arena_release_get_broker_report_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
  if (_internal_has_get_broker_report_response()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* temp = _impl_.payload_.get_broker_report_response_;
    _impl_.payload_.get_broker_report_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BrokerReportResponse::unsafe_arena_set_allocated_get_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* get_broker_report_response) {
  clear_payload();
  if (get_broker_report_response) {
    set_has_get_broker_report_response();
    _impl_.payload_.get_broker_report_response_ = get_broker_report_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::_internal_mutable_get_broker_report_response() {
  if (!_internal_has_get_broker_report_response()) {
    clear_payload();
    set_has_get_broker_report_response();
    _impl_.payload_.get_broker_report_response_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse >(GetArenaForAllocation());
  }
  return _impl_.payload_.get_broker_report_response_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::mutable_get_broker_report_response() {
  ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* _msg = _internal_mutable_get_broker_report_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
  return _msg;
}

inline bool BrokerReportResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void BrokerReportResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline BrokerReportResponse::PayloadCase BrokerReportResponse::payload_case() const {
  return BrokerReportResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GenerateBrokerReportRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GenerateBrokerReportRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GenerateBrokerReportRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateBrokerReportRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
}
inline std::string* GenerateBrokerReportRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
  return _s;
}
inline const std::string& GenerateBrokerReportRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GenerateBrokerReportRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateBrokerReportRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateBrokerReportRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GenerateBrokerReportRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
}

// .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool GenerateBrokerReportRequest::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool GenerateBrokerReportRequest::has_from() const {
  return _internal_has_from();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateBrokerReportRequest::_internal_from() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateBrokerReportRequest::from() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.from)
  return _internal_from();
}
inline void GenerateBrokerReportRequest::unsafe_arena_set_allocated_from(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.from)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::release_from() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.from)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::mutable_from() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.from)
  return _msg;
}
inline void GenerateBrokerReportRequest::set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.from)
}

// .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool GenerateBrokerReportRequest::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool GenerateBrokerReportRequest::has_to() const {
  return _internal_has_to();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateBrokerReportRequest::_internal_to() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateBrokerReportRequest::to() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.to)
  return _internal_to();
}
inline void GenerateBrokerReportRequest::unsafe_arena_set_allocated_to(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.to)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::release_to() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.to)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateBrokerReportRequest::mutable_to() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.to)
  return _msg;
}
inline void GenerateBrokerReportRequest::set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportRequest.to)
}

// -------------------------------------------------------------------

// GenerateBrokerReportResponse

// string task_id = 1;
inline void GenerateBrokerReportResponse::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& GenerateBrokerReportResponse::task_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateBrokerReportResponse::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
}
inline std::string* GenerateBrokerReportResponse::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
  return _s;
}
inline const std::string& GenerateBrokerReportResponse::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void GenerateBrokerReportResponse::_internal_set_task_id(const std::string& value) {
  
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateBrokerReportResponse::_internal_mutable_task_id() {
  
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateBrokerReportResponse::release_task_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
  return _impl_.task_id_.Release();
}
inline void GenerateBrokerReportResponse::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
}

// -------------------------------------------------------------------

// GetBrokerReportRequest

// string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetBrokerReportRequest::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& GetBrokerReportRequest::task_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBrokerReportRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.task_id)
}
inline std::string* GetBrokerReportRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.task_id)
  return _s;
}
inline const std::string& GetBrokerReportRequest::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void GetBrokerReportRequest::_internal_set_task_id(const std::string& value) {
  
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBrokerReportRequest::_internal_mutable_task_id() {
  
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBrokerReportRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.task_id)
  return _impl_.task_id_.Release();
}
inline void GetBrokerReportRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.task_id)
}

// optional int32 page = 2;
inline bool GetBrokerReportRequest::_internal_has_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBrokerReportRequest::has_page() const {
  return _internal_has_page();
}
inline void GetBrokerReportRequest::clear_page() {
  _impl_.page_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t GetBrokerReportRequest::_internal_page() const {
  return _impl_.page_;
}
inline int32_t GetBrokerReportRequest::page() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.page)
  return _internal_page();
}
inline void GetBrokerReportRequest::_internal_set_page(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.page_ = value;
}
inline void GetBrokerReportRequest::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBrokerReportRequest.page)
}

// -------------------------------------------------------------------

// GetBrokerReportResponse

// repeated .tinkoff.public_.invest.api.contract.v1.BrokerReport broker_report = 1;
inline int GetBrokerReportResponse::_internal_broker_report_size() const {
  return _impl_.broker_report_.size();
}
inline int GetBrokerReportResponse::broker_report_size() const {
  return _internal_broker_report_size();
}
inline void GetBrokerReportResponse::clear_broker_report() {
  _impl_.broker_report_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::BrokerReport* GetBrokerReportResponse::mutable_broker_report(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
  return _impl_.broker_report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::BrokerReport >*
GetBrokerReportResponse::mutable_broker_report() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
  return &_impl_.broker_report_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrokerReport& GetBrokerReportResponse::_internal_broker_report(int index) const {
  return _impl_.broker_report_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrokerReport& GetBrokerReportResponse::broker_report(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
  return _internal_broker_report(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::BrokerReport* GetBrokerReportResponse::_internal_add_broker_report() {
  return _impl_.broker_report_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::BrokerReport* GetBrokerReportResponse::add_broker_report() {
  ::tinkoff::public_::invest::api::contract::v1::BrokerReport* _add = _internal_add_broker_report();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::BrokerReport >&
GetBrokerReportResponse::broker_report() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
  return _impl_.broker_report_;
}

// int32 itemsCount = 2;
inline void GetBrokerReportResponse::clear_itemscount() {
  _impl_.itemscount_ = 0;
}
inline int32_t GetBrokerReportResponse::_internal_itemscount() const {
  return _impl_.itemscount_;
}
inline int32_t GetBrokerReportResponse::itemscount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.itemsCount)
  return _internal_itemscount();
}
inline void GetBrokerReportResponse::_internal_set_itemscount(int32_t value) {
  
  _impl_.itemscount_ = value;
}
inline void GetBrokerReportResponse::set_itemscount(int32_t value) {
  _internal_set_itemscount(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.itemsCount)
}

// int32 pagesCount = 3;
inline void GetBrokerReportResponse::clear_pagescount() {
  _impl_.pagescount_ = 0;
}
inline int32_t GetBrokerReportResponse::_internal_pagescount() const {
  return _impl_.pagescount_;
}
inline int32_t GetBrokerReportResponse::pagescount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.pagesCount)
  return _internal_pagescount();
}
inline void GetBrokerReportResponse::_internal_set_pagescount(int32_t value) {
  
  _impl_.pagescount_ = value;
}
inline void GetBrokerReportResponse::set_pagescount(int32_t value) {
  _internal_set_pagescount(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.pagesCount)
}

// int32 page = 4;
inline void GetBrokerReportResponse::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t GetBrokerReportResponse::_internal_page() const {
  return _impl_.page_;
}
inline int32_t GetBrokerReportResponse::page() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.page)
  return _internal_page();
}
inline void GetBrokerReportResponse::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void GetBrokerReportResponse::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBrokerReportResponse.page)
}

// -------------------------------------------------------------------

// BrokerReport

// string trade_id = 1;
inline void BrokerReport::clear_trade_id() {
  _impl_.trade_id_.ClearToEmpty();
}
inline const std::string& BrokerReport::trade_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_id)
}
inline std::string* BrokerReport::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_id)
  return _s;
}
inline const std::string& BrokerReport::_internal_trade_id() const {
  return _impl_.trade_id_.Get();
}
inline void BrokerReport::_internal_set_trade_id(const std::string& value) {
  
  _impl_.trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_trade_id() {
  
  return _impl_.trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_trade_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_id)
  return _impl_.trade_id_.Release();
}
inline void BrokerReport::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  _impl_.trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trade_id_.IsDefault()) {
    _impl_.trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_id)
}

// string order_id = 2;
inline void BrokerReport::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& BrokerReport::order_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_id)
}
inline std::string* BrokerReport::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_id)
  return _s;
}
inline const std::string& BrokerReport::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void BrokerReport::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_order_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_id)
  return _impl_.order_id_.Release();
}
inline void BrokerReport::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_id)
}

// string figi = 3;
inline void BrokerReport::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& BrokerReport::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.figi)
}
inline std::string* BrokerReport::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.figi)
  return _s;
}
inline const std::string& BrokerReport::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void BrokerReport::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.figi)
  return _impl_.figi_.Release();
}
inline void BrokerReport::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.figi)
}

// string execute_sign = 4;
inline void BrokerReport::clear_execute_sign() {
  _impl_.execute_sign_.ClearToEmpty();
}
inline const std::string& BrokerReport::execute_sign() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.execute_sign)
  return _internal_execute_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_execute_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.execute_sign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.execute_sign)
}
inline std::string* BrokerReport::mutable_execute_sign() {
  std::string* _s = _internal_mutable_execute_sign();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.execute_sign)
  return _s;
}
inline const std::string& BrokerReport::_internal_execute_sign() const {
  return _impl_.execute_sign_.Get();
}
inline void BrokerReport::_internal_set_execute_sign(const std::string& value) {
  
  _impl_.execute_sign_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_execute_sign() {
  
  return _impl_.execute_sign_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_execute_sign() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.execute_sign)
  return _impl_.execute_sign_.Release();
}
inline void BrokerReport::set_allocated_execute_sign(std::string* execute_sign) {
  if (execute_sign != nullptr) {
    
  } else {
    
  }
  _impl_.execute_sign_.SetAllocated(execute_sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.execute_sign_.IsDefault()) {
    _impl_.execute_sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.execute_sign)
}

// .google.protobuf.Timestamp trade_datetime = 5;
inline bool BrokerReport::_internal_has_trade_datetime() const {
  return this != internal_default_instance() && _impl_.trade_datetime_ != nullptr;
}
inline bool BrokerReport::has_trade_datetime() const {
  return _internal_has_trade_datetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerReport::_internal_trade_datetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.trade_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerReport::trade_datetime() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_datetime)
  return _internal_trade_datetime();
}
inline void BrokerReport::unsafe_arena_set_allocated_trade_datetime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* trade_datetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trade_datetime_);
  }
  _impl_.trade_datetime_ = trade_datetime;
  if (trade_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_datetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::release_trade_datetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.trade_datetime_;
  _impl_.trade_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::unsafe_arena_release_trade_datetime() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_datetime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.trade_datetime_;
  _impl_.trade_datetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::_internal_mutable_trade_datetime() {
  
  if (_impl_.trade_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.trade_datetime_ = p;
  }
  return _impl_.trade_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::mutable_trade_datetime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_trade_datetime();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_datetime)
  return _msg;
}
inline void BrokerReport::set_allocated_trade_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* trade_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trade_datetime_);
  }
  if (trade_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_datetime));
    if (message_arena != submessage_arena) {
      trade_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade_datetime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trade_datetime_ = trade_datetime;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.trade_datetime)
}

// string exchange = 6;
inline void BrokerReport::clear_exchange() {
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& BrokerReport::exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exchange_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange)
}
inline std::string* BrokerReport::mutable_exchange() {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange)
  return _s;
}
inline const std::string& BrokerReport::_internal_exchange() const {
  return _impl_.exchange_.Get();
}
inline void BrokerReport::_internal_set_exchange(const std::string& value) {
  
  _impl_.exchange_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_exchange() {
  
  return _impl_.exchange_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_exchange() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange)
  return _impl_.exchange_.Release();
}
inline void BrokerReport::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  _impl_.exchange_.SetAllocated(exchange, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exchange_.IsDefault()) {
    _impl_.exchange_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange)
}

// string class_code = 7;
inline void BrokerReport::clear_class_code() {
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& BrokerReport::class_code() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.class_code)
  return _internal_class_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_class_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.class_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.class_code)
}
inline std::string* BrokerReport::mutable_class_code() {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.class_code)
  return _s;
}
inline const std::string& BrokerReport::_internal_class_code() const {
  return _impl_.class_code_.Get();
}
inline void BrokerReport::_internal_set_class_code(const std::string& value) {
  
  _impl_.class_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_class_code() {
  
  return _impl_.class_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_class_code() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.class_code)
  return _impl_.class_code_.Release();
}
inline void BrokerReport::set_allocated_class_code(std::string* class_code) {
  if (class_code != nullptr) {
    
  } else {
    
  }
  _impl_.class_code_.SetAllocated(class_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.class_code_.IsDefault()) {
    _impl_.class_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.class_code)
}

// string direction = 8;
inline void BrokerReport::clear_direction() {
  _impl_.direction_.ClearToEmpty();
}
inline const std::string& BrokerReport::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_direction(ArgT0&& arg0, ArgT... args) {
 
 _impl_.direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.direction)
}
inline std::string* BrokerReport::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.direction)
  return _s;
}
inline const std::string& BrokerReport::_internal_direction() const {
  return _impl_.direction_.Get();
}
inline void BrokerReport::_internal_set_direction(const std::string& value) {
  
  _impl_.direction_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_direction() {
  
  return _impl_.direction_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_direction() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.direction)
  return _impl_.direction_.Release();
}
inline void BrokerReport::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  _impl_.direction_.SetAllocated(direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.direction_.IsDefault()) {
    _impl_.direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.direction)
}

// string name = 9;
inline void BrokerReport::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BrokerReport::name() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.name)
}
inline std::string* BrokerReport::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.name)
  return _s;
}
inline const std::string& BrokerReport::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BrokerReport::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_name() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.name)
  return _impl_.name_.Release();
}
inline void BrokerReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.name)
}

// string ticker = 10;
inline void BrokerReport::clear_ticker() {
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& BrokerReport::ticker() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.ticker)
  return _internal_ticker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_ticker(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ticker_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.ticker)
}
inline std::string* BrokerReport::mutable_ticker() {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.ticker)
  return _s;
}
inline const std::string& BrokerReport::_internal_ticker() const {
  return _impl_.ticker_.Get();
}
inline void BrokerReport::_internal_set_ticker(const std::string& value) {
  
  _impl_.ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_ticker() {
  
  return _impl_.ticker_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_ticker() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.ticker)
  return _impl_.ticker_.Release();
}
inline void BrokerReport::set_allocated_ticker(std::string* ticker) {
  if (ticker != nullptr) {
    
  } else {
    
  }
  _impl_.ticker_.SetAllocated(ticker, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ticker_.IsDefault()) {
    _impl_.ticker_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.ticker)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 11;
inline bool BrokerReport::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool BrokerReport::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.price)
  return _internal_price();
}
inline void BrokerReport::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.price)
  return _msg;
}
inline void BrokerReport::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.price)
}

// int64 quantity = 12;
inline void BrokerReport::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t BrokerReport::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t BrokerReport::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.quantity)
  return _internal_quantity();
}
inline void BrokerReport::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void BrokerReport::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.quantity)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue order_amount = 13;
inline bool BrokerReport::_internal_has_order_amount() const {
  return this != internal_default_instance() && _impl_.order_amount_ != nullptr;
}
inline bool BrokerReport::has_order_amount() const {
  return _internal_has_order_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_order_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.order_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::order_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_amount)
  return _internal_order_amount();
}
inline void BrokerReport::unsafe_arena_set_allocated_order_amount(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* order_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_amount_);
  }
  _impl_.order_amount_ = order_amount;
  if (order_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_order_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.order_amount_;
  _impl_.order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_order_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.order_amount_;
  _impl_.order_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_order_amount() {
  
  if (_impl_.order_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.order_amount_ = p;
  }
  return _impl_.order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_order_amount() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_order_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_amount)
  return _msg;
}
inline void BrokerReport::set_allocated_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* order_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_amount_);
  }
  if (order_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_amount));
    if (message_arena != submessage_arena) {
      order_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_amount_ = order_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.order_amount)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation aci_value = 14;
inline bool BrokerReport::_internal_has_aci_value() const {
  return this != internal_default_instance() && _impl_.aci_value_ != nullptr;
}
inline bool BrokerReport::has_aci_value() const {
  return _internal_has_aci_value();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::_internal_aci_value() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.aci_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::aci_value() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.aci_value)
  return _internal_aci_value();
}
inline void BrokerReport::unsafe_arena_set_allocated_aci_value(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* aci_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aci_value_);
  }
  _impl_.aci_value_ = aci_value;
  if (aci_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.aci_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::release_aci_value() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::unsafe_arena_release_aci_value() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.aci_value)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::_internal_mutable_aci_value() {
  
  if (_impl_.aci_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.aci_value_ = p;
  }
  return _impl_.aci_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::mutable_aci_value() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_aci_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.aci_value)
  return _msg;
}
inline void BrokerReport::set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::Quotation* aci_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aci_value_);
  }
  if (aci_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aci_value));
    if (message_arena != submessage_arena) {
      aci_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aci_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aci_value_ = aci_value;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.aci_value)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue total_order_amount = 15;
inline bool BrokerReport::_internal_has_total_order_amount() const {
  return this != internal_default_instance() && _impl_.total_order_amount_ != nullptr;
}
inline bool BrokerReport::has_total_order_amount() const {
  return _internal_has_total_order_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_total_order_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_order_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::total_order_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.total_order_amount)
  return _internal_total_order_amount();
}
inline void BrokerReport::unsafe_arena_set_allocated_total_order_amount(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  _impl_.total_order_amount_ = total_order_amount;
  if (total_order_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.total_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_total_order_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_total_order_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.total_order_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
  _impl_.total_order_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_total_order_amount() {
  
  if (_impl_.total_order_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.total_order_amount_ = p;
  }
  return _impl_.total_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_total_order_amount() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_order_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.total_order_amount)
  return _msg;
}
inline void BrokerReport::set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_order_amount_);
  }
  if (total_order_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_order_amount));
    if (message_arena != submessage_arena) {
      total_order_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_order_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_order_amount_ = total_order_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.total_order_amount)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue broker_commission = 16;
inline bool BrokerReport::_internal_has_broker_commission() const {
  return this != internal_default_instance() && _impl_.broker_commission_ != nullptr;
}
inline bool BrokerReport::has_broker_commission() const {
  return _internal_has_broker_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_broker_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.broker_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::broker_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_commission)
  return _internal_broker_commission();
}
inline void BrokerReport::unsafe_arena_set_allocated_broker_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* broker_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.broker_commission_);
  }
  _impl_.broker_commission_ = broker_commission;
  if (broker_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_broker_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.broker_commission_;
  _impl_.broker_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_broker_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.broker_commission_;
  _impl_.broker_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_broker_commission() {
  
  if (_impl_.broker_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.broker_commission_ = p;
  }
  return _impl_.broker_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_broker_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_broker_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_commission)
  return _msg;
}
inline void BrokerReport::set_allocated_broker_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* broker_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.broker_commission_);
  }
  if (broker_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broker_commission));
    if (message_arena != submessage_arena) {
      broker_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broker_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.broker_commission_ = broker_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_commission = 17;
inline bool BrokerReport::_internal_has_exchange_commission() const {
  return this != internal_default_instance() && _impl_.exchange_commission_ != nullptr;
}
inline bool BrokerReport::has_exchange_commission() const {
  return _internal_has_exchange_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_exchange_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.exchange_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::exchange_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_commission)
  return _internal_exchange_commission();
}
inline void BrokerReport::unsafe_arena_set_allocated_exchange_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_commission_);
  }
  _impl_.exchange_commission_ = exchange_commission;
  if (exchange_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_exchange_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.exchange_commission_;
  _impl_.exchange_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_exchange_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.exchange_commission_;
  _impl_.exchange_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_exchange_commission() {
  
  if (_impl_.exchange_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.exchange_commission_ = p;
  }
  return _impl_.exchange_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_exchange_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_exchange_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_commission)
  return _msg;
}
inline void BrokerReport::set_allocated_exchange_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_commission_);
  }
  if (exchange_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_commission));
    if (message_arena != submessage_arena) {
      exchange_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exchange_commission_ = exchange_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue exchange_clearing_commission = 18;
inline bool BrokerReport::_internal_has_exchange_clearing_commission() const {
  return this != internal_default_instance() && _impl_.exchange_clearing_commission_ != nullptr;
}
inline bool BrokerReport::has_exchange_clearing_commission() const {
  return _internal_has_exchange_clearing_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_exchange_clearing_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.exchange_clearing_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::exchange_clearing_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
  return _internal_exchange_clearing_commission();
}
inline void BrokerReport::unsafe_arena_set_allocated_exchange_clearing_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_clearing_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_clearing_commission_);
  }
  _impl_.exchange_clearing_commission_ = exchange_clearing_commission;
  if (exchange_clearing_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_exchange_clearing_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.exchange_clearing_commission_;
  _impl_.exchange_clearing_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_exchange_clearing_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.exchange_clearing_commission_;
  _impl_.exchange_clearing_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_exchange_clearing_commission() {
  
  if (_impl_.exchange_clearing_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.exchange_clearing_commission_ = p;
  }
  return _impl_.exchange_clearing_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_exchange_clearing_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_exchange_clearing_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
  return _msg;
}
inline void BrokerReport::set_allocated_exchange_clearing_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_clearing_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_clearing_commission_);
  }
  if (exchange_clearing_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_clearing_commission));
    if (message_arena != submessage_arena) {
      exchange_clearing_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_clearing_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exchange_clearing_commission_ = exchange_clearing_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation repo_rate = 19;
inline bool BrokerReport::_internal_has_repo_rate() const {
  return this != internal_default_instance() && _impl_.repo_rate_ != nullptr;
}
inline bool BrokerReport::has_repo_rate() const {
  return _internal_has_repo_rate();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::_internal_repo_rate() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.repo_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::repo_rate() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.repo_rate)
  return _internal_repo_rate();
}
inline void BrokerReport::unsafe_arena_set_allocated_repo_rate(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* repo_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.repo_rate_);
  }
  _impl_.repo_rate_ = repo_rate;
  if (repo_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.repo_rate)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::release_repo_rate() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.repo_rate_;
  _impl_.repo_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::unsafe_arena_release_repo_rate() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.repo_rate)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.repo_rate_;
  _impl_.repo_rate_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::_internal_mutable_repo_rate() {
  
  if (_impl_.repo_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.repo_rate_ = p;
  }
  return _impl_.repo_rate_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::mutable_repo_rate() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_repo_rate();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.repo_rate)
  return _msg;
}
inline void BrokerReport::set_allocated_repo_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* repo_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.repo_rate_);
  }
  if (repo_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(repo_rate));
    if (message_arena != submessage_arena) {
      repo_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repo_rate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.repo_rate_ = repo_rate;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.repo_rate)
}

// string party = 20;
inline void BrokerReport::clear_party() {
  _impl_.party_.ClearToEmpty();
}
inline const std::string& BrokerReport::party() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.party)
  return _internal_party();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_party(ArgT0&& arg0, ArgT... args) {
 
 _impl_.party_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.party)
}
inline std::string* BrokerReport::mutable_party() {
  std::string* _s = _internal_mutable_party();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.party)
  return _s;
}
inline const std::string& BrokerReport::_internal_party() const {
  return _impl_.party_.Get();
}
inline void BrokerReport::_internal_set_party(const std::string& value) {
  
  _impl_.party_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_party() {
  
  return _impl_.party_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_party() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.party)
  return _impl_.party_.Release();
}
inline void BrokerReport::set_allocated_party(std::string* party) {
  if (party != nullptr) {
    
  } else {
    
  }
  _impl_.party_.SetAllocated(party, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.party_.IsDefault()) {
    _impl_.party_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.party)
}

// .google.protobuf.Timestamp clear_value_date = 21;
inline bool BrokerReport::_internal_has_clear_value_date() const {
  return this != internal_default_instance() && _impl_.clear_value_date_ != nullptr;
}
inline bool BrokerReport::has_clear_value_date() const {
  return _internal_has_clear_value_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerReport::_internal_clear_value_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.clear_value_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerReport::clear_value_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.clear_value_date)
  return _internal_clear_value_date();
}
inline void BrokerReport::unsafe_arena_set_allocated_clear_value_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* clear_value_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clear_value_date_);
  }
  _impl_.clear_value_date_ = clear_value_date;
  if (clear_value_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.clear_value_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::release_clear_value_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.clear_value_date_;
  _impl_.clear_value_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::unsafe_arena_release_clear_value_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.clear_value_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.clear_value_date_;
  _impl_.clear_value_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::_internal_mutable_clear_value_date() {
  
  if (_impl_.clear_value_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.clear_value_date_ = p;
  }
  return _impl_.clear_value_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::mutable_clear_value_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_clear_value_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.clear_value_date)
  return _msg;
}
inline void BrokerReport::set_allocated_clear_value_date(::PROTOBUF_NAMESPACE_ID::Timestamp* clear_value_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clear_value_date_);
  }
  if (clear_value_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_value_date));
    if (message_arena != submessage_arena) {
      clear_value_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_value_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clear_value_date_ = clear_value_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.clear_value_date)
}

// .google.protobuf.Timestamp sec_value_date = 22;
inline bool BrokerReport::_internal_has_sec_value_date() const {
  return this != internal_default_instance() && _impl_.sec_value_date_ != nullptr;
}
inline bool BrokerReport::has_sec_value_date() const {
  return _internal_has_sec_value_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerReport::_internal_sec_value_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.sec_value_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerReport::sec_value_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.sec_value_date)
  return _internal_sec_value_date();
}
inline void BrokerReport::unsafe_arena_set_allocated_sec_value_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* sec_value_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sec_value_date_);
  }
  _impl_.sec_value_date_ = sec_value_date;
  if (sec_value_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.sec_value_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::release_sec_value_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.sec_value_date_;
  _impl_.sec_value_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::unsafe_arena_release_sec_value_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.sec_value_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.sec_value_date_;
  _impl_.sec_value_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::_internal_mutable_sec_value_date() {
  
  if (_impl_.sec_value_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.sec_value_date_ = p;
  }
  return _impl_.sec_value_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerReport::mutable_sec_value_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_sec_value_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.sec_value_date)
  return _msg;
}
inline void BrokerReport::set_allocated_sec_value_date(::PROTOBUF_NAMESPACE_ID::Timestamp* sec_value_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sec_value_date_);
  }
  if (sec_value_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_value_date));
    if (message_arena != submessage_arena) {
      sec_value_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sec_value_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sec_value_date_ = sec_value_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.sec_value_date)
}

// string broker_status = 23;
inline void BrokerReport::clear_broker_status() {
  _impl_.broker_status_.ClearToEmpty();
}
inline const std::string& BrokerReport::broker_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_status)
  return _internal_broker_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_broker_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.broker_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_status)
}
inline std::string* BrokerReport::mutable_broker_status() {
  std::string* _s = _internal_mutable_broker_status();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_status)
  return _s;
}
inline const std::string& BrokerReport::_internal_broker_status() const {
  return _impl_.broker_status_.Get();
}
inline void BrokerReport::_internal_set_broker_status(const std::string& value) {
  
  _impl_.broker_status_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_broker_status() {
  
  return _impl_.broker_status_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_broker_status() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_status)
  return _impl_.broker_status_.Release();
}
inline void BrokerReport::set_allocated_broker_status(std::string* broker_status) {
  if (broker_status != nullptr) {
    
  } else {
    
  }
  _impl_.broker_status_.SetAllocated(broker_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broker_status_.IsDefault()) {
    _impl_.broker_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.broker_status)
}

// string separate_agreement_type = 24;
inline void BrokerReport::clear_separate_agreement_type() {
  _impl_.separate_agreement_type_.ClearToEmpty();
}
inline const std::string& BrokerReport::separate_agreement_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_type)
  return _internal_separate_agreement_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_separate_agreement_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.separate_agreement_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_type)
}
inline std::string* BrokerReport::mutable_separate_agreement_type() {
  std::string* _s = _internal_mutable_separate_agreement_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_type)
  return _s;
}
inline const std::string& BrokerReport::_internal_separate_agreement_type() const {
  return _impl_.separate_agreement_type_.Get();
}
inline void BrokerReport::_internal_set_separate_agreement_type(const std::string& value) {
  
  _impl_.separate_agreement_type_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_separate_agreement_type() {
  
  return _impl_.separate_agreement_type_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_separate_agreement_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_type)
  return _impl_.separate_agreement_type_.Release();
}
inline void BrokerReport::set_allocated_separate_agreement_type(std::string* separate_agreement_type) {
  if (separate_agreement_type != nullptr) {
    
  } else {
    
  }
  _impl_.separate_agreement_type_.SetAllocated(separate_agreement_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.separate_agreement_type_.IsDefault()) {
    _impl_.separate_agreement_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_type)
}

// string separate_agreement_number = 25;
inline void BrokerReport::clear_separate_agreement_number() {
  _impl_.separate_agreement_number_.ClearToEmpty();
}
inline const std::string& BrokerReport::separate_agreement_number() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_number)
  return _internal_separate_agreement_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_separate_agreement_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.separate_agreement_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_number)
}
inline std::string* BrokerReport::mutable_separate_agreement_number() {
  std::string* _s = _internal_mutable_separate_agreement_number();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_number)
  return _s;
}
inline const std::string& BrokerReport::_internal_separate_agreement_number() const {
  return _impl_.separate_agreement_number_.Get();
}
inline void BrokerReport::_internal_set_separate_agreement_number(const std::string& value) {
  
  _impl_.separate_agreement_number_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_separate_agreement_number() {
  
  return _impl_.separate_agreement_number_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_separate_agreement_number() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_number)
  return _impl_.separate_agreement_number_.Release();
}
inline void BrokerReport::set_allocated_separate_agreement_number(std::string* separate_agreement_number) {
  if (separate_agreement_number != nullptr) {
    
  } else {
    
  }
  _impl_.separate_agreement_number_.SetAllocated(separate_agreement_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.separate_agreement_number_.IsDefault()) {
    _impl_.separate_agreement_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_number)
}

// string separate_agreement_date = 26;
inline void BrokerReport::clear_separate_agreement_date() {
  _impl_.separate_agreement_date_.ClearToEmpty();
}
inline const std::string& BrokerReport::separate_agreement_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_date)
  return _internal_separate_agreement_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_separate_agreement_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.separate_agreement_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_date)
}
inline std::string* BrokerReport::mutable_separate_agreement_date() {
  std::string* _s = _internal_mutable_separate_agreement_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_date)
  return _s;
}
inline const std::string& BrokerReport::_internal_separate_agreement_date() const {
  return _impl_.separate_agreement_date_.Get();
}
inline void BrokerReport::_internal_set_separate_agreement_date(const std::string& value) {
  
  _impl_.separate_agreement_date_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_separate_agreement_date() {
  
  return _impl_.separate_agreement_date_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_separate_agreement_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_date)
  return _impl_.separate_agreement_date_.Release();
}
inline void BrokerReport::set_allocated_separate_agreement_date(std::string* separate_agreement_date) {
  if (separate_agreement_date != nullptr) {
    
  } else {
    
  }
  _impl_.separate_agreement_date_.SetAllocated(separate_agreement_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.separate_agreement_date_.IsDefault()) {
    _impl_.separate_agreement_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.separate_agreement_date)
}

// string delivery_type = 27;
inline void BrokerReport::clear_delivery_type() {
  _impl_.delivery_type_.ClearToEmpty();
}
inline const std::string& BrokerReport::delivery_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BrokerReport.delivery_type)
  return _internal_delivery_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerReport::set_delivery_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.delivery_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.BrokerReport.delivery_type)
}
inline std::string* BrokerReport::mutable_delivery_type() {
  std::string* _s = _internal_mutable_delivery_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BrokerReport.delivery_type)
  return _s;
}
inline const std::string& BrokerReport::_internal_delivery_type() const {
  return _impl_.delivery_type_.Get();
}
inline void BrokerReport::_internal_set_delivery_type(const std::string& value) {
  
  _impl_.delivery_type_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerReport::_internal_mutable_delivery_type() {
  
  return _impl_.delivery_type_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerReport::release_delivery_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BrokerReport.delivery_type)
  return _impl_.delivery_type_.Release();
}
inline void BrokerReport::set_allocated_delivery_type(std::string* delivery_type) {
  if (delivery_type != nullptr) {
    
  } else {
    
  }
  _impl_.delivery_type_.SetAllocated(delivery_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delivery_type_.IsDefault()) {
    _impl_.delivery_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BrokerReport.delivery_type)
}

// -------------------------------------------------------------------

// GetDividendsForeignIssuerRequest

// .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest generate_div_foreign_issuer_report = 1;
inline bool GetDividendsForeignIssuerRequest::_internal_has_generate_div_foreign_issuer_report() const {
  return payload_case() == kGenerateDivForeignIssuerReport;
}
inline bool GetDividendsForeignIssuerRequest::has_generate_div_foreign_issuer_report() const {
  return _internal_has_generate_div_foreign_issuer_report();
}
inline void GetDividendsForeignIssuerRequest::set_has_generate_div_foreign_issuer_report() {
  _impl_._oneof_case_[0] = kGenerateDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerRequest::clear_generate_div_foreign_issuer_report() {
  if (_internal_has_generate_div_foreign_issuer_report()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.generate_div_foreign_issuer_report_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::release_generate_div_foreign_issuer_report() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
  if (_internal_has_generate_div_foreign_issuer_report()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* temp = _impl_.payload_.generate_div_foreign_issuer_report_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.generate_div_foreign_issuer_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::_internal_generate_div_foreign_issuer_report() const {
  return _internal_has_generate_div_foreign_issuer_report()
      ? *_impl_.payload_.generate_div_foreign_issuer_report_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GenerateDividendsForeignIssuerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::generate_div_foreign_issuer_report() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
  return _internal_generate_div_foreign_issuer_report();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::unsafe_arena_release_generate_div_foreign_issuer_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
  if (_internal_has_generate_div_foreign_issuer_report()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* temp = _impl_.payload_.generate_div_foreign_issuer_report_;
    _impl_.payload_.generate_div_foreign_issuer_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetDividendsForeignIssuerRequest::unsafe_arena_set_allocated_generate_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* generate_div_foreign_issuer_report) {
  clear_payload();
  if (generate_div_foreign_issuer_report) {
    set_has_generate_div_foreign_issuer_report();
    _impl_.payload_.generate_div_foreign_issuer_report_ = generate_div_foreign_issuer_report;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::_internal_mutable_generate_div_foreign_issuer_report() {
  if (!_internal_has_generate_div_foreign_issuer_report()) {
    clear_payload();
    set_has_generate_div_foreign_issuer_report();
    _impl_.payload_.generate_div_foreign_issuer_report_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest >(GetArenaForAllocation());
  }
  return _impl_.payload_.generate_div_foreign_issuer_report_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::mutable_generate_div_foreign_issuer_report() {
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* _msg = _internal_mutable_generate_div_foreign_issuer_report();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest get_div_foreign_issuer_report = 2;
inline bool GetDividendsForeignIssuerRequest::_internal_has_get_div_foreign_issuer_report() const {
  return payload_case() == kGetDivForeignIssuerReport;
}
inline bool GetDividendsForeignIssuerRequest::has_get_div_foreign_issuer_report() const {
  return _internal_has_get_div_foreign_issuer_report();
}
inline void GetDividendsForeignIssuerRequest::set_has_get_div_foreign_issuer_report() {
  _impl_._oneof_case_[0] = kGetDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerRequest::clear_get_div_foreign_issuer_report() {
  if (_internal_has_get_div_foreign_issuer_report()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.get_div_foreign_issuer_report_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::release_get_div_foreign_issuer_report() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
  if (_internal_has_get_div_foreign_issuer_report()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* temp = _impl_.payload_.get_div_foreign_issuer_report_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_div_foreign_issuer_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::_internal_get_div_foreign_issuer_report() const {
  return _internal_has_get_div_foreign_issuer_report()
      ? *_impl_.payload_.get_div_foreign_issuer_report_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::get_div_foreign_issuer_report() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
  return _internal_get_div_foreign_issuer_report();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::unsafe_arena_release_get_div_foreign_issuer_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
  if (_internal_has_get_div_foreign_issuer_report()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* temp = _impl_.payload_.get_div_foreign_issuer_report_;
    _impl_.payload_.get_div_foreign_issuer_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetDividendsForeignIssuerRequest::unsafe_arena_set_allocated_get_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* get_div_foreign_issuer_report) {
  clear_payload();
  if (get_div_foreign_issuer_report) {
    set_has_get_div_foreign_issuer_report();
    _impl_.payload_.get_div_foreign_issuer_report_ = get_div_foreign_issuer_report;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::_internal_mutable_get_div_foreign_issuer_report() {
  if (!_internal_has_get_div_foreign_issuer_report()) {
    clear_payload();
    set_has_get_div_foreign_issuer_report();
    _impl_.payload_.get_div_foreign_issuer_report_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest >(GetArenaForAllocation());
  }
  return _impl_.payload_.get_div_foreign_issuer_report_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::mutable_get_div_foreign_issuer_report() {
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* _msg = _internal_mutable_get_div_foreign_issuer_report();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
  return _msg;
}

inline bool GetDividendsForeignIssuerRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void GetDividendsForeignIssuerRequest::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline GetDividendsForeignIssuerRequest::PayloadCase GetDividendsForeignIssuerRequest::payload_case() const {
  return GetDividendsForeignIssuerRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetDividendsForeignIssuerResponse

// .tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse generate_div_foreign_issuer_report_response = 1;
inline bool GetDividendsForeignIssuerResponse::_internal_has_generate_div_foreign_issuer_report_response() const {
  return payload_case() == kGenerateDivForeignIssuerReportResponse;
}
inline bool GetDividendsForeignIssuerResponse::has_generate_div_foreign_issuer_report_response() const {
  return _internal_has_generate_div_foreign_issuer_report_response();
}
inline void GetDividendsForeignIssuerResponse::set_has_generate_div_foreign_issuer_report_response() {
  _impl_._oneof_case_[0] = kGenerateDivForeignIssuerReportResponse;
}
inline void GetDividendsForeignIssuerResponse::clear_generate_div_foreign_issuer_report_response() {
  if (_internal_has_generate_div_foreign_issuer_report_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.generate_div_foreign_issuer_report_response_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::release_generate_div_foreign_issuer_report_response() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
  if (_internal_has_generate_div_foreign_issuer_report_response()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* temp = _impl_.payload_.generate_div_foreign_issuer_report_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.generate_div_foreign_issuer_report_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::_internal_generate_div_foreign_issuer_report_response() const {
  return _internal_has_generate_div_foreign_issuer_report_response()
      ? *_impl_.payload_.generate_div_foreign_issuer_report_response_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GenerateDividendsForeignIssuerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::generate_div_foreign_issuer_report_response() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
  return _internal_generate_div_foreign_issuer_report_response();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::unsafe_arena_release_generate_div_foreign_issuer_report_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
  if (_internal_has_generate_div_foreign_issuer_report_response()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* temp = _impl_.payload_.generate_div_foreign_issuer_report_response_;
    _impl_.payload_.generate_div_foreign_issuer_report_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetDividendsForeignIssuerResponse::unsafe_arena_set_allocated_generate_div_foreign_issuer_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* generate_div_foreign_issuer_report_response) {
  clear_payload();
  if (generate_div_foreign_issuer_report_response) {
    set_has_generate_div_foreign_issuer_report_response();
    _impl_.payload_.generate_div_foreign_issuer_report_response_ = generate_div_foreign_issuer_report_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::_internal_mutable_generate_div_foreign_issuer_report_response() {
  if (!_internal_has_generate_div_foreign_issuer_report_response()) {
    clear_payload();
    set_has_generate_div_foreign_issuer_report_response();
    _impl_.payload_.generate_div_foreign_issuer_report_response_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse >(GetArenaForAllocation());
  }
  return _impl_.payload_.generate_div_foreign_issuer_report_response_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::mutable_generate_div_foreign_issuer_report_response() {
  ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* _msg = _internal_mutable_generate_div_foreign_issuer_report_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse div_foreign_issuer_report = 2;
inline bool GetDividendsForeignIssuerResponse::_internal_has_div_foreign_issuer_report() const {
  return payload_case() == kDivForeignIssuerReport;
}
inline bool GetDividendsForeignIssuerResponse::has_div_foreign_issuer_report() const {
  return _internal_has_div_foreign_issuer_report();
}
inline void GetDividendsForeignIssuerResponse::set_has_div_foreign_issuer_report() {
  _impl_._oneof_case_[0] = kDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerResponse::clear_div_foreign_issuer_report() {
  if (_internal_has_div_foreign_issuer_report()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.div_foreign_issuer_report_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::release_div_foreign_issuer_report() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
  if (_internal_has_div_foreign_issuer_report()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* temp = _impl_.payload_.div_foreign_issuer_report_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.div_foreign_issuer_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::_internal_div_foreign_issuer_report() const {
  return _internal_has_div_foreign_issuer_report()
      ? *_impl_.payload_.div_foreign_issuer_report_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::div_foreign_issuer_report() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
  return _internal_div_foreign_issuer_report();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::unsafe_arena_release_div_foreign_issuer_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
  if (_internal_has_div_foreign_issuer_report()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* temp = _impl_.payload_.div_foreign_issuer_report_;
    _impl_.payload_.div_foreign_issuer_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetDividendsForeignIssuerResponse::unsafe_arena_set_allocated_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* div_foreign_issuer_report) {
  clear_payload();
  if (div_foreign_issuer_report) {
    set_has_div_foreign_issuer_report();
    _impl_.payload_.div_foreign_issuer_report_ = div_foreign_issuer_report;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::_internal_mutable_div_foreign_issuer_report() {
  if (!_internal_has_div_foreign_issuer_report()) {
    clear_payload();
    set_has_div_foreign_issuer_report();
    _impl_.payload_.div_foreign_issuer_report_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse >(GetArenaForAllocation());
  }
  return _impl_.payload_.div_foreign_issuer_report_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::mutable_div_foreign_issuer_report() {
  ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* _msg = _internal_mutable_div_foreign_issuer_report();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
  return _msg;
}

inline bool GetDividendsForeignIssuerResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void GetDividendsForeignIssuerResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline GetDividendsForeignIssuerResponse::PayloadCase GetDividendsForeignIssuerResponse::payload_case() const {
  return GetDividendsForeignIssuerResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GenerateDividendsForeignIssuerReportRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GenerateDividendsForeignIssuerReportRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GenerateDividendsForeignIssuerReportRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateDividendsForeignIssuerReportRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
}
inline std::string* GenerateDividendsForeignIssuerReportRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
  return _s;
}
inline const std::string& GenerateDividendsForeignIssuerReportRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GenerateDividendsForeignIssuerReportRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateDividendsForeignIssuerReportRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateDividendsForeignIssuerReportRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GenerateDividendsForeignIssuerReportRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
}

// .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool GenerateDividendsForeignIssuerReportRequest::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool GenerateDividendsForeignIssuerReportRequest::has_from() const {
  return _internal_has_from();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateDividendsForeignIssuerReportRequest::_internal_from() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateDividendsForeignIssuerReportRequest::from() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
  return _internal_from();
}
inline void GenerateDividendsForeignIssuerReportRequest::unsafe_arena_set_allocated_from(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::release_from() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::mutable_from() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
  return _msg;
}
inline void GenerateDividendsForeignIssuerReportRequest::set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
}

// .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool GenerateDividendsForeignIssuerReportRequest::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool GenerateDividendsForeignIssuerReportRequest::has_to() const {
  return _internal_has_to();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateDividendsForeignIssuerReportRequest::_internal_to() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GenerateDividendsForeignIssuerReportRequest::to() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
  return _internal_to();
}
inline void GenerateDividendsForeignIssuerReportRequest::unsafe_arena_set_allocated_to(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::release_to() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GenerateDividendsForeignIssuerReportRequest::mutable_to() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
  return _msg;
}
inline void GenerateDividendsForeignIssuerReportRequest::set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
}

// -------------------------------------------------------------------

// GetDividendsForeignIssuerReportRequest

// string task_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetDividendsForeignIssuerReportRequest::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& GetDividendsForeignIssuerReportRequest::task_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDividendsForeignIssuerReportRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
}
inline std::string* GetDividendsForeignIssuerReportRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
  return _s;
}
inline const std::string& GetDividendsForeignIssuerReportRequest::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void GetDividendsForeignIssuerReportRequest::_internal_set_task_id(const std::string& value) {
  
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDividendsForeignIssuerReportRequest::_internal_mutable_task_id() {
  
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDividendsForeignIssuerReportRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
  return _impl_.task_id_.Release();
}
inline void GetDividendsForeignIssuerReportRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
}

// optional int32 page = 2;
inline bool GetDividendsForeignIssuerReportRequest::_internal_has_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetDividendsForeignIssuerReportRequest::has_page() const {
  return _internal_has_page();
}
inline void GetDividendsForeignIssuerReportRequest::clear_page() {
  _impl_.page_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t GetDividendsForeignIssuerReportRequest::_internal_page() const {
  return _impl_.page_;
}
inline int32_t GetDividendsForeignIssuerReportRequest::page() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.page)
  return _internal_page();
}
inline void GetDividendsForeignIssuerReportRequest::_internal_set_page(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.page_ = value;
}
inline void GetDividendsForeignIssuerReportRequest::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.page)
}

// -------------------------------------------------------------------

// GenerateDividendsForeignIssuerReportResponse

// string task_id = 1;
inline void GenerateDividendsForeignIssuerReportResponse::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& GenerateDividendsForeignIssuerReportResponse::task_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateDividendsForeignIssuerReportResponse::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
}
inline std::string* GenerateDividendsForeignIssuerReportResponse::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
  return _s;
}
inline const std::string& GenerateDividendsForeignIssuerReportResponse::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void GenerateDividendsForeignIssuerReportResponse::_internal_set_task_id(const std::string& value) {
  
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateDividendsForeignIssuerReportResponse::_internal_mutable_task_id() {
  
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateDividendsForeignIssuerReportResponse::release_task_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
  return _impl_.task_id_.Release();
}
inline void GenerateDividendsForeignIssuerReportResponse::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
}

// -------------------------------------------------------------------

// GetDividendsForeignIssuerReportResponse

// repeated .tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport dividends_foreign_issuer_report = 1;
inline int GetDividendsForeignIssuerReportResponse::_internal_dividends_foreign_issuer_report_size() const {
  return _impl_.dividends_foreign_issuer_report_.size();
}
inline int GetDividendsForeignIssuerReportResponse::dividends_foreign_issuer_report_size() const {
  return _internal_dividends_foreign_issuer_report_size();
}
inline void GetDividendsForeignIssuerReportResponse::clear_dividends_foreign_issuer_report() {
  _impl_.dividends_foreign_issuer_report_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* GetDividendsForeignIssuerReportResponse::mutable_dividends_foreign_issuer_report(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
  return _impl_.dividends_foreign_issuer_report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport >*
GetDividendsForeignIssuerReportResponse::mutable_dividends_foreign_issuer_report() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
  return &_impl_.dividends_foreign_issuer_report_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport& GetDividendsForeignIssuerReportResponse::_internal_dividends_foreign_issuer_report(int index) const {
  return _impl_.dividends_foreign_issuer_report_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport& GetDividendsForeignIssuerReportResponse::dividends_foreign_issuer_report(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
  return _internal_dividends_foreign_issuer_report(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* GetDividendsForeignIssuerReportResponse::_internal_add_dividends_foreign_issuer_report() {
  return _impl_.dividends_foreign_issuer_report_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* GetDividendsForeignIssuerReportResponse::add_dividends_foreign_issuer_report() {
  ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* _add = _internal_add_dividends_foreign_issuer_report();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport >&
GetDividendsForeignIssuerReportResponse::dividends_foreign_issuer_report() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
  return _impl_.dividends_foreign_issuer_report_;
}

// int32 itemsCount = 2;
inline void GetDividendsForeignIssuerReportResponse::clear_itemscount() {
  _impl_.itemscount_ = 0;
}
inline int32_t GetDividendsForeignIssuerReportResponse::_internal_itemscount() const {
  return _impl_.itemscount_;
}
inline int32_t GetDividendsForeignIssuerReportResponse::itemscount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.itemsCount)
  return _internal_itemscount();
}
inline void GetDividendsForeignIssuerReportResponse::_internal_set_itemscount(int32_t value) {
  
  _impl_.itemscount_ = value;
}
inline void GetDividendsForeignIssuerReportResponse::set_itemscount(int32_t value) {
  _internal_set_itemscount(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.itemsCount)
}

// int32 pagesCount = 3;
inline void GetDividendsForeignIssuerReportResponse::clear_pagescount() {
  _impl_.pagescount_ = 0;
}
inline int32_t GetDividendsForeignIssuerReportResponse::_internal_pagescount() const {
  return _impl_.pagescount_;
}
inline int32_t GetDividendsForeignIssuerReportResponse::pagescount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.pagesCount)
  return _internal_pagescount();
}
inline void GetDividendsForeignIssuerReportResponse::_internal_set_pagescount(int32_t value) {
  
  _impl_.pagescount_ = value;
}
inline void GetDividendsForeignIssuerReportResponse::set_pagescount(int32_t value) {
  _internal_set_pagescount(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.pagesCount)
}

// int32 page = 4;
inline void GetDividendsForeignIssuerReportResponse::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t GetDividendsForeignIssuerReportResponse::_internal_page() const {
  return _impl_.page_;
}
inline int32_t GetDividendsForeignIssuerReportResponse::page() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.page)
  return _internal_page();
}
inline void GetDividendsForeignIssuerReportResponse::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void GetDividendsForeignIssuerReportResponse::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.page)
}

// -------------------------------------------------------------------

// DividendsForeignIssuerReport

// .google.protobuf.Timestamp record_date = 1;
inline bool DividendsForeignIssuerReport::_internal_has_record_date() const {
  return this != internal_default_instance() && _impl_.record_date_ != nullptr;
}
inline bool DividendsForeignIssuerReport::has_record_date() const {
  return _internal_has_record_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DividendsForeignIssuerReport::_internal_record_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.record_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DividendsForeignIssuerReport::record_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
  return _internal_record_date();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_record_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* record_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.record_date_);
  }
  _impl_.record_date_ = record_date;
  if (record_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::release_record_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.record_date_;
  _impl_.record_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::unsafe_arena_release_record_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.record_date_;
  _impl_.record_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::_internal_mutable_record_date() {
  
  if (_impl_.record_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.record_date_ = p;
  }
  return _impl_.record_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::mutable_record_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_record_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
  return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_record_date(::PROTOBUF_NAMESPACE_ID::Timestamp* record_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.record_date_);
  }
  if (record_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_date));
    if (message_arena != submessage_arena) {
      record_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.record_date_ = record_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
}

// .google.protobuf.Timestamp payment_date = 2;
inline bool DividendsForeignIssuerReport::_internal_has_payment_date() const {
  return this != internal_default_instance() && _impl_.payment_date_ != nullptr;
}
inline bool DividendsForeignIssuerReport::has_payment_date() const {
  return _internal_has_payment_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DividendsForeignIssuerReport::_internal_payment_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.payment_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DividendsForeignIssuerReport::payment_date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
  return _internal_payment_date();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_payment_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* payment_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_date_);
  }
  _impl_.payment_date_ = payment_date;
  if (payment_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::release_payment_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.payment_date_;
  _impl_.payment_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::unsafe_arena_release_payment_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.payment_date_;
  _impl_.payment_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::_internal_mutable_payment_date() {
  
  if (_impl_.payment_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.payment_date_ = p;
  }
  return _impl_.payment_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DividendsForeignIssuerReport::mutable_payment_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_payment_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
  return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_payment_date(::PROTOBUF_NAMESPACE_ID::Timestamp* payment_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_date_);
  }
  if (payment_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment_date));
    if (message_arena != submessage_arena) {
      payment_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payment_date_ = payment_date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
}

// string security_name = 3;
inline void DividendsForeignIssuerReport::clear_security_name() {
  _impl_.security_name_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::security_name() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
  return _internal_security_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DividendsForeignIssuerReport::set_security_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.security_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
}
inline std::string* DividendsForeignIssuerReport::mutable_security_name() {
  std::string* _s = _internal_mutable_security_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
  return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_security_name() const {
  return _impl_.security_name_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_security_name(const std::string& value) {
  
  _impl_.security_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_security_name() {
  
  return _impl_.security_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::release_security_name() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
  return _impl_.security_name_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_security_name(std::string* security_name) {
  if (security_name != nullptr) {
    
  } else {
    
  }
  _impl_.security_name_.SetAllocated(security_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.security_name_.IsDefault()) {
    _impl_.security_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
}

// string isin = 4;
inline void DividendsForeignIssuerReport::clear_isin() {
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::isin() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
  return _internal_isin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DividendsForeignIssuerReport::set_isin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
}
inline std::string* DividendsForeignIssuerReport::mutable_isin() {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
  return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_isin() const {
  return _impl_.isin_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_isin(const std::string& value) {
  
  _impl_.isin_.Set(value, GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_isin() {
  
  return _impl_.isin_.Mutable(GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::release_isin() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
  return _impl_.isin_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_isin(std::string* isin) {
  if (isin != nullptr) {
    
  } else {
    
  }
  _impl_.isin_.SetAllocated(isin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isin_.IsDefault()) {
    _impl_.isin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
}

// string issuer_country = 5;
inline void DividendsForeignIssuerReport::clear_issuer_country() {
  _impl_.issuer_country_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::issuer_country() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
  return _internal_issuer_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DividendsForeignIssuerReport::set_issuer_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.issuer_country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
}
inline std::string* DividendsForeignIssuerReport::mutable_issuer_country() {
  std::string* _s = _internal_mutable_issuer_country();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
  return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_issuer_country() const {
  return _impl_.issuer_country_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_issuer_country(const std::string& value) {
  
  _impl_.issuer_country_.Set(value, GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_issuer_country() {
  
  return _impl_.issuer_country_.Mutable(GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::release_issuer_country() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
  return _impl_.issuer_country_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_issuer_country(std::string* issuer_country) {
  if (issuer_country != nullptr) {
    
  } else {
    
  }
  _impl_.issuer_country_.SetAllocated(issuer_country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.issuer_country_.IsDefault()) {
    _impl_.issuer_country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
}

// int64 quantity = 6;
inline void DividendsForeignIssuerReport::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t DividendsForeignIssuerReport::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t DividendsForeignIssuerReport::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.quantity)
  return _internal_quantity();
}
inline void DividendsForeignIssuerReport::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void DividendsForeignIssuerReport::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.quantity)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dividend = 7;
inline bool DividendsForeignIssuerReport::_internal_has_dividend() const {
  return this != internal_default_instance() && _impl_.dividend_ != nullptr;
}
inline bool DividendsForeignIssuerReport::has_dividend() const {
  return _internal_has_dividend();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_dividend() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dividend_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::dividend() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
  return _internal_dividend();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_dividend(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dividend_);
  }
  _impl_.dividend_ = dividend;
  if (dividend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_dividend() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_;
  _impl_.dividend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_dividend() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_;
  _impl_.dividend_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_dividend() {
  
  if (_impl_.dividend_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.dividend_ = p;
  }
  return _impl_.dividend_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_dividend() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dividend();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
  return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_dividend(::tinkoff::public_::invest::api::contract::v1::Quotation* dividend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dividend_);
  }
  if (dividend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dividend));
    if (message_arena != submessage_arena) {
      dividend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dividend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dividend_ = dividend;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation external_commission = 8;
inline bool DividendsForeignIssuerReport::_internal_has_external_commission() const {
  return this != internal_default_instance() && _impl_.external_commission_ != nullptr;
}
inline bool DividendsForeignIssuerReport::has_external_commission() const {
  return _internal_has_external_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_external_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.external_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::external_commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
  return _internal_external_commission();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_external_commission(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* external_commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.external_commission_);
  }
  _impl_.external_commission_ = external_commission;
  if (external_commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_external_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.external_commission_;
  _impl_.external_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_external_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.external_commission_;
  _impl_.external_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_external_commission() {
  
  if (_impl_.external_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.external_commission_ = p;
  }
  return _impl_.external_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_external_commission() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_external_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
  return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_external_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* external_commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.external_commission_);
  }
  if (external_commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_commission));
    if (message_arena != submessage_arena) {
      external_commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.external_commission_ = external_commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dividend_gross = 9;
inline bool DividendsForeignIssuerReport::_internal_has_dividend_gross() const {
  return this != internal_default_instance() && _impl_.dividend_gross_ != nullptr;
}
inline bool DividendsForeignIssuerReport::has_dividend_gross() const {
  return _internal_has_dividend_gross();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_dividend_gross() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dividend_gross_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::dividend_gross() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
  return _internal_dividend_gross();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_dividend_gross(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_gross) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dividend_gross_);
  }
  _impl_.dividend_gross_ = dividend_gross;
  if (dividend_gross) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_dividend_gross() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_gross_;
  _impl_.dividend_gross_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_dividend_gross() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_gross_;
  _impl_.dividend_gross_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_dividend_gross() {
  
  if (_impl_.dividend_gross_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.dividend_gross_ = p;
  }
  return _impl_.dividend_gross_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_dividend_gross() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dividend_gross();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
  return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_dividend_gross(::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_gross) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dividend_gross_);
  }
  if (dividend_gross) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dividend_gross));
    if (message_arena != submessage_arena) {
      dividend_gross = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dividend_gross, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dividend_gross_ = dividend_gross;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation tax = 10;
inline bool DividendsForeignIssuerReport::_internal_has_tax() const {
  return this != internal_default_instance() && _impl_.tax_ != nullptr;
}
inline bool DividendsForeignIssuerReport::has_tax() const {
  return _internal_has_tax();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_tax() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.tax_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::tax() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
  return _internal_tax();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_tax(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* tax) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tax_);
  }
  _impl_.tax_ = tax;
  if (tax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_tax() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.tax_;
  _impl_.tax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_tax() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.tax_;
  _impl_.tax_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_tax() {
  
  if (_impl_.tax_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.tax_ = p;
  }
  return _impl_.tax_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_tax() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_tax();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
  return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_tax(::tinkoff::public_::invest::api::contract::v1::Quotation* tax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tax_);
  }
  if (tax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tax));
    if (message_arena != submessage_arena) {
      tax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tax, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tax_ = tax;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dividend_amount = 11;
inline bool DividendsForeignIssuerReport::_internal_has_dividend_amount() const {
  return this != internal_default_instance() && _impl_.dividend_amount_ != nullptr;
}
inline bool DividendsForeignIssuerReport::has_dividend_amount() const {
  return _internal_has_dividend_amount();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_dividend_amount() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dividend_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::dividend_amount() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
  return _internal_dividend_amount();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_dividend_amount(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dividend_amount_);
  }
  _impl_.dividend_amount_ = dividend_amount;
  if (dividend_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_dividend_amount() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_amount_;
  _impl_.dividend_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_dividend_amount() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_amount_;
  _impl_.dividend_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_dividend_amount() {
  
  if (_impl_.dividend_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.dividend_amount_ = p;
  }
  return _impl_.dividend_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_dividend_amount() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dividend_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
  return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_dividend_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dividend_amount_);
  }
  if (dividend_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dividend_amount));
    if (message_arena != submessage_arena) {
      dividend_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dividend_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dividend_amount_ = dividend_amount;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
}

// string currency = 12;
inline void DividendsForeignIssuerReport::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::currency() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DividendsForeignIssuerReport::set_currency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
}
inline std::string* DividendsForeignIssuerReport::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
  return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_currency(const std::string& value) {
  
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_currency() {
  
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* DividendsForeignIssuerReport::release_currency() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
  return _impl_.currency_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
}

// -------------------------------------------------------------------

// PortfolioStreamRequest

// repeated string accounts = 1;
inline int PortfolioStreamRequest::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int PortfolioStreamRequest::accounts_size() const {
  return _internal_accounts_size();
}
inline void PortfolioStreamRequest::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline std::string* PortfolioStreamRequest::add_accounts() {
  std::string* _s = _internal_add_accounts();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
  return _s;
}
inline const std::string& PortfolioStreamRequest::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const std::string& PortfolioStreamRequest::accounts(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
  return _internal_accounts(index);
}
inline std::string* PortfolioStreamRequest::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline void PortfolioStreamRequest::set_accounts(int index, const std::string& value) {
  _impl_.accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::set_accounts(int index, std::string&& value) {
  _impl_.accounts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::set_accounts(int index, const char* value, size_t size) {
  _impl_.accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline std::string* PortfolioStreamRequest::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline void PortfolioStreamRequest::add_accounts(const std::string& value) {
  _impl_.accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(std::string&& value) {
  _impl_.accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(const char* value, size_t size) {
  _impl_.accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PortfolioStreamRequest::accounts() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
  return _impl_.accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PortfolioStreamRequest::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PortfolioStreamRequest.accounts)
  return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// PortfolioStreamResponse

// .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult subscriptions = 1;
inline bool PortfolioStreamResponse::_internal_has_subscriptions() const {
  return payload_case() == kSubscriptions;
}
inline bool PortfolioStreamResponse::has_subscriptions() const {
  return _internal_has_subscriptions();
}
inline void PortfolioStreamResponse::set_has_subscriptions() {
  _impl_._oneof_case_[0] = kSubscriptions;
}
inline void PortfolioStreamResponse::clear_subscriptions() {
  if (_internal_has_subscriptions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.subscriptions_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::release_subscriptions() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
  if (_internal_has_subscriptions()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* temp = _impl_.payload_.subscriptions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& PortfolioStreamResponse::_internal_subscriptions() const {
  return _internal_has_subscriptions()
      ? *_impl_.payload_.subscriptions_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult&>(::tinkoff::public_::invest::api::contract::v1::_PortfolioSubscriptionResult_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& PortfolioStreamResponse::subscriptions() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
  return _internal_subscriptions();
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::unsafe_arena_release_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
  if (_internal_has_subscriptions()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* temp = _impl_.payload_.subscriptions_;
    _impl_.payload_.subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PortfolioStreamResponse::unsafe_arena_set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* subscriptions) {
  clear_payload();
  if (subscriptions) {
    set_has_subscriptions();
    _impl_.payload_.subscriptions_ = subscriptions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::_internal_mutable_subscriptions() {
  if (!_internal_has_subscriptions()) {
    clear_payload();
    set_has_subscriptions();
    _impl_.payload_.subscriptions_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult >(GetArenaForAllocation());
  }
  return _impl_.payload_.subscriptions_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::mutable_subscriptions() {
  ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* _msg = _internal_mutable_subscriptions();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.PortfolioResponse portfolio = 2;
inline bool PortfolioStreamResponse::_internal_has_portfolio() const {
  return payload_case() == kPortfolio;
}
inline bool PortfolioStreamResponse::has_portfolio() const {
  return _internal_has_portfolio();
}
inline void PortfolioStreamResponse::set_has_portfolio() {
  _impl_._oneof_case_[0] = kPortfolio;
}
inline void PortfolioStreamResponse::clear_portfolio() {
  if (_internal_has_portfolio()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.portfolio_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::release_portfolio() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
  if (_internal_has_portfolio()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* temp = _impl_.payload_.portfolio_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.portfolio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& PortfolioStreamResponse::_internal_portfolio() const {
  return _internal_has_portfolio()
      ? *_impl_.payload_.portfolio_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse&>(::tinkoff::public_::invest::api::contract::v1::_PortfolioResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& PortfolioStreamResponse::portfolio() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
  return _internal_portfolio();
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::unsafe_arena_release_portfolio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
  if (_internal_has_portfolio()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* temp = _impl_.payload_.portfolio_;
    _impl_.payload_.portfolio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PortfolioStreamResponse::unsafe_arena_set_allocated_portfolio(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* portfolio) {
  clear_payload();
  if (portfolio) {
    set_has_portfolio();
    _impl_.payload_.portfolio_ = portfolio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::_internal_mutable_portfolio() {
  if (!_internal_has_portfolio()) {
    clear_payload();
    set_has_portfolio();
    _impl_.payload_.portfolio_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse >(GetArenaForAllocation());
  }
  return _impl_.payload_.portfolio_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::mutable_portfolio() {
  ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* _msg = _internal_mutable_portfolio();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
inline bool PortfolioStreamResponse::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline bool PortfolioStreamResponse::has_ping() const {
  return _internal_has_ping();
}
inline void PortfolioStreamResponse::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::release_ping() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::Ping* temp = _impl_.payload_.ping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PortfolioStreamResponse::_internal_ping() const {
  return _internal_has_ping()
      ? *_impl_.payload_.ping_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::Ping&>(::tinkoff::public_::invest::api::contract::v1::_Ping_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PortfolioStreamResponse::ping() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.ping)
  return _internal_ping();
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::Ping* temp = _impl_.payload_.ping_;
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PortfolioStreamResponse::unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  clear_payload();
  if (ping) {
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.ping)
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_payload();
    set_has_ping();
    _impl_.payload_.ping_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Ping >(GetArenaForAllocation());
  }
  return _impl_.payload_.ping_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::mutable_ping() {
  ::tinkoff::public_::invest::api::contract::v1::Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioStreamResponse.ping)
  return _msg;
}

inline bool PortfolioStreamResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void PortfolioStreamResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline PortfolioStreamResponse::PayloadCase PortfolioStreamResponse::payload_case() const {
  return PortfolioStreamResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PortfolioSubscriptionResult

// repeated .tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus accounts = 1;
inline int PortfolioSubscriptionResult::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int PortfolioSubscriptionResult::accounts_size() const {
  return _internal_accounts_size();
}
inline void PortfolioSubscriptionResult::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* PortfolioSubscriptionResult::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus >*
PortfolioSubscriptionResult::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
  return &_impl_.accounts_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus& PortfolioSubscriptionResult::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus& PortfolioSubscriptionResult::accounts(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
  return _internal_accounts(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* PortfolioSubscriptionResult::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* PortfolioSubscriptionResult::add_accounts() {
  ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus >&
PortfolioSubscriptionResult::accounts() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
  return _impl_.accounts_;
}

// -------------------------------------------------------------------

// AccountSubscriptionStatus

// string account_id = 1;
inline void AccountSubscriptionStatus::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountSubscriptionStatus::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountSubscriptionStatus::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
}
inline std::string* AccountSubscriptionStatus::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
  return _s;
}
inline const std::string& AccountSubscriptionStatus::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void AccountSubscriptionStatus::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountSubscriptionStatus::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountSubscriptionStatus::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
  return _impl_.account_id_.Release();
}
inline void AccountSubscriptionStatus::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.PortfolioSubscriptionStatus subscription_status = 6;
inline void AccountSubscriptionStatus::clear_subscription_status() {
  _impl_.subscription_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus AccountSubscriptionStatus::_internal_subscription_status() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus >(_impl_.subscription_status_);
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus AccountSubscriptionStatus::subscription_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.subscription_status)
  return _internal_subscription_status();
}
inline void AccountSubscriptionStatus::_internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value) {
  
  _impl_.subscription_status_ = value;
}
inline void AccountSubscriptionStatus::set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value) {
  _internal_set_subscription_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AccountSubscriptionStatus.subscription_status)
}

// -------------------------------------------------------------------

// GetOperationsByCursorRequest

// string account_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetOperationsByCursorRequest::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetOperationsByCursorRequest::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOperationsByCursorRequest::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
}
inline std::string* GetOperationsByCursorRequest::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
  return _s;
}
inline const std::string& GetOperationsByCursorRequest::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void GetOperationsByCursorRequest::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorRequest::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
  return _impl_.account_id_.Release();
}
inline void GetOperationsByCursorRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
}

// optional string instrument_id = 2;
inline bool GetOperationsByCursorRequest::_internal_has_instrument_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetOperationsByCursorRequest::has_instrument_id() const {
  return _internal_has_instrument_id();
}
inline void GetOperationsByCursorRequest::clear_instrument_id() {
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetOperationsByCursorRequest::instrument_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOperationsByCursorRequest::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.instrument_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
}
inline std::string* GetOperationsByCursorRequest::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
  return _s;
}
inline const std::string& GetOperationsByCursorRequest::_internal_instrument_id() const {
  return _impl_.instrument_id_.Get();
}
inline void GetOperationsByCursorRequest::_internal_set_instrument_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instrument_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorRequest::_internal_mutable_instrument_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instrument_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorRequest::release_instrument_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
  if (!_internal_has_instrument_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.instrument_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetOperationsByCursorRequest::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instrument_id_.SetAllocated(instrument_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
}

// optional .google.protobuf.Timestamp from = 6;
inline bool GetOperationsByCursorRequest::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline bool GetOperationsByCursorRequest::has_from() const {
  return _internal_has_from();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetOperationsByCursorRequest::_internal_from() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetOperationsByCursorRequest::from() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.from)
  return _internal_from();
}
inline void GetOperationsByCursorRequest::unsafe_arena_set_allocated_from(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.from)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::release_from() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.from)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::mutable_from() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.from)
  return _msg;
}
inline void GetOperationsByCursorRequest::set_allocated_from(::PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.from)
}

// optional .google.protobuf.Timestamp to = 7;
inline bool GetOperationsByCursorRequest::_internal_has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline bool GetOperationsByCursorRequest::has_to() const {
  return _internal_has_to();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetOperationsByCursorRequest::_internal_to() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetOperationsByCursorRequest::to() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.to)
  return _internal_to();
}
inline void GetOperationsByCursorRequest::unsafe_arena_set_allocated_to(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.to)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::release_to() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.to)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::_internal_mutable_to() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetOperationsByCursorRequest::mutable_to() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.to)
  return _msg;
}
inline void GetOperationsByCursorRequest::set_allocated_to(::PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.to)
}

// optional string cursor = 11;
inline bool GetOperationsByCursorRequest::_internal_has_cursor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetOperationsByCursorRequest::has_cursor() const {
  return _internal_has_cursor();
}
inline void GetOperationsByCursorRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetOperationsByCursorRequest::cursor() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOperationsByCursorRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
}
inline std::string* GetOperationsByCursorRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
  return _s;
}
inline const std::string& GetOperationsByCursorRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void GetOperationsByCursorRequest::_internal_set_cursor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorRequest::_internal_mutable_cursor() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
  if (!_internal_has_cursor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.cursor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetOperationsByCursorRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
}

// optional int32 limit = 12;
inline bool GetOperationsByCursorRequest::_internal_has_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetOperationsByCursorRequest::has_limit() const {
  return _internal_has_limit();
}
inline void GetOperationsByCursorRequest::clear_limit() {
  _impl_.limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t GetOperationsByCursorRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetOperationsByCursorRequest::limit() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.limit)
  return _internal_limit();
}
inline void GetOperationsByCursorRequest::_internal_set_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.limit_ = value;
}
inline void GetOperationsByCursorRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.limit)
}

// repeated .tinkoff.public_.invest.api.contract.v1.OperationType operation_types = 13;
inline int GetOperationsByCursorRequest::_internal_operation_types_size() const {
  return _impl_.operation_types_.size();
}
inline int GetOperationsByCursorRequest::operation_types_size() const {
  return _internal_operation_types_size();
}
inline void GetOperationsByCursorRequest::clear_operation_types() {
  _impl_.operation_types_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType GetOperationsByCursorRequest::_internal_operation_types(int index) const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OperationType >(_impl_.operation_types_.Get(index));
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType GetOperationsByCursorRequest::operation_types(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
  return _internal_operation_types(index);
}
inline void GetOperationsByCursorRequest::set_operation_types(int index, ::tinkoff::public_::invest::api::contract::v1::OperationType value) {
  _impl_.operation_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
}
inline void GetOperationsByCursorRequest::_internal_add_operation_types(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
  _impl_.operation_types_.Add(value);
}
inline void GetOperationsByCursorRequest::add_operation_types(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
  _internal_add_operation_types(value);
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetOperationsByCursorRequest::operation_types() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
  return _impl_.operation_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetOperationsByCursorRequest::_internal_mutable_operation_types() {
  return &_impl_.operation_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetOperationsByCursorRequest::mutable_operation_types() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
  return _internal_mutable_operation_types();
}

// optional .tinkoff.public_.invest.api.contract.v1.OperationState state = 14;
inline bool GetOperationsByCursorRequest::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GetOperationsByCursorRequest::has_state() const {
  return _internal_has_state();
}
inline void GetOperationsByCursorRequest::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState GetOperationsByCursorRequest::_internal_state() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OperationState >(_impl_.state_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState GetOperationsByCursorRequest::state() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.state)
  return _internal_state();
}
inline void GetOperationsByCursorRequest::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.state_ = value;
}
inline void GetOperationsByCursorRequest::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.state)
}

// optional bool without_commissions = 15;
inline bool GetOperationsByCursorRequest::_internal_has_without_commissions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GetOperationsByCursorRequest::has_without_commissions() const {
  return _internal_has_without_commissions();
}
inline void GetOperationsByCursorRequest::clear_without_commissions() {
  _impl_.without_commissions_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool GetOperationsByCursorRequest::_internal_without_commissions() const {
  return _impl_.without_commissions_;
}
inline bool GetOperationsByCursorRequest::without_commissions() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.without_commissions)
  return _internal_without_commissions();
}
inline void GetOperationsByCursorRequest::_internal_set_without_commissions(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.without_commissions_ = value;
}
inline void GetOperationsByCursorRequest::set_without_commissions(bool value) {
  _internal_set_without_commissions(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.without_commissions)
}

// optional bool without_trades = 16;
inline bool GetOperationsByCursorRequest::_internal_has_without_trades() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GetOperationsByCursorRequest::has_without_trades() const {
  return _internal_has_without_trades();
}
inline void GetOperationsByCursorRequest::clear_without_trades() {
  _impl_.without_trades_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool GetOperationsByCursorRequest::_internal_without_trades() const {
  return _impl_.without_trades_;
}
inline bool GetOperationsByCursorRequest::without_trades() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.without_trades)
  return _internal_without_trades();
}
inline void GetOperationsByCursorRequest::_internal_set_without_trades(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.without_trades_ = value;
}
inline void GetOperationsByCursorRequest::set_without_trades(bool value) {
  _internal_set_without_trades(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.without_trades)
}

// optional bool without_overnights = 17;
inline bool GetOperationsByCursorRequest::_internal_has_without_overnights() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GetOperationsByCursorRequest::has_without_overnights() const {
  return _internal_has_without_overnights();
}
inline void GetOperationsByCursorRequest::clear_without_overnights() {
  _impl_.without_overnights_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool GetOperationsByCursorRequest::_internal_without_overnights() const {
  return _impl_.without_overnights_;
}
inline bool GetOperationsByCursorRequest::without_overnights() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.without_overnights)
  return _internal_without_overnights();
}
inline void GetOperationsByCursorRequest::_internal_set_without_overnights(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.without_overnights_ = value;
}
inline void GetOperationsByCursorRequest::set_without_overnights(bool value) {
  _internal_set_without_overnights(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorRequest.without_overnights)
}

// -------------------------------------------------------------------

// GetOperationsByCursorResponse

// bool has_next = 1;
inline void GetOperationsByCursorResponse::clear_has_next() {
  _impl_.has_next_ = false;
}
inline bool GetOperationsByCursorResponse::_internal_has_next() const {
  return _impl_.has_next_;
}
inline bool GetOperationsByCursorResponse::has_next() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.has_next)
  return _internal_has_next();
}
inline void GetOperationsByCursorResponse::_internal_set_has_next(bool value) {
  
  _impl_.has_next_ = value;
}
inline void GetOperationsByCursorResponse::set_has_next(bool value) {
  _internal_set_has_next(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.has_next)
}

// string next_cursor = 2;
inline void GetOperationsByCursorResponse::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& GetOperationsByCursorResponse::next_cursor() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOperationsByCursorResponse::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
}
inline std::string* GetOperationsByCursorResponse::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
  return _s;
}
inline const std::string& GetOperationsByCursorResponse::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void GetOperationsByCursorResponse::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorResponse::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOperationsByCursorResponse::release_next_cursor() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void GetOperationsByCursorResponse::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
}

// repeated .tinkoff.public_.invest.api.contract.v1.OperationItem items = 6;
inline int GetOperationsByCursorResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GetOperationsByCursorResponse::items_size() const {
  return _internal_items_size();
}
inline void GetOperationsByCursorResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItem* GetOperationsByCursorResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItem >*
GetOperationsByCursorResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.items)
  return &_impl_.items_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItem& GetOperationsByCursorResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItem& GetOperationsByCursorResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.items)
  return _internal_items(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItem* GetOperationsByCursorResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItem* GetOperationsByCursorResponse::add_items() {
  ::tinkoff::public_::invest::api::contract::v1::OperationItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItem >&
GetOperationsByCursorResponse::items() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetOperationsByCursorResponse.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// OperationItem

// string cursor = 1;
inline void OperationItem::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& OperationItem::cursor() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.cursor)
}
inline std::string* OperationItem::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.cursor)
  return _s;
}
inline const std::string& OperationItem::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void OperationItem::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_cursor() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.cursor)
  return _impl_.cursor_.Release();
}
inline void OperationItem::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.cursor)
}

// string broker_account_id = 6;
inline void OperationItem::clear_broker_account_id() {
  _impl_.broker_account_id_.ClearToEmpty();
}
inline const std::string& OperationItem::broker_account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.broker_account_id)
  return _internal_broker_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_broker_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.broker_account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.broker_account_id)
}
inline std::string* OperationItem::mutable_broker_account_id() {
  std::string* _s = _internal_mutable_broker_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.broker_account_id)
  return _s;
}
inline const std::string& OperationItem::_internal_broker_account_id() const {
  return _impl_.broker_account_id_.Get();
}
inline void OperationItem::_internal_set_broker_account_id(const std::string& value) {
  
  _impl_.broker_account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_broker_account_id() {
  
  return _impl_.broker_account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_broker_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.broker_account_id)
  return _impl_.broker_account_id_.Release();
}
inline void OperationItem::set_allocated_broker_account_id(std::string* broker_account_id) {
  if (broker_account_id != nullptr) {
    
  } else {
    
  }
  _impl_.broker_account_id_.SetAllocated(broker_account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broker_account_id_.IsDefault()) {
    _impl_.broker_account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.broker_account_id)
}

// string id = 16;
inline void OperationItem::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& OperationItem::id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.id)
}
inline std::string* OperationItem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.id)
  return _s;
}
inline const std::string& OperationItem::_internal_id() const {
  return _impl_.id_.Get();
}
inline void OperationItem::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.id)
  return _impl_.id_.Release();
}
inline void OperationItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.id)
}

// string parent_operation_id = 17;
inline void OperationItem::clear_parent_operation_id() {
  _impl_.parent_operation_id_.ClearToEmpty();
}
inline const std::string& OperationItem::parent_operation_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.parent_operation_id)
  return _internal_parent_operation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_parent_operation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_operation_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.parent_operation_id)
}
inline std::string* OperationItem::mutable_parent_operation_id() {
  std::string* _s = _internal_mutable_parent_operation_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.parent_operation_id)
  return _s;
}
inline const std::string& OperationItem::_internal_parent_operation_id() const {
  return _impl_.parent_operation_id_.Get();
}
inline void OperationItem::_internal_set_parent_operation_id(const std::string& value) {
  
  _impl_.parent_operation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_parent_operation_id() {
  
  return _impl_.parent_operation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_parent_operation_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.parent_operation_id)
  return _impl_.parent_operation_id_.Release();
}
inline void OperationItem::set_allocated_parent_operation_id(std::string* parent_operation_id) {
  if (parent_operation_id != nullptr) {
    
  } else {
    
  }
  _impl_.parent_operation_id_.SetAllocated(parent_operation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_operation_id_.IsDefault()) {
    _impl_.parent_operation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.parent_operation_id)
}

// string name = 18;
inline void OperationItem::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& OperationItem::name() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.name)
}
inline std::string* OperationItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.name)
  return _s;
}
inline const std::string& OperationItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void OperationItem::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_name() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.name)
  return _impl_.name_.Release();
}
inline void OperationItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.name)
}

// .google.protobuf.Timestamp date = 21;
inline bool OperationItem::_internal_has_date() const {
  return this != internal_default_instance() && _impl_.date_ != nullptr;
}
inline bool OperationItem::has_date() const {
  return _internal_has_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationItem::_internal_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationItem::date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.date)
  return _internal_date();
}
inline void OperationItem::unsafe_arena_set_allocated_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = date;
  if (date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::release_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::_internal_mutable_date() {
  
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.date_ = p;
  }
  return _impl_.date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::mutable_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.date)
  return _msg;
}
inline void OperationItem::set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date));
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_ = date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.date)
}

// .tinkoff.public_.invest.api.contract.v1.OperationType type = 22;
inline void OperationItem::clear_type() {
  _impl_.type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType OperationItem::_internal_type() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OperationType >(_impl_.type_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType OperationItem::type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.type)
  return _internal_type();
}
inline void OperationItem::_internal_set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
  
  _impl_.type_ = value;
}
inline void OperationItem::set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.type)
}

// string description = 23;
inline void OperationItem::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& OperationItem::description() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.description)
}
inline std::string* OperationItem::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.description)
  return _s;
}
inline const std::string& OperationItem::_internal_description() const {
  return _impl_.description_.Get();
}
inline void OperationItem::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_description() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.description)
  return _impl_.description_.Release();
}
inline void OperationItem::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.description)
}

// .tinkoff.public_.invest.api.contract.v1.OperationState state = 24;
inline void OperationItem::clear_state() {
  _impl_.state_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationItem::_internal_state() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::OperationState >(_impl_.state_);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationItem::state() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.state)
  return _internal_state();
}
inline void OperationItem::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  
  _impl_.state_ = value;
}
inline void OperationItem::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.state)
}

// string instrument_uid = 31;
inline void OperationItem::clear_instrument_uid() {
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OperationItem::instrument_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_uid)
  return _internal_instrument_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_instrument_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_uid)
}
inline std::string* OperationItem::mutable_instrument_uid() {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_uid)
  return _s;
}
inline const std::string& OperationItem::_internal_instrument_uid() const {
  return _impl_.instrument_uid_.Get();
}
inline void OperationItem::_internal_set_instrument_uid(const std::string& value) {
  
  _impl_.instrument_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_instrument_uid() {
  
  return _impl_.instrument_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_instrument_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void OperationItem::set_allocated_instrument_uid(std::string* instrument_uid) {
  if (instrument_uid != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_uid_.SetAllocated(instrument_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_uid)
}

// string figi = 32;
inline void OperationItem::clear_figi() {
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& OperationItem::figi() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.figi)
  return _internal_figi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_figi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.figi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.figi)
}
inline std::string* OperationItem::mutable_figi() {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.figi)
  return _s;
}
inline const std::string& OperationItem::_internal_figi() const {
  return _impl_.figi_.Get();
}
inline void OperationItem::_internal_set_figi(const std::string& value) {
  
  _impl_.figi_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_figi() {
  
  return _impl_.figi_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_figi() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.figi)
  return _impl_.figi_.Release();
}
inline void OperationItem::set_allocated_figi(std::string* figi) {
  if (figi != nullptr) {
    
  } else {
    
  }
  _impl_.figi_.SetAllocated(figi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.figi)
}

// string instrument_type = 33;
inline void OperationItem::clear_instrument_type() {
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& OperationItem::instrument_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_type)
  return _internal_instrument_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_instrument_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_type)
}
inline std::string* OperationItem::mutable_instrument_type() {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_type)
  return _s;
}
inline const std::string& OperationItem::_internal_instrument_type() const {
  return _impl_.instrument_type_.Get();
}
inline void OperationItem::_internal_set_instrument_type(const std::string& value) {
  
  _impl_.instrument_type_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_instrument_type() {
  
  return _impl_.instrument_type_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_instrument_type() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void OperationItem::set_allocated_instrument_type(std::string* instrument_type) {
  if (instrument_type != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_type_.SetAllocated(instrument_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_type_.IsDefault()) {
    _impl_.instrument_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_type)
}

// .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 34;
inline void OperationItem::clear_instrument_kind() {
  _impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType OperationItem::_internal_instrument_kind() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(_impl_.instrument_kind_);
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType OperationItem::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_kind)
  return _internal_instrument_kind();
}
inline void OperationItem::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  
  _impl_.instrument_kind_ = value;
}
inline void OperationItem::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.instrument_kind)
}

// string position_uid = 35;
inline void OperationItem::clear_position_uid() {
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& OperationItem::position_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.position_uid)
  return _internal_position_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_position_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.position_uid)
}
inline std::string* OperationItem::mutable_position_uid() {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.position_uid)
  return _s;
}
inline const std::string& OperationItem::_internal_position_uid() const {
  return _impl_.position_uid_.Get();
}
inline void OperationItem::_internal_set_position_uid(const std::string& value) {
  
  _impl_.position_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_position_uid() {
  
  return _impl_.position_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_position_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.position_uid)
  return _impl_.position_uid_.Release();
}
inline void OperationItem::set_allocated_position_uid(std::string* position_uid) {
  if (position_uid != nullptr) {
    
  } else {
    
  }
  _impl_.position_uid_.SetAllocated(position_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_uid_.IsDefault()) {
    _impl_.position_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.position_uid)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue payment = 41;
inline bool OperationItem::_internal_has_payment() const {
  return this != internal_default_instance() && _impl_.payment_ != nullptr;
}
inline bool OperationItem::has_payment() const {
  return _internal_has_payment();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_payment() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.payment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::payment() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.payment)
  return _internal_payment();
}
inline void OperationItem::unsafe_arena_set_allocated_payment(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_);
  }
  _impl_.payment_ = payment;
  if (payment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.payment)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_payment() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.payment_;
  _impl_.payment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_payment() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.payment)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.payment_;
  _impl_.payment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_payment() {
  
  if (_impl_.payment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.payment_ = p;
  }
  return _impl_.payment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_payment() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_payment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.payment)
  return _msg;
}
inline void OperationItem::set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_);
  }
  if (payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment));
    if (message_arena != submessage_arena) {
      payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payment_ = payment;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.payment)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 42;
inline bool OperationItem::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OperationItem::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.price)
  return _internal_price();
}
inline void OperationItem::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.price)
  return _msg;
}
inline void OperationItem::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue commission = 43;
inline bool OperationItem::_internal_has_commission() const {
  return this != internal_default_instance() && _impl_.commission_ != nullptr;
}
inline bool OperationItem::has_commission() const {
  return _internal_has_commission();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_commission() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::commission() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.commission)
  return _internal_commission();
}
inline void OperationItem::unsafe_arena_set_allocated_commission(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commission_);
  }
  _impl_.commission_ = commission;
  if (commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_commission() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.commission_;
  _impl_.commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_commission() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.commission)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.commission_;
  _impl_.commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_commission() {
  
  if (_impl_.commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.commission_ = p;
  }
  return _impl_.commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_commission() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.commission)
  return _msg;
}
inline void OperationItem::set_allocated_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commission_);
  }
  if (commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commission));
    if (message_arena != submessage_arena) {
      commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commission_ = commission;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.commission)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 44;
inline bool OperationItem::_internal_has_yield() const {
  return this != internal_default_instance() && _impl_.yield_ != nullptr;
}
inline bool OperationItem::has_yield() const {
  return _internal_has_yield();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_yield() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.yield_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::yield() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.yield)
  return _internal_yield();
}
inline void OperationItem::unsafe_arena_set_allocated_yield(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_);
  }
  _impl_.yield_ = yield;
  if (yield) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_yield() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.yield_;
  _impl_.yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_yield() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.yield)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.yield_;
  _impl_.yield_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_yield() {
  
  if (_impl_.yield_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.yield_ = p;
  }
  return _impl_.yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_yield() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_yield();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.yield)
  return _msg;
}
inline void OperationItem::set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_);
  }
  if (yield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yield));
    if (message_arena != submessage_arena) {
      yield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yield_ = yield;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.yield)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 45;
inline bool OperationItem::_internal_has_yield_relative() const {
  return this != internal_default_instance() && _impl_.yield_relative_ != nullptr;
}
inline bool OperationItem::has_yield_relative() const {
  return _internal_has_yield_relative();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItem::_internal_yield_relative() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.yield_relative_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItem::yield_relative() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.yield_relative)
  return _internal_yield_relative();
}
inline void OperationItem::unsafe_arena_set_allocated_yield_relative(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_relative_);
  }
  _impl_.yield_relative_ = yield_relative;
  if (yield_relative) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.yield_relative)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::release_yield_relative() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.yield_relative_;
  _impl_.yield_relative_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::unsafe_arena_release_yield_relative() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.yield_relative)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.yield_relative_;
  _impl_.yield_relative_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::_internal_mutable_yield_relative() {
  
  if (_impl_.yield_relative_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.yield_relative_ = p;
  }
  return _impl_.yield_relative_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::mutable_yield_relative() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_yield_relative();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.yield_relative)
  return _msg;
}
inline void OperationItem::set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_relative_);
  }
  if (yield_relative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yield_relative));
    if (message_arena != submessage_arena) {
      yield_relative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield_relative, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yield_relative_ = yield_relative;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.yield_relative)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue accrued_int = 46;
inline bool OperationItem::_internal_has_accrued_int() const {
  return this != internal_default_instance() && _impl_.accrued_int_ != nullptr;
}
inline bool OperationItem::has_accrued_int() const {
  return _internal_has_accrued_int();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_accrued_int() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.accrued_int_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::accrued_int() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.accrued_int)
  return _internal_accrued_int();
}
inline void OperationItem::unsafe_arena_set_allocated_accrued_int(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* accrued_int) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accrued_int_);
  }
  _impl_.accrued_int_ = accrued_int;
  if (accrued_int) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.accrued_int)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_accrued_int() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.accrued_int_;
  _impl_.accrued_int_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_accrued_int() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.accrued_int)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.accrued_int_;
  _impl_.accrued_int_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_accrued_int() {
  
  if (_impl_.accrued_int_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.accrued_int_ = p;
  }
  return _impl_.accrued_int_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_accrued_int() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_accrued_int();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.accrued_int)
  return _msg;
}
inline void OperationItem::set_allocated_accrued_int(::tinkoff::public_::invest::api::contract::v1::MoneyValue* accrued_int) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accrued_int_);
  }
  if (accrued_int) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accrued_int));
    if (message_arena != submessage_arena) {
      accrued_int = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accrued_int, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accrued_int_ = accrued_int;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.accrued_int)
}

// int64 quantity = 51;
inline void OperationItem::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t OperationItem::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t OperationItem::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.quantity)
  return _internal_quantity();
}
inline void OperationItem::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void OperationItem::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.quantity)
}

// int64 quantity_rest = 52;
inline void OperationItem::clear_quantity_rest() {
  _impl_.quantity_rest_ = int64_t{0};
}
inline int64_t OperationItem::_internal_quantity_rest() const {
  return _impl_.quantity_rest_;
}
inline int64_t OperationItem::quantity_rest() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.quantity_rest)
  return _internal_quantity_rest();
}
inline void OperationItem::_internal_set_quantity_rest(int64_t value) {
  
  _impl_.quantity_rest_ = value;
}
inline void OperationItem::set_quantity_rest(int64_t value) {
  _internal_set_quantity_rest(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.quantity_rest)
}

// int64 quantity_done = 53;
inline void OperationItem::clear_quantity_done() {
  _impl_.quantity_done_ = int64_t{0};
}
inline int64_t OperationItem::_internal_quantity_done() const {
  return _impl_.quantity_done_;
}
inline int64_t OperationItem::quantity_done() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.quantity_done)
  return _internal_quantity_done();
}
inline void OperationItem::_internal_set_quantity_done(int64_t value) {
  
  _impl_.quantity_done_ = value;
}
inline void OperationItem::set_quantity_done(int64_t value) {
  _internal_set_quantity_done(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.quantity_done)
}

// .google.protobuf.Timestamp cancel_date_time = 56;
inline bool OperationItem::_internal_has_cancel_date_time() const {
  return this != internal_default_instance() && _impl_.cancel_date_time_ != nullptr;
}
inline bool OperationItem::has_cancel_date_time() const {
  return _internal_has_cancel_date_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationItem::_internal_cancel_date_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.cancel_date_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationItem::cancel_date_time() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_date_time)
  return _internal_cancel_date_time();
}
inline void OperationItem::unsafe_arena_set_allocated_cancel_date_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_date_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancel_date_time_);
  }
  _impl_.cancel_date_time_ = cancel_date_time;
  if (cancel_date_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_date_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::release_cancel_date_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cancel_date_time_;
  _impl_.cancel_date_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::unsafe_arena_release_cancel_date_time() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_date_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cancel_date_time_;
  _impl_.cancel_date_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::_internal_mutable_cancel_date_time() {
  
  if (_impl_.cancel_date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.cancel_date_time_ = p;
  }
  return _impl_.cancel_date_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItem::mutable_cancel_date_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_cancel_date_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_date_time)
  return _msg;
}
inline void OperationItem::set_allocated_cancel_date_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancel_date_time_);
  }
  if (cancel_date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_date_time));
    if (message_arena != submessage_arena) {
      cancel_date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_date_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancel_date_time_ = cancel_date_time;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_date_time)
}

// string cancel_reason = 57;
inline void OperationItem::clear_cancel_reason() {
  _impl_.cancel_reason_.ClearToEmpty();
}
inline const std::string& OperationItem::cancel_reason() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_reason)
  return _internal_cancel_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_cancel_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cancel_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_reason)
}
inline std::string* OperationItem::mutable_cancel_reason() {
  std::string* _s = _internal_mutable_cancel_reason();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_reason)
  return _s;
}
inline const std::string& OperationItem::_internal_cancel_reason() const {
  return _impl_.cancel_reason_.Get();
}
inline void OperationItem::_internal_set_cancel_reason(const std::string& value) {
  
  _impl_.cancel_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_cancel_reason() {
  
  return _impl_.cancel_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_cancel_reason() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_reason)
  return _impl_.cancel_reason_.Release();
}
inline void OperationItem::set_allocated_cancel_reason(std::string* cancel_reason) {
  if (cancel_reason != nullptr) {
    
  } else {
    
  }
  _impl_.cancel_reason_.SetAllocated(cancel_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cancel_reason_.IsDefault()) {
    _impl_.cancel_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.cancel_reason)
}

// .tinkoff.public_.invest.api.contract.v1.OperationItemTrades trades_info = 61;
inline bool OperationItem::_internal_has_trades_info() const {
  return this != internal_default_instance() && _impl_.trades_info_ != nullptr;
}
inline bool OperationItem::has_trades_info() const {
  return _internal_has_trades_info();
}
inline void OperationItem::clear_trades_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.trades_info_ != nullptr) {
    delete _impl_.trades_info_;
  }
  _impl_.trades_info_ = nullptr;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& OperationItem::_internal_trades_info() const {
  const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* p = _impl_.trades_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades&>(
      ::tinkoff::public_::invest::api::contract::v1::_OperationItemTrades_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& OperationItem::trades_info() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.trades_info)
  return _internal_trades_info();
}
inline void OperationItem::unsafe_arena_set_allocated_trades_info(
    ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* trades_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trades_info_);
  }
  _impl_.trades_info_ = trades_info;
  if (trades_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.trades_info)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::release_trades_info() {
  
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* temp = _impl_.trades_info_;
  _impl_.trades_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::unsafe_arena_release_trades_info() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.trades_info)
  
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* temp = _impl_.trades_info_;
  _impl_.trades_info_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::_internal_mutable_trades_info() {
  
  if (_impl_.trades_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OperationItemTrades>(GetArenaForAllocation());
    _impl_.trades_info_ = p;
  }
  return _impl_.trades_info_;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::mutable_trades_info() {
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* _msg = _internal_mutable_trades_info();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.trades_info)
  return _msg;
}
inline void OperationItem::set_allocated_trades_info(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* trades_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trades_info_;
  }
  if (trades_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trades_info);
    if (message_arena != submessage_arena) {
      trades_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trades_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trades_info_ = trades_info;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.trades_info)
}

// string asset_uid = 64;
inline void OperationItem::clear_asset_uid() {
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& OperationItem::asset_uid() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItem.asset_uid)
  return _internal_asset_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItem::set_asset_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItem.asset_uid)
}
inline std::string* OperationItem::mutable_asset_uid() {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItem.asset_uid)
  return _s;
}
inline const std::string& OperationItem::_internal_asset_uid() const {
  return _impl_.asset_uid_.Get();
}
inline void OperationItem::_internal_set_asset_uid(const std::string& value) {
  
  _impl_.asset_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItem::_internal_mutable_asset_uid() {
  
  return _impl_.asset_uid_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItem::release_asset_uid() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItem.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void OperationItem::set_allocated_asset_uid(std::string* asset_uid) {
  if (asset_uid != nullptr) {
    
  } else {
    
  }
  _impl_.asset_uid_.SetAllocated(asset_uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_uid_.IsDefault()) {
    _impl_.asset_uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItem.asset_uid)
}

// -------------------------------------------------------------------

// OperationItemTrades

// repeated .tinkoff.public_.invest.api.contract.v1.OperationItemTrade trades = 6;
inline int OperationItemTrades::_internal_trades_size() const {
  return _impl_.trades_.size();
}
inline int OperationItemTrades::trades_size() const {
  return _internal_trades_size();
}
inline void OperationItemTrades::clear_trades() {
  _impl_.trades_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* OperationItemTrades::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItemTrades.trades)
  return _impl_.trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade >*
OperationItemTrades::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.OperationItemTrades.trades)
  return &_impl_.trades_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade& OperationItemTrades::_internal_trades(int index) const {
  return _impl_.trades_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade& OperationItemTrades::trades(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItemTrades.trades)
  return _internal_trades(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* OperationItemTrades::_internal_add_trades() {
  return _impl_.trades_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* OperationItemTrades::add_trades() {
  ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* _add = _internal_add_trades();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.OperationItemTrades.trades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade >&
OperationItemTrades::trades() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.OperationItemTrades.trades)
  return _impl_.trades_;
}

// -------------------------------------------------------------------

// OperationItemTrade

// string num = 1;
inline void OperationItemTrade::clear_num() {
  _impl_.num_.ClearToEmpty();
}
inline const std::string& OperationItemTrade::num() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.num)
  return _internal_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationItemTrade::set_num(ArgT0&& arg0, ArgT... args) {
 
 _impl_.num_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.num)
}
inline std::string* OperationItemTrade::mutable_num() {
  std::string* _s = _internal_mutable_num();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.num)
  return _s;
}
inline const std::string& OperationItemTrade::_internal_num() const {
  return _impl_.num_.Get();
}
inline void OperationItemTrade::_internal_set_num(const std::string& value) {
  
  _impl_.num_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationItemTrade::_internal_mutable_num() {
  
  return _impl_.num_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationItemTrade::release_num() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.num)
  return _impl_.num_.Release();
}
inline void OperationItemTrade::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    
  } else {
    
  }
  _impl_.num_.SetAllocated(num, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.num_.IsDefault()) {
    _impl_.num_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.num)
}

// .google.protobuf.Timestamp date = 6;
inline bool OperationItemTrade::_internal_has_date() const {
  return this != internal_default_instance() && _impl_.date_ != nullptr;
}
inline bool OperationItemTrade::has_date() const {
  return _internal_has_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationItemTrade::_internal_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationItemTrade::date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.date)
  return _internal_date();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = date;
  if (date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItemTrade::release_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItemTrade::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItemTrade::_internal_mutable_date() {
  
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.date_ = p;
  }
  return _impl_.date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationItemTrade::mutable_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.date)
  return _msg;
}
inline void OperationItemTrade::set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date));
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_ = date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.date)
}

// int64 quantity = 11;
inline void OperationItemTrade::clear_quantity() {
  _impl_.quantity_ = int64_t{0};
}
inline int64_t OperationItemTrade::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int64_t OperationItemTrade::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.quantity)
  return _internal_quantity();
}
inline void OperationItemTrade::_internal_set_quantity(int64_t value) {
  
  _impl_.quantity_ = value;
}
inline void OperationItemTrade::set_quantity(int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.quantity)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue price = 16;
inline bool OperationItemTrade::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OperationItemTrade::has_price() const {
  return _internal_has_price();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::_internal_price() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.price)
  return _internal_price();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_price(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::release_price() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.price)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::mutable_price() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.price)
  return _msg;
}
inline void OperationItemTrade::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue yield = 21;
inline bool OperationItemTrade::_internal_has_yield() const {
  return this != internal_default_instance() && _impl_.yield_ != nullptr;
}
inline bool OperationItemTrade::has_yield() const {
  return _internal_has_yield();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::_internal_yield() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.yield_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::yield() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield)
  return _internal_yield();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_yield(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_);
  }
  _impl_.yield_ = yield;
  if (yield) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::release_yield() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.yield_;
  _impl_.yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::unsafe_arena_release_yield() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.yield_;
  _impl_.yield_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::_internal_mutable_yield() {
  
  if (_impl_.yield_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.yield_ = p;
  }
  return _impl_.yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::mutable_yield() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_yield();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield)
  return _msg;
}
inline void OperationItemTrade::set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_);
  }
  if (yield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yield));
    if (message_arena != submessage_arena) {
      yield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yield_ = yield;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation yield_relative = 22;
inline bool OperationItemTrade::_internal_has_yield_relative() const {
  return this != internal_default_instance() && _impl_.yield_relative_ != nullptr;
}
inline bool OperationItemTrade::has_yield_relative() const {
  return _internal_has_yield_relative();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItemTrade::_internal_yield_relative() const {
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.yield_relative_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(
      ::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItemTrade::yield_relative() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield_relative)
  return _internal_yield_relative();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_yield_relative(
    ::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_relative_);
  }
  _impl_.yield_relative_ = yield_relative;
  if (yield_relative) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield_relative)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::release_yield_relative() {
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.yield_relative_;
  _impl_.yield_relative_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::unsafe_arena_release_yield_relative() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield_relative)
  
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.yield_relative_;
  _impl_.yield_relative_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::_internal_mutable_yield_relative() {
  
  if (_impl_.yield_relative_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArenaForAllocation());
    _impl_.yield_relative_ = p;
  }
  return _impl_.yield_relative_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::mutable_yield_relative() {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_yield_relative();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield_relative)
  return _msg;
}
inline void OperationItemTrade::set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yield_relative_);
  }
  if (yield_relative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yield_relative));
    if (message_arena != submessage_arena) {
      yield_relative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield_relative, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yield_relative_ = yield_relative;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OperationItemTrade.yield_relative)
}

// -------------------------------------------------------------------

// PositionsStreamRequest

// repeated string accounts = 1;
inline int PositionsStreamRequest::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int PositionsStreamRequest::accounts_size() const {
  return _internal_accounts_size();
}
inline void PositionsStreamRequest::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline std::string* PositionsStreamRequest::add_accounts() {
  std::string* _s = _internal_add_accounts();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
  return _s;
}
inline const std::string& PositionsStreamRequest::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const std::string& PositionsStreamRequest::accounts(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
  return _internal_accounts(index);
}
inline std::string* PositionsStreamRequest::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline void PositionsStreamRequest::set_accounts(int index, const std::string& value) {
  _impl_.accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::set_accounts(int index, std::string&& value) {
  _impl_.accounts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::set_accounts(int index, const char* value, size_t size) {
  _impl_.accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline std::string* PositionsStreamRequest::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline void PositionsStreamRequest::add_accounts(const std::string& value) {
  _impl_.accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(std::string&& value) {
  _impl_.accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(const char* value, size_t size) {
  _impl_.accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PositionsStreamRequest::accounts() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
  return _impl_.accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PositionsStreamRequest::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionsStreamRequest.accounts)
  return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// PositionsStreamResponse

// .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult subscriptions = 1;
inline bool PositionsStreamResponse::_internal_has_subscriptions() const {
  return payload_case() == kSubscriptions;
}
inline bool PositionsStreamResponse::has_subscriptions() const {
  return _internal_has_subscriptions();
}
inline void PositionsStreamResponse::set_has_subscriptions() {
  _impl_._oneof_case_[0] = kSubscriptions;
}
inline void PositionsStreamResponse::clear_subscriptions() {
  if (_internal_has_subscriptions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.subscriptions_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::release_subscriptions() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
  if (_internal_has_subscriptions()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* temp = _impl_.payload_.subscriptions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& PositionsStreamResponse::_internal_subscriptions() const {
  return _internal_has_subscriptions()
      ? *_impl_.payload_.subscriptions_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult&>(::tinkoff::public_::invest::api::contract::v1::_PositionsSubscriptionResult_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& PositionsStreamResponse::subscriptions() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
  return _internal_subscriptions();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::unsafe_arena_release_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
  if (_internal_has_subscriptions()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* temp = _impl_.payload_.subscriptions_;
    _impl_.payload_.subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PositionsStreamResponse::unsafe_arena_set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* subscriptions) {
  clear_payload();
  if (subscriptions) {
    set_has_subscriptions();
    _impl_.payload_.subscriptions_ = subscriptions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::_internal_mutable_subscriptions() {
  if (!_internal_has_subscriptions()) {
    clear_payload();
    set_has_subscriptions();
    _impl_.payload_.subscriptions_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult >(GetArenaForAllocation());
  }
  return _impl_.payload_.subscriptions_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::mutable_subscriptions() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* _msg = _internal_mutable_subscriptions();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.PositionData position = 2;
inline bool PositionsStreamResponse::_internal_has_position() const {
  return payload_case() == kPosition;
}
inline bool PositionsStreamResponse::has_position() const {
  return _internal_has_position();
}
inline void PositionsStreamResponse::set_has_position() {
  _impl_._oneof_case_[0] = kPosition;
}
inline void PositionsStreamResponse::clear_position() {
  if (_internal_has_position()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.position_;
    }
    clear_has_payload();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::release_position() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.position)
  if (_internal_has_position()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PositionData* temp = _impl_.payload_.position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionData& PositionsStreamResponse::_internal_position() const {
  return _internal_has_position()
      ? *_impl_.payload_.position_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::PositionData&>(::tinkoff::public_::invest::api::contract::v1::_PositionData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionData& PositionsStreamResponse::position() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.position)
  return _internal_position();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.position)
  if (_internal_has_position()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::PositionData* temp = _impl_.payload_.position_;
    _impl_.payload_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PositionsStreamResponse::unsafe_arena_set_allocated_position(::tinkoff::public_::invest::api::contract::v1::PositionData* position) {
  clear_payload();
  if (position) {
    set_has_position();
    _impl_.payload_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.position)
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_payload();
    set_has_position();
    _impl_.payload_.position_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PositionData >(GetArenaForAllocation());
  }
  return _impl_.payload_.position_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::mutable_position() {
  ::tinkoff::public_::invest::api::contract::v1::PositionData* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.position)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.Ping ping = 3;
inline bool PositionsStreamResponse::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline bool PositionsStreamResponse::has_ping() const {
  return _internal_has_ping();
}
inline void PositionsStreamResponse::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::release_ping() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::Ping* temp = _impl_.payload_.ping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PositionsStreamResponse::_internal_ping() const {
  return _internal_has_ping()
      ? *_impl_.payload_.ping_
      : reinterpret_cast< ::tinkoff::public_::invest::api::contract::v1::Ping&>(::tinkoff::public_::invest::api::contract::v1::_Ping_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PositionsStreamResponse::ping() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.ping)
  return _internal_ping();
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::tinkoff::public_::invest::api::contract::v1::Ping* temp = _impl_.payload_.ping_;
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PositionsStreamResponse::unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  clear_payload();
  if (ping) {
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.ping)
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_payload();
    set_has_ping();
    _impl_.payload_.ping_ = CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Ping >(GetArenaForAllocation());
  }
  return _impl_.payload_.ping_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::mutable_ping() {
  ::tinkoff::public_::invest::api::contract::v1::Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsStreamResponse.ping)
  return _msg;
}

inline bool PositionsStreamResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void PositionsStreamResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline PositionsStreamResponse::PayloadCase PositionsStreamResponse::payload_case() const {
  return PositionsStreamResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PositionsSubscriptionResult

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus accounts = 1;
inline int PositionsSubscriptionResult::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int PositionsSubscriptionResult::accounts_size() const {
  return _internal_accounts_size();
}
inline void PositionsSubscriptionResult::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* PositionsSubscriptionResult::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus >*
PositionsSubscriptionResult::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
  return &_impl_.accounts_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus& PositionsSubscriptionResult::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus& PositionsSubscriptionResult::accounts(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
  return _internal_accounts(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* PositionsSubscriptionResult::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* PositionsSubscriptionResult::add_accounts() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus >&
PositionsSubscriptionResult::accounts() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
  return _impl_.accounts_;
}

// -------------------------------------------------------------------

// PositionsSubscriptionStatus

// string account_id = 1;
inline void PositionsSubscriptionStatus::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PositionsSubscriptionStatus::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionsSubscriptionStatus::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
}
inline std::string* PositionsSubscriptionStatus::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
  return _s;
}
inline const std::string& PositionsSubscriptionStatus::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void PositionsSubscriptionStatus::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionsSubscriptionStatus::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionsSubscriptionStatus::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
  return _impl_.account_id_.Release();
}
inline void PositionsSubscriptionStatus::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
}

// .tinkoff.public_.invest.api.contract.v1.PositionsAccountSubscriptionStatus subscription_status = 6;
inline void PositionsSubscriptionStatus::clear_subscription_status() {
  _impl_.subscription_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus PositionsSubscriptionStatus::_internal_subscription_status() const {
  return static_cast< ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus >(_impl_.subscription_status_);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus PositionsSubscriptionStatus::subscription_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.subscription_status)
  return _internal_subscription_status();
}
inline void PositionsSubscriptionStatus::_internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value) {
  
  _impl_.subscription_status_ = value;
}
inline void PositionsSubscriptionStatus::set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value) {
  _internal_set_subscription_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionsSubscriptionStatus.subscription_status)
}

// -------------------------------------------------------------------

// PositionData

// string account_id = 1;
inline void PositionData::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& PositionData::account_id() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionData.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionData::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.PositionData.account_id)
}
inline std::string* PositionData::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionData.account_id)
  return _s;
}
inline const std::string& PositionData::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void PositionData::_internal_set_account_id(const std::string& value) {
  
  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionData::_internal_mutable_account_id() {
  
  return _impl_.account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PositionData::release_account_id() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionData.account_id)
  return _impl_.account_id_.Release();
}
inline void PositionData::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  _impl_.account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionData.account_id)
}

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsMoney money = 2;
inline int PositionData::_internal_money_size() const {
  return _impl_.money_.size();
}
inline int PositionData::money_size() const {
  return _internal_money_size();
}
inline void PositionData::clear_money() {
  _impl_.money_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* PositionData::mutable_money(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionData.money)
  return _impl_.money_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney >*
PositionData::mutable_money() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionData.money)
  return &_impl_.money_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsMoney& PositionData::_internal_money(int index) const {
  return _impl_.money_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsMoney& PositionData::money(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionData.money)
  return _internal_money(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* PositionData::_internal_add_money() {
  return _impl_.money_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* PositionData::add_money() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* _add = _internal_add_money();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionData.money)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney >&
PositionData::money() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionData.money)
  return _impl_.money_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsSecurities securities = 3;
inline int PositionData::_internal_securities_size() const {
  return _impl_.securities_.size();
}
inline int PositionData::securities_size() const {
  return _internal_securities_size();
}
inline void PositionData::clear_securities() {
  _impl_.securities_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionData::mutable_securities(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionData.securities)
  return _impl_.securities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >*
PositionData::mutable_securities() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionData.securities)
  return &_impl_.securities_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& PositionData::_internal_securities(int index) const {
  return _impl_.securities_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& PositionData::securities(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionData.securities)
  return _internal_securities(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionData::_internal_add_securities() {
  return _impl_.securities_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionData::add_securities() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* _add = _internal_add_securities();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionData.securities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities >&
PositionData::securities() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionData.securities)
  return _impl_.securities_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsFutures futures = 4;
inline int PositionData::_internal_futures_size() const {
  return _impl_.futures_.size();
}
inline int PositionData::futures_size() const {
  return _internal_futures_size();
}
inline void PositionData::clear_futures() {
  _impl_.futures_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionData::mutable_futures(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionData.futures)
  return _impl_.futures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >*
PositionData::mutable_futures() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionData.futures)
  return &_impl_.futures_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& PositionData::_internal_futures(int index) const {
  return _impl_.futures_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& PositionData::futures(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionData.futures)
  return _internal_futures(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionData::_internal_add_futures() {
  return _impl_.futures_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionData::add_futures() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* _add = _internal_add_futures();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionData.futures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures >&
PositionData::futures() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionData.futures)
  return _impl_.futures_;
}

// repeated .tinkoff.public_.invest.api.contract.v1.PositionsOptions options = 5;
inline int PositionData::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int PositionData::options_size() const {
  return _internal_options_size();
}
inline void PositionData::clear_options() {
  _impl_.options_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionData::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionData.options)
  return _impl_.options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >*
PositionData::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.PositionData.options)
  return &_impl_.options_;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& PositionData::_internal_options(int index) const {
  return _impl_.options_.Get(index);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& PositionData::options(int index) const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionData.options)
  return _internal_options(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionData::_internal_add_options() {
  return _impl_.options_.Add();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionData::add_options() {
  ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.PositionData.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions >&
PositionData::options() const {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.PositionData.options)
  return _impl_.options_;
}

// .google.protobuf.Timestamp date = 6;
inline bool PositionData::_internal_has_date() const {
  return this != internal_default_instance() && _impl_.date_ != nullptr;
}
inline bool PositionData::has_date() const {
  return _internal_has_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PositionData::_internal_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PositionData::date() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionData.date)
  return _internal_date();
}
inline void PositionData::unsafe_arena_set_allocated_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = date;
  if (date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionData.date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PositionData::release_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PositionData::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionData.date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PositionData::_internal_mutable_date() {
  
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.date_ = p;
  }
  return _impl_.date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PositionData::mutable_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionData.date)
  return _msg;
}
inline void PositionData::set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date));
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_ = date;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionData.date)
}

// -------------------------------------------------------------------

// PositionsMoney

// .tinkoff.public_.invest.api.contract.v1.MoneyValue available_value = 1;
inline bool PositionsMoney::_internal_has_available_value() const {
  return this != internal_default_instance() && _impl_.available_value_ != nullptr;
}
inline bool PositionsMoney::has_available_value() const {
  return _internal_has_available_value();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::_internal_available_value() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.available_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::available_value() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsMoney.available_value)
  return _internal_available_value();
}
inline void PositionsMoney::unsafe_arena_set_allocated_available_value(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* available_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.available_value_);
  }
  _impl_.available_value_ = available_value;
  if (available_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsMoney.available_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::release_available_value() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.available_value_;
  _impl_.available_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::unsafe_arena_release_available_value() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsMoney.available_value)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.available_value_;
  _impl_.available_value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::_internal_mutable_available_value() {
  
  if (_impl_.available_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.available_value_ = p;
  }
  return _impl_.available_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::mutable_available_value() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_available_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsMoney.available_value)
  return _msg;
}
inline void PositionsMoney::set_allocated_available_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* available_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.available_value_);
  }
  if (available_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(available_value));
    if (message_arena != submessage_arena) {
      available_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, available_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.available_value_ = available_value;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsMoney.available_value)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue blocked_value = 2;
inline bool PositionsMoney::_internal_has_blocked_value() const {
  return this != internal_default_instance() && _impl_.blocked_value_ != nullptr;
}
inline bool PositionsMoney::has_blocked_value() const {
  return _internal_has_blocked_value();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::_internal_blocked_value() const {
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.blocked_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(
      ::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::blocked_value() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.PositionsMoney.blocked_value)
  return _internal_blocked_value();
}
inline void PositionsMoney::unsafe_arena_set_allocated_blocked_value(
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* blocked_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blocked_value_);
  }
  _impl_.blocked_value_ = blocked_value;
  if (blocked_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsMoney.blocked_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::release_blocked_value() {
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.blocked_value_;
  _impl_.blocked_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::unsafe_arena_release_blocked_value() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.PositionsMoney.blocked_value)
  
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.blocked_value_;
  _impl_.blocked_value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::_internal_mutable_blocked_value() {
  
  if (_impl_.blocked_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArenaForAllocation());
    _impl_.blocked_value_ = p;
  }
  return _impl_.blocked_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::mutable_blocked_value() {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_blocked_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.PositionsMoney.blocked_value)
  return _msg;
}
inline void PositionsMoney::set_allocated_blocked_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* blocked_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blocked_value_);
  }
  if (blocked_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blocked_value));
    if (message_arena != submessage_arena) {
      blocked_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blocked_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blocked_value_ = blocked_value;
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.PositionsMoney.blocked_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest>() {
  return ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::OperationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::OperationState>() {
  return ::tinkoff::public_::invest::api::contract::v1::OperationState_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::OperationType>() {
  return ::tinkoff::public_::invest::api::contract::v1::OperationType_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus>() {
  return ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus_descriptor();
}
template <> struct is_proto_enum< ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus>() {
  return ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_operations_2eproto
