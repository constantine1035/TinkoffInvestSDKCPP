// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_operations_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_operations_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_operations_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_operations_2eproto {
static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
descriptor_table_operations_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class AccountSubscriptionStatus;
struct AccountSubscriptionStatusDefaultTypeInternal;
extern AccountSubscriptionStatusDefaultTypeInternal _AccountSubscriptionStatus_default_instance_;
class BrokerReport;
struct BrokerReportDefaultTypeInternal;
extern BrokerReportDefaultTypeInternal _BrokerReport_default_instance_;
class BrokerReportRequest;
struct BrokerReportRequestDefaultTypeInternal;
extern BrokerReportRequestDefaultTypeInternal _BrokerReportRequest_default_instance_;
class BrokerReportResponse;
struct BrokerReportResponseDefaultTypeInternal;
extern BrokerReportResponseDefaultTypeInternal _BrokerReportResponse_default_instance_;
class DividendsForeignIssuerReport;
struct DividendsForeignIssuerReportDefaultTypeInternal;
extern DividendsForeignIssuerReportDefaultTypeInternal _DividendsForeignIssuerReport_default_instance_;
class GenerateBrokerReportRequest;
struct GenerateBrokerReportRequestDefaultTypeInternal;
extern GenerateBrokerReportRequestDefaultTypeInternal _GenerateBrokerReportRequest_default_instance_;
class GenerateBrokerReportResponse;
struct GenerateBrokerReportResponseDefaultTypeInternal;
extern GenerateBrokerReportResponseDefaultTypeInternal _GenerateBrokerReportResponse_default_instance_;
class GenerateDividendsForeignIssuerReportRequest;
struct GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal;
extern GenerateDividendsForeignIssuerReportRequestDefaultTypeInternal _GenerateDividendsForeignIssuerReportRequest_default_instance_;
class GenerateDividendsForeignIssuerReportResponse;
struct GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal;
extern GenerateDividendsForeignIssuerReportResponseDefaultTypeInternal _GenerateDividendsForeignIssuerReportResponse_default_instance_;
class GetBrokerReportRequest;
struct GetBrokerReportRequestDefaultTypeInternal;
extern GetBrokerReportRequestDefaultTypeInternal _GetBrokerReportRequest_default_instance_;
class GetBrokerReportResponse;
struct GetBrokerReportResponseDefaultTypeInternal;
extern GetBrokerReportResponseDefaultTypeInternal _GetBrokerReportResponse_default_instance_;
class GetDividendsForeignIssuerReportRequest;
struct GetDividendsForeignIssuerReportRequestDefaultTypeInternal;
extern GetDividendsForeignIssuerReportRequestDefaultTypeInternal _GetDividendsForeignIssuerReportRequest_default_instance_;
class GetDividendsForeignIssuerReportResponse;
struct GetDividendsForeignIssuerReportResponseDefaultTypeInternal;
extern GetDividendsForeignIssuerReportResponseDefaultTypeInternal _GetDividendsForeignIssuerReportResponse_default_instance_;
class GetDividendsForeignIssuerRequest;
struct GetDividendsForeignIssuerRequestDefaultTypeInternal;
extern GetDividendsForeignIssuerRequestDefaultTypeInternal _GetDividendsForeignIssuerRequest_default_instance_;
class GetDividendsForeignIssuerResponse;
struct GetDividendsForeignIssuerResponseDefaultTypeInternal;
extern GetDividendsForeignIssuerResponseDefaultTypeInternal _GetDividendsForeignIssuerResponse_default_instance_;
class GetOperationsByCursorRequest;
struct GetOperationsByCursorRequestDefaultTypeInternal;
extern GetOperationsByCursorRequestDefaultTypeInternal _GetOperationsByCursorRequest_default_instance_;
class GetOperationsByCursorResponse;
struct GetOperationsByCursorResponseDefaultTypeInternal;
extern GetOperationsByCursorResponseDefaultTypeInternal _GetOperationsByCursorResponse_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class OperationItem;
struct OperationItemDefaultTypeInternal;
extern OperationItemDefaultTypeInternal _OperationItem_default_instance_;
class OperationItemTrade;
struct OperationItemTradeDefaultTypeInternal;
extern OperationItemTradeDefaultTypeInternal _OperationItemTrade_default_instance_;
class OperationItemTrades;
struct OperationItemTradesDefaultTypeInternal;
extern OperationItemTradesDefaultTypeInternal _OperationItemTrades_default_instance_;
class OperationTrade;
struct OperationTradeDefaultTypeInternal;
extern OperationTradeDefaultTypeInternal _OperationTrade_default_instance_;
class OperationsRequest;
struct OperationsRequestDefaultTypeInternal;
extern OperationsRequestDefaultTypeInternal _OperationsRequest_default_instance_;
class OperationsResponse;
struct OperationsResponseDefaultTypeInternal;
extern OperationsResponseDefaultTypeInternal _OperationsResponse_default_instance_;
class PortfolioPosition;
struct PortfolioPositionDefaultTypeInternal;
extern PortfolioPositionDefaultTypeInternal _PortfolioPosition_default_instance_;
class PortfolioRequest;
struct PortfolioRequestDefaultTypeInternal;
extern PortfolioRequestDefaultTypeInternal _PortfolioRequest_default_instance_;
class PortfolioResponse;
struct PortfolioResponseDefaultTypeInternal;
extern PortfolioResponseDefaultTypeInternal _PortfolioResponse_default_instance_;
class PortfolioStreamRequest;
struct PortfolioStreamRequestDefaultTypeInternal;
extern PortfolioStreamRequestDefaultTypeInternal _PortfolioStreamRequest_default_instance_;
class PortfolioStreamResponse;
struct PortfolioStreamResponseDefaultTypeInternal;
extern PortfolioStreamResponseDefaultTypeInternal _PortfolioStreamResponse_default_instance_;
class PortfolioSubscriptionResult;
struct PortfolioSubscriptionResultDefaultTypeInternal;
extern PortfolioSubscriptionResultDefaultTypeInternal _PortfolioSubscriptionResult_default_instance_;
class PositionData;
struct PositionDataDefaultTypeInternal;
extern PositionDataDefaultTypeInternal _PositionData_default_instance_;
class PositionsFutures;
struct PositionsFuturesDefaultTypeInternal;
extern PositionsFuturesDefaultTypeInternal _PositionsFutures_default_instance_;
class PositionsMoney;
struct PositionsMoneyDefaultTypeInternal;
extern PositionsMoneyDefaultTypeInternal _PositionsMoney_default_instance_;
class PositionsOptions;
struct PositionsOptionsDefaultTypeInternal;
extern PositionsOptionsDefaultTypeInternal _PositionsOptions_default_instance_;
class PositionsRequest;
struct PositionsRequestDefaultTypeInternal;
extern PositionsRequestDefaultTypeInternal _PositionsRequest_default_instance_;
class PositionsResponse;
struct PositionsResponseDefaultTypeInternal;
extern PositionsResponseDefaultTypeInternal _PositionsResponse_default_instance_;
class PositionsSecurities;
struct PositionsSecuritiesDefaultTypeInternal;
extern PositionsSecuritiesDefaultTypeInternal _PositionsSecurities_default_instance_;
class PositionsStreamRequest;
struct PositionsStreamRequestDefaultTypeInternal;
extern PositionsStreamRequestDefaultTypeInternal _PositionsStreamRequest_default_instance_;
class PositionsStreamResponse;
struct PositionsStreamResponseDefaultTypeInternal;
extern PositionsStreamResponseDefaultTypeInternal _PositionsStreamResponse_default_instance_;
class PositionsSubscriptionResult;
struct PositionsSubscriptionResultDefaultTypeInternal;
extern PositionsSubscriptionResultDefaultTypeInternal _PositionsSubscriptionResult_default_instance_;
class PositionsSubscriptionStatus;
struct PositionsSubscriptionStatusDefaultTypeInternal;
extern PositionsSubscriptionStatusDefaultTypeInternal _PositionsSubscriptionStatus_default_instance_;
class VirtualPortfolioPosition;
struct VirtualPortfolioPositionDefaultTypeInternal;
extern VirtualPortfolioPositionDefaultTypeInternal _VirtualPortfolioPosition_default_instance_;
class WithdrawLimitsRequest;
struct WithdrawLimitsRequestDefaultTypeInternal;
extern WithdrawLimitsRequestDefaultTypeInternal _WithdrawLimitsRequest_default_instance_;
class WithdrawLimitsResponse;
struct WithdrawLimitsResponseDefaultTypeInternal;
extern WithdrawLimitsResponseDefaultTypeInternal _WithdrawLimitsResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
enum PortfolioRequest_CurrencyRequest : int {
PortfolioRequest_CurrencyRequest_RUB = 0,
PortfolioRequest_CurrencyRequest_USD = 1,
PortfolioRequest_CurrencyRequest_EUR = 2,
PortfolioRequest_CurrencyRequest_PortfolioRequest_CurrencyRequest_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
PortfolioRequest_CurrencyRequest_PortfolioRequest_CurrencyRequest_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool PortfolioRequest_CurrencyRequest_IsValid(int value);
extern const uint32_t PortfolioRequest_CurrencyRequest_internal_data_[];
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest_CurrencyRequest_CurrencyRequest_MIN = static_cast<PortfolioRequest_CurrencyRequest>(0);
constexpr PortfolioRequest_CurrencyRequest PortfolioRequest_CurrencyRequest_CurrencyRequest_MAX = static_cast<PortfolioRequest_CurrencyRequest>(2);
constexpr int PortfolioRequest_CurrencyRequest_CurrencyRequest_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PortfolioRequest_CurrencyRequest_descriptor();
template <typename T>
const std::string& PortfolioRequest_CurrencyRequest_Name(T value) {
static_assert(std::is_same<T, PortfolioRequest_CurrencyRequest>::value ||
std::is_integral<T>::value,
"Incorrect type passed to CurrencyRequest_Name().");
return PortfolioRequest_CurrencyRequest_Name(static_cast<PortfolioRequest_CurrencyRequest>(value));
}
template <>
inline const std::string& PortfolioRequest_CurrencyRequest_Name(PortfolioRequest_CurrencyRequest value) {
return ::google::protobuf::internal::NameOfDenseEnum<PortfolioRequest_CurrencyRequest_descriptor,
0, 2>(
static_cast<int>(value));
}
inline bool PortfolioRequest_CurrencyRequest_Parse(absl::string_view name, PortfolioRequest_CurrencyRequest* value) {
return ::google::protobuf::internal::ParseNamedEnum<PortfolioRequest_CurrencyRequest>(
PortfolioRequest_CurrencyRequest_descriptor(), name, value);
}
enum OperationState : int {
OPERATION_STATE_UNSPECIFIED = 0,
OPERATION_STATE_EXECUTED = 1,
OPERATION_STATE_CANCELED = 2,
OPERATION_STATE_PROGRESS = 3,
OperationState_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
OperationState_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool OperationState_IsValid(int value);
extern const uint32_t OperationState_internal_data_[];
constexpr OperationState OperationState_MIN = static_cast<OperationState>(0);
constexpr OperationState OperationState_MAX = static_cast<OperationState>(3);
constexpr int OperationState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
OperationState_descriptor();
template <typename T>
const std::string& OperationState_Name(T value) {
static_assert(std::is_same<T, OperationState>::value ||
std::is_integral<T>::value,
"Incorrect type passed to OperationState_Name().");
return OperationState_Name(static_cast<OperationState>(value));
}
template <>
inline const std::string& OperationState_Name(OperationState value) {
return ::google::protobuf::internal::NameOfDenseEnum<OperationState_descriptor,
0, 3>(
static_cast<int>(value));
}
inline bool OperationState_Parse(absl::string_view name, OperationState* value) {
return ::google::protobuf::internal::ParseNamedEnum<OperationState>(
OperationState_descriptor(), name, value);
}
enum OperationType : int {
OPERATION_TYPE_UNSPECIFIED = 0,
OPERATION_TYPE_INPUT = 1,
OPERATION_TYPE_BOND_TAX = 2,
OPERATION_TYPE_OUTPUT_SECURITIES = 3,
OPERATION_TYPE_OVERNIGHT = 4,
OPERATION_TYPE_TAX = 5,
OPERATION_TYPE_BOND_REPAYMENT_FULL = 6,
OPERATION_TYPE_SELL_CARD = 7,
OPERATION_TYPE_DIVIDEND_TAX = 8,
OPERATION_TYPE_OUTPUT = 9,
OPERATION_TYPE_BOND_REPAYMENT = 10,
OPERATION_TYPE_TAX_CORRECTION = 11,
OPERATION_TYPE_SERVICE_FEE = 12,
OPERATION_TYPE_BENEFIT_TAX = 13,
OPERATION_TYPE_MARGIN_FEE = 14,
OPERATION_TYPE_BUY = 15,
OPERATION_TYPE_BUY_CARD = 16,
OPERATION_TYPE_INPUT_SECURITIES = 17,
OPERATION_TYPE_SELL_MARGIN = 18,
OPERATION_TYPE_BROKER_FEE = 19,
OPERATION_TYPE_BUY_MARGIN = 20,
OPERATION_TYPE_DIVIDEND = 21,
OPERATION_TYPE_SELL = 22,
OPERATION_TYPE_COUPON = 23,
OPERATION_TYPE_SUCCESS_FEE = 24,
OPERATION_TYPE_DIVIDEND_TRANSFER = 25,
OPERATION_TYPE_ACCRUING_VARMARGIN = 26,
OPERATION_TYPE_WRITING_OFF_VARMARGIN = 27,
OPERATION_TYPE_DELIVERY_BUY = 28,
OPERATION_TYPE_DELIVERY_SELL = 29,
OPERATION_TYPE_TRACK_MFEE = 30,
OPERATION_TYPE_TRACK_PFEE = 31,
OPERATION_TYPE_TAX_PROGRESSIVE = 32,
OPERATION_TYPE_BOND_TAX_PROGRESSIVE = 33,
OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE = 34,
OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE = 35,
OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE = 36,
OPERATION_TYPE_TAX_REPO_PROGRESSIVE = 37,
OPERATION_TYPE_TAX_REPO = 38,
OPERATION_TYPE_TAX_REPO_HOLD = 39,
OPERATION_TYPE_TAX_REPO_REFUND = 40,
OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE = 41,
OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE = 42,
OPERATION_TYPE_DIV_EXT = 43,
OPERATION_TYPE_TAX_CORRECTION_COUPON = 44,
OPERATION_TYPE_CASH_FEE = 45,
OPERATION_TYPE_OUT_FEE = 46,
OPERATION_TYPE_OUT_STAMP_DUTY = 47,
OPERATION_TYPE_OUTPUT_SWIFT = 50,
OPERATION_TYPE_INPUT_SWIFT = 51,
OPERATION_TYPE_OUTPUT_ACQUIRING = 53,
OPERATION_TYPE_INPUT_ACQUIRING = 54,
OPERATION_TYPE_OUTPUT_PENALTY = 55,
OPERATION_TYPE_ADVICE_FEE = 56,
OPERATION_TYPE_TRANS_IIS_BS = 57,
OPERATION_TYPE_TRANS_BS_BS = 58,
OPERATION_TYPE_OUT_MULTI = 59,
OPERATION_TYPE_INP_MULTI = 60,
OPERATION_TYPE_OVER_PLACEMENT = 61,
OPERATION_TYPE_OVER_COM = 62,
OPERATION_TYPE_OVER_INCOME = 63,
OPERATION_TYPE_OPTION_EXPIRATION = 64,
OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool OperationType_IsValid(int value);
extern const uint32_t OperationType_internal_data_[];
constexpr OperationType OperationType_MIN = static_cast<OperationType>(0);
constexpr OperationType OperationType_MAX = static_cast<OperationType>(64);
constexpr int OperationType_ARRAYSIZE = 64 + 1;
const ::google::protobuf::EnumDescriptor*
OperationType_descriptor();
template <typename T>
const std::string& OperationType_Name(T value) {
static_assert(std::is_same<T, OperationType>::value ||
std::is_integral<T>::value,
"Incorrect type passed to OperationType_Name().");
return OperationType_Name(static_cast<OperationType>(value));
}
template <>
inline const std::string& OperationType_Name(OperationType value) {
return ::google::protobuf::internal::NameOfDenseEnum<OperationType_descriptor,
0, 64>(
static_cast<int>(value));
}
inline bool OperationType_Parse(absl::string_view name, OperationType* value) {
return ::google::protobuf::internal::ParseNamedEnum<OperationType>(
OperationType_descriptor(), name, value);
}
enum PortfolioSubscriptionStatus : int {
PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED = 0,
PORTFOLIO_SUBSCRIPTION_STATUS_SUCCESS = 1,
PORTFOLIO_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND = 2,
PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR = 3,
PortfolioSubscriptionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
PortfolioSubscriptionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool PortfolioSubscriptionStatus_IsValid(int value);
extern const uint32_t PortfolioSubscriptionStatus_internal_data_[];
constexpr PortfolioSubscriptionStatus PortfolioSubscriptionStatus_MIN = static_cast<PortfolioSubscriptionStatus>(0);
constexpr PortfolioSubscriptionStatus PortfolioSubscriptionStatus_MAX = static_cast<PortfolioSubscriptionStatus>(3);
constexpr int PortfolioSubscriptionStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PortfolioSubscriptionStatus_descriptor();
template <typename T>
const std::string& PortfolioSubscriptionStatus_Name(T value) {
static_assert(std::is_same<T, PortfolioSubscriptionStatus>::value ||
std::is_integral<T>::value,
"Incorrect type passed to PortfolioSubscriptionStatus_Name().");
return PortfolioSubscriptionStatus_Name(static_cast<PortfolioSubscriptionStatus>(value));
}
template <>
inline const std::string& PortfolioSubscriptionStatus_Name(PortfolioSubscriptionStatus value) {
return ::google::protobuf::internal::NameOfDenseEnum<PortfolioSubscriptionStatus_descriptor,
0, 3>(
static_cast<int>(value));
}
inline bool PortfolioSubscriptionStatus_Parse(absl::string_view name, PortfolioSubscriptionStatus* value) {
return ::google::protobuf::internal::ParseNamedEnum<PortfolioSubscriptionStatus>(
PortfolioSubscriptionStatus_descriptor(), name, value);
}
enum PositionsAccountSubscriptionStatus : int {
POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED = 0,
POSITIONS_SUBSCRIPTION_STATUS_SUCCESS = 1,
POSITIONS_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND = 2,
POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR = 3,
PositionsAccountSubscriptionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::min(),
PositionsAccountSubscriptionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
std::numeric_limits<::int32_t>::max(),
};

bool PositionsAccountSubscriptionStatus_IsValid(int value);
extern const uint32_t PositionsAccountSubscriptionStatus_internal_data_[];
constexpr PositionsAccountSubscriptionStatus PositionsAccountSubscriptionStatus_MIN = static_cast<PositionsAccountSubscriptionStatus>(0);
constexpr PositionsAccountSubscriptionStatus PositionsAccountSubscriptionStatus_MAX = static_cast<PositionsAccountSubscriptionStatus>(3);
constexpr int PositionsAccountSubscriptionStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PositionsAccountSubscriptionStatus_descriptor();
template <typename T>
const std::string& PositionsAccountSubscriptionStatus_Name(T value) {
static_assert(std::is_same<T, PositionsAccountSubscriptionStatus>::value ||
std::is_integral<T>::value,
"Incorrect type passed to PositionsAccountSubscriptionStatus_Name().");
return PositionsAccountSubscriptionStatus_Name(static_cast<PositionsAccountSubscriptionStatus>(value));
}
template <>
inline const std::string& PositionsAccountSubscriptionStatus_Name(PositionsAccountSubscriptionStatus value) {
return ::google::protobuf::internal::NameOfDenseEnum<PositionsAccountSubscriptionStatus_descriptor,
0, 3>(
static_cast<int>(value));
}
inline bool PositionsAccountSubscriptionStatus_Parse(absl::string_view name, PositionsAccountSubscriptionStatus* value) {
return ::google::protobuf::internal::ParseNamedEnum<PositionsAccountSubscriptionStatus>(
PositionsAccountSubscriptionStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WithdrawLimitsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest) */ {
public:
inline WithdrawLimitsRequest() : WithdrawLimitsRequest(nullptr) {}
~WithdrawLimitsRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR WithdrawLimitsRequest(
::google::protobuf::internal::ConstantInitialized);

inline WithdrawLimitsRequest(const WithdrawLimitsRequest& from) : WithdrawLimitsRequest(nullptr, from) {}
inline WithdrawLimitsRequest(WithdrawLimitsRequest&& from) noexcept
: WithdrawLimitsRequest(nullptr, std::move(from)) {}
inline WithdrawLimitsRequest& operator=(const WithdrawLimitsRequest& from) {
CopyFrom(from);
return *this;
}
inline WithdrawLimitsRequest& operator=(WithdrawLimitsRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const WithdrawLimitsRequest& default_instance() {
return *internal_default_instance();
}
static inline const WithdrawLimitsRequest* internal_default_instance() {
return reinterpret_cast<const WithdrawLimitsRequest*>(
&_WithdrawLimitsRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 8;
friend void swap(WithdrawLimitsRequest& a, WithdrawLimitsRequest& b) { a.Swap(&b); }
inline void Swap(WithdrawLimitsRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(WithdrawLimitsRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

WithdrawLimitsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<WithdrawLimitsRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const WithdrawLimitsRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const WithdrawLimitsRequest& from) { WithdrawLimitsRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(WithdrawLimitsRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest"; }

protected:
explicit WithdrawLimitsRequest(::google::protobuf::Arena* arena);
WithdrawLimitsRequest(::google::protobuf::Arena* arena, const WithdrawLimitsRequest& from);
WithdrawLimitsRequest(::google::protobuf::Arena* arena, WithdrawLimitsRequest&& from) noexcept
: WithdrawLimitsRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 0,
78, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr account_id_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsSubscriptionStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus) */ {
public:
inline PositionsSubscriptionStatus() : PositionsSubscriptionStatus(nullptr) {}
~PositionsSubscriptionStatus() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsSubscriptionStatus(
::google::protobuf::internal::ConstantInitialized);

inline PositionsSubscriptionStatus(const PositionsSubscriptionStatus& from) : PositionsSubscriptionStatus(nullptr, from) {}
inline PositionsSubscriptionStatus(PositionsSubscriptionStatus&& from) noexcept
: PositionsSubscriptionStatus(nullptr, std::move(from)) {}
inline PositionsSubscriptionStatus& operator=(const PositionsSubscriptionStatus& from) {
CopyFrom(from);
return *this;
}
inline PositionsSubscriptionStatus& operator=(PositionsSubscriptionStatus&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsSubscriptionStatus& default_instance() {
return *internal_default_instance();
}
static inline const PositionsSubscriptionStatus* internal_default_instance() {
return reinterpret_cast<const PositionsSubscriptionStatus*>(
&_PositionsSubscriptionStatus_default_instance_);
}
static constexpr int kIndexInFileMessages = 41;
friend void swap(PositionsSubscriptionStatus& a, PositionsSubscriptionStatus& b) { a.Swap(&b); }
inline void Swap(PositionsSubscriptionStatus* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsSubscriptionStatus* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsSubscriptionStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsSubscriptionStatus>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsSubscriptionStatus& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsSubscriptionStatus& from) { PositionsSubscriptionStatus::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsSubscriptionStatus* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus"; }

protected:
explicit PositionsSubscriptionStatus(::google::protobuf::Arena* arena);
PositionsSubscriptionStatus(::google::protobuf::Arena* arena, const PositionsSubscriptionStatus& from);
PositionsSubscriptionStatus(::google::protobuf::Arena* arena, PositionsSubscriptionStatus&& from) noexcept
: PositionsSubscriptionStatus(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
kSubscriptionStatusFieldNumber = 6,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// .tinkoff.public.invest.api.contract.v1.PositionsAccountSubscriptionStatus subscription_status = 6;
void clear_subscription_status() ;
::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus subscription_status() const;
void set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value);

private:
::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus _internal_subscription_status() const;
void _internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
1, 2, 0,
84, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr account_id_;
int subscription_status_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsStreamRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest) */ {
public:
inline PositionsStreamRequest() : PositionsStreamRequest(nullptr) {}
~PositionsStreamRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsStreamRequest(
::google::protobuf::internal::ConstantInitialized);

inline PositionsStreamRequest(const PositionsStreamRequest& from) : PositionsStreamRequest(nullptr, from) {}
inline PositionsStreamRequest(PositionsStreamRequest&& from) noexcept
: PositionsStreamRequest(nullptr, std::move(from)) {}
inline PositionsStreamRequest& operator=(const PositionsStreamRequest& from) {
CopyFrom(from);
return *this;
}
inline PositionsStreamRequest& operator=(PositionsStreamRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsStreamRequest& default_instance() {
return *internal_default_instance();
}
static inline const PositionsStreamRequest* internal_default_instance() {
return reinterpret_cast<const PositionsStreamRequest*>(
&_PositionsStreamRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 38;
friend void swap(PositionsStreamRequest& a, PositionsStreamRequest& b) { a.Swap(&b); }
inline void Swap(PositionsStreamRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsStreamRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsStreamRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsStreamRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsStreamRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsStreamRequest& from) { PositionsStreamRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsStreamRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsStreamRequest"; }

protected:
explicit PositionsStreamRequest(::google::protobuf::Arena* arena);
PositionsStreamRequest(::google::protobuf::Arena* arena, const PositionsStreamRequest& from);
PositionsStreamRequest(::google::protobuf::Arena* arena, PositionsStreamRequest&& from) noexcept
: PositionsStreamRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountsFieldNumber = 1,
};
// repeated string accounts = 1;
int accounts_size() const;
private:
int _internal_accounts_size() const;

public:
void clear_accounts() ;
const std::string& accounts(int index) const;
std::string* mutable_accounts(int index);
void set_accounts(int index, const std::string& value);
void set_accounts(int index, std::string&& value);
void set_accounts(int index, const char* value);
void set_accounts(int index, const char* value, std::size_t size);
void set_accounts(int index, absl::string_view value);
std::string* add_accounts();
void add_accounts(const std::string& value);
void add_accounts(std::string&& value);
void add_accounts(const char* value);
void add_accounts(const char* value, std::size_t size);
void add_accounts(absl::string_view value);
const ::google::protobuf::RepeatedPtrField<std::string>& accounts() const;
::google::protobuf::RepeatedPtrField<std::string>* mutable_accounts();

private:
const ::google::protobuf::RepeatedPtrField<std::string>& _internal_accounts() const;
::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_accounts();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 0,
77, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField<std::string> accounts_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsSecurities final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsSecurities) */ {
public:
inline PositionsSecurities() : PositionsSecurities(nullptr) {}
~PositionsSecurities() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsSecurities(
::google::protobuf::internal::ConstantInitialized);

inline PositionsSecurities(const PositionsSecurities& from) : PositionsSecurities(nullptr, from) {}
inline PositionsSecurities(PositionsSecurities&& from) noexcept
: PositionsSecurities(nullptr, std::move(from)) {}
inline PositionsSecurities& operator=(const PositionsSecurities& from) {
CopyFrom(from);
return *this;
}
inline PositionsSecurities& operator=(PositionsSecurities&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsSecurities& default_instance() {
return *internal_default_instance();
}
static inline const PositionsSecurities* internal_default_instance() {
return reinterpret_cast<const PositionsSecurities*>(
&_PositionsSecurities_default_instance_);
}
static constexpr int kIndexInFileMessages = 12;
friend void swap(PositionsSecurities& a, PositionsSecurities& b) { a.Swap(&b); }
inline void Swap(PositionsSecurities* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsSecurities* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsSecurities* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsSecurities>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsSecurities& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsSecurities& from) { PositionsSecurities::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsSecurities* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsSecurities"; }

protected:
explicit PositionsSecurities(::google::protobuf::Arena* arena);
PositionsSecurities(::google::protobuf::Arena* arena, const PositionsSecurities& from);
PositionsSecurities(::google::protobuf::Arena* arena, PositionsSecurities&& from) noexcept
: PositionsSecurities(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kFigiFieldNumber = 1,
kPositionUidFieldNumber = 4,
kInstrumentUidFieldNumber = 5,
kInstrumentTypeFieldNumber = 16,
kBlockedFieldNumber = 2,
kBalanceFieldNumber = 3,
kExchangeBlockedFieldNumber = 11,
};
// string figi = 1;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// string position_uid = 4;
void clear_position_uid() ;
const std::string& position_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_position_uid(Arg_&& arg, Args_... args);
std::string* mutable_position_uid();
PROTOBUF_NODISCARD std::string* release_position_uid();
void set_allocated_position_uid(std::string* value);

private:
const std::string& _internal_position_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
const std::string& value);
std::string* _internal_mutable_position_uid();

public:
// string instrument_uid = 5;
void clear_instrument_uid() ;
const std::string& instrument_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_uid(Arg_&& arg, Args_... args);
std::string* mutable_instrument_uid();
PROTOBUF_NODISCARD std::string* release_instrument_uid();
void set_allocated_instrument_uid(std::string* value);

private:
const std::string& _internal_instrument_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
const std::string& value);
std::string* _internal_mutable_instrument_uid();

public:
// string instrument_type = 16;
void clear_instrument_type() ;
const std::string& instrument_type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_type(Arg_&& arg, Args_... args);
std::string* mutable_instrument_type();
PROTOBUF_NODISCARD std::string* release_instrument_type();
void set_allocated_instrument_type(std::string* value);

private:
const std::string& _internal_instrument_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
const std::string& value);
std::string* _internal_mutable_instrument_type();

public:
// int64 blocked = 2;
void clear_blocked() ;
::int64_t blocked() const;
void set_blocked(::int64_t value);

private:
::int64_t _internal_blocked() const;
void _internal_set_blocked(::int64_t value);

public:
// int64 balance = 3;
void clear_balance() ;
::int64_t balance() const;
void set_balance(::int64_t value);

private:
::int64_t _internal_balance() const;
void _internal_set_balance(::int64_t value);

public:
// bool exchange_blocked = 11;
void clear_exchange_blocked() ;
bool exchange_blocked() const;
void set_exchange_blocked(bool value);

private:
bool _internal_exchange_blocked() const;
void _internal_set_exchange_blocked(bool value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsSecurities)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
3, 7, 0,
111, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::internal::ArenaStringPtr position_uid_;
::google::protobuf::internal::ArenaStringPtr instrument_uid_;
::google::protobuf::internal::ArenaStringPtr instrument_type_;
::int64_t blocked_;
::int64_t balance_;
bool exchange_blocked_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsRequest) */ {
public:
inline PositionsRequest() : PositionsRequest(nullptr) {}
~PositionsRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsRequest(
::google::protobuf::internal::ConstantInitialized);

inline PositionsRequest(const PositionsRequest& from) : PositionsRequest(nullptr, from) {}
inline PositionsRequest(PositionsRequest&& from) noexcept
: PositionsRequest(nullptr, std::move(from)) {}
inline PositionsRequest& operator=(const PositionsRequest& from) {
CopyFrom(from);
return *this;
}
inline PositionsRequest& operator=(PositionsRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsRequest& default_instance() {
return *internal_default_instance();
}
static inline const PositionsRequest* internal_default_instance() {
return reinterpret_cast<const PositionsRequest*>(
&_PositionsRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 6;
friend void swap(PositionsRequest& a, PositionsRequest& b) { a.Swap(&b); }
inline void Swap(PositionsRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsRequest& from) { PositionsRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsRequest"; }

protected:
explicit PositionsRequest(::google::protobuf::Arena* arena);
PositionsRequest(::google::protobuf::Arena* arena, const PositionsRequest& from);
PositionsRequest(::google::protobuf::Arena* arena, PositionsRequest&& from) noexcept
: PositionsRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 0,
73, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr account_id_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsOptions) */ {
public:
inline PositionsOptions() : PositionsOptions(nullptr) {}
~PositionsOptions() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsOptions(
::google::protobuf::internal::ConstantInitialized);

inline PositionsOptions(const PositionsOptions& from) : PositionsOptions(nullptr, from) {}
inline PositionsOptions(PositionsOptions&& from) noexcept
: PositionsOptions(nullptr, std::move(from)) {}
inline PositionsOptions& operator=(const PositionsOptions& from) {
CopyFrom(from);
return *this;
}
inline PositionsOptions& operator=(PositionsOptions&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsOptions& default_instance() {
return *internal_default_instance();
}
static inline const PositionsOptions* internal_default_instance() {
return reinterpret_cast<const PositionsOptions*>(
&_PositionsOptions_default_instance_);
}
static constexpr int kIndexInFileMessages = 14;
friend void swap(PositionsOptions& a, PositionsOptions& b) { a.Swap(&b); }
inline void Swap(PositionsOptions* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsOptions* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsOptions* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsOptions>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsOptions& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsOptions& from) { PositionsOptions::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsOptions* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsOptions"; }

protected:
explicit PositionsOptions(::google::protobuf::Arena* arena);
PositionsOptions(::google::protobuf::Arena* arena, const PositionsOptions& from);
PositionsOptions(::google::protobuf::Arena* arena, PositionsOptions&& from) noexcept
: PositionsOptions(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kPositionUidFieldNumber = 1,
kInstrumentUidFieldNumber = 2,
kBlockedFieldNumber = 11,
kBalanceFieldNumber = 21,
};
// string position_uid = 1;
void clear_position_uid() ;
const std::string& position_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_position_uid(Arg_&& arg, Args_... args);
std::string* mutable_position_uid();
PROTOBUF_NODISCARD std::string* release_position_uid();
void set_allocated_position_uid(std::string* value);

private:
const std::string& _internal_position_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
const std::string& value);
std::string* _internal_mutable_position_uid();

public:
// string instrument_uid = 2;
void clear_instrument_uid() ;
const std::string& instrument_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_uid(Arg_&& arg, Args_... args);
std::string* mutable_instrument_uid();
PROTOBUF_NODISCARD std::string* release_instrument_uid();
void set_allocated_instrument_uid(std::string* value);

private:
const std::string& _internal_instrument_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
const std::string& value);
std::string* _internal_mutable_instrument_uid();

public:
// int64 blocked = 11;
void clear_blocked() ;
::int64_t blocked() const;
void set_blocked(::int64_t value);

private:
::int64_t _internal_blocked() const;
void _internal_set_blocked(::int64_t value);

public:
// int64 balance = 21;
void clear_balance() ;
::int64_t balance() const;
void set_balance(::int64_t value);

private:
::int64_t _internal_balance() const;
void _internal_set_balance(::int64_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsOptions)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
3, 4, 0,
89, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr position_uid_;
::google::protobuf::internal::ArenaStringPtr instrument_uid_;
::int64_t blocked_;
::int64_t balance_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsFutures final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsFutures) */ {
public:
inline PositionsFutures() : PositionsFutures(nullptr) {}
~PositionsFutures() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsFutures(
::google::protobuf::internal::ConstantInitialized);

inline PositionsFutures(const PositionsFutures& from) : PositionsFutures(nullptr, from) {}
inline PositionsFutures(PositionsFutures&& from) noexcept
: PositionsFutures(nullptr, std::move(from)) {}
inline PositionsFutures& operator=(const PositionsFutures& from) {
CopyFrom(from);
return *this;
}
inline PositionsFutures& operator=(PositionsFutures&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsFutures& default_instance() {
return *internal_default_instance();
}
static inline const PositionsFutures* internal_default_instance() {
return reinterpret_cast<const PositionsFutures*>(
&_PositionsFutures_default_instance_);
}
static constexpr int kIndexInFileMessages = 13;
friend void swap(PositionsFutures& a, PositionsFutures& b) { a.Swap(&b); }
inline void Swap(PositionsFutures* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsFutures* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsFutures* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsFutures>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsFutures& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsFutures& from) { PositionsFutures::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsFutures* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsFutures"; }

protected:
explicit PositionsFutures(::google::protobuf::Arena* arena);
PositionsFutures(::google::protobuf::Arena* arena, const PositionsFutures& from);
PositionsFutures(::google::protobuf::Arena* arena, PositionsFutures&& from) noexcept
: PositionsFutures(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kFigiFieldNumber = 1,
kPositionUidFieldNumber = 4,
kInstrumentUidFieldNumber = 5,
kBlockedFieldNumber = 2,
kBalanceFieldNumber = 3,
};
// string figi = 1;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// string position_uid = 4;
void clear_position_uid() ;
const std::string& position_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_position_uid(Arg_&& arg, Args_... args);
std::string* mutable_position_uid();
PROTOBUF_NODISCARD std::string* release_position_uid();
void set_allocated_position_uid(std::string* value);

private:
const std::string& _internal_position_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
const std::string& value);
std::string* _internal_mutable_position_uid();

public:
// string instrument_uid = 5;
void clear_instrument_uid() ;
const std::string& instrument_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_uid(Arg_&& arg, Args_... args);
std::string* mutable_instrument_uid();
PROTOBUF_NODISCARD std::string* release_instrument_uid();
void set_allocated_instrument_uid(std::string* value);

private:
const std::string& _internal_instrument_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
const std::string& value);
std::string* _internal_mutable_instrument_uid();

public:
// int64 blocked = 2;
void clear_blocked() ;
::int64_t blocked() const;
void set_blocked(::int64_t value);

private:
::int64_t _internal_blocked() const;
void _internal_set_blocked(::int64_t value);

public:
// int64 balance = 3;
void clear_balance() ;
::int64_t balance() const;
void set_balance(::int64_t value);

private:
::int64_t _internal_balance() const;
void _internal_set_balance(::int64_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsFutures)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
3, 5, 0,
93, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::internal::ArenaStringPtr position_uid_;
::google::protobuf::internal::ArenaStringPtr instrument_uid_;
::int64_t blocked_;
::int64_t balance_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioStreamRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest) */ {
public:
inline PortfolioStreamRequest() : PortfolioStreamRequest(nullptr) {}
~PortfolioStreamRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PortfolioStreamRequest(
::google::protobuf::internal::ConstantInitialized);

inline PortfolioStreamRequest(const PortfolioStreamRequest& from) : PortfolioStreamRequest(nullptr, from) {}
inline PortfolioStreamRequest(PortfolioStreamRequest&& from) noexcept
: PortfolioStreamRequest(nullptr, std::move(from)) {}
inline PortfolioStreamRequest& operator=(const PortfolioStreamRequest& from) {
CopyFrom(from);
return *this;
}
inline PortfolioStreamRequest& operator=(PortfolioStreamRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PortfolioStreamRequest& default_instance() {
return *internal_default_instance();
}
static inline const PortfolioStreamRequest* internal_default_instance() {
return reinterpret_cast<const PortfolioStreamRequest*>(
&_PortfolioStreamRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 29;
friend void swap(PortfolioStreamRequest& a, PortfolioStreamRequest& b) { a.Swap(&b); }
inline void Swap(PortfolioStreamRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PortfolioStreamRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PortfolioStreamRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PortfolioStreamRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PortfolioStreamRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PortfolioStreamRequest& from) { PortfolioStreamRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PortfolioStreamRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest"; }

protected:
explicit PortfolioStreamRequest(::google::protobuf::Arena* arena);
PortfolioStreamRequest(::google::protobuf::Arena* arena, const PortfolioStreamRequest& from);
PortfolioStreamRequest(::google::protobuf::Arena* arena, PortfolioStreamRequest&& from) noexcept
: PortfolioStreamRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountsFieldNumber = 1,
};
// repeated string accounts = 1;
int accounts_size() const;
private:
int _internal_accounts_size() const;

public:
void clear_accounts() ;
const std::string& accounts(int index) const;
std::string* mutable_accounts(int index);
void set_accounts(int index, const std::string& value);
void set_accounts(int index, std::string&& value);
void set_accounts(int index, const char* value);
void set_accounts(int index, const char* value, std::size_t size);
void set_accounts(int index, absl::string_view value);
std::string* add_accounts();
void add_accounts(const std::string& value);
void add_accounts(std::string&& value);
void add_accounts(const char* value);
void add_accounts(const char* value, std::size_t size);
void add_accounts(absl::string_view value);
const ::google::protobuf::RepeatedPtrField<std::string>& accounts() const;
::google::protobuf::RepeatedPtrField<std::string>* mutable_accounts();

private:
const ::google::protobuf::RepeatedPtrField<std::string>& _internal_accounts() const;
::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_accounts();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 0,
77, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField<std::string> accounts_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PortfolioRequest) */ {
public:
inline PortfolioRequest() : PortfolioRequest(nullptr) {}
~PortfolioRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PortfolioRequest(
::google::protobuf::internal::ConstantInitialized);

inline PortfolioRequest(const PortfolioRequest& from) : PortfolioRequest(nullptr, from) {}
inline PortfolioRequest(PortfolioRequest&& from) noexcept
: PortfolioRequest(nullptr, std::move(from)) {}
inline PortfolioRequest& operator=(const PortfolioRequest& from) {
CopyFrom(from);
return *this;
}
inline PortfolioRequest& operator=(PortfolioRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PortfolioRequest& default_instance() {
return *internal_default_instance();
}
static inline const PortfolioRequest* internal_default_instance() {
return reinterpret_cast<const PortfolioRequest*>(
&_PortfolioRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 4;
friend void swap(PortfolioRequest& a, PortfolioRequest& b) { a.Swap(&b); }
inline void Swap(PortfolioRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PortfolioRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PortfolioRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PortfolioRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PortfolioRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PortfolioRequest& from) { PortfolioRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PortfolioRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PortfolioRequest"; }

protected:
explicit PortfolioRequest(::google::protobuf::Arena* arena);
PortfolioRequest(::google::protobuf::Arena* arena, const PortfolioRequest& from);
PortfolioRequest(::google::protobuf::Arena* arena, PortfolioRequest&& from) noexcept
: PortfolioRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------
using CurrencyRequest = PortfolioRequest_CurrencyRequest;
static constexpr CurrencyRequest RUB = PortfolioRequest_CurrencyRequest_RUB;
static constexpr CurrencyRequest USD = PortfolioRequest_CurrencyRequest_USD;
static constexpr CurrencyRequest EUR = PortfolioRequest_CurrencyRequest_EUR;
static inline bool CurrencyRequest_IsValid(int value) {
return PortfolioRequest_CurrencyRequest_IsValid(value);
}
static constexpr CurrencyRequest CurrencyRequest_MIN = PortfolioRequest_CurrencyRequest_CurrencyRequest_MIN;
static constexpr CurrencyRequest CurrencyRequest_MAX = PortfolioRequest_CurrencyRequest_CurrencyRequest_MAX;
static constexpr int CurrencyRequest_ARRAYSIZE = PortfolioRequest_CurrencyRequest_CurrencyRequest_ARRAYSIZE;
static inline const ::google::protobuf::EnumDescriptor* CurrencyRequest_descriptor() {
return PortfolioRequest_CurrencyRequest_descriptor();
}
template <typename T>
static inline const std::string& CurrencyRequest_Name(T value) {
return PortfolioRequest_CurrencyRequest_Name(value);
}
static inline bool CurrencyRequest_Parse(absl::string_view name, CurrencyRequest* value) {
return PortfolioRequest_CurrencyRequest_Parse(name, value);
}

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
kCurrencyFieldNumber = 2,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// .tinkoff.public.invest.api.contract.v1.PortfolioRequest.CurrencyRequest currency = 2;
void clear_currency() ;
::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest currency() const;
void set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value);

private:
::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest _internal_currency() const;
void _internal_set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PortfolioRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
1, 2, 0,
73, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr account_id_;
int currency_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerReportRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest) */ {
public:
inline GetDividendsForeignIssuerReportRequest() : GetDividendsForeignIssuerReportRequest(nullptr) {}
~GetDividendsForeignIssuerReportRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportRequest(
::google::protobuf::internal::ConstantInitialized);

inline GetDividendsForeignIssuerReportRequest(const GetDividendsForeignIssuerReportRequest& from) : GetDividendsForeignIssuerReportRequest(nullptr, from) {}
inline GetDividendsForeignIssuerReportRequest(GetDividendsForeignIssuerReportRequest&& from) noexcept
: GetDividendsForeignIssuerReportRequest(nullptr, std::move(from)) {}
inline GetDividendsForeignIssuerReportRequest& operator=(const GetDividendsForeignIssuerReportRequest& from) {
CopyFrom(from);
return *this;
}
inline GetDividendsForeignIssuerReportRequest& operator=(GetDividendsForeignIssuerReportRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetDividendsForeignIssuerReportRequest& default_instance() {
return *internal_default_instance();
}
static inline const GetDividendsForeignIssuerReportRequest* internal_default_instance() {
return reinterpret_cast<const GetDividendsForeignIssuerReportRequest*>(
&_GetDividendsForeignIssuerReportRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 25;
friend void swap(GetDividendsForeignIssuerReportRequest& a, GetDividendsForeignIssuerReportRequest& b) { a.Swap(&b); }
inline void Swap(GetDividendsForeignIssuerReportRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetDividendsForeignIssuerReportRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetDividendsForeignIssuerReportRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetDividendsForeignIssuerReportRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetDividendsForeignIssuerReportRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetDividendsForeignIssuerReportRequest& from) { GetDividendsForeignIssuerReportRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetDividendsForeignIssuerReportRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest"; }

protected:
explicit GetDividendsForeignIssuerReportRequest(::google::protobuf::Arena* arena);
GetDividendsForeignIssuerReportRequest(::google::protobuf::Arena* arena, const GetDividendsForeignIssuerReportRequest& from);
GetDividendsForeignIssuerReportRequest(::google::protobuf::Arena* arena, GetDividendsForeignIssuerReportRequest&& from) noexcept
: GetDividendsForeignIssuerReportRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTaskIdFieldNumber = 1,
kPageFieldNumber = 2,
};
// string task_id = 1;
void clear_task_id() ;
const std::string& task_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_task_id(Arg_&& arg, Args_... args);
std::string* mutable_task_id();
PROTOBUF_NODISCARD std::string* release_task_id();
void set_allocated_task_id(std::string* value);

private:
const std::string& _internal_task_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
const std::string& value);
std::string* _internal_mutable_task_id();

public:
// int32 page = 2;
void clear_page() ;
::int32_t page() const;
void set_page(::int32_t value);

private:
::int32_t _internal_page() const;
void _internal_set_page(::int32_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
1, 2, 0,
92, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr task_id_;
::int32_t page_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetBrokerReportRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest) */ {
public:
inline GetBrokerReportRequest() : GetBrokerReportRequest(nullptr) {}
~GetBrokerReportRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetBrokerReportRequest(
::google::protobuf::internal::ConstantInitialized);

inline GetBrokerReportRequest(const GetBrokerReportRequest& from) : GetBrokerReportRequest(nullptr, from) {}
inline GetBrokerReportRequest(GetBrokerReportRequest&& from) noexcept
: GetBrokerReportRequest(nullptr, std::move(from)) {}
inline GetBrokerReportRequest& operator=(const GetBrokerReportRequest& from) {
CopyFrom(from);
return *this;
}
inline GetBrokerReportRequest& operator=(GetBrokerReportRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetBrokerReportRequest& default_instance() {
return *internal_default_instance();
}
static inline const GetBrokerReportRequest* internal_default_instance() {
return reinterpret_cast<const GetBrokerReportRequest*>(
&_GetBrokerReportRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 19;
friend void swap(GetBrokerReportRequest& a, GetBrokerReportRequest& b) { a.Swap(&b); }
inline void Swap(GetBrokerReportRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetBrokerReportRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetBrokerReportRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetBrokerReportRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetBrokerReportRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetBrokerReportRequest& from) { GetBrokerReportRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetBrokerReportRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest"; }

protected:
explicit GetBrokerReportRequest(::google::protobuf::Arena* arena);
GetBrokerReportRequest(::google::protobuf::Arena* arena, const GetBrokerReportRequest& from);
GetBrokerReportRequest(::google::protobuf::Arena* arena, GetBrokerReportRequest&& from) noexcept
: GetBrokerReportRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTaskIdFieldNumber = 1,
kPageFieldNumber = 2,
};
// string task_id = 1;
void clear_task_id() ;
const std::string& task_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_task_id(Arg_&& arg, Args_... args);
std::string* mutable_task_id();
PROTOBUF_NODISCARD std::string* release_task_id();
void set_allocated_task_id(std::string* value);

private:
const std::string& _internal_task_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
const std::string& value);
std::string* _internal_mutable_task_id();

public:
// int32 page = 2;
void clear_page() ;
::int32_t page() const;
void set_page(::int32_t value);

private:
::int32_t _internal_page() const;
void _internal_set_page(::int32_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
1, 2, 0,
76, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr task_id_;
::int32_t page_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateDividendsForeignIssuerReportResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse) */ {
public:
inline GenerateDividendsForeignIssuerReportResponse() : GenerateDividendsForeignIssuerReportResponse(nullptr) {}
~GenerateDividendsForeignIssuerReportResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportResponse(
::google::protobuf::internal::ConstantInitialized);

inline GenerateDividendsForeignIssuerReportResponse(const GenerateDividendsForeignIssuerReportResponse& from) : GenerateDividendsForeignIssuerReportResponse(nullptr, from) {}
inline GenerateDividendsForeignIssuerReportResponse(GenerateDividendsForeignIssuerReportResponse&& from) noexcept
: GenerateDividendsForeignIssuerReportResponse(nullptr, std::move(from)) {}
inline GenerateDividendsForeignIssuerReportResponse& operator=(const GenerateDividendsForeignIssuerReportResponse& from) {
CopyFrom(from);
return *this;
}
inline GenerateDividendsForeignIssuerReportResponse& operator=(GenerateDividendsForeignIssuerReportResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GenerateDividendsForeignIssuerReportResponse& default_instance() {
return *internal_default_instance();
}
static inline const GenerateDividendsForeignIssuerReportResponse* internal_default_instance() {
return reinterpret_cast<const GenerateDividendsForeignIssuerReportResponse*>(
&_GenerateDividendsForeignIssuerReportResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 26;
friend void swap(GenerateDividendsForeignIssuerReportResponse& a, GenerateDividendsForeignIssuerReportResponse& b) { a.Swap(&b); }
inline void Swap(GenerateDividendsForeignIssuerReportResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GenerateDividendsForeignIssuerReportResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GenerateDividendsForeignIssuerReportResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GenerateDividendsForeignIssuerReportResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GenerateDividendsForeignIssuerReportResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GenerateDividendsForeignIssuerReportResponse& from) { GenerateDividendsForeignIssuerReportResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GenerateDividendsForeignIssuerReportResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse"; }

protected:
explicit GenerateDividendsForeignIssuerReportResponse(::google::protobuf::Arena* arena);
GenerateDividendsForeignIssuerReportResponse(::google::protobuf::Arena* arena, const GenerateDividendsForeignIssuerReportResponse& from);
GenerateDividendsForeignIssuerReportResponse(::google::protobuf::Arena* arena, GenerateDividendsForeignIssuerReportResponse&& from) noexcept
: GenerateDividendsForeignIssuerReportResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTaskIdFieldNumber = 1,
};
// string task_id = 1;
void clear_task_id() ;
const std::string& task_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_task_id(Arg_&& arg, Args_... args);
std::string* mutable_task_id();
PROTOBUF_NODISCARD std::string* release_task_id();
void set_allocated_task_id(std::string* value);

private:
const std::string& _internal_task_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
const std::string& value);
std::string* _internal_mutable_task_id();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 0,
98, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr task_id_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateBrokerReportResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse) */ {
public:
inline GenerateBrokerReportResponse() : GenerateBrokerReportResponse(nullptr) {}
~GenerateBrokerReportResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GenerateBrokerReportResponse(
::google::protobuf::internal::ConstantInitialized);

inline GenerateBrokerReportResponse(const GenerateBrokerReportResponse& from) : GenerateBrokerReportResponse(nullptr, from) {}
inline GenerateBrokerReportResponse(GenerateBrokerReportResponse&& from) noexcept
: GenerateBrokerReportResponse(nullptr, std::move(from)) {}
inline GenerateBrokerReportResponse& operator=(const GenerateBrokerReportResponse& from) {
CopyFrom(from);
return *this;
}
inline GenerateBrokerReportResponse& operator=(GenerateBrokerReportResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GenerateBrokerReportResponse& default_instance() {
return *internal_default_instance();
}
static inline const GenerateBrokerReportResponse* internal_default_instance() {
return reinterpret_cast<const GenerateBrokerReportResponse*>(
&_GenerateBrokerReportResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 18;
friend void swap(GenerateBrokerReportResponse& a, GenerateBrokerReportResponse& b) { a.Swap(&b); }
inline void Swap(GenerateBrokerReportResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GenerateBrokerReportResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GenerateBrokerReportResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GenerateBrokerReportResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GenerateBrokerReportResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GenerateBrokerReportResponse& from) { GenerateBrokerReportResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GenerateBrokerReportResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse"; }

protected:
explicit GenerateBrokerReportResponse(::google::protobuf::Arena* arena);
GenerateBrokerReportResponse(::google::protobuf::Arena* arena, const GenerateBrokerReportResponse& from);
GenerateBrokerReportResponse(::google::protobuf::Arena* arena, GenerateBrokerReportResponse&& from) noexcept
: GenerateBrokerReportResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTaskIdFieldNumber = 1,
};
// string task_id = 1;
void clear_task_id() ;
const std::string& task_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_task_id(Arg_&& arg, Args_... args);
std::string* mutable_task_id();
PROTOBUF_NODISCARD std::string* release_task_id();
void set_allocated_task_id(std::string* value);

private:
const std::string& _internal_task_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
const std::string& value);
std::string* _internal_mutable_task_id();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 0,
82, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr task_id_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class AccountSubscriptionStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus) */ {
public:
inline AccountSubscriptionStatus() : AccountSubscriptionStatus(nullptr) {}
~AccountSubscriptionStatus() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR AccountSubscriptionStatus(
::google::protobuf::internal::ConstantInitialized);

inline AccountSubscriptionStatus(const AccountSubscriptionStatus& from) : AccountSubscriptionStatus(nullptr, from) {}
inline AccountSubscriptionStatus(AccountSubscriptionStatus&& from) noexcept
: AccountSubscriptionStatus(nullptr, std::move(from)) {}
inline AccountSubscriptionStatus& operator=(const AccountSubscriptionStatus& from) {
CopyFrom(from);
return *this;
}
inline AccountSubscriptionStatus& operator=(AccountSubscriptionStatus&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const AccountSubscriptionStatus& default_instance() {
return *internal_default_instance();
}
static inline const AccountSubscriptionStatus* internal_default_instance() {
return reinterpret_cast<const AccountSubscriptionStatus*>(
&_AccountSubscriptionStatus_default_instance_);
}
static constexpr int kIndexInFileMessages = 32;
friend void swap(AccountSubscriptionStatus& a, AccountSubscriptionStatus& b) { a.Swap(&b); }
inline void Swap(AccountSubscriptionStatus* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(AccountSubscriptionStatus* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

AccountSubscriptionStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<AccountSubscriptionStatus>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const AccountSubscriptionStatus& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const AccountSubscriptionStatus& from) { AccountSubscriptionStatus::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(AccountSubscriptionStatus* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus"; }

protected:
explicit AccountSubscriptionStatus(::google::protobuf::Arena* arena);
AccountSubscriptionStatus(::google::protobuf::Arena* arena, const AccountSubscriptionStatus& from);
AccountSubscriptionStatus(::google::protobuf::Arena* arena, AccountSubscriptionStatus&& from) noexcept
: AccountSubscriptionStatus(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
kSubscriptionStatusFieldNumber = 6,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// .tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionStatus subscription_status = 6;
void clear_subscription_status() ;
::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus subscription_status() const;
void set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value);

private:
::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus _internal_subscription_status() const;
void _internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
1, 2, 0,
82, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::ArenaStringPtr account_id_;
int subscription_status_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class WithdrawLimitsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse) */ {
public:
inline WithdrawLimitsResponse() : WithdrawLimitsResponse(nullptr) {}
~WithdrawLimitsResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR WithdrawLimitsResponse(
::google::protobuf::internal::ConstantInitialized);

inline WithdrawLimitsResponse(const WithdrawLimitsResponse& from) : WithdrawLimitsResponse(nullptr, from) {}
inline WithdrawLimitsResponse(WithdrawLimitsResponse&& from) noexcept
: WithdrawLimitsResponse(nullptr, std::move(from)) {}
inline WithdrawLimitsResponse& operator=(const WithdrawLimitsResponse& from) {
CopyFrom(from);
return *this;
}
inline WithdrawLimitsResponse& operator=(WithdrawLimitsResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const WithdrawLimitsResponse& default_instance() {
return *internal_default_instance();
}
static inline const WithdrawLimitsResponse* internal_default_instance() {
return reinterpret_cast<const WithdrawLimitsResponse*>(
&_WithdrawLimitsResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 9;
friend void swap(WithdrawLimitsResponse& a, WithdrawLimitsResponse& b) { a.Swap(&b); }
inline void Swap(WithdrawLimitsResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(WithdrawLimitsResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

WithdrawLimitsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<WithdrawLimitsResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const WithdrawLimitsResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const WithdrawLimitsResponse& from) { WithdrawLimitsResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(WithdrawLimitsResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse"; }

protected:
explicit WithdrawLimitsResponse(::google::protobuf::Arena* arena);
WithdrawLimitsResponse(::google::protobuf::Arena* arena, const WithdrawLimitsResponse& from);
WithdrawLimitsResponse(::google::protobuf::Arena* arena, WithdrawLimitsResponse&& from) noexcept
: WithdrawLimitsResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kMoneyFieldNumber = 1,
kBlockedFieldNumber = 2,
kBlockedGuaranteeFieldNumber = 3,
};
// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue money = 1;
int money_size() const;
private:
int _internal_money_size() const;

public:
void clear_money() ;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_money(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* mutable_money();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& _internal_money() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* _internal_mutable_money();
public:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& money(int index) const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_money();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& money() const;
// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue blocked = 2;
int blocked_size() const;
private:
int _internal_blocked_size() const;

public:
void clear_blocked() ;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* mutable_blocked();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& _internal_blocked() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* _internal_mutable_blocked();
public:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked(int index) const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_blocked();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& blocked() const;
// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue blocked_guarantee = 3;
int blocked_guarantee_size() const;
private:
int _internal_blocked_guarantee_size() const;

public:
void clear_blocked_guarantee() ;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked_guarantee(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* mutable_blocked_guarantee();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& _internal_blocked_guarantee() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* _internal_mutable_blocked_guarantee();
public:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked_guarantee(int index) const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_blocked_guarantee();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& blocked_guarantee() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
2, 3, 3,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > money_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > blocked_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > blocked_guarantee_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class VirtualPortfolioPosition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition) */ {
public:
inline VirtualPortfolioPosition() : VirtualPortfolioPosition(nullptr) {}
~VirtualPortfolioPosition() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR VirtualPortfolioPosition(
::google::protobuf::internal::ConstantInitialized);

inline VirtualPortfolioPosition(const VirtualPortfolioPosition& from) : VirtualPortfolioPosition(nullptr, from) {}
inline VirtualPortfolioPosition(VirtualPortfolioPosition&& from) noexcept
: VirtualPortfolioPosition(nullptr, std::move(from)) {}
inline VirtualPortfolioPosition& operator=(const VirtualPortfolioPosition& from) {
CopyFrom(from);
return *this;
}
inline VirtualPortfolioPosition& operator=(VirtualPortfolioPosition&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const VirtualPortfolioPosition& default_instance() {
return *internal_default_instance();
}
static inline const VirtualPortfolioPosition* internal_default_instance() {
return reinterpret_cast<const VirtualPortfolioPosition*>(
&_VirtualPortfolioPosition_default_instance_);
}
static constexpr int kIndexInFileMessages = 11;
friend void swap(VirtualPortfolioPosition& a, VirtualPortfolioPosition& b) { a.Swap(&b); }
inline void Swap(VirtualPortfolioPosition* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(VirtualPortfolioPosition* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

VirtualPortfolioPosition* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<VirtualPortfolioPosition>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const VirtualPortfolioPosition& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const VirtualPortfolioPosition& from) { VirtualPortfolioPosition::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(VirtualPortfolioPosition* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition"; }

protected:
explicit VirtualPortfolioPosition(::google::protobuf::Arena* arena);
VirtualPortfolioPosition(::google::protobuf::Arena* arena, const VirtualPortfolioPosition& from);
VirtualPortfolioPosition(::google::protobuf::Arena* arena, VirtualPortfolioPosition&& from) noexcept
: VirtualPortfolioPosition(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kPositionUidFieldNumber = 1,
kInstrumentUidFieldNumber = 2,
kFigiFieldNumber = 3,
kInstrumentTypeFieldNumber = 4,
kQuantityFieldNumber = 5,
kAveragePositionPriceFieldNumber = 6,
kExpectedYieldFieldNumber = 7,
kExpectedYieldFifoFieldNumber = 8,
kExpireDateFieldNumber = 9,
kCurrentPriceFieldNumber = 10,
kAveragePositionPriceFifoFieldNumber = 11,
};
// string position_uid = 1;
void clear_position_uid() ;
const std::string& position_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_position_uid(Arg_&& arg, Args_... args);
std::string* mutable_position_uid();
PROTOBUF_NODISCARD std::string* release_position_uid();
void set_allocated_position_uid(std::string* value);

private:
const std::string& _internal_position_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
const std::string& value);
std::string* _internal_mutable_position_uid();

public:
// string instrument_uid = 2;
void clear_instrument_uid() ;
const std::string& instrument_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_uid(Arg_&& arg, Args_... args);
std::string* mutable_instrument_uid();
PROTOBUF_NODISCARD std::string* release_instrument_uid();
void set_allocated_instrument_uid(std::string* value);

private:
const std::string& _internal_instrument_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
const std::string& value);
std::string* _internal_mutable_instrument_uid();

public:
// string figi = 3;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// string instrument_type = 4;
void clear_instrument_type() ;
const std::string& instrument_type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_type(Arg_&& arg, Args_... args);
std::string* mutable_instrument_type();
PROTOBUF_NODISCARD std::string* release_instrument_type();
void set_allocated_instrument_type(std::string* value);

private:
const std::string& _internal_instrument_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
const std::string& value);
std::string* _internal_mutable_instrument_type();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation quantity = 5;
bool has_quantity() const;
void clear_quantity() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_quantity();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_quantity();
void set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_quantity();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_quantity() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_quantity();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price = 6;
bool has_average_position_price() const;
void clear_average_position_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price();
void set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield = 7;
bool has_expected_yield() const;
void clear_expected_yield() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield();
void set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield_fifo = 8;
bool has_expected_yield_fifo() const;
void clear_expected_yield_fifo() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield_fifo() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield_fifo();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield_fifo();
void set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield_fifo();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield_fifo() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield_fifo();

public:
// .google.protobuf.Timestamp expire_date = 9;
bool has_expire_date() const;
void clear_expire_date() ;
const ::google::protobuf::Timestamp& expire_date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expire_date();
::google::protobuf::Timestamp* mutable_expire_date();
void set_allocated_expire_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_expire_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_expire_date();

private:
const ::google::protobuf::Timestamp& _internal_expire_date() const;
::google::protobuf::Timestamp* _internal_mutable_expire_date();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue current_price = 10;
bool has_current_price() const;
void clear_current_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_current_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_current_price();
void set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_current_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_current_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_current_price();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price_fifo = 11;
bool has_average_position_price_fifo() const;
void clear_average_position_price_fifo() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price_fifo() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price_fifo();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price_fifo();
void set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price_fifo();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price_fifo() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price_fifo();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
4, 11, 7,
124, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr position_uid_;
::google::protobuf::internal::ArenaStringPtr instrument_uid_;
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::internal::ArenaStringPtr instrument_type_;
::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_;
::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_;
::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo_;
::google::protobuf::Timestamp* expire_date_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsSubscriptionResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult) */ {
public:
inline PositionsSubscriptionResult() : PositionsSubscriptionResult(nullptr) {}
~PositionsSubscriptionResult() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsSubscriptionResult(
::google::protobuf::internal::ConstantInitialized);

inline PositionsSubscriptionResult(const PositionsSubscriptionResult& from) : PositionsSubscriptionResult(nullptr, from) {}
inline PositionsSubscriptionResult(PositionsSubscriptionResult&& from) noexcept
: PositionsSubscriptionResult(nullptr, std::move(from)) {}
inline PositionsSubscriptionResult& operator=(const PositionsSubscriptionResult& from) {
CopyFrom(from);
return *this;
}
inline PositionsSubscriptionResult& operator=(PositionsSubscriptionResult&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsSubscriptionResult& default_instance() {
return *internal_default_instance();
}
static inline const PositionsSubscriptionResult* internal_default_instance() {
return reinterpret_cast<const PositionsSubscriptionResult*>(
&_PositionsSubscriptionResult_default_instance_);
}
static constexpr int kIndexInFileMessages = 40;
friend void swap(PositionsSubscriptionResult& a, PositionsSubscriptionResult& b) { a.Swap(&b); }
inline void Swap(PositionsSubscriptionResult* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsSubscriptionResult* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsSubscriptionResult* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsSubscriptionResult>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsSubscriptionResult& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsSubscriptionResult& from) { PositionsSubscriptionResult::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsSubscriptionResult* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult"; }

protected:
explicit PositionsSubscriptionResult(::google::protobuf::Arena* arena);
PositionsSubscriptionResult(::google::protobuf::Arena* arena, const PositionsSubscriptionResult& from);
PositionsSubscriptionResult(::google::protobuf::Arena* arena, PositionsSubscriptionResult&& from) noexcept
: PositionsSubscriptionResult(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountsFieldNumber = 1,
};
// repeated .tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus accounts = 1;
int accounts_size() const;
private:
int _internal_accounts_size() const;

public:
void clear_accounts() ;
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* mutable_accounts(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>* mutable_accounts();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>& _internal_accounts() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>* _internal_mutable_accounts();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus& accounts(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* add_accounts();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>& accounts() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 1,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus > accounts_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsResponse) */ {
public:
inline PositionsResponse() : PositionsResponse(nullptr) {}
~PositionsResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsResponse(
::google::protobuf::internal::ConstantInitialized);

inline PositionsResponse(const PositionsResponse& from) : PositionsResponse(nullptr, from) {}
inline PositionsResponse(PositionsResponse&& from) noexcept
: PositionsResponse(nullptr, std::move(from)) {}
inline PositionsResponse& operator=(const PositionsResponse& from) {
CopyFrom(from);
return *this;
}
inline PositionsResponse& operator=(PositionsResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsResponse& default_instance() {
return *internal_default_instance();
}
static inline const PositionsResponse* internal_default_instance() {
return reinterpret_cast<const PositionsResponse*>(
&_PositionsResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 7;
friend void swap(PositionsResponse& a, PositionsResponse& b) { a.Swap(&b); }
inline void Swap(PositionsResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsResponse& from) { PositionsResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsResponse"; }

protected:
explicit PositionsResponse(::google::protobuf::Arena* arena);
PositionsResponse(::google::protobuf::Arena* arena, const PositionsResponse& from);
PositionsResponse(::google::protobuf::Arena* arena, PositionsResponse&& from) noexcept
: PositionsResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kMoneyFieldNumber = 1,
kBlockedFieldNumber = 2,
kSecuritiesFieldNumber = 3,
kFuturesFieldNumber = 5,
kOptionsFieldNumber = 6,
kLimitsLoadingInProgressFieldNumber = 4,
};
// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue money = 1;
int money_size() const;
private:
int _internal_money_size() const;

public:
void clear_money() ;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_money(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* mutable_money();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& _internal_money() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* _internal_mutable_money();
public:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& money(int index) const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_money();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& money() const;
// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue blocked = 2;
int blocked_size() const;
private:
int _internal_blocked_size() const;

public:
void clear_blocked() ;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* mutable_blocked();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& _internal_blocked() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* _internal_mutable_blocked();
public:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked(int index) const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* add_blocked();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& blocked() const;
// repeated .tinkoff.public.invest.api.contract.v1.PositionsSecurities securities = 3;
int securities_size() const;
private:
int _internal_securities_size() const;

public:
void clear_securities() ;
::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* mutable_securities(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>* mutable_securities();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>& _internal_securities() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>* _internal_mutable_securities();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& securities(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* add_securities();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>& securities() const;
// repeated .tinkoff.public.invest.api.contract.v1.PositionsFutures futures = 5;
int futures_size() const;
private:
int _internal_futures_size() const;

public:
void clear_futures() ;
::tinkoff::public_::invest::api::contract::v1::PositionsFutures* mutable_futures(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>* mutable_futures();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>& _internal_futures() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>* _internal_mutable_futures();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& futures(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsFutures* add_futures();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>& futures() const;
// repeated .tinkoff.public.invest.api.contract.v1.PositionsOptions options = 6;
int options_size() const;
private:
int _internal_options_size() const;

public:
void clear_options() ;
::tinkoff::public_::invest::api::contract::v1::PositionsOptions* mutable_options(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>* mutable_options();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>& _internal_options() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>* _internal_mutable_options();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& options(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsOptions* add_options();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>& options() const;
// bool limits_loading_in_progress = 4;
void clear_limits_loading_in_progress() ;
bool limits_loading_in_progress() const;
void set_limits_loading_in_progress(bool value);

private:
bool _internal_limits_loading_in_progress() const;
void _internal_set_limits_loading_in_progress(bool value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
3, 6, 5,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > money_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::MoneyValue > blocked_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities > securities_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures > futures_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions > options_;
bool limits_loading_in_progress_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsMoney final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsMoney) */ {
public:
inline PositionsMoney() : PositionsMoney(nullptr) {}
~PositionsMoney() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsMoney(
::google::protobuf::internal::ConstantInitialized);

inline PositionsMoney(const PositionsMoney& from) : PositionsMoney(nullptr, from) {}
inline PositionsMoney(PositionsMoney&& from) noexcept
: PositionsMoney(nullptr, std::move(from)) {}
inline PositionsMoney& operator=(const PositionsMoney& from) {
CopyFrom(from);
return *this;
}
inline PositionsMoney& operator=(PositionsMoney&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsMoney& default_instance() {
return *internal_default_instance();
}
static inline const PositionsMoney* internal_default_instance() {
return reinterpret_cast<const PositionsMoney*>(
&_PositionsMoney_default_instance_);
}
static constexpr int kIndexInFileMessages = 43;
friend void swap(PositionsMoney& a, PositionsMoney& b) { a.Swap(&b); }
inline void Swap(PositionsMoney* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsMoney* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsMoney* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsMoney>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsMoney& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsMoney& from) { PositionsMoney::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsMoney* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsMoney"; }

protected:
explicit PositionsMoney(::google::protobuf::Arena* arena);
PositionsMoney(::google::protobuf::Arena* arena, const PositionsMoney& from);
PositionsMoney(::google::protobuf::Arena* arena, PositionsMoney&& from) noexcept
: PositionsMoney(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAvailableValueFieldNumber = 1,
kBlockedValueFieldNumber = 2,
};
// .tinkoff.public.invest.api.contract.v1.MoneyValue available_value = 1;
bool has_available_value() const;
void clear_available_value() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& available_value() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_available_value();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_available_value();
void set_allocated_available_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_available_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_available_value();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_available_value() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_available_value();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue blocked_value = 2;
bool has_blocked_value() const;
void clear_blocked_value() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& blocked_value() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_blocked_value();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_blocked_value();
void set_allocated_blocked_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_blocked_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_blocked_value();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_blocked_value() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_blocked_value();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsMoney)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
1, 2, 2,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* available_value_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* blocked_value_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioSubscriptionResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult) */ {
public:
inline PortfolioSubscriptionResult() : PortfolioSubscriptionResult(nullptr) {}
~PortfolioSubscriptionResult() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PortfolioSubscriptionResult(
::google::protobuf::internal::ConstantInitialized);

inline PortfolioSubscriptionResult(const PortfolioSubscriptionResult& from) : PortfolioSubscriptionResult(nullptr, from) {}
inline PortfolioSubscriptionResult(PortfolioSubscriptionResult&& from) noexcept
: PortfolioSubscriptionResult(nullptr, std::move(from)) {}
inline PortfolioSubscriptionResult& operator=(const PortfolioSubscriptionResult& from) {
CopyFrom(from);
return *this;
}
inline PortfolioSubscriptionResult& operator=(PortfolioSubscriptionResult&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PortfolioSubscriptionResult& default_instance() {
return *internal_default_instance();
}
static inline const PortfolioSubscriptionResult* internal_default_instance() {
return reinterpret_cast<const PortfolioSubscriptionResult*>(
&_PortfolioSubscriptionResult_default_instance_);
}
static constexpr int kIndexInFileMessages = 31;
friend void swap(PortfolioSubscriptionResult& a, PortfolioSubscriptionResult& b) { a.Swap(&b); }
inline void Swap(PortfolioSubscriptionResult* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PortfolioSubscriptionResult* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PortfolioSubscriptionResult* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PortfolioSubscriptionResult>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PortfolioSubscriptionResult& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PortfolioSubscriptionResult& from) { PortfolioSubscriptionResult::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PortfolioSubscriptionResult* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult"; }

protected:
explicit PortfolioSubscriptionResult(::google::protobuf::Arena* arena);
PortfolioSubscriptionResult(::google::protobuf::Arena* arena, const PortfolioSubscriptionResult& from);
PortfolioSubscriptionResult(::google::protobuf::Arena* arena, PortfolioSubscriptionResult&& from) noexcept
: PortfolioSubscriptionResult(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountsFieldNumber = 1,
};
// repeated .tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus accounts = 1;
int accounts_size() const;
private:
int _internal_accounts_size() const;

public:
void clear_accounts() ;
::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* mutable_accounts(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>* mutable_accounts();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>& _internal_accounts() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>* _internal_mutable_accounts();
public:
const ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus& accounts(int index) const;
::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* add_accounts();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>& accounts() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 1,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus > accounts_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioPosition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PortfolioPosition) */ {
public:
inline PortfolioPosition() : PortfolioPosition(nullptr) {}
~PortfolioPosition() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PortfolioPosition(
::google::protobuf::internal::ConstantInitialized);

inline PortfolioPosition(const PortfolioPosition& from) : PortfolioPosition(nullptr, from) {}
inline PortfolioPosition(PortfolioPosition&& from) noexcept
: PortfolioPosition(nullptr, std::move(from)) {}
inline PortfolioPosition& operator=(const PortfolioPosition& from) {
CopyFrom(from);
return *this;
}
inline PortfolioPosition& operator=(PortfolioPosition&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PortfolioPosition& default_instance() {
return *internal_default_instance();
}
static inline const PortfolioPosition* internal_default_instance() {
return reinterpret_cast<const PortfolioPosition*>(
&_PortfolioPosition_default_instance_);
}
static constexpr int kIndexInFileMessages = 10;
friend void swap(PortfolioPosition& a, PortfolioPosition& b) { a.Swap(&b); }
inline void Swap(PortfolioPosition* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PortfolioPosition* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PortfolioPosition* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PortfolioPosition>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PortfolioPosition& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PortfolioPosition& from) { PortfolioPosition::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PortfolioPosition* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PortfolioPosition"; }

protected:
explicit PortfolioPosition(::google::protobuf::Arena* arena);
PortfolioPosition(::google::protobuf::Arena* arena, const PortfolioPosition& from);
PortfolioPosition(::google::protobuf::Arena* arena, PortfolioPosition&& from) noexcept
: PortfolioPosition(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kFigiFieldNumber = 1,
kInstrumentTypeFieldNumber = 2,
kPositionUidFieldNumber = 24,
kInstrumentUidFieldNumber = 25,
kQuantityFieldNumber = 3,
kAveragePositionPriceFieldNumber = 4,
kExpectedYieldFieldNumber = 5,
kCurrentNkdFieldNumber = 6,
kAveragePositionPricePtFieldNumber = 7,
kCurrentPriceFieldNumber = 8,
kAveragePositionPriceFifoFieldNumber = 9,
kQuantityLotsFieldNumber = 10,
kBlockedLotsFieldNumber = 22,
kVarMarginFieldNumber = 26,
kExpectedYieldFifoFieldNumber = 27,
kBlockedFieldNumber = 21,
};
// string figi = 1;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// string instrument_type = 2;
void clear_instrument_type() ;
const std::string& instrument_type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_type(Arg_&& arg, Args_... args);
std::string* mutable_instrument_type();
PROTOBUF_NODISCARD std::string* release_instrument_type();
void set_allocated_instrument_type(std::string* value);

private:
const std::string& _internal_instrument_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
const std::string& value);
std::string* _internal_mutable_instrument_type();

public:
// string position_uid = 24;
void clear_position_uid() ;
const std::string& position_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_position_uid(Arg_&& arg, Args_... args);
std::string* mutable_position_uid();
PROTOBUF_NODISCARD std::string* release_position_uid();
void set_allocated_position_uid(std::string* value);

private:
const std::string& _internal_position_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
const std::string& value);
std::string* _internal_mutable_position_uid();

public:
// string instrument_uid = 25;
void clear_instrument_uid() ;
const std::string& instrument_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_uid(Arg_&& arg, Args_... args);
std::string* mutable_instrument_uid();
PROTOBUF_NODISCARD std::string* release_instrument_uid();
void set_allocated_instrument_uid(std::string* value);

private:
const std::string& _internal_instrument_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
const std::string& value);
std::string* _internal_mutable_instrument_uid();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation quantity = 3;
bool has_quantity() const;
void clear_quantity() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_quantity();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_quantity();
void set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_quantity();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_quantity() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_quantity();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price = 4;
bool has_average_position_price() const;
void clear_average_position_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price();
void set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield = 5;
bool has_expected_yield() const;
void clear_expected_yield() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield();
void set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue current_nkd = 6;
bool has_current_nkd() const;
void clear_current_nkd() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_nkd() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_current_nkd();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_current_nkd();
void set_allocated_current_nkd(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_current_nkd(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_current_nkd();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_current_nkd() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_current_nkd();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation average_position_price_pt = 7 [deprecated = true];
[[deprecated]]  bool has_average_position_price_pt() const;
[[deprecated]]  void clear_average_position_price_pt() ;
[[deprecated]] const ::tinkoff::public_::invest::api::contract::v1::Quotation& average_position_price_pt() const;
[[deprecated]] PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_average_position_price_pt();
[[deprecated]] ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_average_position_price_pt();
[[deprecated]] void set_allocated_average_position_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
[[deprecated]] void unsafe_arena_set_allocated_average_position_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
[[deprecated]] ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_average_position_price_pt();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_average_position_price_pt() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_average_position_price_pt();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue current_price = 8;
bool has_current_price() const;
void clear_current_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& current_price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_current_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_current_price();
void set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_current_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_current_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_current_price();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price_fifo = 9;
bool has_average_position_price_fifo() const;
void clear_average_position_price_fifo() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& average_position_price_fifo() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_average_position_price_fifo();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_average_position_price_fifo();
void set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_average_position_price_fifo();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_average_position_price_fifo() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_average_position_price_fifo();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation quantity_lots = 10 [deprecated = true];
[[deprecated]]  bool has_quantity_lots() const;
[[deprecated]]  void clear_quantity_lots() ;
[[deprecated]] const ::tinkoff::public_::invest::api::contract::v1::Quotation& quantity_lots() const;
[[deprecated]] PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_quantity_lots();
[[deprecated]] ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_quantity_lots();
[[deprecated]] void set_allocated_quantity_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
[[deprecated]] void unsafe_arena_set_allocated_quantity_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
[[deprecated]] ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_quantity_lots();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_quantity_lots() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_quantity_lots();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation blocked_lots = 22;
bool has_blocked_lots() const;
void clear_blocked_lots() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& blocked_lots() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_blocked_lots();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_blocked_lots();
void set_allocated_blocked_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_blocked_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_blocked_lots();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_blocked_lots() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_blocked_lots();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue var_margin = 26;
bool has_var_margin() const;
void clear_var_margin() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& var_margin() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_var_margin();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_var_margin();
void set_allocated_var_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_var_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_var_margin();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_var_margin() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_var_margin();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield_fifo = 27;
bool has_expected_yield_fifo() const;
void clear_expected_yield_fifo() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield_fifo() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield_fifo();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield_fifo();
void set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield_fifo();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield_fifo() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield_fifo();

public:
// bool blocked = 21;
void clear_blocked() ;
bool blocked() const;
void set_blocked(bool value);

private:
bool _internal_blocked() const;
void _internal_set_blocked(bool value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PortfolioPosition)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
5, 16, 11,
125, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::internal::ArenaStringPtr instrument_type_;
::google::protobuf::internal::ArenaStringPtr position_uid_;
::google::protobuf::internal::ArenaStringPtr instrument_uid_;
::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_;
::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_nkd_;
::tinkoff::public_::invest::api::contract::v1::Quotation* average_position_price_pt_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* current_price_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* average_position_price_fifo_;
::tinkoff::public_::invest::api::contract::v1::Quotation* quantity_lots_;
::tinkoff::public_::invest::api::contract::v1::Quotation* blocked_lots_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* var_margin_;
::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_fifo_;
bool blocked_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OperationsRequest) */ {
public:
inline OperationsRequest() : OperationsRequest(nullptr) {}
~OperationsRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR OperationsRequest(
::google::protobuf::internal::ConstantInitialized);

inline OperationsRequest(const OperationsRequest& from) : OperationsRequest(nullptr, from) {}
inline OperationsRequest(OperationsRequest&& from) noexcept
: OperationsRequest(nullptr, std::move(from)) {}
inline OperationsRequest& operator=(const OperationsRequest& from) {
CopyFrom(from);
return *this;
}
inline OperationsRequest& operator=(OperationsRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const OperationsRequest& default_instance() {
return *internal_default_instance();
}
static inline const OperationsRequest* internal_default_instance() {
return reinterpret_cast<const OperationsRequest*>(
&_OperationsRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 0;
friend void swap(OperationsRequest& a, OperationsRequest& b) { a.Swap(&b); }
inline void Swap(OperationsRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(OperationsRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

OperationsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<OperationsRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const OperationsRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const OperationsRequest& from) { OperationsRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(OperationsRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OperationsRequest"; }

protected:
explicit OperationsRequest(::google::protobuf::Arena* arena);
OperationsRequest(::google::protobuf::Arena* arena, const OperationsRequest& from);
OperationsRequest(::google::protobuf::Arena* arena, OperationsRequest&& from) noexcept
: OperationsRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
kFigiFieldNumber = 5,
kFromFieldNumber = 2,
kToFieldNumber = 3,
kStateFieldNumber = 4,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// string figi = 5;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// .google.protobuf.Timestamp from = 2;
bool has_from() const;
void clear_from() ;
const ::google::protobuf::Timestamp& from() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
::google::protobuf::Timestamp* mutable_from();
void set_allocated_from(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_from();

private:
const ::google::protobuf::Timestamp& _internal_from() const;
::google::protobuf::Timestamp* _internal_mutable_from();

public:
// .google.protobuf.Timestamp to = 3;
bool has_to() const;
void clear_to() ;
const ::google::protobuf::Timestamp& to() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
::google::protobuf::Timestamp* mutable_to();
void set_allocated_to(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_to();

private:
const ::google::protobuf::Timestamp& _internal_to() const;
::google::protobuf::Timestamp* _internal_mutable_to();

public:
// .tinkoff.public.invest.api.contract.v1.OperationState state = 4;
void clear_state() ;
::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

private:
::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OperationsRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
3, 5, 2,
78, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr account_id_;
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::Timestamp* from_;
::google::protobuf::Timestamp* to_;
int state_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationTrade final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OperationTrade) */ {
public:
inline OperationTrade() : OperationTrade(nullptr) {}
~OperationTrade() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR OperationTrade(
::google::protobuf::internal::ConstantInitialized);

inline OperationTrade(const OperationTrade& from) : OperationTrade(nullptr, from) {}
inline OperationTrade(OperationTrade&& from) noexcept
: OperationTrade(nullptr, std::move(from)) {}
inline OperationTrade& operator=(const OperationTrade& from) {
CopyFrom(from);
return *this;
}
inline OperationTrade& operator=(OperationTrade&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const OperationTrade& default_instance() {
return *internal_default_instance();
}
static inline const OperationTrade* internal_default_instance() {
return reinterpret_cast<const OperationTrade*>(
&_OperationTrade_default_instance_);
}
static constexpr int kIndexInFileMessages = 3;
friend void swap(OperationTrade& a, OperationTrade& b) { a.Swap(&b); }
inline void Swap(OperationTrade* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(OperationTrade* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

OperationTrade* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<OperationTrade>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const OperationTrade& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const OperationTrade& from) { OperationTrade::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(OperationTrade* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OperationTrade"; }

protected:
explicit OperationTrade(::google::protobuf::Arena* arena);
OperationTrade(::google::protobuf::Arena* arena, const OperationTrade& from);
OperationTrade(::google::protobuf::Arena* arena, OperationTrade&& from) noexcept
: OperationTrade(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTradeIdFieldNumber = 1,
kDateTimeFieldNumber = 2,
kPriceFieldNumber = 4,
kQuantityFieldNumber = 3,
};
// string trade_id = 1;
void clear_trade_id() ;
const std::string& trade_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_trade_id(Arg_&& arg, Args_... args);
std::string* mutable_trade_id();
PROTOBUF_NODISCARD std::string* release_trade_id();
void set_allocated_trade_id(std::string* value);

private:
const std::string& _internal_trade_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(
const std::string& value);
std::string* _internal_mutable_trade_id();

public:
// .google.protobuf.Timestamp date_time = 2;
bool has_date_time() const;
void clear_date_time() ;
const ::google::protobuf::Timestamp& date_time() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date_time();
::google::protobuf::Timestamp* mutable_date_time();
void set_allocated_date_time(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_date_time(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_date_time();

private:
const ::google::protobuf::Timestamp& _internal_date_time() const;
::google::protobuf::Timestamp* _internal_mutable_date_time();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 4;
bool has_price() const;
void clear_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();

public:
// int64 quantity = 3;
void clear_quantity() ;
::int64_t quantity() const;
void set_quantity(::int64_t value);

private:
::int64_t _internal_quantity() const;
void _internal_set_quantity(::int64_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OperationTrade)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
2, 4, 2,
69, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr trade_id_;
::google::protobuf::Timestamp* date_time_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
::int64_t quantity_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationItemTrade final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OperationItemTrade) */ {
public:
inline OperationItemTrade() : OperationItemTrade(nullptr) {}
~OperationItemTrade() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR OperationItemTrade(
::google::protobuf::internal::ConstantInitialized);

inline OperationItemTrade(const OperationItemTrade& from) : OperationItemTrade(nullptr, from) {}
inline OperationItemTrade(OperationItemTrade&& from) noexcept
: OperationItemTrade(nullptr, std::move(from)) {}
inline OperationItemTrade& operator=(const OperationItemTrade& from) {
CopyFrom(from);
return *this;
}
inline OperationItemTrade& operator=(OperationItemTrade&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const OperationItemTrade& default_instance() {
return *internal_default_instance();
}
static inline const OperationItemTrade* internal_default_instance() {
return reinterpret_cast<const OperationItemTrade*>(
&_OperationItemTrade_default_instance_);
}
static constexpr int kIndexInFileMessages = 37;
friend void swap(OperationItemTrade& a, OperationItemTrade& b) { a.Swap(&b); }
inline void Swap(OperationItemTrade* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(OperationItemTrade* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

OperationItemTrade* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<OperationItemTrade>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const OperationItemTrade& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const OperationItemTrade& from) { OperationItemTrade::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(OperationItemTrade* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OperationItemTrade"; }

protected:
explicit OperationItemTrade(::google::protobuf::Arena* arena);
OperationItemTrade(::google::protobuf::Arena* arena, const OperationItemTrade& from);
OperationItemTrade(::google::protobuf::Arena* arena, OperationItemTrade&& from) noexcept
: OperationItemTrade(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kNumFieldNumber = 1,
kDateFieldNumber = 6,
kPriceFieldNumber = 16,
kYieldFieldNumber = 21,
kYieldRelativeFieldNumber = 22,
kQuantityFieldNumber = 11,
};
// string num = 1;
void clear_num() ;
const std::string& num() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_num(Arg_&& arg, Args_... args);
std::string* mutable_num();
PROTOBUF_NODISCARD std::string* release_num();
void set_allocated_num(std::string* value);

private:
const std::string& _internal_num() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_num(
const std::string& value);
std::string* _internal_mutable_num();

public:
// .google.protobuf.Timestamp date = 6;
bool has_date() const;
void clear_date() ;
const ::google::protobuf::Timestamp& date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date();
::google::protobuf::Timestamp* mutable_date();
void set_allocated_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_date();

private:
const ::google::protobuf::Timestamp& _internal_date() const;
::google::protobuf::Timestamp* _internal_mutable_date();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 16;
bool has_price() const;
void clear_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue yield = 21;
bool has_yield() const;
void clear_yield() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& yield() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_yield();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_yield();
void set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_yield();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_yield() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_yield();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation yield_relative = 22;
bool has_yield_relative() const;
void clear_yield_relative() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_relative() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_yield_relative();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_yield_relative();
void set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_yield_relative();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_yield_relative() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_yield_relative();

public:
// int64 quantity = 11;
void clear_quantity() ;
::int64_t quantity() const;
void set_quantity(::int64_t value);

private:
::int64_t _internal_quantity() const;
void _internal_set_quantity(::int64_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OperationItemTrade)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
3, 6, 4,
68, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr num_;
::google::protobuf::Timestamp* date_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield_;
::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative_;
::int64_t quantity_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsByCursorRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest) */ {
public:
inline GetOperationsByCursorRequest() : GetOperationsByCursorRequest(nullptr) {}
~GetOperationsByCursorRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetOperationsByCursorRequest(
::google::protobuf::internal::ConstantInitialized);

inline GetOperationsByCursorRequest(const GetOperationsByCursorRequest& from) : GetOperationsByCursorRequest(nullptr, from) {}
inline GetOperationsByCursorRequest(GetOperationsByCursorRequest&& from) noexcept
: GetOperationsByCursorRequest(nullptr, std::move(from)) {}
inline GetOperationsByCursorRequest& operator=(const GetOperationsByCursorRequest& from) {
CopyFrom(from);
return *this;
}
inline GetOperationsByCursorRequest& operator=(GetOperationsByCursorRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetOperationsByCursorRequest& default_instance() {
return *internal_default_instance();
}
static inline const GetOperationsByCursorRequest* internal_default_instance() {
return reinterpret_cast<const GetOperationsByCursorRequest*>(
&_GetOperationsByCursorRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 33;
friend void swap(GetOperationsByCursorRequest& a, GetOperationsByCursorRequest& b) { a.Swap(&b); }
inline void Swap(GetOperationsByCursorRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetOperationsByCursorRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetOperationsByCursorRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetOperationsByCursorRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetOperationsByCursorRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetOperationsByCursorRequest& from) { GetOperationsByCursorRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetOperationsByCursorRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest"; }

protected:
explicit GetOperationsByCursorRequest(::google::protobuf::Arena* arena);
GetOperationsByCursorRequest(::google::protobuf::Arena* arena, const GetOperationsByCursorRequest& from);
GetOperationsByCursorRequest(::google::protobuf::Arena* arena, GetOperationsByCursorRequest&& from) noexcept
: GetOperationsByCursorRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kOperationTypesFieldNumber = 13,
kAccountIdFieldNumber = 1,
kInstrumentIdFieldNumber = 2,
kCursorFieldNumber = 11,
kFromFieldNumber = 6,
kToFieldNumber = 7,
kLimitFieldNumber = 12,
kStateFieldNumber = 14,
kWithoutCommissionsFieldNumber = 15,
kWithoutTradesFieldNumber = 16,
kWithoutOvernightsFieldNumber = 17,
};
// repeated .tinkoff.public.invest.api.contract.v1.OperationType operation_types = 13;
int operation_types_size() const;
private:
int _internal_operation_types_size() const;

public:
void clear_operation_types() ;
public:
::tinkoff::public_::invest::api::contract::v1::OperationType operation_types(int index) const;
void set_operation_types(int index, ::tinkoff::public_::invest::api::contract::v1::OperationType value);
void add_operation_types(::tinkoff::public_::invest::api::contract::v1::OperationType value);
const ::google::protobuf::RepeatedField<int>& operation_types() const;
::google::protobuf::RepeatedField<int>* mutable_operation_types();

private:
const ::google::protobuf::RepeatedField<int>& _internal_operation_types() const;
::google::protobuf::RepeatedField<int>* _internal_mutable_operation_types();

public:
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// string instrument_id = 2;
void clear_instrument_id() ;
const std::string& instrument_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_id(Arg_&& arg, Args_... args);
std::string* mutable_instrument_id();
PROTOBUF_NODISCARD std::string* release_instrument_id();
void set_allocated_instrument_id(std::string* value);

private:
const std::string& _internal_instrument_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
const std::string& value);
std::string* _internal_mutable_instrument_id();

public:
// string cursor = 11;
void clear_cursor() ;
const std::string& cursor() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_cursor(Arg_&& arg, Args_... args);
std::string* mutable_cursor();
PROTOBUF_NODISCARD std::string* release_cursor();
void set_allocated_cursor(std::string* value);

private:
const std::string& _internal_cursor() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(
const std::string& value);
std::string* _internal_mutable_cursor();

public:
// .google.protobuf.Timestamp from = 6;
bool has_from() const;
void clear_from() ;
const ::google::protobuf::Timestamp& from() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
::google::protobuf::Timestamp* mutable_from();
void set_allocated_from(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_from();

private:
const ::google::protobuf::Timestamp& _internal_from() const;
::google::protobuf::Timestamp* _internal_mutable_from();

public:
// .google.protobuf.Timestamp to = 7;
bool has_to() const;
void clear_to() ;
const ::google::protobuf::Timestamp& to() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
::google::protobuf::Timestamp* mutable_to();
void set_allocated_to(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_to();

private:
const ::google::protobuf::Timestamp& _internal_to() const;
::google::protobuf::Timestamp* _internal_mutable_to();

public:
// int32 limit = 12;
void clear_limit() ;
::int32_t limit() const;
void set_limit(::int32_t value);

private:
::int32_t _internal_limit() const;
void _internal_set_limit(::int32_t value);

public:
// .tinkoff.public.invest.api.contract.v1.OperationState state = 14;
void clear_state() ;
::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

private:
::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

public:
// bool without_commissions = 15;
void clear_without_commissions() ;
bool without_commissions() const;
void set_without_commissions(bool value);

private:
bool _internal_without_commissions() const;
void _internal_set_without_commissions(bool value);

public:
// bool without_trades = 16;
void clear_without_trades() ;
bool without_trades() const;
void set_without_trades(bool value);

private:
bool _internal_without_trades() const;
void _internal_set_without_trades(bool value);

public:
// bool without_overnights = 17;
void clear_without_overnights() ;
bool without_overnights() const;
void set_without_overnights(bool value);

private:
bool _internal_without_overnights() const;
void _internal_set_without_overnights(bool value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
4, 11, 2,
112, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::RepeatedField<int> operation_types_;
mutable ::google::protobuf::internal::CachedSize _operation_types_cached_byte_size_;
::google::protobuf::internal::ArenaStringPtr account_id_;
::google::protobuf::internal::ArenaStringPtr instrument_id_;
::google::protobuf::internal::ArenaStringPtr cursor_;
::google::protobuf::Timestamp* from_;
::google::protobuf::Timestamp* to_;
::int32_t limit_;
int state_;
bool without_commissions_;
bool without_trades_;
bool without_overnights_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateDividendsForeignIssuerReportRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest) */ {
public:
inline GenerateDividendsForeignIssuerReportRequest() : GenerateDividendsForeignIssuerReportRequest(nullptr) {}
~GenerateDividendsForeignIssuerReportRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GenerateDividendsForeignIssuerReportRequest(
::google::protobuf::internal::ConstantInitialized);

inline GenerateDividendsForeignIssuerReportRequest(const GenerateDividendsForeignIssuerReportRequest& from) : GenerateDividendsForeignIssuerReportRequest(nullptr, from) {}
inline GenerateDividendsForeignIssuerReportRequest(GenerateDividendsForeignIssuerReportRequest&& from) noexcept
: GenerateDividendsForeignIssuerReportRequest(nullptr, std::move(from)) {}
inline GenerateDividendsForeignIssuerReportRequest& operator=(const GenerateDividendsForeignIssuerReportRequest& from) {
CopyFrom(from);
return *this;
}
inline GenerateDividendsForeignIssuerReportRequest& operator=(GenerateDividendsForeignIssuerReportRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GenerateDividendsForeignIssuerReportRequest& default_instance() {
return *internal_default_instance();
}
static inline const GenerateDividendsForeignIssuerReportRequest* internal_default_instance() {
return reinterpret_cast<const GenerateDividendsForeignIssuerReportRequest*>(
&_GenerateDividendsForeignIssuerReportRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 24;
friend void swap(GenerateDividendsForeignIssuerReportRequest& a, GenerateDividendsForeignIssuerReportRequest& b) { a.Swap(&b); }
inline void Swap(GenerateDividendsForeignIssuerReportRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GenerateDividendsForeignIssuerReportRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GenerateDividendsForeignIssuerReportRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GenerateDividendsForeignIssuerReportRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GenerateDividendsForeignIssuerReportRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GenerateDividendsForeignIssuerReportRequest& from) { GenerateDividendsForeignIssuerReportRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GenerateDividendsForeignIssuerReportRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest"; }

protected:
explicit GenerateDividendsForeignIssuerReportRequest(::google::protobuf::Arena* arena);
GenerateDividendsForeignIssuerReportRequest(::google::protobuf::Arena* arena, const GenerateDividendsForeignIssuerReportRequest& from);
GenerateDividendsForeignIssuerReportRequest(::google::protobuf::Arena* arena, GenerateDividendsForeignIssuerReportRequest&& from) noexcept
: GenerateDividendsForeignIssuerReportRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
kFromFieldNumber = 2,
kToFieldNumber = 3,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// .google.protobuf.Timestamp from = 2;
bool has_from() const;
void clear_from() ;
const ::google::protobuf::Timestamp& from() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
::google::protobuf::Timestamp* mutable_from();
void set_allocated_from(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_from();

private:
const ::google::protobuf::Timestamp& _internal_from() const;
::google::protobuf::Timestamp* _internal_mutable_from();

public:
// .google.protobuf.Timestamp to = 3;
bool has_to() const;
void clear_to() ;
const ::google::protobuf::Timestamp& to() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
::google::protobuf::Timestamp* mutable_to();
void set_allocated_to(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_to();

private:
const ::google::protobuf::Timestamp& _internal_to() const;
::google::protobuf::Timestamp* _internal_mutable_to();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
2, 3, 2,
100, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr account_id_;
::google::protobuf::Timestamp* from_;
::google::protobuf::Timestamp* to_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GenerateBrokerReportRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest) */ {
public:
inline GenerateBrokerReportRequest() : GenerateBrokerReportRequest(nullptr) {}
~GenerateBrokerReportRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GenerateBrokerReportRequest(
::google::protobuf::internal::ConstantInitialized);

inline GenerateBrokerReportRequest(const GenerateBrokerReportRequest& from) : GenerateBrokerReportRequest(nullptr, from) {}
inline GenerateBrokerReportRequest(GenerateBrokerReportRequest&& from) noexcept
: GenerateBrokerReportRequest(nullptr, std::move(from)) {}
inline GenerateBrokerReportRequest& operator=(const GenerateBrokerReportRequest& from) {
CopyFrom(from);
return *this;
}
inline GenerateBrokerReportRequest& operator=(GenerateBrokerReportRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GenerateBrokerReportRequest& default_instance() {
return *internal_default_instance();
}
static inline const GenerateBrokerReportRequest* internal_default_instance() {
return reinterpret_cast<const GenerateBrokerReportRequest*>(
&_GenerateBrokerReportRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 17;
friend void swap(GenerateBrokerReportRequest& a, GenerateBrokerReportRequest& b) { a.Swap(&b); }
inline void Swap(GenerateBrokerReportRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GenerateBrokerReportRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GenerateBrokerReportRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GenerateBrokerReportRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GenerateBrokerReportRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GenerateBrokerReportRequest& from) { GenerateBrokerReportRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GenerateBrokerReportRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest"; }

protected:
explicit GenerateBrokerReportRequest(::google::protobuf::Arena* arena);
GenerateBrokerReportRequest(::google::protobuf::Arena* arena, const GenerateBrokerReportRequest& from);
GenerateBrokerReportRequest(::google::protobuf::Arena* arena, GenerateBrokerReportRequest&& from) noexcept
: GenerateBrokerReportRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kAccountIdFieldNumber = 1,
kFromFieldNumber = 2,
kToFieldNumber = 3,
};
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// .google.protobuf.Timestamp from = 2;
bool has_from() const;
void clear_from() ;
const ::google::protobuf::Timestamp& from() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
::google::protobuf::Timestamp* mutable_from();
void set_allocated_from(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_from();

private:
const ::google::protobuf::Timestamp& _internal_from() const;
::google::protobuf::Timestamp* _internal_mutable_from();

public:
// .google.protobuf.Timestamp to = 3;
bool has_to() const;
void clear_to() ;
const ::google::protobuf::Timestamp& to() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
::google::protobuf::Timestamp* mutable_to();
void set_allocated_to(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_to();

private:
const ::google::protobuf::Timestamp& _internal_to() const;
::google::protobuf::Timestamp* _internal_mutable_to();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
2, 3, 2,
84, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr account_id_;
::google::protobuf::Timestamp* from_;
::google::protobuf::Timestamp* to_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class DividendsForeignIssuerReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport) */ {
public:
inline DividendsForeignIssuerReport() : DividendsForeignIssuerReport(nullptr) {}
~DividendsForeignIssuerReport() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR DividendsForeignIssuerReport(
::google::protobuf::internal::ConstantInitialized);

inline DividendsForeignIssuerReport(const DividendsForeignIssuerReport& from) : DividendsForeignIssuerReport(nullptr, from) {}
inline DividendsForeignIssuerReport(DividendsForeignIssuerReport&& from) noexcept
: DividendsForeignIssuerReport(nullptr, std::move(from)) {}
inline DividendsForeignIssuerReport& operator=(const DividendsForeignIssuerReport& from) {
CopyFrom(from);
return *this;
}
inline DividendsForeignIssuerReport& operator=(DividendsForeignIssuerReport&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const DividendsForeignIssuerReport& default_instance() {
return *internal_default_instance();
}
static inline const DividendsForeignIssuerReport* internal_default_instance() {
return reinterpret_cast<const DividendsForeignIssuerReport*>(
&_DividendsForeignIssuerReport_default_instance_);
}
static constexpr int kIndexInFileMessages = 28;
friend void swap(DividendsForeignIssuerReport& a, DividendsForeignIssuerReport& b) { a.Swap(&b); }
inline void Swap(DividendsForeignIssuerReport* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(DividendsForeignIssuerReport* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

DividendsForeignIssuerReport* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<DividendsForeignIssuerReport>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const DividendsForeignIssuerReport& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const DividendsForeignIssuerReport& from) { DividendsForeignIssuerReport::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(DividendsForeignIssuerReport* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport"; }

protected:
explicit DividendsForeignIssuerReport(::google::protobuf::Arena* arena);
DividendsForeignIssuerReport(::google::protobuf::Arena* arena, const DividendsForeignIssuerReport& from);
DividendsForeignIssuerReport(::google::protobuf::Arena* arena, DividendsForeignIssuerReport&& from) noexcept
: DividendsForeignIssuerReport(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kSecurityNameFieldNumber = 3,
kIsinFieldNumber = 4,
kIssuerCountryFieldNumber = 5,
kCurrencyFieldNumber = 12,
kRecordDateFieldNumber = 1,
kPaymentDateFieldNumber = 2,
kDividendFieldNumber = 7,
kExternalCommissionFieldNumber = 8,
kDividendGrossFieldNumber = 9,
kTaxFieldNumber = 10,
kDividendAmountFieldNumber = 11,
kQuantityFieldNumber = 6,
};
// string security_name = 3;
void clear_security_name() ;
const std::string& security_name() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_security_name(Arg_&& arg, Args_... args);
std::string* mutable_security_name();
PROTOBUF_NODISCARD std::string* release_security_name();
void set_allocated_security_name(std::string* value);

private:
const std::string& _internal_security_name() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_name(
const std::string& value);
std::string* _internal_mutable_security_name();

public:
// string isin = 4;
void clear_isin() ;
const std::string& isin() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_isin(Arg_&& arg, Args_... args);
std::string* mutable_isin();
PROTOBUF_NODISCARD std::string* release_isin();
void set_allocated_isin(std::string* value);

private:
const std::string& _internal_isin() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
const std::string& value);
std::string* _internal_mutable_isin();

public:
// string issuer_country = 5;
void clear_issuer_country() ;
const std::string& issuer_country() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_issuer_country(Arg_&& arg, Args_... args);
std::string* mutable_issuer_country();
PROTOBUF_NODISCARD std::string* release_issuer_country();
void set_allocated_issuer_country(std::string* value);

private:
const std::string& _internal_issuer_country() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuer_country(
const std::string& value);
std::string* _internal_mutable_issuer_country();

public:
// string currency = 12;
void clear_currency() ;
const std::string& currency() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_currency(Arg_&& arg, Args_... args);
std::string* mutable_currency();
PROTOBUF_NODISCARD std::string* release_currency();
void set_allocated_currency(std::string* value);

private:
const std::string& _internal_currency() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
const std::string& value);
std::string* _internal_mutable_currency();

public:
// .google.protobuf.Timestamp record_date = 1;
bool has_record_date() const;
void clear_record_date() ;
const ::google::protobuf::Timestamp& record_date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_record_date();
::google::protobuf::Timestamp* mutable_record_date();
void set_allocated_record_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_record_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_record_date();

private:
const ::google::protobuf::Timestamp& _internal_record_date() const;
::google::protobuf::Timestamp* _internal_mutable_record_date();

public:
// .google.protobuf.Timestamp payment_date = 2;
bool has_payment_date() const;
void clear_payment_date() ;
const ::google::protobuf::Timestamp& payment_date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_payment_date();
::google::protobuf::Timestamp* mutable_payment_date();
void set_allocated_payment_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_payment_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_payment_date();

private:
const ::google::protobuf::Timestamp& _internal_payment_date() const;
::google::protobuf::Timestamp* _internal_mutable_payment_date();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation dividend = 7;
bool has_dividend() const;
void clear_dividend() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dividend();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dividend();
void set_allocated_dividend(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_dividend(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dividend();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dividend() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dividend();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation external_commission = 8;
bool has_external_commission() const;
void clear_external_commission() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& external_commission() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_external_commission();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_external_commission();
void set_allocated_external_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_external_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_external_commission();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_external_commission() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_external_commission();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation dividend_gross = 9;
bool has_dividend_gross() const;
void clear_dividend_gross() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_gross() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dividend_gross();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dividend_gross();
void set_allocated_dividend_gross(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_dividend_gross(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dividend_gross();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dividend_gross() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dividend_gross();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation tax = 10;
bool has_tax() const;
void clear_tax() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& tax() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_tax();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_tax();
void set_allocated_tax(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_tax(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_tax();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_tax() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_tax();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation dividend_amount = 11;
bool has_dividend_amount() const;
void clear_dividend_amount() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_amount() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dividend_amount();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dividend_amount();
void set_allocated_dividend_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_dividend_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dividend_amount();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dividend_amount() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dividend_amount();

public:
// int64 quantity = 6;
void clear_quantity() ;
::int64_t quantity() const;
void set_quantity(::int64_t value);

private:
::int64_t _internal_quantity() const;
void _internal_set_quantity(::int64_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
4, 12, 7,
122, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr security_name_;
::google::protobuf::internal::ArenaStringPtr isin_;
::google::protobuf::internal::ArenaStringPtr issuer_country_;
::google::protobuf::internal::ArenaStringPtr currency_;
::google::protobuf::Timestamp* record_date_;
::google::protobuf::Timestamp* payment_date_;
::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_;
::tinkoff::public_::invest::api::contract::v1::Quotation* external_commission_;
::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_gross_;
::tinkoff::public_::invest::api::contract::v1::Quotation* tax_;
::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_amount_;
::int64_t quantity_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class BrokerReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.BrokerReport) */ {
public:
inline BrokerReport() : BrokerReport(nullptr) {}
~BrokerReport() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR BrokerReport(
::google::protobuf::internal::ConstantInitialized);

inline BrokerReport(const BrokerReport& from) : BrokerReport(nullptr, from) {}
inline BrokerReport(BrokerReport&& from) noexcept
: BrokerReport(nullptr, std::move(from)) {}
inline BrokerReport& operator=(const BrokerReport& from) {
CopyFrom(from);
return *this;
}
inline BrokerReport& operator=(BrokerReport&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const BrokerReport& default_instance() {
return *internal_default_instance();
}
static inline const BrokerReport* internal_default_instance() {
return reinterpret_cast<const BrokerReport*>(
&_BrokerReport_default_instance_);
}
static constexpr int kIndexInFileMessages = 21;
friend void swap(BrokerReport& a, BrokerReport& b) { a.Swap(&b); }
inline void Swap(BrokerReport* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(BrokerReport* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

BrokerReport* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<BrokerReport>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const BrokerReport& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const BrokerReport& from) { BrokerReport::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(BrokerReport* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.BrokerReport"; }

protected:
explicit BrokerReport(::google::protobuf::Arena* arena);
BrokerReport(::google::protobuf::Arena* arena, const BrokerReport& from);
BrokerReport(::google::protobuf::Arena* arena, BrokerReport&& from) noexcept
: BrokerReport(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTradeIdFieldNumber = 1,
kOrderIdFieldNumber = 2,
kFigiFieldNumber = 3,
kExecuteSignFieldNumber = 4,
kExchangeFieldNumber = 6,
kClassCodeFieldNumber = 7,
kDirectionFieldNumber = 8,
kNameFieldNumber = 9,
kTickerFieldNumber = 10,
kPartyFieldNumber = 20,
kBrokerStatusFieldNumber = 23,
kSeparateAgreementTypeFieldNumber = 24,
kSeparateAgreementNumberFieldNumber = 25,
kSeparateAgreementDateFieldNumber = 26,
kDeliveryTypeFieldNumber = 27,
kTradeDatetimeFieldNumber = 5,
kPriceFieldNumber = 11,
kOrderAmountFieldNumber = 13,
kAciValueFieldNumber = 14,
kTotalOrderAmountFieldNumber = 15,
kBrokerCommissionFieldNumber = 16,
kExchangeCommissionFieldNumber = 17,
kExchangeClearingCommissionFieldNumber = 18,
kRepoRateFieldNumber = 19,
kClearValueDateFieldNumber = 21,
kSecValueDateFieldNumber = 22,
kQuantityFieldNumber = 12,
};
// string trade_id = 1;
void clear_trade_id() ;
const std::string& trade_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_trade_id(Arg_&& arg, Args_... args);
std::string* mutable_trade_id();
PROTOBUF_NODISCARD std::string* release_trade_id();
void set_allocated_trade_id(std::string* value);

private:
const std::string& _internal_trade_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(
const std::string& value);
std::string* _internal_mutable_trade_id();

public:
// string order_id = 2;
void clear_order_id() ;
const std::string& order_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_order_id(Arg_&& arg, Args_... args);
std::string* mutable_order_id();
PROTOBUF_NODISCARD std::string* release_order_id();
void set_allocated_order_id(std::string* value);

private:
const std::string& _internal_order_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
const std::string& value);
std::string* _internal_mutable_order_id();

public:
// string figi = 3;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// string execute_sign = 4;
void clear_execute_sign() ;
const std::string& execute_sign() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_execute_sign(Arg_&& arg, Args_... args);
std::string* mutable_execute_sign();
PROTOBUF_NODISCARD std::string* release_execute_sign();
void set_allocated_execute_sign(std::string* value);

private:
const std::string& _internal_execute_sign() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_execute_sign(
const std::string& value);
std::string* _internal_mutable_execute_sign();

public:
// string exchange = 6;
void clear_exchange() ;
const std::string& exchange() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_exchange(Arg_&& arg, Args_... args);
std::string* mutable_exchange();
PROTOBUF_NODISCARD std::string* release_exchange();
void set_allocated_exchange(std::string* value);

private:
const std::string& _internal_exchange() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
const std::string& value);
std::string* _internal_mutable_exchange();

public:
// string class_code = 7;
void clear_class_code() ;
const std::string& class_code() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_class_code(Arg_&& arg, Args_... args);
std::string* mutable_class_code();
PROTOBUF_NODISCARD std::string* release_class_code();
void set_allocated_class_code(std::string* value);

private:
const std::string& _internal_class_code() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
const std::string& value);
std::string* _internal_mutable_class_code();

public:
// string direction = 8;
void clear_direction() ;
const std::string& direction() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_direction(Arg_&& arg, Args_... args);
std::string* mutable_direction();
PROTOBUF_NODISCARD std::string* release_direction();
void set_allocated_direction(std::string* value);

private:
const std::string& _internal_direction() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(
const std::string& value);
std::string* _internal_mutable_direction();

public:
// string name = 9;
void clear_name() ;
const std::string& name() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_name(Arg_&& arg, Args_... args);
std::string* mutable_name();
PROTOBUF_NODISCARD std::string* release_name();
void set_allocated_name(std::string* value);

private:
const std::string& _internal_name() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
const std::string& value);
std::string* _internal_mutable_name();

public:
// string ticker = 10;
void clear_ticker() ;
const std::string& ticker() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_ticker(Arg_&& arg, Args_... args);
std::string* mutable_ticker();
PROTOBUF_NODISCARD std::string* release_ticker();
void set_allocated_ticker(std::string* value);

private:
const std::string& _internal_ticker() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
const std::string& value);
std::string* _internal_mutable_ticker();

public:
// string party = 20;
void clear_party() ;
const std::string& party() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_party(Arg_&& arg, Args_... args);
std::string* mutable_party();
PROTOBUF_NODISCARD std::string* release_party();
void set_allocated_party(std::string* value);

private:
const std::string& _internal_party() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_party(
const std::string& value);
std::string* _internal_mutable_party();

public:
// string broker_status = 23;
void clear_broker_status() ;
const std::string& broker_status() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_broker_status(Arg_&& arg, Args_... args);
std::string* mutable_broker_status();
PROTOBUF_NODISCARD std::string* release_broker_status();
void set_allocated_broker_status(std::string* value);

private:
const std::string& _internal_broker_status() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_status(
const std::string& value);
std::string* _internal_mutable_broker_status();

public:
// string separate_agreement_type = 24;
void clear_separate_agreement_type() ;
const std::string& separate_agreement_type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_separate_agreement_type(Arg_&& arg, Args_... args);
std::string* mutable_separate_agreement_type();
PROTOBUF_NODISCARD std::string* release_separate_agreement_type();
void set_allocated_separate_agreement_type(std::string* value);

private:
const std::string& _internal_separate_agreement_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_separate_agreement_type(
const std::string& value);
std::string* _internal_mutable_separate_agreement_type();

public:
// string separate_agreement_number = 25;
void clear_separate_agreement_number() ;
const std::string& separate_agreement_number() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_separate_agreement_number(Arg_&& arg, Args_... args);
std::string* mutable_separate_agreement_number();
PROTOBUF_NODISCARD std::string* release_separate_agreement_number();
void set_allocated_separate_agreement_number(std::string* value);

private:
const std::string& _internal_separate_agreement_number() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_separate_agreement_number(
const std::string& value);
std::string* _internal_mutable_separate_agreement_number();

public:
// string separate_agreement_date = 26;
void clear_separate_agreement_date() ;
const std::string& separate_agreement_date() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_separate_agreement_date(Arg_&& arg, Args_... args);
std::string* mutable_separate_agreement_date();
PROTOBUF_NODISCARD std::string* release_separate_agreement_date();
void set_allocated_separate_agreement_date(std::string* value);

private:
const std::string& _internal_separate_agreement_date() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_separate_agreement_date(
const std::string& value);
std::string* _internal_mutable_separate_agreement_date();

public:
// string delivery_type = 27;
void clear_delivery_type() ;
const std::string& delivery_type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_delivery_type(Arg_&& arg, Args_... args);
std::string* mutable_delivery_type();
PROTOBUF_NODISCARD std::string* release_delivery_type();
void set_allocated_delivery_type(std::string* value);

private:
const std::string& _internal_delivery_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_delivery_type(
const std::string& value);
std::string* _internal_mutable_delivery_type();

public:
// .google.protobuf.Timestamp trade_datetime = 5;
bool has_trade_datetime() const;
void clear_trade_datetime() ;
const ::google::protobuf::Timestamp& trade_datetime() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_trade_datetime();
::google::protobuf::Timestamp* mutable_trade_datetime();
void set_allocated_trade_datetime(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_trade_datetime(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_trade_datetime();

private:
const ::google::protobuf::Timestamp& _internal_trade_datetime() const;
::google::protobuf::Timestamp* _internal_mutable_trade_datetime();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 11;
bool has_price() const;
void clear_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue order_amount = 13;
bool has_order_amount() const;
void clear_order_amount() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& order_amount() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_order_amount();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_order_amount();
void set_allocated_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_order_amount();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_order_amount() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_order_amount();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation aci_value = 14;
bool has_aci_value() const;
void clear_aci_value() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& aci_value() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_aci_value();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_aci_value();
void set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_aci_value();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_aci_value() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_aci_value();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_order_amount = 15;
bool has_total_order_amount() const;
void clear_total_order_amount() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_order_amount() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_order_amount();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_order_amount();
void set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_order_amount();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_order_amount() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_order_amount();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue broker_commission = 16;
bool has_broker_commission() const;
void clear_broker_commission() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& broker_commission() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_broker_commission();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_broker_commission();
void set_allocated_broker_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_broker_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_broker_commission();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_broker_commission() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_broker_commission();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue exchange_commission = 17;
bool has_exchange_commission() const;
void clear_exchange_commission() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& exchange_commission() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_exchange_commission();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_exchange_commission();
void set_allocated_exchange_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_exchange_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_exchange_commission();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_exchange_commission() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_exchange_commission();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue exchange_clearing_commission = 18;
bool has_exchange_clearing_commission() const;
void clear_exchange_clearing_commission() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& exchange_clearing_commission() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_exchange_clearing_commission();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_exchange_clearing_commission();
void set_allocated_exchange_clearing_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_exchange_clearing_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_exchange_clearing_commission();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_exchange_clearing_commission() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_exchange_clearing_commission();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation repo_rate = 19;
bool has_repo_rate() const;
void clear_repo_rate() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& repo_rate() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_repo_rate();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_repo_rate();
void set_allocated_repo_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_repo_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_repo_rate();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_repo_rate() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_repo_rate();

public:
// .google.protobuf.Timestamp clear_value_date = 21;
bool has_clear_value_date() const;
void clear_clear_value_date() ;
const ::google::protobuf::Timestamp& clear_value_date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_clear_value_date();
::google::protobuf::Timestamp* mutable_clear_value_date();
void set_allocated_clear_value_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_clear_value_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_clear_value_date();

private:
const ::google::protobuf::Timestamp& _internal_clear_value_date() const;
::google::protobuf::Timestamp* _internal_mutable_clear_value_date();

public:
// .google.protobuf.Timestamp sec_value_date = 22;
bool has_sec_value_date() const;
void clear_sec_value_date() ;
const ::google::protobuf::Timestamp& sec_value_date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_sec_value_date();
::google::protobuf::Timestamp* mutable_sec_value_date();
void set_allocated_sec_value_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_sec_value_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_sec_value_date();

private:
const ::google::protobuf::Timestamp& _internal_sec_value_date() const;
::google::protobuf::Timestamp* _internal_mutable_sec_value_date();

public:
// int64 quantity = 12;
void clear_quantity() ;
::int64_t quantity() const;
void set_quantity(::int64_t value);

private:
::int64_t _internal_quantity() const;
void _internal_set_quantity(::int64_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.BrokerReport)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
5, 27, 11,
254, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr trade_id_;
::google::protobuf::internal::ArenaStringPtr order_id_;
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::internal::ArenaStringPtr execute_sign_;
::google::protobuf::internal::ArenaStringPtr exchange_;
::google::protobuf::internal::ArenaStringPtr class_code_;
::google::protobuf::internal::ArenaStringPtr direction_;
::google::protobuf::internal::ArenaStringPtr name_;
::google::protobuf::internal::ArenaStringPtr ticker_;
::google::protobuf::internal::ArenaStringPtr party_;
::google::protobuf::internal::ArenaStringPtr broker_status_;
::google::protobuf::internal::ArenaStringPtr separate_agreement_type_;
::google::protobuf::internal::ArenaStringPtr separate_agreement_number_;
::google::protobuf::internal::ArenaStringPtr separate_agreement_date_;
::google::protobuf::internal::ArenaStringPtr delivery_type_;
::google::protobuf::Timestamp* trade_datetime_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* order_amount_;
::tinkoff::public_::invest::api::contract::v1::Quotation* aci_value_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_order_amount_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* broker_commission_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_commission_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* exchange_clearing_commission_;
::tinkoff::public_::invest::api::contract::v1::Quotation* repo_rate_;
::google::protobuf::Timestamp* clear_value_date_;
::google::protobuf::Timestamp* sec_value_date_;
::int64_t quantity_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionData) */ {
public:
inline PositionData() : PositionData(nullptr) {}
~PositionData() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionData(
::google::protobuf::internal::ConstantInitialized);

inline PositionData(const PositionData& from) : PositionData(nullptr, from) {}
inline PositionData(PositionData&& from) noexcept
: PositionData(nullptr, std::move(from)) {}
inline PositionData& operator=(const PositionData& from) {
CopyFrom(from);
return *this;
}
inline PositionData& operator=(PositionData&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionData& default_instance() {
return *internal_default_instance();
}
static inline const PositionData* internal_default_instance() {
return reinterpret_cast<const PositionData*>(
&_PositionData_default_instance_);
}
static constexpr int kIndexInFileMessages = 42;
friend void swap(PositionData& a, PositionData& b) { a.Swap(&b); }
inline void Swap(PositionData* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionData* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionData* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionData>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionData& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionData& from) { PositionData::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionData* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionData"; }

protected:
explicit PositionData(::google::protobuf::Arena* arena);
PositionData(::google::protobuf::Arena* arena, const PositionData& from);
PositionData(::google::protobuf::Arena* arena, PositionData&& from) noexcept
: PositionData(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kMoneyFieldNumber = 2,
kSecuritiesFieldNumber = 3,
kFuturesFieldNumber = 4,
kOptionsFieldNumber = 5,
kAccountIdFieldNumber = 1,
kDateFieldNumber = 6,
};
// repeated .tinkoff.public.invest.api.contract.v1.PositionsMoney money = 2;
int money_size() const;
private:
int _internal_money_size() const;

public:
void clear_money() ;
::tinkoff::public_::invest::api::contract::v1::PositionsMoney* mutable_money(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>* mutable_money();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>& _internal_money() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>* _internal_mutable_money();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsMoney& money(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsMoney* add_money();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>& money() const;
// repeated .tinkoff.public.invest.api.contract.v1.PositionsSecurities securities = 3;
int securities_size() const;
private:
int _internal_securities_size() const;

public:
void clear_securities() ;
::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* mutable_securities(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>* mutable_securities();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>& _internal_securities() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>* _internal_mutable_securities();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& securities(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* add_securities();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>& securities() const;
// repeated .tinkoff.public.invest.api.contract.v1.PositionsFutures futures = 4;
int futures_size() const;
private:
int _internal_futures_size() const;

public:
void clear_futures() ;
::tinkoff::public_::invest::api::contract::v1::PositionsFutures* mutable_futures(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>* mutable_futures();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>& _internal_futures() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>* _internal_mutable_futures();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& futures(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsFutures* add_futures();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>& futures() const;
// repeated .tinkoff.public.invest.api.contract.v1.PositionsOptions options = 5;
int options_size() const;
private:
int _internal_options_size() const;

public:
void clear_options() ;
::tinkoff::public_::invest::api::contract::v1::PositionsOptions* mutable_options(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>* mutable_options();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>& _internal_options() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>* _internal_mutable_options();
public:
const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& options(int index) const;
::tinkoff::public_::invest::api::contract::v1::PositionsOptions* add_options();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>& options() const;
// string account_id = 1;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// .google.protobuf.Timestamp date = 6;
bool has_date() const;
void clear_date() ;
const ::google::protobuf::Timestamp& date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date();
::google::protobuf::Timestamp* mutable_date();
void set_allocated_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_date();

private:
const ::google::protobuf::Timestamp& _internal_date() const;
::google::protobuf::Timestamp* _internal_mutable_date();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionData)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
3, 6, 5,
69, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsMoney > money_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities > securities_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsFutures > futures_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PositionsOptions > options_;
::google::protobuf::internal::ArenaStringPtr account_id_;
::google::protobuf::Timestamp* date_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PortfolioResponse) */ {
public:
inline PortfolioResponse() : PortfolioResponse(nullptr) {}
~PortfolioResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PortfolioResponse(
::google::protobuf::internal::ConstantInitialized);

inline PortfolioResponse(const PortfolioResponse& from) : PortfolioResponse(nullptr, from) {}
inline PortfolioResponse(PortfolioResponse&& from) noexcept
: PortfolioResponse(nullptr, std::move(from)) {}
inline PortfolioResponse& operator=(const PortfolioResponse& from) {
CopyFrom(from);
return *this;
}
inline PortfolioResponse& operator=(PortfolioResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PortfolioResponse& default_instance() {
return *internal_default_instance();
}
static inline const PortfolioResponse* internal_default_instance() {
return reinterpret_cast<const PortfolioResponse*>(
&_PortfolioResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 5;
friend void swap(PortfolioResponse& a, PortfolioResponse& b) { a.Swap(&b); }
inline void Swap(PortfolioResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PortfolioResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PortfolioResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PortfolioResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PortfolioResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PortfolioResponse& from) { PortfolioResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PortfolioResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PortfolioResponse"; }

protected:
explicit PortfolioResponse(::google::protobuf::Arena* arena);
PortfolioResponse(::google::protobuf::Arena* arena, const PortfolioResponse& from);
PortfolioResponse(::google::protobuf::Arena* arena, PortfolioResponse&& from) noexcept
: PortfolioResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kPositionsFieldNumber = 7,
kVirtualPositionsFieldNumber = 12,
kAccountIdFieldNumber = 8,
kTotalAmountSharesFieldNumber = 1,
kTotalAmountBondsFieldNumber = 2,
kTotalAmountEtfFieldNumber = 3,
kTotalAmountCurrenciesFieldNumber = 4,
kTotalAmountFuturesFieldNumber = 5,
kExpectedYieldFieldNumber = 6,
kTotalAmountOptionsFieldNumber = 9,
kTotalAmountSpFieldNumber = 10,
kTotalAmountPortfolioFieldNumber = 11,
};
// repeated .tinkoff.public.invest.api.contract.v1.PortfolioPosition positions = 7;
int positions_size() const;
private:
int _internal_positions_size() const;

public:
void clear_positions() ;
::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* mutable_positions(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>* mutable_positions();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>& _internal_positions() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>* _internal_mutable_positions();
public:
const ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition& positions(int index) const;
::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* add_positions();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>& positions() const;
// repeated .tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition virtual_positions = 12;
int virtual_positions_size() const;
private:
int _internal_virtual_positions_size() const;

public:
void clear_virtual_positions() ;
::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* mutable_virtual_positions(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>* mutable_virtual_positions();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>& _internal_virtual_positions() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>* _internal_mutable_virtual_positions();
public:
const ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition& virtual_positions(int index) const;
::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* add_virtual_positions();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>& virtual_positions() const;
// string account_id = 8;
void clear_account_id() ;
const std::string& account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_account_id(Arg_&& arg, Args_... args);
std::string* mutable_account_id();
PROTOBUF_NODISCARD std::string* release_account_id();
void set_allocated_account_id(std::string* value);

private:
const std::string& _internal_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
const std::string& value);
std::string* _internal_mutable_account_id();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_shares = 1;
bool has_total_amount_shares() const;
void clear_total_amount_shares() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_shares() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_shares();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_shares();
void set_allocated_total_amount_shares(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_shares(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_shares();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_shares() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_shares();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_bonds = 2;
bool has_total_amount_bonds() const;
void clear_total_amount_bonds() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_bonds() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_bonds();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_bonds();
void set_allocated_total_amount_bonds(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_bonds(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_bonds();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_bonds() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_bonds();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_etf = 3;
bool has_total_amount_etf() const;
void clear_total_amount_etf() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_etf() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_etf();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_etf();
void set_allocated_total_amount_etf(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_etf(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_etf();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_etf() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_etf();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_currencies = 4;
bool has_total_amount_currencies() const;
void clear_total_amount_currencies() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_currencies() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_currencies();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_currencies();
void set_allocated_total_amount_currencies(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_currencies(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_currencies();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_currencies() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_currencies();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_futures = 5;
bool has_total_amount_futures() const;
void clear_total_amount_futures() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_futures() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_futures();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_futures();
void set_allocated_total_amount_futures(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_futures(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_futures();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_futures() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_futures();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield = 6;
bool has_expected_yield() const;
void clear_expected_yield() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& expected_yield() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expected_yield();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expected_yield();
void set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expected_yield();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expected_yield() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expected_yield();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_options = 9;
bool has_total_amount_options() const;
void clear_total_amount_options() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_options() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_options();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_options();
void set_allocated_total_amount_options(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_options(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_options();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_options() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_options();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_sp = 10;
bool has_total_amount_sp() const;
void clear_total_amount_sp() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_sp() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_sp();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_sp();
void set_allocated_total_amount_sp(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_sp(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_sp();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_sp() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_sp();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_portfolio = 11;
bool has_total_amount_portfolio() const;
void clear_total_amount_portfolio() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& total_amount_portfolio() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_total_amount_portfolio();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_total_amount_portfolio();
void set_allocated_total_amount_portfolio(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_total_amount_portfolio(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_total_amount_portfolio();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_total_amount_portfolio() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_total_amount_portfolio();

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PortfolioResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
4, 12, 11,
82, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition > positions_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition > virtual_positions_;
::google::protobuf::internal::ArenaStringPtr account_id_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_shares_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_bonds_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_etf_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_currencies_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_futures_;
::tinkoff::public_::invest::api::contract::v1::Quotation* expected_yield_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_options_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_sp_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* total_amount_portfolio_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationItemTrades final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OperationItemTrades) */ {
public:
inline OperationItemTrades() : OperationItemTrades(nullptr) {}
~OperationItemTrades() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR OperationItemTrades(
::google::protobuf::internal::ConstantInitialized);

inline OperationItemTrades(const OperationItemTrades& from) : OperationItemTrades(nullptr, from) {}
inline OperationItemTrades(OperationItemTrades&& from) noexcept
: OperationItemTrades(nullptr, std::move(from)) {}
inline OperationItemTrades& operator=(const OperationItemTrades& from) {
CopyFrom(from);
return *this;
}
inline OperationItemTrades& operator=(OperationItemTrades&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const OperationItemTrades& default_instance() {
return *internal_default_instance();
}
static inline const OperationItemTrades* internal_default_instance() {
return reinterpret_cast<const OperationItemTrades*>(
&_OperationItemTrades_default_instance_);
}
static constexpr int kIndexInFileMessages = 36;
friend void swap(OperationItemTrades& a, OperationItemTrades& b) { a.Swap(&b); }
inline void Swap(OperationItemTrades* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(OperationItemTrades* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

OperationItemTrades* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<OperationItemTrades>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const OperationItemTrades& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const OperationItemTrades& from) { OperationItemTrades::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(OperationItemTrades* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OperationItemTrades"; }

protected:
explicit OperationItemTrades(::google::protobuf::Arena* arena);
OperationItemTrades(::google::protobuf::Arena* arena, const OperationItemTrades& from);
OperationItemTrades(::google::protobuf::Arena* arena, OperationItemTrades&& from) noexcept
: OperationItemTrades(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTradesFieldNumber = 6,
};
// repeated .tinkoff.public.invest.api.contract.v1.OperationItemTrade trades = 6;
int trades_size() const;
private:
int _internal_trades_size() const;

public:
void clear_trades() ;
::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* mutable_trades(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>* mutable_trades();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>& _internal_trades() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>* _internal_mutable_trades();
public:
const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade& trades(int index) const;
::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* add_trades();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>& trades() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OperationItemTrades)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 1,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade > trades_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class Operation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.Operation) */ {
public:
inline Operation() : Operation(nullptr) {}
~Operation() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR Operation(
::google::protobuf::internal::ConstantInitialized);

inline Operation(const Operation& from) : Operation(nullptr, from) {}
inline Operation(Operation&& from) noexcept
: Operation(nullptr, std::move(from)) {}
inline Operation& operator=(const Operation& from) {
CopyFrom(from);
return *this;
}
inline Operation& operator=(Operation&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const Operation& default_instance() {
return *internal_default_instance();
}
static inline const Operation* internal_default_instance() {
return reinterpret_cast<const Operation*>(
&_Operation_default_instance_);
}
static constexpr int kIndexInFileMessages = 2;
friend void swap(Operation& a, Operation& b) { a.Swap(&b); }
inline void Swap(Operation* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(Operation* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

Operation* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<Operation>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const Operation& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const Operation& from) { Operation::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(Operation* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.Operation"; }

protected:
explicit Operation(::google::protobuf::Arena* arena);
Operation(::google::protobuf::Arena* arena, const Operation& from);
Operation(::google::protobuf::Arena* arena, Operation&& from) noexcept
: Operation(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kTradesFieldNumber = 14,
kIdFieldNumber = 1,
kParentOperationIdFieldNumber = 2,
kCurrencyFieldNumber = 3,
kFigiFieldNumber = 9,
kInstrumentTypeFieldNumber = 10,
kTypeFieldNumber = 12,
kAssetUidFieldNumber = 16,
kPositionUidFieldNumber = 17,
kInstrumentUidFieldNumber = 18,
kPaymentFieldNumber = 4,
kPriceFieldNumber = 5,
kDateFieldNumber = 11,
kQuantityFieldNumber = 7,
kQuantityRestFieldNumber = 8,
kStateFieldNumber = 6,
kOperationTypeFieldNumber = 13,
};
// repeated .tinkoff.public.invest.api.contract.v1.OperationTrade trades = 14;
int trades_size() const;
private:
int _internal_trades_size() const;

public:
void clear_trades() ;
::tinkoff::public_::invest::api::contract::v1::OperationTrade* mutable_trades(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>* mutable_trades();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>& _internal_trades() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>* _internal_mutable_trades();
public:
const ::tinkoff::public_::invest::api::contract::v1::OperationTrade& trades(int index) const;
::tinkoff::public_::invest::api::contract::v1::OperationTrade* add_trades();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>& trades() const;
// string id = 1;
void clear_id() ;
const std::string& id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_id(Arg_&& arg, Args_... args);
std::string* mutable_id();
PROTOBUF_NODISCARD std::string* release_id();
void set_allocated_id(std::string* value);

private:
const std::string& _internal_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
const std::string& value);
std::string* _internal_mutable_id();

public:
// string parent_operation_id = 2;
void clear_parent_operation_id() ;
const std::string& parent_operation_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_parent_operation_id(Arg_&& arg, Args_... args);
std::string* mutable_parent_operation_id();
PROTOBUF_NODISCARD std::string* release_parent_operation_id();
void set_allocated_parent_operation_id(std::string* value);

private:
const std::string& _internal_parent_operation_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_operation_id(
const std::string& value);
std::string* _internal_mutable_parent_operation_id();

public:
// string currency = 3;
void clear_currency() ;
const std::string& currency() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_currency(Arg_&& arg, Args_... args);
std::string* mutable_currency();
PROTOBUF_NODISCARD std::string* release_currency();
void set_allocated_currency(std::string* value);

private:
const std::string& _internal_currency() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
const std::string& value);
std::string* _internal_mutable_currency();

public:
// string figi = 9;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// string instrument_type = 10;
void clear_instrument_type() ;
const std::string& instrument_type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_type(Arg_&& arg, Args_... args);
std::string* mutable_instrument_type();
PROTOBUF_NODISCARD std::string* release_instrument_type();
void set_allocated_instrument_type(std::string* value);

private:
const std::string& _internal_instrument_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
const std::string& value);
std::string* _internal_mutable_instrument_type();

public:
// string type = 12;
void clear_type() ;
const std::string& type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_type(Arg_&& arg, Args_... args);
std::string* mutable_type();
PROTOBUF_NODISCARD std::string* release_type();
void set_allocated_type(std::string* value);

private:
const std::string& _internal_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
const std::string& value);
std::string* _internal_mutable_type();

public:
// string asset_uid = 16;
void clear_asset_uid() ;
const std::string& asset_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_asset_uid(Arg_&& arg, Args_... args);
std::string* mutable_asset_uid();
PROTOBUF_NODISCARD std::string* release_asset_uid();
void set_allocated_asset_uid(std::string* value);

private:
const std::string& _internal_asset_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
const std::string& value);
std::string* _internal_mutable_asset_uid();

public:
// string position_uid = 17;
void clear_position_uid() ;
const std::string& position_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_position_uid(Arg_&& arg, Args_... args);
std::string* mutable_position_uid();
PROTOBUF_NODISCARD std::string* release_position_uid();
void set_allocated_position_uid(std::string* value);

private:
const std::string& _internal_position_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
const std::string& value);
std::string* _internal_mutable_position_uid();

public:
// string instrument_uid = 18;
void clear_instrument_uid() ;
const std::string& instrument_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_uid(Arg_&& arg, Args_... args);
std::string* mutable_instrument_uid();
PROTOBUF_NODISCARD std::string* release_instrument_uid();
void set_allocated_instrument_uid(std::string* value);

private:
const std::string& _internal_instrument_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
const std::string& value);
std::string* _internal_mutable_instrument_uid();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue payment = 4;
bool has_payment() const;
void clear_payment() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& payment() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_payment();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_payment();
void set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_payment();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_payment() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_payment();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 5;
bool has_price() const;
void clear_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();

public:
// .google.protobuf.Timestamp date = 11;
bool has_date() const;
void clear_date() ;
const ::google::protobuf::Timestamp& date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date();
::google::protobuf::Timestamp* mutable_date();
void set_allocated_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_date();

private:
const ::google::protobuf::Timestamp& _internal_date() const;
::google::protobuf::Timestamp* _internal_mutable_date();

public:
// int64 quantity = 7;
void clear_quantity() ;
::int64_t quantity() const;
void set_quantity(::int64_t value);

private:
::int64_t _internal_quantity() const;
void _internal_set_quantity(::int64_t value);

public:
// int64 quantity_rest = 8;
void clear_quantity_rest() ;
::int64_t quantity_rest() const;
void set_quantity_rest(::int64_t value);

private:
::int64_t _internal_quantity_rest() const;
void _internal_set_quantity_rest(::int64_t value);

public:
// .tinkoff.public.invest.api.contract.v1.OperationState state = 6;
void clear_state() ;
::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

private:
::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

public:
// .tinkoff.public.invest.api.contract.v1.OperationType operation_type = 13;
void clear_operation_type() ;
::tinkoff::public_::invest::api::contract::v1::OperationType operation_type() const;
void set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);

private:
::tinkoff::public_::invest::api::contract::v1::OperationType _internal_operation_type() const;
void _internal_set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.Operation)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
5, 17, 4,
159, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationTrade > trades_;
::google::protobuf::internal::ArenaStringPtr id_;
::google::protobuf::internal::ArenaStringPtr parent_operation_id_;
::google::protobuf::internal::ArenaStringPtr currency_;
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::internal::ArenaStringPtr instrument_type_;
::google::protobuf::internal::ArenaStringPtr type_;
::google::protobuf::internal::ArenaStringPtr asset_uid_;
::google::protobuf::internal::ArenaStringPtr position_uid_;
::google::protobuf::internal::ArenaStringPtr instrument_uid_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
::google::protobuf::Timestamp* date_;
::int64_t quantity_;
::int64_t quantity_rest_;
int state_;
int operation_type_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest) */ {
public:
inline GetDividendsForeignIssuerRequest() : GetDividendsForeignIssuerRequest(nullptr) {}
~GetDividendsForeignIssuerRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerRequest(
::google::protobuf::internal::ConstantInitialized);

inline GetDividendsForeignIssuerRequest(const GetDividendsForeignIssuerRequest& from) : GetDividendsForeignIssuerRequest(nullptr, from) {}
inline GetDividendsForeignIssuerRequest(GetDividendsForeignIssuerRequest&& from) noexcept
: GetDividendsForeignIssuerRequest(nullptr, std::move(from)) {}
inline GetDividendsForeignIssuerRequest& operator=(const GetDividendsForeignIssuerRequest& from) {
CopyFrom(from);
return *this;
}
inline GetDividendsForeignIssuerRequest& operator=(GetDividendsForeignIssuerRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetDividendsForeignIssuerRequest& default_instance() {
return *internal_default_instance();
}
enum PayloadCase {
kGenerateDivForeignIssuerReport = 1,
kGetDivForeignIssuerReport = 2,
PAYLOAD_NOT_SET = 0,
};
static inline const GetDividendsForeignIssuerRequest* internal_default_instance() {
return reinterpret_cast<const GetDividendsForeignIssuerRequest*>(
&_GetDividendsForeignIssuerRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 22;
friend void swap(GetDividendsForeignIssuerRequest& a, GetDividendsForeignIssuerRequest& b) { a.Swap(&b); }
inline void Swap(GetDividendsForeignIssuerRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetDividendsForeignIssuerRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetDividendsForeignIssuerRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetDividendsForeignIssuerRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetDividendsForeignIssuerRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetDividendsForeignIssuerRequest& from) { GetDividendsForeignIssuerRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetDividendsForeignIssuerRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest"; }

protected:
explicit GetDividendsForeignIssuerRequest(::google::protobuf::Arena* arena);
GetDividendsForeignIssuerRequest(::google::protobuf::Arena* arena, const GetDividendsForeignIssuerRequest& from);
GetDividendsForeignIssuerRequest(::google::protobuf::Arena* arena, GetDividendsForeignIssuerRequest&& from) noexcept
: GetDividendsForeignIssuerRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kGenerateDivForeignIssuerReportFieldNumber = 1,
kGetDivForeignIssuerReportFieldNumber = 2,
};
// .tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest generate_div_foreign_issuer_report = 1;
bool has_generate_div_foreign_issuer_report() const;
private:
bool _internal_has_generate_div_foreign_issuer_report() const;

public:
void clear_generate_div_foreign_issuer_report() ;
const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& generate_div_foreign_issuer_report() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* release_generate_div_foreign_issuer_report();
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* mutable_generate_div_foreign_issuer_report();
void set_allocated_generate_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* value);
void unsafe_arena_set_allocated_generate_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* value);
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* unsafe_arena_release_generate_div_foreign_issuer_report();

private:
const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& _internal_generate_div_foreign_issuer_report() const;
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* _internal_mutable_generate_div_foreign_issuer_report();

public:
// .tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest get_div_foreign_issuer_report = 2;
bool has_get_div_foreign_issuer_report() const;
private:
bool _internal_has_get_div_foreign_issuer_report() const;

public:
void clear_get_div_foreign_issuer_report() ;
const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& get_div_foreign_issuer_report() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* release_get_div_foreign_issuer_report();
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* mutable_get_div_foreign_issuer_report();
void set_allocated_get_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* value);
void unsafe_arena_set_allocated_get_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* value);
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* unsafe_arena_release_get_div_foreign_issuer_report();

private:
const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& _internal_get_div_foreign_issuer_report() const;
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* _internal_mutable_get_div_foreign_issuer_report();

public:
void clear_payload();
PayloadCase payload_case() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest)
private:
class _Internal;
void set_has_generate_div_foreign_issuer_report();
void set_has_get_div_foreign_issuer_report();
inline bool has_payload() const;
inline void clear_has_payload();
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 2, 2,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
union PayloadUnion {
constexpr PayloadUnion() : _constinit_{} {}
::google::protobuf::internal::ConstantInitialized _constinit_;
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* generate_div_foreign_issuer_report_;
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* get_div_foreign_issuer_report_;
} payload_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::uint32_t _oneof_case_[1];
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerReportResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse) */ {
public:
inline GetDividendsForeignIssuerReportResponse() : GetDividendsForeignIssuerReportResponse(nullptr) {}
~GetDividendsForeignIssuerReportResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerReportResponse(
::google::protobuf::internal::ConstantInitialized);

inline GetDividendsForeignIssuerReportResponse(const GetDividendsForeignIssuerReportResponse& from) : GetDividendsForeignIssuerReportResponse(nullptr, from) {}
inline GetDividendsForeignIssuerReportResponse(GetDividendsForeignIssuerReportResponse&& from) noexcept
: GetDividendsForeignIssuerReportResponse(nullptr, std::move(from)) {}
inline GetDividendsForeignIssuerReportResponse& operator=(const GetDividendsForeignIssuerReportResponse& from) {
CopyFrom(from);
return *this;
}
inline GetDividendsForeignIssuerReportResponse& operator=(GetDividendsForeignIssuerReportResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetDividendsForeignIssuerReportResponse& default_instance() {
return *internal_default_instance();
}
static inline const GetDividendsForeignIssuerReportResponse* internal_default_instance() {
return reinterpret_cast<const GetDividendsForeignIssuerReportResponse*>(
&_GetDividendsForeignIssuerReportResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 27;
friend void swap(GetDividendsForeignIssuerReportResponse& a, GetDividendsForeignIssuerReportResponse& b) { a.Swap(&b); }
inline void Swap(GetDividendsForeignIssuerReportResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetDividendsForeignIssuerReportResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetDividendsForeignIssuerReportResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetDividendsForeignIssuerReportResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetDividendsForeignIssuerReportResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetDividendsForeignIssuerReportResponse& from) { GetDividendsForeignIssuerReportResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetDividendsForeignIssuerReportResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse"; }

protected:
explicit GetDividendsForeignIssuerReportResponse(::google::protobuf::Arena* arena);
GetDividendsForeignIssuerReportResponse(::google::protobuf::Arena* arena, const GetDividendsForeignIssuerReportResponse& from);
GetDividendsForeignIssuerReportResponse(::google::protobuf::Arena* arena, GetDividendsForeignIssuerReportResponse&& from) noexcept
: GetDividendsForeignIssuerReportResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kDividendsForeignIssuerReportFieldNumber = 1,
kItemsCountFieldNumber = 2,
kPagesCountFieldNumber = 3,
kPageFieldNumber = 4,
};
// repeated .tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport dividends_foreign_issuer_report = 1;
int dividends_foreign_issuer_report_size() const;
private:
int _internal_dividends_foreign_issuer_report_size() const;

public:
void clear_dividends_foreign_issuer_report() ;
::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* mutable_dividends_foreign_issuer_report(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>* mutable_dividends_foreign_issuer_report();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>& _internal_dividends_foreign_issuer_report() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>* _internal_mutable_dividends_foreign_issuer_report();
public:
const ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport& dividends_foreign_issuer_report(int index) const;
::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* add_dividends_foreign_issuer_report();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>& dividends_foreign_issuer_report() const;
// int32 itemsCount = 2;
void clear_itemscount() ;
::int32_t itemscount() const;
void set_itemscount(::int32_t value);

private:
::int32_t _internal_itemscount() const;
void _internal_set_itemscount(::int32_t value);

public:
// int32 pagesCount = 3;
void clear_pagescount() ;
::int32_t pagescount() const;
void set_pagescount(::int32_t value);

private:
::int32_t _internal_pagescount() const;
void _internal_set_pagescount(::int32_t value);

public:
// int32 page = 4;
void clear_page() ;
::int32_t page() const;
void set_page(::int32_t value);

private:
::int32_t _internal_page() const;
void _internal_set_page(::int32_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
2, 4, 1,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport > dividends_foreign_issuer_report_;
::int32_t itemscount_;
::int32_t pagescount_;
::int32_t page_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetBrokerReportResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse) */ {
public:
inline GetBrokerReportResponse() : GetBrokerReportResponse(nullptr) {}
~GetBrokerReportResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetBrokerReportResponse(
::google::protobuf::internal::ConstantInitialized);

inline GetBrokerReportResponse(const GetBrokerReportResponse& from) : GetBrokerReportResponse(nullptr, from) {}
inline GetBrokerReportResponse(GetBrokerReportResponse&& from) noexcept
: GetBrokerReportResponse(nullptr, std::move(from)) {}
inline GetBrokerReportResponse& operator=(const GetBrokerReportResponse& from) {
CopyFrom(from);
return *this;
}
inline GetBrokerReportResponse& operator=(GetBrokerReportResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetBrokerReportResponse& default_instance() {
return *internal_default_instance();
}
static inline const GetBrokerReportResponse* internal_default_instance() {
return reinterpret_cast<const GetBrokerReportResponse*>(
&_GetBrokerReportResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 20;
friend void swap(GetBrokerReportResponse& a, GetBrokerReportResponse& b) { a.Swap(&b); }
inline void Swap(GetBrokerReportResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetBrokerReportResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetBrokerReportResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetBrokerReportResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetBrokerReportResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetBrokerReportResponse& from) { GetBrokerReportResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetBrokerReportResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse"; }

protected:
explicit GetBrokerReportResponse(::google::protobuf::Arena* arena);
GetBrokerReportResponse(::google::protobuf::Arena* arena, const GetBrokerReportResponse& from);
GetBrokerReportResponse(::google::protobuf::Arena* arena, GetBrokerReportResponse&& from) noexcept
: GetBrokerReportResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kBrokerReportFieldNumber = 1,
kItemsCountFieldNumber = 2,
kPagesCountFieldNumber = 3,
kPageFieldNumber = 4,
};
// repeated .tinkoff.public.invest.api.contract.v1.BrokerReport broker_report = 1;
int broker_report_size() const;
private:
int _internal_broker_report_size() const;

public:
void clear_broker_report() ;
::tinkoff::public_::invest::api::contract::v1::BrokerReport* mutable_broker_report(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>* mutable_broker_report();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>& _internal_broker_report() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>* _internal_mutable_broker_report();
public:
const ::tinkoff::public_::invest::api::contract::v1::BrokerReport& broker_report(int index) const;
::tinkoff::public_::invest::api::contract::v1::BrokerReport* add_broker_report();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>& broker_report() const;
// int32 itemsCount = 2;
void clear_itemscount() ;
::int32_t itemscount() const;
void set_itemscount(::int32_t value);

private:
::int32_t _internal_itemscount() const;
void _internal_set_itemscount(::int32_t value);

public:
// int32 pagesCount = 3;
void clear_pagescount() ;
::int32_t pagescount() const;
void set_pagescount(::int32_t value);

private:
::int32_t _internal_pagescount() const;
void _internal_set_pagescount(::int32_t value);

public:
// int32 page = 4;
void clear_page() ;
::int32_t page() const;
void set_page(::int32_t value);

private:
::int32_t _internal_page() const;
void _internal_set_page(::int32_t value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
2, 4, 1,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::BrokerReport > broker_report_;
::int32_t itemscount_;
::int32_t pagescount_;
::int32_t page_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class BrokerReportRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.BrokerReportRequest) */ {
public:
inline BrokerReportRequest() : BrokerReportRequest(nullptr) {}
~BrokerReportRequest() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR BrokerReportRequest(
::google::protobuf::internal::ConstantInitialized);

inline BrokerReportRequest(const BrokerReportRequest& from) : BrokerReportRequest(nullptr, from) {}
inline BrokerReportRequest(BrokerReportRequest&& from) noexcept
: BrokerReportRequest(nullptr, std::move(from)) {}
inline BrokerReportRequest& operator=(const BrokerReportRequest& from) {
CopyFrom(from);
return *this;
}
inline BrokerReportRequest& operator=(BrokerReportRequest&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const BrokerReportRequest& default_instance() {
return *internal_default_instance();
}
enum PayloadCase {
kGenerateBrokerReportRequest = 1,
kGetBrokerReportRequest = 2,
PAYLOAD_NOT_SET = 0,
};
static inline const BrokerReportRequest* internal_default_instance() {
return reinterpret_cast<const BrokerReportRequest*>(
&_BrokerReportRequest_default_instance_);
}
static constexpr int kIndexInFileMessages = 15;
friend void swap(BrokerReportRequest& a, BrokerReportRequest& b) { a.Swap(&b); }
inline void Swap(BrokerReportRequest* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(BrokerReportRequest* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

BrokerReportRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<BrokerReportRequest>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const BrokerReportRequest& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const BrokerReportRequest& from) { BrokerReportRequest::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(BrokerReportRequest* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.BrokerReportRequest"; }

protected:
explicit BrokerReportRequest(::google::protobuf::Arena* arena);
BrokerReportRequest(::google::protobuf::Arena* arena, const BrokerReportRequest& from);
BrokerReportRequest(::google::protobuf::Arena* arena, BrokerReportRequest&& from) noexcept
: BrokerReportRequest(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kGenerateBrokerReportRequestFieldNumber = 1,
kGetBrokerReportRequestFieldNumber = 2,
};
// .tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest generate_broker_report_request = 1;
bool has_generate_broker_report_request() const;
private:
bool _internal_has_generate_broker_report_request() const;

public:
void clear_generate_broker_report_request() ;
const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& generate_broker_report_request() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* release_generate_broker_report_request();
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* mutable_generate_broker_report_request();
void set_allocated_generate_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* value);
void unsafe_arena_set_allocated_generate_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* value);
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* unsafe_arena_release_generate_broker_report_request();

private:
const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& _internal_generate_broker_report_request() const;
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* _internal_mutable_generate_broker_report_request();

public:
// .tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest get_broker_report_request = 2;
bool has_get_broker_report_request() const;
private:
bool _internal_has_get_broker_report_request() const;

public:
void clear_get_broker_report_request() ;
const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& get_broker_report_request() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* release_get_broker_report_request();
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* mutable_get_broker_report_request();
void set_allocated_get_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* value);
void unsafe_arena_set_allocated_get_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* value);
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* unsafe_arena_release_get_broker_report_request();

private:
const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& _internal_get_broker_report_request() const;
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* _internal_mutable_get_broker_report_request();

public:
void clear_payload();
PayloadCase payload_case() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.BrokerReportRequest)
private:
class _Internal;
void set_has_generate_broker_report_request();
void set_has_get_broker_report_request();
inline bool has_payload() const;
inline void clear_has_payload();
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 2, 2,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
union PayloadUnion {
constexpr PayloadUnion() : _constinit_{} {}
::google::protobuf::internal::ConstantInitialized _constinit_;
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* generate_broker_report_request_;
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* get_broker_report_request_;
} payload_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::uint32_t _oneof_case_[1];
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PositionsStreamResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse) */ {
public:
inline PositionsStreamResponse() : PositionsStreamResponse(nullptr) {}
~PositionsStreamResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PositionsStreamResponse(
::google::protobuf::internal::ConstantInitialized);

inline PositionsStreamResponse(const PositionsStreamResponse& from) : PositionsStreamResponse(nullptr, from) {}
inline PositionsStreamResponse(PositionsStreamResponse&& from) noexcept
: PositionsStreamResponse(nullptr, std::move(from)) {}
inline PositionsStreamResponse& operator=(const PositionsStreamResponse& from) {
CopyFrom(from);
return *this;
}
inline PositionsStreamResponse& operator=(PositionsStreamResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PositionsStreamResponse& default_instance() {
return *internal_default_instance();
}
enum PayloadCase {
kSubscriptions = 1,
kPosition = 2,
kPing = 3,
PAYLOAD_NOT_SET = 0,
};
static inline const PositionsStreamResponse* internal_default_instance() {
return reinterpret_cast<const PositionsStreamResponse*>(
&_PositionsStreamResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 39;
friend void swap(PositionsStreamResponse& a, PositionsStreamResponse& b) { a.Swap(&b); }
inline void Swap(PositionsStreamResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PositionsStreamResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PositionsStreamResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PositionsStreamResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PositionsStreamResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PositionsStreamResponse& from) { PositionsStreamResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PositionsStreamResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PositionsStreamResponse"; }

protected:
explicit PositionsStreamResponse(::google::protobuf::Arena* arena);
PositionsStreamResponse(::google::protobuf::Arena* arena, const PositionsStreamResponse& from);
PositionsStreamResponse(::google::protobuf::Arena* arena, PositionsStreamResponse&& from) noexcept
: PositionsStreamResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kSubscriptionsFieldNumber = 1,
kPositionFieldNumber = 2,
kPingFieldNumber = 3,
};
// .tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult subscriptions = 1;
bool has_subscriptions() const;
private:
bool _internal_has_subscriptions() const;

public:
void clear_subscriptions() ;
const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& subscriptions() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* release_subscriptions();
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* mutable_subscriptions();
void set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* value);
void unsafe_arena_set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* value);
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* unsafe_arena_release_subscriptions();

private:
const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& _internal_subscriptions() const;
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* _internal_mutable_subscriptions();

public:
// .tinkoff.public.invest.api.contract.v1.PositionData position = 2;
bool has_position() const;
private:
bool _internal_has_position() const;

public:
void clear_position() ;
const ::tinkoff::public_::invest::api::contract::v1::PositionData& position() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PositionData* release_position();
::tinkoff::public_::invest::api::contract::v1::PositionData* mutable_position();
void set_allocated_position(::tinkoff::public_::invest::api::contract::v1::PositionData* value);
void unsafe_arena_set_allocated_position(::tinkoff::public_::invest::api::contract::v1::PositionData* value);
::tinkoff::public_::invest::api::contract::v1::PositionData* unsafe_arena_release_position();

private:
const ::tinkoff::public_::invest::api::contract::v1::PositionData& _internal_position() const;
::tinkoff::public_::invest::api::contract::v1::PositionData* _internal_mutable_position();

public:
// .tinkoff.public.invest.api.contract.v1.Ping ping = 3;
bool has_ping() const;
private:
bool _internal_has_ping() const;

public:
void clear_ping() ;
const ::tinkoff::public_::invest::api::contract::v1::Ping& ping() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Ping* release_ping();
::tinkoff::public_::invest::api::contract::v1::Ping* mutable_ping();
void set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value);
void unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value);
::tinkoff::public_::invest::api::contract::v1::Ping* unsafe_arena_release_ping();

private:
const ::tinkoff::public_::invest::api::contract::v1::Ping& _internal_ping() const;
::tinkoff::public_::invest::api::contract::v1::Ping* _internal_mutable_ping();

public:
void clear_payload();
PayloadCase payload_case() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse)
private:
class _Internal;
void set_has_subscriptions();
void set_has_position();
void set_has_ping();
inline bool has_payload() const;
inline void clear_has_payload();
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 3, 3,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
union PayloadUnion {
constexpr PayloadUnion() : _constinit_{} {}
::google::protobuf::internal::ConstantInitialized _constinit_;
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* subscriptions_;
::tinkoff::public_::invest::api::contract::v1::PositionData* position_;
::tinkoff::public_::invest::api::contract::v1::Ping* ping_;
} payload_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::uint32_t _oneof_case_[1];
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class PortfolioStreamResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse) */ {
public:
inline PortfolioStreamResponse() : PortfolioStreamResponse(nullptr) {}
~PortfolioStreamResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR PortfolioStreamResponse(
::google::protobuf::internal::ConstantInitialized);

inline PortfolioStreamResponse(const PortfolioStreamResponse& from) : PortfolioStreamResponse(nullptr, from) {}
inline PortfolioStreamResponse(PortfolioStreamResponse&& from) noexcept
: PortfolioStreamResponse(nullptr, std::move(from)) {}
inline PortfolioStreamResponse& operator=(const PortfolioStreamResponse& from) {
CopyFrom(from);
return *this;
}
inline PortfolioStreamResponse& operator=(PortfolioStreamResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const PortfolioStreamResponse& default_instance() {
return *internal_default_instance();
}
enum PayloadCase {
kSubscriptions = 1,
kPortfolio = 2,
kPing = 3,
PAYLOAD_NOT_SET = 0,
};
static inline const PortfolioStreamResponse* internal_default_instance() {
return reinterpret_cast<const PortfolioStreamResponse*>(
&_PortfolioStreamResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 30;
friend void swap(PortfolioStreamResponse& a, PortfolioStreamResponse& b) { a.Swap(&b); }
inline void Swap(PortfolioStreamResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PortfolioStreamResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PortfolioStreamResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<PortfolioStreamResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const PortfolioStreamResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const PortfolioStreamResponse& from) { PortfolioStreamResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(PortfolioStreamResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse"; }

protected:
explicit PortfolioStreamResponse(::google::protobuf::Arena* arena);
PortfolioStreamResponse(::google::protobuf::Arena* arena, const PortfolioStreamResponse& from);
PortfolioStreamResponse(::google::protobuf::Arena* arena, PortfolioStreamResponse&& from) noexcept
: PortfolioStreamResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kSubscriptionsFieldNumber = 1,
kPortfolioFieldNumber = 2,
kPingFieldNumber = 3,
};
// .tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult subscriptions = 1;
bool has_subscriptions() const;
private:
bool _internal_has_subscriptions() const;

public:
void clear_subscriptions() ;
const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& subscriptions() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* release_subscriptions();
::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* mutable_subscriptions();
void set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* value);
void unsafe_arena_set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* value);
::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* unsafe_arena_release_subscriptions();

private:
const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& _internal_subscriptions() const;
::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* _internal_mutable_subscriptions();

public:
// .tinkoff.public.invest.api.contract.v1.PortfolioResponse portfolio = 2;
bool has_portfolio() const;
private:
bool _internal_has_portfolio() const;

public:
void clear_portfolio() ;
const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& portfolio() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* release_portfolio();
::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* mutable_portfolio();
void set_allocated_portfolio(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* value);
void unsafe_arena_set_allocated_portfolio(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* value);
::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* unsafe_arena_release_portfolio();

private:
const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& _internal_portfolio() const;
::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* _internal_mutable_portfolio();

public:
// .tinkoff.public.invest.api.contract.v1.Ping ping = 3;
bool has_ping() const;
private:
bool _internal_has_ping() const;

public:
void clear_ping() ;
const ::tinkoff::public_::invest::api::contract::v1::Ping& ping() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Ping* release_ping();
::tinkoff::public_::invest::api::contract::v1::Ping* mutable_ping();
void set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value);
void unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value);
::tinkoff::public_::invest::api::contract::v1::Ping* unsafe_arena_release_ping();

private:
const ::tinkoff::public_::invest::api::contract::v1::Ping& _internal_ping() const;
::tinkoff::public_::invest::api::contract::v1::Ping* _internal_mutable_ping();

public:
void clear_payload();
PayloadCase payload_case() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse)
private:
class _Internal;
void set_has_subscriptions();
void set_has_portfolio();
void set_has_ping();
inline bool has_payload() const;
inline void clear_has_payload();
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 3, 3,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
union PayloadUnion {
constexpr PayloadUnion() : _constinit_{} {}
::google::protobuf::internal::ConstantInitialized _constinit_;
::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* subscriptions_;
::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* portfolio_;
::tinkoff::public_::invest::api::contract::v1::Ping* ping_;
} payload_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::uint32_t _oneof_case_[1];
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OperationsResponse) */ {
public:
inline OperationsResponse() : OperationsResponse(nullptr) {}
~OperationsResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR OperationsResponse(
::google::protobuf::internal::ConstantInitialized);

inline OperationsResponse(const OperationsResponse& from) : OperationsResponse(nullptr, from) {}
inline OperationsResponse(OperationsResponse&& from) noexcept
: OperationsResponse(nullptr, std::move(from)) {}
inline OperationsResponse& operator=(const OperationsResponse& from) {
CopyFrom(from);
return *this;
}
inline OperationsResponse& operator=(OperationsResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const OperationsResponse& default_instance() {
return *internal_default_instance();
}
static inline const OperationsResponse* internal_default_instance() {
return reinterpret_cast<const OperationsResponse*>(
&_OperationsResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 1;
friend void swap(OperationsResponse& a, OperationsResponse& b) { a.Swap(&b); }
inline void Swap(OperationsResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(OperationsResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

OperationsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<OperationsResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const OperationsResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const OperationsResponse& from) { OperationsResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(OperationsResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OperationsResponse"; }

protected:
explicit OperationsResponse(::google::protobuf::Arena* arena);
OperationsResponse(::google::protobuf::Arena* arena, const OperationsResponse& from);
OperationsResponse(::google::protobuf::Arena* arena, OperationsResponse&& from) noexcept
: OperationsResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kOperationsFieldNumber = 1,
};
// repeated .tinkoff.public.invest.api.contract.v1.Operation operations = 1;
int operations_size() const;
private:
int _internal_operations_size() const;

public:
void clear_operations() ;
::tinkoff::public_::invest::api::contract::v1::Operation* mutable_operations(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>* mutable_operations();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>& _internal_operations() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>* _internal_mutable_operations();
public:
const ::tinkoff::public_::invest::api::contract::v1::Operation& operations(int index) const;
::tinkoff::public_::invest::api::contract::v1::Operation* add_operations();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>& operations() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OperationsResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 1, 1,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Operation > operations_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.OperationItem) */ {
public:
inline OperationItem() : OperationItem(nullptr) {}
~OperationItem() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR OperationItem(
::google::protobuf::internal::ConstantInitialized);

inline OperationItem(const OperationItem& from) : OperationItem(nullptr, from) {}
inline OperationItem(OperationItem&& from) noexcept
: OperationItem(nullptr, std::move(from)) {}
inline OperationItem& operator=(const OperationItem& from) {
CopyFrom(from);
return *this;
}
inline OperationItem& operator=(OperationItem&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const OperationItem& default_instance() {
return *internal_default_instance();
}
static inline const OperationItem* internal_default_instance() {
return reinterpret_cast<const OperationItem*>(
&_OperationItem_default_instance_);
}
static constexpr int kIndexInFileMessages = 35;
friend void swap(OperationItem& a, OperationItem& b) { a.Swap(&b); }
inline void Swap(OperationItem* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(OperationItem* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

OperationItem* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<OperationItem>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const OperationItem& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const OperationItem& from) { OperationItem::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(OperationItem* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.OperationItem"; }

protected:
explicit OperationItem(::google::protobuf::Arena* arena);
OperationItem(::google::protobuf::Arena* arena, const OperationItem& from);
OperationItem(::google::protobuf::Arena* arena, OperationItem&& from) noexcept
: OperationItem(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kCursorFieldNumber = 1,
kBrokerAccountIdFieldNumber = 6,
kIdFieldNumber = 16,
kParentOperationIdFieldNumber = 17,
kNameFieldNumber = 18,
kDescriptionFieldNumber = 23,
kInstrumentUidFieldNumber = 31,
kFigiFieldNumber = 32,
kInstrumentTypeFieldNumber = 33,
kPositionUidFieldNumber = 35,
kCancelReasonFieldNumber = 57,
kAssetUidFieldNumber = 64,
kDateFieldNumber = 21,
kPaymentFieldNumber = 41,
kPriceFieldNumber = 42,
kCommissionFieldNumber = 43,
kYieldFieldNumber = 44,
kYieldRelativeFieldNumber = 45,
kAccruedIntFieldNumber = 46,
kCancelDateTimeFieldNumber = 56,
kTradesInfoFieldNumber = 61,
kTypeFieldNumber = 22,
kStateFieldNumber = 24,
kQuantityFieldNumber = 51,
kQuantityRestFieldNumber = 52,
kQuantityDoneFieldNumber = 53,
kInstrumentKindFieldNumber = 34,
};
// string cursor = 1;
void clear_cursor() ;
const std::string& cursor() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_cursor(Arg_&& arg, Args_... args);
std::string* mutable_cursor();
PROTOBUF_NODISCARD std::string* release_cursor();
void set_allocated_cursor(std::string* value);

private:
const std::string& _internal_cursor() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(
const std::string& value);
std::string* _internal_mutable_cursor();

public:
// string broker_account_id = 6;
void clear_broker_account_id() ;
const std::string& broker_account_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_broker_account_id(Arg_&& arg, Args_... args);
std::string* mutable_broker_account_id();
PROTOBUF_NODISCARD std::string* release_broker_account_id();
void set_allocated_broker_account_id(std::string* value);

private:
const std::string& _internal_broker_account_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_account_id(
const std::string& value);
std::string* _internal_mutable_broker_account_id();

public:
// string id = 16;
void clear_id() ;
const std::string& id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_id(Arg_&& arg, Args_... args);
std::string* mutable_id();
PROTOBUF_NODISCARD std::string* release_id();
void set_allocated_id(std::string* value);

private:
const std::string& _internal_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
const std::string& value);
std::string* _internal_mutable_id();

public:
// string parent_operation_id = 17;
void clear_parent_operation_id() ;
const std::string& parent_operation_id() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_parent_operation_id(Arg_&& arg, Args_... args);
std::string* mutable_parent_operation_id();
PROTOBUF_NODISCARD std::string* release_parent_operation_id();
void set_allocated_parent_operation_id(std::string* value);

private:
const std::string& _internal_parent_operation_id() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_operation_id(
const std::string& value);
std::string* _internal_mutable_parent_operation_id();

public:
// string name = 18;
void clear_name() ;
const std::string& name() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_name(Arg_&& arg, Args_... args);
std::string* mutable_name();
PROTOBUF_NODISCARD std::string* release_name();
void set_allocated_name(std::string* value);

private:
const std::string& _internal_name() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
const std::string& value);
std::string* _internal_mutable_name();

public:
// string description = 23;
void clear_description() ;
const std::string& description() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_description(Arg_&& arg, Args_... args);
std::string* mutable_description();
PROTOBUF_NODISCARD std::string* release_description();
void set_allocated_description(std::string* value);

private:
const std::string& _internal_description() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
const std::string& value);
std::string* _internal_mutable_description();

public:
// string instrument_uid = 31;
void clear_instrument_uid() ;
const std::string& instrument_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_uid(Arg_&& arg, Args_... args);
std::string* mutable_instrument_uid();
PROTOBUF_NODISCARD std::string* release_instrument_uid();
void set_allocated_instrument_uid(std::string* value);

private:
const std::string& _internal_instrument_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
const std::string& value);
std::string* _internal_mutable_instrument_uid();

public:
// string figi = 32;
void clear_figi() ;
const std::string& figi() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_figi(Arg_&& arg, Args_... args);
std::string* mutable_figi();
PROTOBUF_NODISCARD std::string* release_figi();
void set_allocated_figi(std::string* value);

private:
const std::string& _internal_figi() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
const std::string& value);
std::string* _internal_mutable_figi();

public:
// string instrument_type = 33;
void clear_instrument_type() ;
const std::string& instrument_type() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_instrument_type(Arg_&& arg, Args_... args);
std::string* mutable_instrument_type();
PROTOBUF_NODISCARD std::string* release_instrument_type();
void set_allocated_instrument_type(std::string* value);

private:
const std::string& _internal_instrument_type() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
const std::string& value);
std::string* _internal_mutable_instrument_type();

public:
// string position_uid = 35;
void clear_position_uid() ;
const std::string& position_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_position_uid(Arg_&& arg, Args_... args);
std::string* mutable_position_uid();
PROTOBUF_NODISCARD std::string* release_position_uid();
void set_allocated_position_uid(std::string* value);

private:
const std::string& _internal_position_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
const std::string& value);
std::string* _internal_mutable_position_uid();

public:
// string cancel_reason = 57;
void clear_cancel_reason() ;
const std::string& cancel_reason() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_cancel_reason(Arg_&& arg, Args_... args);
std::string* mutable_cancel_reason();
PROTOBUF_NODISCARD std::string* release_cancel_reason();
void set_allocated_cancel_reason(std::string* value);

private:
const std::string& _internal_cancel_reason() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_reason(
const std::string& value);
std::string* _internal_mutable_cancel_reason();

public:
// string asset_uid = 64;
void clear_asset_uid() ;
const std::string& asset_uid() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_asset_uid(Arg_&& arg, Args_... args);
std::string* mutable_asset_uid();
PROTOBUF_NODISCARD std::string* release_asset_uid();
void set_allocated_asset_uid(std::string* value);

private:
const std::string& _internal_asset_uid() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
const std::string& value);
std::string* _internal_mutable_asset_uid();

public:
// .google.protobuf.Timestamp date = 21;
bool has_date() const;
void clear_date() ;
const ::google::protobuf::Timestamp& date() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date();
::google::protobuf::Timestamp* mutable_date();
void set_allocated_date(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_date();

private:
const ::google::protobuf::Timestamp& _internal_date() const;
::google::protobuf::Timestamp* _internal_mutable_date();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue payment = 41;
bool has_payment() const;
void clear_payment() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& payment() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_payment();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_payment();
void set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_payment();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_payment() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_payment();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 42;
bool has_price() const;
void clear_price() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& price() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_price();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_price();
void set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_price();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_price() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_price();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue commission = 43;
bool has_commission() const;
void clear_commission() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& commission() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_commission();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_commission();
void set_allocated_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_commission();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_commission() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_commission();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue yield = 44;
bool has_yield() const;
void clear_yield() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& yield() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_yield();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_yield();
void set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_yield();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_yield() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_yield();

public:
// .tinkoff.public.invest.api.contract.v1.Quotation yield_relative = 45;
bool has_yield_relative() const;
void clear_yield_relative() ;
const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_relative() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_yield_relative();
::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_yield_relative();
void set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
void unsafe_arena_set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_yield_relative();

private:
const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_yield_relative() const;
::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_yield_relative();

public:
// .tinkoff.public.invest.api.contract.v1.MoneyValue accrued_int = 46;
bool has_accrued_int() const;
void clear_accrued_int() ;
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& accrued_int() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_accrued_int();
::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_accrued_int();
void set_allocated_accrued_int(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
void unsafe_arena_set_allocated_accrued_int(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_accrued_int();

private:
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_accrued_int() const;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_accrued_int();

public:
// .google.protobuf.Timestamp cancel_date_time = 56;
bool has_cancel_date_time() const;
void clear_cancel_date_time() ;
const ::google::protobuf::Timestamp& cancel_date_time() const;
PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_cancel_date_time();
::google::protobuf::Timestamp* mutable_cancel_date_time();
void set_allocated_cancel_date_time(::google::protobuf::Timestamp* value);
void unsafe_arena_set_allocated_cancel_date_time(::google::protobuf::Timestamp* value);
::google::protobuf::Timestamp* unsafe_arena_release_cancel_date_time();

private:
const ::google::protobuf::Timestamp& _internal_cancel_date_time() const;
::google::protobuf::Timestamp* _internal_mutable_cancel_date_time();

public:
// .tinkoff.public.invest.api.contract.v1.OperationItemTrades trades_info = 61;
bool has_trades_info() const;
void clear_trades_info() ;
const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& trades_info() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* release_trades_info();
::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* mutable_trades_info();
void set_allocated_trades_info(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* value);
void unsafe_arena_set_allocated_trades_info(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* value);
::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* unsafe_arena_release_trades_info();

private:
const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& _internal_trades_info() const;
::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* _internal_mutable_trades_info();

public:
// .tinkoff.public.invest.api.contract.v1.OperationType type = 22;
void clear_type() ;
::tinkoff::public_::invest::api::contract::v1::OperationType type() const;
void set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);

private:
::tinkoff::public_::invest::api::contract::v1::OperationType _internal_type() const;
void _internal_set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value);

public:
// .tinkoff.public.invest.api.contract.v1.OperationState state = 24;
void clear_state() ;
::tinkoff::public_::invest::api::contract::v1::OperationState state() const;
void set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

private:
::tinkoff::public_::invest::api::contract::v1::OperationState _internal_state() const;
void _internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value);

public:
// int64 quantity = 51;
void clear_quantity() ;
::int64_t quantity() const;
void set_quantity(::int64_t value);

private:
::int64_t _internal_quantity() const;
void _internal_set_quantity(::int64_t value);

public:
// int64 quantity_rest = 52;
void clear_quantity_rest() ;
::int64_t quantity_rest() const;
void set_quantity_rest(::int64_t value);

private:
::int64_t _internal_quantity_rest() const;
void _internal_set_quantity_rest(::int64_t value);

public:
// int64 quantity_done = 53;
void clear_quantity_done() ;
::int64_t quantity_done() const;
void set_quantity_done(::int64_t value);

private:
::int64_t _internal_quantity_done() const;
void _internal_set_quantity_done(::int64_t value);

public:
// .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 34;
void clear_instrument_kind() ;
::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

private:
::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.OperationItem)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
5, 27, 9,
210, 9>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr cursor_;
::google::protobuf::internal::ArenaStringPtr broker_account_id_;
::google::protobuf::internal::ArenaStringPtr id_;
::google::protobuf::internal::ArenaStringPtr parent_operation_id_;
::google::protobuf::internal::ArenaStringPtr name_;
::google::protobuf::internal::ArenaStringPtr description_;
::google::protobuf::internal::ArenaStringPtr instrument_uid_;
::google::protobuf::internal::ArenaStringPtr figi_;
::google::protobuf::internal::ArenaStringPtr instrument_type_;
::google::protobuf::internal::ArenaStringPtr position_uid_;
::google::protobuf::internal::ArenaStringPtr cancel_reason_;
::google::protobuf::internal::ArenaStringPtr asset_uid_;
::google::protobuf::Timestamp* date_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* payment_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* price_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* commission_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* yield_;
::tinkoff::public_::invest::api::contract::v1::Quotation* yield_relative_;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* accrued_int_;
::google::protobuf::Timestamp* cancel_date_time_;
::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* trades_info_;
int type_;
int state_;
::int64_t quantity_;
::int64_t quantity_rest_;
::int64_t quantity_done_;
int instrument_kind_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetDividendsForeignIssuerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse) */ {
public:
inline GetDividendsForeignIssuerResponse() : GetDividendsForeignIssuerResponse(nullptr) {}
~GetDividendsForeignIssuerResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetDividendsForeignIssuerResponse(
::google::protobuf::internal::ConstantInitialized);

inline GetDividendsForeignIssuerResponse(const GetDividendsForeignIssuerResponse& from) : GetDividendsForeignIssuerResponse(nullptr, from) {}
inline GetDividendsForeignIssuerResponse(GetDividendsForeignIssuerResponse&& from) noexcept
: GetDividendsForeignIssuerResponse(nullptr, std::move(from)) {}
inline GetDividendsForeignIssuerResponse& operator=(const GetDividendsForeignIssuerResponse& from) {
CopyFrom(from);
return *this;
}
inline GetDividendsForeignIssuerResponse& operator=(GetDividendsForeignIssuerResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetDividendsForeignIssuerResponse& default_instance() {
return *internal_default_instance();
}
enum PayloadCase {
kGenerateDivForeignIssuerReportResponse = 1,
kDivForeignIssuerReport = 2,
PAYLOAD_NOT_SET = 0,
};
static inline const GetDividendsForeignIssuerResponse* internal_default_instance() {
return reinterpret_cast<const GetDividendsForeignIssuerResponse*>(
&_GetDividendsForeignIssuerResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 23;
friend void swap(GetDividendsForeignIssuerResponse& a, GetDividendsForeignIssuerResponse& b) { a.Swap(&b); }
inline void Swap(GetDividendsForeignIssuerResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetDividendsForeignIssuerResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetDividendsForeignIssuerResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetDividendsForeignIssuerResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetDividendsForeignIssuerResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetDividendsForeignIssuerResponse& from) { GetDividendsForeignIssuerResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetDividendsForeignIssuerResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse"; }

protected:
explicit GetDividendsForeignIssuerResponse(::google::protobuf::Arena* arena);
GetDividendsForeignIssuerResponse(::google::protobuf::Arena* arena, const GetDividendsForeignIssuerResponse& from);
GetDividendsForeignIssuerResponse(::google::protobuf::Arena* arena, GetDividendsForeignIssuerResponse&& from) noexcept
: GetDividendsForeignIssuerResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kGenerateDivForeignIssuerReportResponseFieldNumber = 1,
kDivForeignIssuerReportFieldNumber = 2,
};
// .tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse generate_div_foreign_issuer_report_response = 1;
bool has_generate_div_foreign_issuer_report_response() const;
private:
bool _internal_has_generate_div_foreign_issuer_report_response() const;

public:
void clear_generate_div_foreign_issuer_report_response() ;
const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& generate_div_foreign_issuer_report_response() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* release_generate_div_foreign_issuer_report_response();
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* mutable_generate_div_foreign_issuer_report_response();
void set_allocated_generate_div_foreign_issuer_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* value);
void unsafe_arena_set_allocated_generate_div_foreign_issuer_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* value);
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* unsafe_arena_release_generate_div_foreign_issuer_report_response();

private:
const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& _internal_generate_div_foreign_issuer_report_response() const;
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* _internal_mutable_generate_div_foreign_issuer_report_response();

public:
// .tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse div_foreign_issuer_report = 2;
bool has_div_foreign_issuer_report() const;
private:
bool _internal_has_div_foreign_issuer_report() const;

public:
void clear_div_foreign_issuer_report() ;
const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& div_foreign_issuer_report() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* release_div_foreign_issuer_report();
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* mutable_div_foreign_issuer_report();
void set_allocated_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* value);
void unsafe_arena_set_allocated_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* value);
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* unsafe_arena_release_div_foreign_issuer_report();

private:
const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& _internal_div_foreign_issuer_report() const;
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* _internal_mutable_div_foreign_issuer_report();

public:
void clear_payload();
PayloadCase payload_case() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse)
private:
class _Internal;
void set_has_generate_div_foreign_issuer_report_response();
void set_has_div_foreign_issuer_report();
inline bool has_payload() const;
inline void clear_has_payload();
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 2, 2,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
union PayloadUnion {
constexpr PayloadUnion() : _constinit_{} {}
::google::protobuf::internal::ConstantInitialized _constinit_;
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* generate_div_foreign_issuer_report_response_;
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* div_foreign_issuer_report_;
} payload_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::uint32_t _oneof_case_[1];
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class BrokerReportResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.BrokerReportResponse) */ {
public:
inline BrokerReportResponse() : BrokerReportResponse(nullptr) {}
~BrokerReportResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR BrokerReportResponse(
::google::protobuf::internal::ConstantInitialized);

inline BrokerReportResponse(const BrokerReportResponse& from) : BrokerReportResponse(nullptr, from) {}
inline BrokerReportResponse(BrokerReportResponse&& from) noexcept
: BrokerReportResponse(nullptr, std::move(from)) {}
inline BrokerReportResponse& operator=(const BrokerReportResponse& from) {
CopyFrom(from);
return *this;
}
inline BrokerReportResponse& operator=(BrokerReportResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const BrokerReportResponse& default_instance() {
return *internal_default_instance();
}
enum PayloadCase {
kGenerateBrokerReportResponse = 1,
kGetBrokerReportResponse = 2,
PAYLOAD_NOT_SET = 0,
};
static inline const BrokerReportResponse* internal_default_instance() {
return reinterpret_cast<const BrokerReportResponse*>(
&_BrokerReportResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 16;
friend void swap(BrokerReportResponse& a, BrokerReportResponse& b) { a.Swap(&b); }
inline void Swap(BrokerReportResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(BrokerReportResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

BrokerReportResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<BrokerReportResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const BrokerReportResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const BrokerReportResponse& from) { BrokerReportResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(BrokerReportResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.BrokerReportResponse"; }

protected:
explicit BrokerReportResponse(::google::protobuf::Arena* arena);
BrokerReportResponse(::google::protobuf::Arena* arena, const BrokerReportResponse& from);
BrokerReportResponse(::google::protobuf::Arena* arena, BrokerReportResponse&& from) noexcept
: BrokerReportResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kGenerateBrokerReportResponseFieldNumber = 1,
kGetBrokerReportResponseFieldNumber = 2,
};
// .tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse generate_broker_report_response = 1;
bool has_generate_broker_report_response() const;
private:
bool _internal_has_generate_broker_report_response() const;

public:
void clear_generate_broker_report_response() ;
const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& generate_broker_report_response() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* release_generate_broker_report_response();
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* mutable_generate_broker_report_response();
void set_allocated_generate_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* value);
void unsafe_arena_set_allocated_generate_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* value);
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* unsafe_arena_release_generate_broker_report_response();

private:
const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& _internal_generate_broker_report_response() const;
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* _internal_mutable_generate_broker_report_response();

public:
// .tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse get_broker_report_response = 2;
bool has_get_broker_report_response() const;
private:
bool _internal_has_get_broker_report_response() const;

public:
void clear_get_broker_report_response() ;
const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& get_broker_report_response() const;
PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* release_get_broker_report_response();
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* mutable_get_broker_report_response();
void set_allocated_get_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* value);
void unsafe_arena_set_allocated_get_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* value);
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* unsafe_arena_release_get_broker_report_response();

private:
const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& _internal_get_broker_report_response() const;
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* _internal_mutable_get_broker_report_response();

public:
void clear_payload();
PayloadCase payload_case() const;
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.BrokerReportResponse)
private:
class _Internal;
void set_has_generate_broker_report_response();
void set_has_get_broker_report_response();
inline bool has_payload() const;
inline void clear_has_payload();
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
0, 2, 2,
0, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
union PayloadUnion {
constexpr PayloadUnion() : _constinit_{} {}
::google::protobuf::internal::ConstantInitialized _constinit_;
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* generate_broker_report_response_;
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* get_broker_report_response_;
} payload_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::uint32_t _oneof_case_[1];
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsByCursorResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse) */ {
public:
inline GetOperationsByCursorResponse() : GetOperationsByCursorResponse(nullptr) {}
~GetOperationsByCursorResponse() override;
template <typename = void>
explicit PROTOBUF_CONSTEXPR GetOperationsByCursorResponse(
::google::protobuf::internal::ConstantInitialized);

inline GetOperationsByCursorResponse(const GetOperationsByCursorResponse& from) : GetOperationsByCursorResponse(nullptr, from) {}
inline GetOperationsByCursorResponse(GetOperationsByCursorResponse&& from) noexcept
: GetOperationsByCursorResponse(nullptr, std::move(from)) {}
inline GetOperationsByCursorResponse& operator=(const GetOperationsByCursorResponse& from) {
CopyFrom(from);
return *this;
}
inline GetOperationsByCursorResponse& operator=(GetOperationsByCursorResponse&& from) noexcept {
if (this == &from) return *this;
if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
}
inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
}

static const ::google::protobuf::Descriptor* descriptor() {
return GetDescriptor();
}
static const ::google::protobuf::Descriptor* GetDescriptor() {
return default_instance().GetMetadata().descriptor;
}
static const ::google::protobuf::Reflection* GetReflection() {
return default_instance().GetMetadata().reflection;
}
static const GetOperationsByCursorResponse& default_instance() {
return *internal_default_instance();
}
static inline const GetOperationsByCursorResponse* internal_default_instance() {
return reinterpret_cast<const GetOperationsByCursorResponse*>(
&_GetOperationsByCursorResponse_default_instance_);
}
static constexpr int kIndexInFileMessages = 34;
friend void swap(GetOperationsByCursorResponse& a, GetOperationsByCursorResponse& b) { a.Swap(&b); }
inline void Swap(GetOperationsByCursorResponse* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::google::protobuf::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(GetOperationsByCursorResponse* other) {
if (other == this) return;
ABSL_DCHECK(GetArena() == other->GetArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

GetOperationsByCursorResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
return ::google::protobuf::Message::DefaultConstruct<GetOperationsByCursorResponse>(arena);
}
using ::google::protobuf::Message::CopyFrom;
void CopyFrom(const GetOperationsByCursorResponse& from);
using ::google::protobuf::Message::MergeFrom;
void MergeFrom(const GetOperationsByCursorResponse& from) { GetOperationsByCursorResponse::MergeImpl(*this, from); }

private:
static void MergeImpl(
::google::protobuf::MessageLite& to_msg,
const ::google::protobuf::MessageLite& from_msg);

public:
ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

::size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
::uint8_t* _InternalSerialize(
::uint8_t* target,
::google::protobuf::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
void SharedCtor(::google::protobuf::Arena* arena);
void SharedDtor();
void InternalSwap(GetOperationsByCursorResponse* other);
private:
friend class ::google::protobuf::internal::AnyMetadata;
static ::absl::string_view FullMessageName() { return "tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse"; }

protected:
explicit GetOperationsByCursorResponse(::google::protobuf::Arena* arena);
GetOperationsByCursorResponse(::google::protobuf::Arena* arena, const GetOperationsByCursorResponse& from);
GetOperationsByCursorResponse(::google::protobuf::Arena* arena, GetOperationsByCursorResponse&& from) noexcept
: GetOperationsByCursorResponse(arena) {
*this = ::std::move(from);
}
const ::google::protobuf::Message::ClassData* GetClassData() const final;

public:
::google::protobuf::Metadata GetMetadata() const;
// nested types ----------------------------------------------------

// accessors -------------------------------------------------------
enum : int {
kItemsFieldNumber = 6,
kNextCursorFieldNumber = 2,
kHasNextFieldNumber = 1,
};
// repeated .tinkoff.public.invest.api.contract.v1.OperationItem items = 6;
int items_size() const;
private:
int _internal_items_size() const;

public:
void clear_items() ;
::tinkoff::public_::invest::api::contract::v1::OperationItem* mutable_items(int index);
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>* mutable_items();

private:
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>& _internal_items() const;
::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>* _internal_mutable_items();
public:
const ::tinkoff::public_::invest::api::contract::v1::OperationItem& items(int index) const;
::tinkoff::public_::invest::api::contract::v1::OperationItem* add_items();
const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>& items() const;
// string next_cursor = 2;
void clear_next_cursor() ;
const std::string& next_cursor() const;
template <typename Arg_ = const std::string&, typename... Args_>
void set_next_cursor(Arg_&& arg, Args_... args);
std::string* mutable_next_cursor();
PROTOBUF_NODISCARD std::string* release_next_cursor();
void set_allocated_next_cursor(std::string* value);

private:
const std::string& _internal_next_cursor() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(
const std::string& value);
std::string* _internal_mutable_next_cursor();

public:
// bool has_next = 1;
void clear_has_next() ;
bool has_next() const;
void set_has_next(bool value);

private:
bool _internal_has_next() const;
void _internal_set_has_next(bool value);

public:
// @@protoc_insertion_point(class_scope:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse)
private:
class _Internal;
friend class ::google::protobuf::internal::TcParser;
static const ::google::protobuf::internal::TcParseTable<
1, 3, 1,
87, 2>
_table_;
friend class ::google::protobuf::MessageLite;
friend class ::google::protobuf::Arena;
template <typename T>
friend class ::google::protobuf::Arena::InternalHelper;
using InternalArenaConstructable_ = void;
using DestructorSkippable_ = void;
struct Impl_ {
inline explicit constexpr Impl_(
::google::protobuf::internal::ConstantInitialized) noexcept;
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena);
inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
::google::protobuf::Arena* arena, const Impl_& from);
::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::OperationItem > items_;
::google::protobuf::internal::ArenaStringPtr next_cursor_;
bool has_next_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
PROTOBUF_TSAN_DECLARE_MEMBER
};
union { Impl_ _impl_; };
friend struct ::TableStruct_operations_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OperationsRequest

// string account_id = 1;
inline void OperationsRequest::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& OperationsRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationsRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationsRequest::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationsRequest.account_id)
}
inline std::string* OperationsRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationsRequest.account_id)
return _s;
}
inline const std::string& OperationsRequest::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void OperationsRequest::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* OperationsRequest::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* OperationsRequest::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationsRequest.account_id)
return _impl_.account_id_.Release();
}
inline void OperationsRequest::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationsRequest.account_id)
}

// .google.protobuf.Timestamp from = 2;
inline bool OperationsRequest::has_from() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& OperationsRequest::_internal_from() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.from_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OperationsRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationsRequest.from)
return _internal_from();
}
inline void OperationsRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationsRequest.from)
}
inline ::google::protobuf::Timestamp* OperationsRequest::release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.from_;
_impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* OperationsRequest::unsafe_arena_release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationsRequest.from)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.from_;
_impl_.from_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* OperationsRequest::_internal_mutable_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.from_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.from_;
}
inline ::google::protobuf::Timestamp* OperationsRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_from();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationsRequest.from)
return _msg;
}
inline void OperationsRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationsRequest.from)
}

// .google.protobuf.Timestamp to = 3;
inline bool OperationsRequest::has_to() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& OperationsRequest::_internal_to() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.to_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OperationsRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationsRequest.to)
return _internal_to();
}
inline void OperationsRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationsRequest.to)
}
inline ::google::protobuf::Timestamp* OperationsRequest::release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* released = _impl_.to_;
_impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* OperationsRequest::unsafe_arena_release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationsRequest.to)

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* temp = _impl_.to_;
_impl_.to_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* OperationsRequest::_internal_mutable_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.to_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.to_;
}
inline ::google::protobuf::Timestamp* OperationsRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::google::protobuf::Timestamp* _msg = _internal_mutable_to();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationsRequest.to)
return _msg;
}
inline void OperationsRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationsRequest.to)
}

// .tinkoff.public.invest.api.contract.v1.OperationState state = 4;
inline void OperationsRequest::clear_state() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationsRequest::state() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationsRequest.state)
return _internal_state();
}
inline void OperationsRequest::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
_internal_set_state(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationsRequest.state)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationsRequest::_internal_state() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(_impl_.state_);
}
inline void OperationsRequest::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = value;
}

// string figi = 5;
inline void OperationsRequest::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& OperationsRequest::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationsRequest.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationsRequest::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationsRequest.figi)
}
inline std::string* OperationsRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationsRequest.figi)
return _s;
}
inline const std::string& OperationsRequest::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void OperationsRequest::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* OperationsRequest::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* OperationsRequest::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationsRequest.figi)
return _impl_.figi_.Release();
}
inline void OperationsRequest::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationsRequest.figi)
}

// -------------------------------------------------------------------

// OperationsResponse

// repeated .tinkoff.public.invest.api.contract.v1.Operation operations = 1;
inline int OperationsResponse::_internal_operations_size() const {
return _internal_operations().size();
}
inline int OperationsResponse::operations_size() const {
return _internal_operations_size();
}
inline void OperationsResponse::clear_operations() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.operations_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Operation* OperationsResponse::mutable_operations(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationsResponse.operations)
return _internal_mutable_operations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>* OperationsResponse::mutable_operations()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.OperationsResponse.operations)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_operations();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Operation& OperationsResponse::operations(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationsResponse.operations)
return _internal_operations().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Operation* OperationsResponse::add_operations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::Operation* _add = _internal_mutable_operations()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.OperationsResponse.operations)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>& OperationsResponse::operations() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.OperationsResponse.operations)
return _internal_operations();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>&
OperationsResponse::_internal_operations() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.operations_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Operation>*
OperationsResponse::_internal_mutable_operations() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.operations_;
}

// -------------------------------------------------------------------

// Operation

// string id = 1;
inline void Operation::clear_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.ClearToEmpty();
}
inline const std::string& Operation::id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.id)
return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.id)
}
inline std::string* Operation::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.id)
return _s;
}
inline const std::string& Operation::_internal_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.id_.Get();
}
inline void Operation::_internal_set_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.id_.Mutable( GetArena());
}
inline std::string* Operation::release_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.id)
return _impl_.id_.Release();
}
inline void Operation::set_allocated_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.id_.IsDefault()) {
_impl_.id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.id)
}

// string parent_operation_id = 2;
inline void Operation::clear_parent_operation_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.ClearToEmpty();
}
inline const std::string& Operation::parent_operation_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.parent_operation_id)
return _internal_parent_operation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_parent_operation_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.parent_operation_id)
}
inline std::string* Operation::mutable_parent_operation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_parent_operation_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.parent_operation_id)
return _s;
}
inline const std::string& Operation::_internal_parent_operation_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.parent_operation_id_.Get();
}
inline void Operation::_internal_set_parent_operation_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_parent_operation_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.parent_operation_id_.Mutable( GetArena());
}
inline std::string* Operation::release_parent_operation_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.parent_operation_id)
return _impl_.parent_operation_id_.Release();
}
inline void Operation::set_allocated_parent_operation_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.parent_operation_id_.IsDefault()) {
_impl_.parent_operation_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.parent_operation_id)
}

// string currency = 3;
inline void Operation::clear_currency() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.ClearToEmpty();
}
inline const std::string& Operation::currency() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.currency)
return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_currency(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.currency)
}
inline std::string* Operation::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_currency();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.currency)
return _s;
}
inline const std::string& Operation::_internal_currency() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.currency_.Get();
}
inline void Operation::_internal_set_currency(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_currency() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Operation::release_currency() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.currency)
return _impl_.currency_.Release();
}
inline void Operation::set_allocated_currency(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.currency_.IsDefault()) {
_impl_.currency_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.currency)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue payment = 4;
inline bool Operation::has_payment() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.payment_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::_internal_payment() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.payment_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::payment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.payment)
return _internal_payment();
}
inline void Operation::unsafe_arena_set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_);
}
_impl_.payment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.payment)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::release_payment() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.payment_;
_impl_.payment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::unsafe_arena_release_payment() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.payment)

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.payment_;
_impl_.payment_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::_internal_mutable_payment() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.payment_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.payment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.payment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::mutable_payment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_payment();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.payment)
return _msg;
}
inline void Operation::set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.payment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.payment)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 5;
inline bool Operation::has_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::_internal_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Operation::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.price)
return _internal_price();
}
inline void Operation::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.price_;
_impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::unsafe_arena_release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.price)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
_impl_.price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::_internal_mutable_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Operation::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.price)
return _msg;
}
inline void Operation::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.price)
}

// .tinkoff.public.invest.api.contract.v1.OperationState state = 6;
inline void Operation::clear_state() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState Operation::state() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.state)
return _internal_state();
}
inline void Operation::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
_internal_set_state(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.state)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState Operation::_internal_state() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(_impl_.state_);
}
inline void Operation::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = value;
}

// int64 quantity = 7;
inline void Operation::clear_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t Operation::quantity() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.quantity)
return _internal_quantity();
}
inline void Operation::set_quantity(::int64_t value) {
_internal_set_quantity(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.quantity)
}
inline ::int64_t Operation::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_;
}
inline void Operation::_internal_set_quantity(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = value;
}

// int64 quantity_rest = 8;
inline void Operation::clear_quantity_rest() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_rest_ = ::int64_t{0};
}
inline ::int64_t Operation::quantity_rest() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.quantity_rest)
return _internal_quantity_rest();
}
inline void Operation::set_quantity_rest(::int64_t value) {
_internal_set_quantity_rest(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.quantity_rest)
}
inline ::int64_t Operation::_internal_quantity_rest() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_rest_;
}
inline void Operation::_internal_set_quantity_rest(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_rest_ = value;
}

// string figi = 9;
inline void Operation::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& Operation::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.figi)
}
inline std::string* Operation::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.figi)
return _s;
}
inline const std::string& Operation::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void Operation::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Operation::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.figi)
return _impl_.figi_.Release();
}
inline void Operation::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.figi)
}

// string instrument_type = 10;
inline void Operation::clear_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& Operation::instrument_type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.instrument_type)
return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_instrument_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.instrument_type)
}
inline std::string* Operation::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.instrument_type)
return _s;
}
inline const std::string& Operation::_internal_instrument_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Get();
}
inline void Operation::_internal_set_instrument_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* Operation::release_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.instrument_type)
return _impl_.instrument_type_.Release();
}
inline void Operation::set_allocated_instrument_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_type_.IsDefault()) {
_impl_.instrument_type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.instrument_type)
}

// .google.protobuf.Timestamp date = 11;
inline bool Operation::has_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& Operation::_internal_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Operation::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.date)
return _internal_date();
}
inline void Operation::unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.date)
}
inline ::google::protobuf::Timestamp* Operation::release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::google::protobuf::Timestamp* released = _impl_.date_;
_impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* Operation::unsafe_arena_release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.date)

_impl_._has_bits_[0] &= ~0x00000004u;
::google::protobuf::Timestamp* temp = _impl_.date_;
_impl_.date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* Operation::_internal_mutable_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.date_;
}
inline ::google::protobuf::Timestamp* Operation::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::google::protobuf::Timestamp* _msg = _internal_mutable_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.date)
return _msg;
}
inline void Operation::set_allocated_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.date)
}

// string type = 12;
inline void Operation::clear_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.type_.ClearToEmpty();
}
inline const std::string& Operation::type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.type)
return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.type)
}
inline std::string* Operation::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.type)
return _s;
}
inline const std::string& Operation::_internal_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.type_.Get();
}
inline void Operation::_internal_set_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.type_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.type_.Mutable( GetArena());
}
inline std::string* Operation::release_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.type)
return _impl_.type_.Release();
}
inline void Operation::set_allocated_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.type_.IsDefault()) {
_impl_.type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.type)
}

// .tinkoff.public.invest.api.contract.v1.OperationType operation_type = 13;
inline void Operation::clear_operation_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.operation_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType Operation::operation_type() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.operation_type)
return _internal_operation_type();
}
inline void Operation::set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
_internal_set_operation_type(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.operation_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType Operation::_internal_operation_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::OperationType>(_impl_.operation_type_);
}
inline void Operation::_internal_set_operation_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.operation_type_ = value;
}

// repeated .tinkoff.public.invest.api.contract.v1.OperationTrade trades = 14;
inline int Operation::_internal_trades_size() const {
return _internal_trades().size();
}
inline int Operation::trades_size() const {
return _internal_trades_size();
}
inline void Operation::clear_trades() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trades_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationTrade* Operation::mutable_trades(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.trades)
return _internal_mutable_trades()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>* Operation::mutable_trades()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.Operation.trades)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_trades();
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationTrade& Operation::trades(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.trades)
return _internal_trades().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationTrade* Operation::add_trades() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::OperationTrade* _add = _internal_mutable_trades()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.Operation.trades)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>& Operation::trades() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.Operation.trades)
return _internal_trades();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>&
Operation::_internal_trades() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.trades_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationTrade>*
Operation::_internal_mutable_trades() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.trades_;
}

// string asset_uid = 16;
inline void Operation::clear_asset_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& Operation::asset_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.asset_uid)
return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_asset_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.asset_uid)
}
inline std::string* Operation::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_asset_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.asset_uid)
return _s;
}
inline const std::string& Operation::_internal_asset_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.asset_uid_.Get();
}
inline void Operation::_internal_set_asset_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_asset_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* Operation::release_asset_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.asset_uid)
return _impl_.asset_uid_.Release();
}
inline void Operation::set_allocated_asset_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.asset_uid_.IsDefault()) {
_impl_.asset_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.asset_uid)
}

// string position_uid = 17;
inline void Operation::clear_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Operation::position_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.position_uid)
return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_position_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.position_uid)
}
inline std::string* Operation::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_position_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.position_uid)
return _s;
}
inline const std::string& Operation::_internal_position_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Get();
}
inline void Operation::_internal_set_position_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Operation::release_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.position_uid)
return _impl_.position_uid_.Release();
}
inline void Operation::set_allocated_position_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.position_uid_.IsDefault()) {
_impl_.position_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.position_uid)
}

// string instrument_uid = 18;
inline void Operation::clear_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& Operation::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.Operation.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_instrument_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.Operation.instrument_uid)
}
inline std::string* Operation::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.Operation.instrument_uid)
return _s;
}
inline const std::string& Operation::_internal_instrument_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Get();
}
inline void Operation::_internal_set_instrument_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* Operation::release_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.Operation.instrument_uid)
return _impl_.instrument_uid_.Release();
}
inline void Operation::set_allocated_instrument_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_uid_.IsDefault()) {
_impl_.instrument_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.Operation.instrument_uid)
}

// -------------------------------------------------------------------

// OperationTrade

// string trade_id = 1;
inline void OperationTrade::clear_trade_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.ClearToEmpty();
}
inline const std::string& OperationTrade::trade_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationTrade.trade_id)
return _internal_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationTrade::set_trade_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationTrade.trade_id)
}
inline std::string* OperationTrade::mutable_trade_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_trade_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationTrade.trade_id)
return _s;
}
inline const std::string& OperationTrade::_internal_trade_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.trade_id_.Get();
}
inline void OperationTrade::_internal_set_trade_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.Set(value, GetArena());
}
inline std::string* OperationTrade::_internal_mutable_trade_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.trade_id_.Mutable( GetArena());
}
inline std::string* OperationTrade::release_trade_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationTrade.trade_id)
return _impl_.trade_id_.Release();
}
inline void OperationTrade::set_allocated_trade_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.trade_id_.IsDefault()) {
_impl_.trade_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationTrade.trade_id)
}

// .google.protobuf.Timestamp date_time = 2;
inline bool OperationTrade::has_date_time() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.date_time_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& OperationTrade::_internal_date_time() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.date_time_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OperationTrade::date_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationTrade.date_time)
return _internal_date_time();
}
inline void OperationTrade::unsafe_arena_set_allocated_date_time(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_time_);
}
_impl_.date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationTrade.date_time)
}
inline ::google::protobuf::Timestamp* OperationTrade::release_date_time() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.date_time_;
_impl_.date_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* OperationTrade::unsafe_arena_release_date_time() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationTrade.date_time)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.date_time_;
_impl_.date_time_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* OperationTrade::_internal_mutable_date_time() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.date_time_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.date_time_;
}
inline ::google::protobuf::Timestamp* OperationTrade::mutable_date_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_date_time();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationTrade.date_time)
return _msg;
}
inline void OperationTrade::set_allocated_date_time(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_time_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationTrade.date_time)
}

// int64 quantity = 3;
inline void OperationTrade::clear_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t OperationTrade::quantity() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationTrade.quantity)
return _internal_quantity();
}
inline void OperationTrade::set_quantity(::int64_t value) {
_internal_set_quantity(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationTrade.quantity)
}
inline ::int64_t OperationTrade::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_;
}
inline void OperationTrade::_internal_set_quantity(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = value;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 4;
inline bool OperationTrade::has_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationTrade::_internal_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationTrade::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationTrade.price)
return _internal_price();
}
inline void OperationTrade::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationTrade.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.price_;
_impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::unsafe_arena_release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationTrade.price)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
_impl_.price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::_internal_mutable_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationTrade::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationTrade.price)
return _msg;
}
inline void OperationTrade::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationTrade.price)
}

// -------------------------------------------------------------------

// PortfolioRequest

// string account_id = 1;
inline void PortfolioRequest::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& PortfolioRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioRequest::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioRequest.account_id)
}
inline std::string* PortfolioRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioRequest.account_id)
return _s;
}
inline const std::string& PortfolioRequest::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void PortfolioRequest::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* PortfolioRequest::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* PortfolioRequest::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioRequest.account_id)
return _impl_.account_id_.Release();
}
inline void PortfolioRequest::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioRequest.account_id)
}

// .tinkoff.public.invest.api.contract.v1.PortfolioRequest.CurrencyRequest currency = 2;
inline void PortfolioRequest::clear_currency() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest PortfolioRequest::currency() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioRequest.currency)
return _internal_currency();
}
inline void PortfolioRequest::set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value) {
_internal_set_currency(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioRequest.currency)
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest PortfolioRequest::_internal_currency() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest>(_impl_.currency_);
}
inline void PortfolioRequest::_internal_set_currency(::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_ = value;
}

// -------------------------------------------------------------------

// PortfolioResponse

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_shares = 1;
inline bool PortfolioResponse::has_total_amount_shares() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_shares_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_shares() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_shares_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_shares() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
return _internal_total_amount_shares();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_shares(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_shares_);
}
_impl_.total_amount_shares_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_shares() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_shares_;
_impl_.total_amount_shares_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_shares() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_shares)

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_shares_;
_impl_.total_amount_shares_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_shares() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_shares_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_shares_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_shares_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_shares() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_shares();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_shares(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_shares_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.total_amount_shares_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_shares)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_bonds = 2;
inline bool PortfolioResponse::has_total_amount_bonds() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_bonds_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_bonds() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_bonds_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_bonds() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
return _internal_total_amount_bonds();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_bonds(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_bonds_);
}
_impl_.total_amount_bonds_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_bonds() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_bonds_;
_impl_.total_amount_bonds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_bonds() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_bonds_;
_impl_.total_amount_bonds_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_bonds() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_bonds_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_bonds_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_bonds_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_bonds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_bonds();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_bonds(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_bonds_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.total_amount_bonds_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_bonds)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_etf = 3;
inline bool PortfolioResponse::has_total_amount_etf() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_etf_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_etf() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_etf_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_etf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
return _internal_total_amount_etf();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_etf(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_etf_);
}
_impl_.total_amount_etf_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_etf() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_etf_;
_impl_.total_amount_etf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_etf() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_etf)

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_etf_;
_impl_.total_amount_etf_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_etf() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_etf_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_etf_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_etf_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_etf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_etf();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_etf(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_etf_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.total_amount_etf_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_etf)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_currencies = 4;
inline bool PortfolioResponse::has_total_amount_currencies() const {
bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_currencies_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_currencies() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_currencies_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_currencies() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
return _internal_total_amount_currencies();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_currencies(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_currencies_);
}
_impl_.total_amount_currencies_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_currencies() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_currencies_;
_impl_.total_amount_currencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_currencies() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_currencies_;
_impl_.total_amount_currencies_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_currencies() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_currencies_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_currencies_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_currencies_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_currencies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_currencies();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_currencies(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_currencies_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}

_impl_.total_amount_currencies_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_currencies)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_futures = 5;
inline bool PortfolioResponse::has_total_amount_futures() const {
bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_futures_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_futures() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_futures_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_futures() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
return _internal_total_amount_futures();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_futures(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_futures_);
}
_impl_.total_amount_futures_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_futures() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_futures_;
_impl_.total_amount_futures_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_futures() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_futures)

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_futures_;
_impl_.total_amount_futures_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_futures() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_futures_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_futures_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_futures_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_futures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_futures();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_futures(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_futures_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}

_impl_.total_amount_futures_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_futures)
}

// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield = 6;
inline bool PortfolioResponse::has_expected_yield() const {
bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
PROTOBUF_ASSUME(!value || _impl_.expected_yield_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioResponse::_internal_expected_yield() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioResponse::expected_yield() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.expected_yield)
return _internal_expected_yield();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_);
}
_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.expected_yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::release_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.expected_yield_;
_impl_.expected_yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::unsafe_arena_release_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.expected_yield)

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
_impl_.expected_yield_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::_internal_mutable_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.expected_yield_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.expected_yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioResponse::mutable_expected_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.expected_yield)
return _msg;
}
inline void PortfolioResponse::set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}

_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.expected_yield)
}

// repeated .tinkoff.public.invest.api.contract.v1.PortfolioPosition positions = 7;
inline int PortfolioResponse::_internal_positions_size() const {
return _internal_positions().size();
}
inline int PortfolioResponse::positions_size() const {
return _internal_positions_size();
}
inline void PortfolioResponse::clear_positions() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.positions_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* PortfolioResponse::mutable_positions(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.positions)
return _internal_mutable_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>* PortfolioResponse::mutable_positions()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PortfolioResponse.positions)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_positions();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition& PortfolioResponse::positions(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.positions)
return _internal_positions().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* PortfolioResponse::add_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PortfolioPosition* _add = _internal_mutable_positions()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PortfolioResponse.positions)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>& PortfolioResponse::positions() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PortfolioResponse.positions)
return _internal_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>&
PortfolioResponse::_internal_positions() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.positions_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PortfolioPosition>*
PortfolioResponse::_internal_mutable_positions() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.positions_;
}

// string account_id = 8;
inline void PortfolioResponse::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& PortfolioResponse::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioResponse::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioResponse.account_id)
}
inline std::string* PortfolioResponse::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.account_id)
return _s;
}
inline const std::string& PortfolioResponse::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void PortfolioResponse::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* PortfolioResponse::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* PortfolioResponse::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.account_id)
return _impl_.account_id_.Release();
}
inline void PortfolioResponse::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.account_id)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_options = 9;
inline bool PortfolioResponse::has_total_amount_options() const {
bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_options_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_options() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_options_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_options)
return _internal_total_amount_options();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_options(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_options_);
}
_impl_.total_amount_options_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_options)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_options() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_options_;
_impl_.total_amount_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_options() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_options)

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_options_;
_impl_.total_amount_options_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_options() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_options_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_options_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_options_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_options();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_options)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_options(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_options_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}

_impl_.total_amount_options_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_options)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_sp = 10;
inline bool PortfolioResponse::has_total_amount_sp() const {
bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_sp_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_sp() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_sp_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_sp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
return _internal_total_amount_sp();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_sp(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_sp_);
}
_impl_.total_amount_sp_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_sp() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000080u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_sp_;
_impl_.total_amount_sp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_sp() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_sp)

_impl_._has_bits_[0] &= ~0x00000080u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_sp_;
_impl_.total_amount_sp_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_sp() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_sp_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_sp_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_sp_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_sp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000080u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_sp();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_sp(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_sp_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}

_impl_.total_amount_sp_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_sp)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_amount_portfolio = 11;
inline bool PortfolioResponse::has_total_amount_portfolio() const {
bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_amount_portfolio_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::_internal_total_amount_portfolio() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_amount_portfolio_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioResponse::total_amount_portfolio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
return _internal_total_amount_portfolio();
}
inline void PortfolioResponse::unsafe_arena_set_allocated_total_amount_portfolio(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_portfolio_);
}
_impl_.total_amount_portfolio_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::release_total_amount_portfolio() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_amount_portfolio_;
_impl_.total_amount_portfolio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::unsafe_arena_release_total_amount_portfolio() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_amount_portfolio_;
_impl_.total_amount_portfolio_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::_internal_mutable_total_amount_portfolio() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_amount_portfolio_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_amount_portfolio_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_amount_portfolio_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioResponse::mutable_total_amount_portfolio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000100u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_amount_portfolio();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
return _msg;
}
inline void PortfolioResponse::set_allocated_total_amount_portfolio(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_amount_portfolio_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}

_impl_.total_amount_portfolio_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio)
}

// repeated .tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition virtual_positions = 12;
inline int PortfolioResponse::_internal_virtual_positions_size() const {
return _internal_virtual_positions().size();
}
inline int PortfolioResponse::virtual_positions_size() const {
return _internal_virtual_positions_size();
}
inline void PortfolioResponse::clear_virtual_positions() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.virtual_positions_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* PortfolioResponse::mutable_virtual_positions(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioResponse.virtual_positions)
return _internal_mutable_virtual_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>* PortfolioResponse::mutable_virtual_positions()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PortfolioResponse.virtual_positions)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_virtual_positions();
}
inline const ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition& PortfolioResponse::virtual_positions(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioResponse.virtual_positions)
return _internal_virtual_positions().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* PortfolioResponse::add_virtual_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition* _add = _internal_mutable_virtual_positions()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PortfolioResponse.virtual_positions)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>& PortfolioResponse::virtual_positions() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PortfolioResponse.virtual_positions)
return _internal_virtual_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>&
PortfolioResponse::_internal_virtual_positions() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.virtual_positions_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::VirtualPortfolioPosition>*
PortfolioResponse::_internal_mutable_virtual_positions() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.virtual_positions_;
}

// -------------------------------------------------------------------

// PositionsRequest

// string account_id = 1;
inline void PositionsRequest::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& PositionsRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsRequest::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsRequest.account_id)
}
inline std::string* PositionsRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsRequest.account_id)
return _s;
}
inline const std::string& PositionsRequest::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void PositionsRequest::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* PositionsRequest::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* PositionsRequest::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsRequest.account_id)
return _impl_.account_id_.Release();
}
inline void PositionsRequest::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsRequest.account_id)
}

// -------------------------------------------------------------------

// PositionsResponse

// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue money = 1;
inline int PositionsResponse::_internal_money_size() const {
return _internal_money().size();
}
inline int PositionsResponse::money_size() const {
return _internal_money_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::mutable_money(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsResponse.money)
return _internal_mutable_money()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* PositionsResponse::mutable_money()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.money)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_money();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsResponse::money(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsResponse.money)
return _internal_money().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::add_money() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_mutable_money()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsResponse.money)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& PositionsResponse::money() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.money)
return _internal_money();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>&
PositionsResponse::_internal_money() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.money_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>*
PositionsResponse::_internal_mutable_money() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.money_;
}

// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue blocked = 2;
inline int PositionsResponse::_internal_blocked_size() const {
return _internal_blocked().size();
}
inline int PositionsResponse::blocked_size() const {
return _internal_blocked_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::mutable_blocked(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsResponse.blocked)
return _internal_mutable_blocked()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* PositionsResponse::mutable_blocked()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.blocked)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_blocked();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsResponse::blocked(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsResponse.blocked)
return _internal_blocked().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsResponse::add_blocked() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_mutable_blocked()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsResponse.blocked)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& PositionsResponse::blocked() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.blocked)
return _internal_blocked();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>&
PositionsResponse::_internal_blocked() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.blocked_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>*
PositionsResponse::_internal_mutable_blocked() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.blocked_;
}

// repeated .tinkoff.public.invest.api.contract.v1.PositionsSecurities securities = 3;
inline int PositionsResponse::_internal_securities_size() const {
return _internal_securities().size();
}
inline int PositionsResponse::securities_size() const {
return _internal_securities_size();
}
inline void PositionsResponse::clear_securities() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.securities_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionsResponse::mutable_securities(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsResponse.securities)
return _internal_mutable_securities()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>* PositionsResponse::mutable_securities()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.securities)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_securities();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& PositionsResponse::securities(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsResponse.securities)
return _internal_securities().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionsResponse::add_securities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* _add = _internal_mutable_securities()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsResponse.securities)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>& PositionsResponse::securities() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.securities)
return _internal_securities();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>&
PositionsResponse::_internal_securities() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.securities_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>*
PositionsResponse::_internal_mutable_securities() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.securities_;
}

// bool limits_loading_in_progress = 4;
inline void PositionsResponse::clear_limits_loading_in_progress() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.limits_loading_in_progress_ = false;
}
inline bool PositionsResponse::limits_loading_in_progress() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsResponse.limits_loading_in_progress)
return _internal_limits_loading_in_progress();
}
inline void PositionsResponse::set_limits_loading_in_progress(bool value) {
_internal_set_limits_loading_in_progress(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsResponse.limits_loading_in_progress)
}
inline bool PositionsResponse::_internal_limits_loading_in_progress() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.limits_loading_in_progress_;
}
inline void PositionsResponse::_internal_set_limits_loading_in_progress(bool value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.limits_loading_in_progress_ = value;
}

// repeated .tinkoff.public.invest.api.contract.v1.PositionsFutures futures = 5;
inline int PositionsResponse::_internal_futures_size() const {
return _internal_futures().size();
}
inline int PositionsResponse::futures_size() const {
return _internal_futures_size();
}
inline void PositionsResponse::clear_futures() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.futures_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionsResponse::mutable_futures(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsResponse.futures)
return _internal_mutable_futures()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>* PositionsResponse::mutable_futures()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.futures)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_futures();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& PositionsResponse::futures(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsResponse.futures)
return _internal_futures().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionsResponse::add_futures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsFutures* _add = _internal_mutable_futures()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsResponse.futures)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>& PositionsResponse::futures() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.futures)
return _internal_futures();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>&
PositionsResponse::_internal_futures() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.futures_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>*
PositionsResponse::_internal_mutable_futures() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.futures_;
}

// repeated .tinkoff.public.invest.api.contract.v1.PositionsOptions options = 6;
inline int PositionsResponse::_internal_options_size() const {
return _internal_options().size();
}
inline int PositionsResponse::options_size() const {
return _internal_options_size();
}
inline void PositionsResponse::clear_options() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.options_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionsResponse::mutable_options(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsResponse.options)
return _internal_mutable_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>* PositionsResponse::mutable_options()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.options)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_options();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& PositionsResponse::options(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsResponse.options)
return _internal_options().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionsResponse::add_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsOptions* _add = _internal_mutable_options()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsResponse.options)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>& PositionsResponse::options() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionsResponse.options)
return _internal_options();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>&
PositionsResponse::_internal_options() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.options_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>*
PositionsResponse::_internal_mutable_options() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.options_;
}

// -------------------------------------------------------------------

// WithdrawLimitsRequest

// string account_id = 1;
inline void WithdrawLimitsRequest::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& WithdrawLimitsRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WithdrawLimitsRequest::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
}
inline std::string* WithdrawLimitsRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
return _s;
}
inline const std::string& WithdrawLimitsRequest::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void WithdrawLimitsRequest::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* WithdrawLimitsRequest::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* WithdrawLimitsRequest::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
return _impl_.account_id_.Release();
}
inline void WithdrawLimitsRequest::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest.account_id)
}

// -------------------------------------------------------------------

// WithdrawLimitsResponse

// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue money = 1;
inline int WithdrawLimitsResponse::_internal_money_size() const {
return _internal_money().size();
}
inline int WithdrawLimitsResponse::money_size() const {
return _internal_money_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::mutable_money(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.money)
return _internal_mutable_money()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* WithdrawLimitsResponse::mutable_money()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.money)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_money();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::money(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.money)
return _internal_money().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::add_money() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_mutable_money()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.money)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& WithdrawLimitsResponse::money() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.money)
return _internal_money();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>&
WithdrawLimitsResponse::_internal_money() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.money_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>*
WithdrawLimitsResponse::_internal_mutable_money() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.money_;
}

// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue blocked = 2;
inline int WithdrawLimitsResponse::_internal_blocked_size() const {
return _internal_blocked().size();
}
inline int WithdrawLimitsResponse::blocked_size() const {
return _internal_blocked_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::mutable_blocked(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
return _internal_mutable_blocked()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* WithdrawLimitsResponse::mutable_blocked()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_blocked();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::blocked(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
return _internal_blocked().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::add_blocked() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_mutable_blocked()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& WithdrawLimitsResponse::blocked() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked)
return _internal_blocked();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>&
WithdrawLimitsResponse::_internal_blocked() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.blocked_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>*
WithdrawLimitsResponse::_internal_mutable_blocked() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.blocked_;
}

// repeated .tinkoff.public.invest.api.contract.v1.MoneyValue blocked_guarantee = 3;
inline int WithdrawLimitsResponse::_internal_blocked_guarantee_size() const {
return _internal_blocked_guarantee().size();
}
inline int WithdrawLimitsResponse::blocked_guarantee_size() const {
return _internal_blocked_guarantee_size();
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::mutable_blocked_guarantee(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
return _internal_mutable_blocked_guarantee()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>* WithdrawLimitsResponse::mutable_blocked_guarantee()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_blocked_guarantee();
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& WithdrawLimitsResponse::blocked_guarantee(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
return _internal_blocked_guarantee().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* WithdrawLimitsResponse::add_blocked_guarantee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _add = _internal_mutable_blocked_guarantee()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>& WithdrawLimitsResponse::blocked_guarantee() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee)
return _internal_blocked_guarantee();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>&
WithdrawLimitsResponse::_internal_blocked_guarantee() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.blocked_guarantee_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::MoneyValue>*
WithdrawLimitsResponse::_internal_mutable_blocked_guarantee() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.blocked_guarantee_;
}

// -------------------------------------------------------------------

// PortfolioPosition

// string figi = 1;
inline void PortfolioPosition::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioPosition::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioPosition.figi)
}
inline std::string* PortfolioPosition::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.figi)
return _s;
}
inline const std::string& PortfolioPosition::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void PortfolioPosition::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* PortfolioPosition::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* PortfolioPosition::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.figi)
return _impl_.figi_.Release();
}
inline void PortfolioPosition::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.figi)
}

// string instrument_type = 2;
inline void PortfolioPosition::clear_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::instrument_type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_type)
return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioPosition::set_instrument_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_type)
}
inline std::string* PortfolioPosition::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_type)
return _s;
}
inline const std::string& PortfolioPosition::_internal_instrument_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Get();
}
inline void PortfolioPosition::_internal_set_instrument_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* PortfolioPosition::_internal_mutable_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* PortfolioPosition::release_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_type)
return _impl_.instrument_type_.Release();
}
inline void PortfolioPosition::set_allocated_instrument_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_type_.IsDefault()) {
_impl_.instrument_type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_type)
}

// .tinkoff.public.invest.api.contract.v1.Quotation quantity = 3;
inline bool PortfolioPosition::has_quantity() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.quantity_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.quantity_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::quantity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity)
return _internal_quantity();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_);
}
_impl_.quantity_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.quantity_;
_impl_.quantity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity)

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_;
_impl_.quantity_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.quantity_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.quantity_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.quantity_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_quantity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_quantity();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity)
return _msg;
}
inline void PortfolioPosition::set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.quantity_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price = 4;
inline bool PortfolioPosition::has_average_position_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.average_position_price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_average_position_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::average_position_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price)
return _internal_average_position_price();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_);
}
_impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_average_position_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.average_position_price_;
_impl_.average_position_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_average_position_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
_impl_.average_position_price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_average_position_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.average_position_price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.average_position_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_average_position_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price)
return _msg;
}
inline void PortfolioPosition::set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price)
}

// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield = 5;
inline bool PortfolioPosition::has_expected_yield() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.expected_yield_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_expected_yield() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::expected_yield() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield)
return _internal_expected_yield();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_);
}
_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.expected_yield_;
_impl_.expected_yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield)

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
_impl_.expected_yield_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.expected_yield_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.expected_yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_expected_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield)
return _msg;
}
inline void PortfolioPosition::set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue current_nkd = 6;
inline bool PortfolioPosition::has_current_nkd() const {
bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
PROTOBUF_ASSUME(!value || _impl_.current_nkd_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_current_nkd() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.current_nkd_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::current_nkd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_nkd)
return _internal_current_nkd();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_current_nkd(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_nkd_);
}
_impl_.current_nkd_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_nkd)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_current_nkd() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.current_nkd_;
_impl_.current_nkd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_current_nkd() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_nkd)

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_nkd_;
_impl_.current_nkd_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_current_nkd() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.current_nkd_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.current_nkd_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.current_nkd_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_current_nkd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_current_nkd();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_nkd)
return _msg;
}
inline void PortfolioPosition::set_allocated_current_nkd(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_nkd_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}

_impl_.current_nkd_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_nkd)
}

// .tinkoff.public.invest.api.contract.v1.Quotation average_position_price_pt = 7 [deprecated = true];
inline bool PortfolioPosition::has_average_position_price_pt() const {
bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
PROTOBUF_ASSUME(!value || _impl_.average_position_price_pt_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_average_position_price_pt() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.average_position_price_pt_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::average_position_price_pt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
return _internal_average_position_price_pt();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_average_position_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_pt_);
}
_impl_.average_position_price_pt_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_average_position_price_pt() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.average_position_price_pt_;
_impl_.average_position_price_pt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_average_position_price_pt() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.average_position_price_pt_;
_impl_.average_position_price_pt_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_average_position_price_pt() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.average_position_price_pt_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.average_position_price_pt_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.average_position_price_pt_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_average_position_price_pt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_average_position_price_pt();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
return _msg;
}
inline void PortfolioPosition::set_allocated_average_position_price_pt(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_pt_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}

_impl_.average_position_price_pt_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_pt)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue current_price = 8;
inline bool PortfolioPosition::has_current_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
PROTOBUF_ASSUME(!value || _impl_.current_price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_current_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.current_price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::current_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_price)
return _internal_current_price();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
}
_impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_current_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.current_price_;
_impl_.current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_current_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_price)

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_price_;
_impl_.current_price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_current_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.current_price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.current_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_current_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_current_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_price)
return _msg;
}
inline void PortfolioPosition::set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}

_impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price_fifo = 9;
inline bool PortfolioPosition::has_average_position_price_fifo() const {
bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
PROTOBUF_ASSUME(!value || _impl_.average_position_price_fifo_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_average_position_price_fifo() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_fifo_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::average_position_price_fifo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
return _internal_average_position_price_fifo();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_fifo_);
}
_impl_.average_position_price_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_average_position_price_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.average_position_price_fifo_;
_impl_.average_position_price_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_average_position_price_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_fifo_;
_impl_.average_position_price_fifo_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_average_position_price_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.average_position_price_fifo_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.average_position_price_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.average_position_price_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_average_position_price_fifo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price_fifo();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
return _msg;
}
inline void PortfolioPosition::set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_fifo_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}

_impl_.average_position_price_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo)
}

// .tinkoff.public.invest.api.contract.v1.Quotation quantity_lots = 10 [deprecated = true];
inline bool PortfolioPosition::has_quantity_lots() const {
bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
PROTOBUF_ASSUME(!value || _impl_.quantity_lots_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_quantity_lots() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.quantity_lots_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::quantity_lots() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity_lots)
return _internal_quantity_lots();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_quantity_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_lots_);
}
_impl_.quantity_lots_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity_lots)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_quantity_lots() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000080u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.quantity_lots_;
_impl_.quantity_lots_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_quantity_lots() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity_lots)

_impl_._has_bits_[0] &= ~0x00000080u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_lots_;
_impl_.quantity_lots_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_quantity_lots() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.quantity_lots_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.quantity_lots_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.quantity_lots_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_quantity_lots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000080u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_quantity_lots();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity_lots)
return _msg;
}
inline void PortfolioPosition::set_allocated_quantity_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_lots_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}

_impl_.quantity_lots_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity_lots)
}

// bool blocked = 21;
inline void PortfolioPosition::clear_blocked() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = false;
}
inline bool PortfolioPosition::blocked() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked)
return _internal_blocked();
}
inline void PortfolioPosition::set_blocked(bool value) {
_internal_set_blocked(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked)
}
inline bool PortfolioPosition::_internal_blocked() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.blocked_;
}
inline void PortfolioPosition::_internal_set_blocked(bool value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = value;
}

// .tinkoff.public.invest.api.contract.v1.Quotation blocked_lots = 22;
inline bool PortfolioPosition::has_blocked_lots() const {
bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
PROTOBUF_ASSUME(!value || _impl_.blocked_lots_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_blocked_lots() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.blocked_lots_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::blocked_lots() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked_lots)
return _internal_blocked_lots();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_blocked_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blocked_lots_);
}
_impl_.blocked_lots_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked_lots)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_blocked_lots() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.blocked_lots_;
_impl_.blocked_lots_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_blocked_lots() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked_lots)

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.blocked_lots_;
_impl_.blocked_lots_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_blocked_lots() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.blocked_lots_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.blocked_lots_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.blocked_lots_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_blocked_lots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000100u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_blocked_lots();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked_lots)
return _msg;
}
inline void PortfolioPosition::set_allocated_blocked_lots(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blocked_lots_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}

_impl_.blocked_lots_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked_lots)
}

// string position_uid = 24;
inline void PortfolioPosition::clear_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::position_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.position_uid)
return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioPosition::set_position_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioPosition.position_uid)
}
inline std::string* PortfolioPosition::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_position_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.position_uid)
return _s;
}
inline const std::string& PortfolioPosition::_internal_position_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Get();
}
inline void PortfolioPosition::_internal_set_position_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(value, GetArena());
}
inline std::string* PortfolioPosition::_internal_mutable_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* PortfolioPosition::release_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.position_uid)
return _impl_.position_uid_.Release();
}
inline void PortfolioPosition::set_allocated_position_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.position_uid_.IsDefault()) {
_impl_.position_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.position_uid)
}

// string instrument_uid = 25;
inline void PortfolioPosition::clear_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PortfolioPosition::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioPosition::set_instrument_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_uid)
}
inline std::string* PortfolioPosition::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_uid)
return _s;
}
inline const std::string& PortfolioPosition::_internal_instrument_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Get();
}
inline void PortfolioPosition::_internal_set_instrument_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* PortfolioPosition::_internal_mutable_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* PortfolioPosition::release_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_uid)
return _impl_.instrument_uid_.Release();
}
inline void PortfolioPosition::set_allocated_instrument_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_uid_.IsDefault()) {
_impl_.instrument_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.instrument_uid)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue var_margin = 26;
inline bool PortfolioPosition::has_var_margin() const {
bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
PROTOBUF_ASSUME(!value || _impl_.var_margin_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::_internal_var_margin() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.var_margin_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PortfolioPosition::var_margin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.var_margin)
return _internal_var_margin();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_var_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.var_margin_);
}
_impl_.var_margin_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000200u;
} else {
_impl_._has_bits_[0] &= ~0x00000200u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.var_margin)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::release_var_margin() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000200u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.var_margin_;
_impl_.var_margin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::unsafe_arena_release_var_margin() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.var_margin)

_impl_._has_bits_[0] &= ~0x00000200u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.var_margin_;
_impl_.var_margin_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::_internal_mutable_var_margin() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.var_margin_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.var_margin_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.var_margin_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PortfolioPosition::mutable_var_margin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000200u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_var_margin();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.var_margin)
return _msg;
}
inline void PortfolioPosition::set_allocated_var_margin(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.var_margin_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000200u;
} else {
_impl_._has_bits_[0] &= ~0x00000200u;
}

_impl_.var_margin_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.var_margin)
}

// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield_fifo = 27;
inline bool PortfolioPosition::has_expected_yield_fifo() const {
bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
PROTOBUF_ASSUME(!value || _impl_.expected_yield_fifo_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::_internal_expected_yield_fifo() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_fifo_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& PortfolioPosition::expected_yield_fifo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
return _internal_expected_yield_fifo();
}
inline void PortfolioPosition::unsafe_arena_set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_fifo_);
}
_impl_.expected_yield_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000400u;
} else {
_impl_._has_bits_[0] &= ~0x00000400u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::release_expected_yield_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000400u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.expected_yield_fifo_;
_impl_.expected_yield_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::unsafe_arena_release_expected_yield_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)

_impl_._has_bits_[0] &= ~0x00000400u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_fifo_;
_impl_.expected_yield_fifo_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::_internal_mutable_expected_yield_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.expected_yield_fifo_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.expected_yield_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.expected_yield_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* PortfolioPosition::mutable_expected_yield_fifo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000400u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield_fifo();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
return _msg;
}
inline void PortfolioPosition::set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_fifo_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000400u;
} else {
_impl_._has_bits_[0] &= ~0x00000400u;
}

_impl_.expected_yield_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo)
}

// -------------------------------------------------------------------

// VirtualPortfolioPosition

// string position_uid = 1;
inline void VirtualPortfolioPosition::clear_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::position_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtualPortfolioPosition::set_position_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
}
inline std::string* VirtualPortfolioPosition::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_position_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_position_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_position_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(value, GetArena());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* VirtualPortfolioPosition::release_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
return _impl_.position_uid_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_position_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.position_uid_.IsDefault()) {
_impl_.position_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.position_uid)
}

// string instrument_uid = 2;
inline void VirtualPortfolioPosition::clear_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtualPortfolioPosition::set_instrument_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
}
inline std::string* VirtualPortfolioPosition::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_instrument_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_instrument_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* VirtualPortfolioPosition::release_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
return _impl_.instrument_uid_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_instrument_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_uid_.IsDefault()) {
_impl_.instrument_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_uid)
}

// string figi = 3;
inline void VirtualPortfolioPosition::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtualPortfolioPosition::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.figi)
}
inline std::string* VirtualPortfolioPosition::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.figi)
return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* VirtualPortfolioPosition::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.figi)
return _impl_.figi_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.figi)
}

// string instrument_type = 4;
inline void VirtualPortfolioPosition::clear_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& VirtualPortfolioPosition::instrument_type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtualPortfolioPosition::set_instrument_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
}
inline std::string* VirtualPortfolioPosition::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
return _s;
}
inline const std::string& VirtualPortfolioPosition::_internal_instrument_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Get();
}
inline void VirtualPortfolioPosition::_internal_set_instrument_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* VirtualPortfolioPosition::_internal_mutable_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* VirtualPortfolioPosition::release_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
return _impl_.instrument_type_.Release();
}
inline void VirtualPortfolioPosition::set_allocated_instrument_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_type_.IsDefault()) {
_impl_.instrument_type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.instrument_type)
}

// .tinkoff.public.invest.api.contract.v1.Quotation quantity = 5;
inline bool VirtualPortfolioPosition::has_quantity() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.quantity_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.quantity_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::quantity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
return _internal_quantity();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_);
}
_impl_.quantity_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::release_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.quantity_;
_impl_.quantity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::unsafe_arena_release_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.quantity)

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.quantity_;
_impl_.quantity_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::_internal_mutable_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.quantity_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.quantity_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.quantity_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::mutable_quantity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_quantity();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_quantity(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.quantity_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.quantity)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price = 6;
inline bool VirtualPortfolioPosition::has_average_position_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.average_position_price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::_internal_average_position_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::average_position_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
return _internal_average_position_price();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_);
}
_impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::release_average_position_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.average_position_price_;
_impl_.average_position_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::unsafe_arena_release_average_position_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_;
_impl_.average_position_price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::_internal_mutable_average_position_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.average_position_price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.average_position_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::mutable_average_position_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_average_position_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.average_position_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price)
}

// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield = 7;
inline bool VirtualPortfolioPosition::has_expected_yield() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.expected_yield_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::_internal_expected_yield() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::expected_yield() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
return _internal_expected_yield();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_);
}
_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::release_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.expected_yield_;
_impl_.expected_yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::unsafe_arena_release_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_;
_impl_.expected_yield_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::_internal_mutable_expected_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.expected_yield_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.expected_yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::mutable_expected_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_expected_yield(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.expected_yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield)
}

// .tinkoff.public.invest.api.contract.v1.Quotation expected_yield_fifo = 8;
inline bool VirtualPortfolioPosition::has_expected_yield_fifo() const {
bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
PROTOBUF_ASSUME(!value || _impl_.expected_yield_fifo_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::_internal_expected_yield_fifo() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expected_yield_fifo_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& VirtualPortfolioPosition::expected_yield_fifo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
return _internal_expected_yield_fifo();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_fifo_);
}
_impl_.expected_yield_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::release_expected_yield_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.expected_yield_fifo_;
_impl_.expected_yield_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::unsafe_arena_release_expected_yield_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expected_yield_fifo_;
_impl_.expected_yield_fifo_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::_internal_mutable_expected_yield_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.expected_yield_fifo_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.expected_yield_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.expected_yield_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* VirtualPortfolioPosition::mutable_expected_yield_fifo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expected_yield_fifo();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_expected_yield_fifo(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_yield_fifo_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}

_impl_.expected_yield_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo)
}

// .google.protobuf.Timestamp expire_date = 9;
inline bool VirtualPortfolioPosition::has_expire_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
PROTOBUF_ASSUME(!value || _impl_.expire_date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& VirtualPortfolioPosition::_internal_expire_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.expire_date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& VirtualPortfolioPosition::expire_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
return _internal_expire_date();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_expire_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expire_date_);
}
_impl_.expire_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
}
inline ::google::protobuf::Timestamp* VirtualPortfolioPosition::release_expire_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000010u;
::google::protobuf::Timestamp* released = _impl_.expire_date_;
_impl_.expire_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* VirtualPortfolioPosition::unsafe_arena_release_expire_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)

_impl_._has_bits_[0] &= ~0x00000010u;
::google::protobuf::Timestamp* temp = _impl_.expire_date_;
_impl_.expire_date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* VirtualPortfolioPosition::_internal_mutable_expire_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.expire_date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.expire_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.expire_date_;
}
inline ::google::protobuf::Timestamp* VirtualPortfolioPosition::mutable_expire_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::google::protobuf::Timestamp* _msg = _internal_mutable_expire_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_expire_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expire_date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}

_impl_.expire_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expire_date)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue current_price = 10;
inline bool VirtualPortfolioPosition::has_current_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
PROTOBUF_ASSUME(!value || _impl_.current_price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::_internal_current_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.current_price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::current_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
return _internal_current_price();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
}
_impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::release_current_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.current_price_;
_impl_.current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::unsafe_arena_release_current_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.current_price)

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.current_price_;
_impl_.current_price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::_internal_mutable_current_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.current_price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.current_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::mutable_current_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_current_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}

_impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.current_price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue average_position_price_fifo = 11;
inline bool VirtualPortfolioPosition::has_average_position_price_fifo() const {
bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
PROTOBUF_ASSUME(!value || _impl_.average_position_price_fifo_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::_internal_average_position_price_fifo() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.average_position_price_fifo_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& VirtualPortfolioPosition::average_position_price_fifo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
return _internal_average_position_price_fifo();
}
inline void VirtualPortfolioPosition::unsafe_arena_set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_fifo_);
}
_impl_.average_position_price_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::release_average_position_price_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.average_position_price_fifo_;
_impl_.average_position_price_fifo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::unsafe_arena_release_average_position_price_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.average_position_price_fifo_;
_impl_.average_position_price_fifo_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::_internal_mutable_average_position_price_fifo() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.average_position_price_fifo_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.average_position_price_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.average_position_price_fifo_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* VirtualPortfolioPosition::mutable_average_position_price_fifo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_average_position_price_fifo();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
return _msg;
}
inline void VirtualPortfolioPosition::set_allocated_average_position_price_fifo(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_position_price_fifo_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}

_impl_.average_position_price_fifo_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo)
}

// -------------------------------------------------------------------

// PositionsSecurities

// string figi = 1;
inline void PositionsSecurities::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSecurities.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsSecurities::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSecurities.figi)
}
inline std::string* PositionsSecurities::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsSecurities.figi)
return _s;
}
inline const std::string& PositionsSecurities::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void PositionsSecurities::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* PositionsSecurities::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* PositionsSecurities::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsSecurities.figi)
return _impl_.figi_.Release();
}
inline void PositionsSecurities::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsSecurities.figi)
}

// int64 blocked = 2;
inline void PositionsSecurities::clear_blocked() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = ::int64_t{0};
}
inline ::int64_t PositionsSecurities::blocked() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSecurities.blocked)
return _internal_blocked();
}
inline void PositionsSecurities::set_blocked(::int64_t value) {
_internal_set_blocked(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSecurities.blocked)
}
inline ::int64_t PositionsSecurities::_internal_blocked() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.blocked_;
}
inline void PositionsSecurities::_internal_set_blocked(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = value;
}

// int64 balance = 3;
inline void PositionsSecurities::clear_balance() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.balance_ = ::int64_t{0};
}
inline ::int64_t PositionsSecurities::balance() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSecurities.balance)
return _internal_balance();
}
inline void PositionsSecurities::set_balance(::int64_t value) {
_internal_set_balance(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSecurities.balance)
}
inline ::int64_t PositionsSecurities::_internal_balance() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.balance_;
}
inline void PositionsSecurities::_internal_set_balance(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.balance_ = value;
}

// string position_uid = 4;
inline void PositionsSecurities::clear_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::position_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSecurities.position_uid)
return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsSecurities::set_position_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSecurities.position_uid)
}
inline std::string* PositionsSecurities::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_position_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsSecurities.position_uid)
return _s;
}
inline const std::string& PositionsSecurities::_internal_position_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Get();
}
inline void PositionsSecurities::_internal_set_position_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(value, GetArena());
}
inline std::string* PositionsSecurities::_internal_mutable_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* PositionsSecurities::release_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsSecurities.position_uid)
return _impl_.position_uid_.Release();
}
inline void PositionsSecurities::set_allocated_position_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.position_uid_.IsDefault()) {
_impl_.position_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsSecurities.position_uid)
}

// string instrument_uid = 5;
inline void PositionsSecurities::clear_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsSecurities::set_instrument_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_uid)
}
inline std::string* PositionsSecurities::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_uid)
return _s;
}
inline const std::string& PositionsSecurities::_internal_instrument_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Get();
}
inline void PositionsSecurities::_internal_set_instrument_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* PositionsSecurities::_internal_mutable_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* PositionsSecurities::release_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_uid)
return _impl_.instrument_uid_.Release();
}
inline void PositionsSecurities::set_allocated_instrument_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_uid_.IsDefault()) {
_impl_.instrument_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_uid)
}

// bool exchange_blocked = 11;
inline void PositionsSecurities::clear_exchange_blocked() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.exchange_blocked_ = false;
}
inline bool PositionsSecurities::exchange_blocked() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSecurities.exchange_blocked)
return _internal_exchange_blocked();
}
inline void PositionsSecurities::set_exchange_blocked(bool value) {
_internal_set_exchange_blocked(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSecurities.exchange_blocked)
}
inline bool PositionsSecurities::_internal_exchange_blocked() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.exchange_blocked_;
}
inline void PositionsSecurities::_internal_set_exchange_blocked(bool value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.exchange_blocked_ = value;
}

// string instrument_type = 16;
inline void PositionsSecurities::clear_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& PositionsSecurities::instrument_type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_type)
return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsSecurities::set_instrument_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_type)
}
inline std::string* PositionsSecurities::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_type)
return _s;
}
inline const std::string& PositionsSecurities::_internal_instrument_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Get();
}
inline void PositionsSecurities::_internal_set_instrument_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* PositionsSecurities::_internal_mutable_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* PositionsSecurities::release_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_type)
return _impl_.instrument_type_.Release();
}
inline void PositionsSecurities::set_allocated_instrument_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_type_.IsDefault()) {
_impl_.instrument_type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsSecurities.instrument_type)
}

// -------------------------------------------------------------------

// PositionsFutures

// string figi = 1;
inline void PositionsFutures::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& PositionsFutures::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsFutures.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsFutures::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsFutures.figi)
}
inline std::string* PositionsFutures::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsFutures.figi)
return _s;
}
inline const std::string& PositionsFutures::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void PositionsFutures::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* PositionsFutures::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* PositionsFutures::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsFutures.figi)
return _impl_.figi_.Release();
}
inline void PositionsFutures::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsFutures.figi)
}

// int64 blocked = 2;
inline void PositionsFutures::clear_blocked() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = ::int64_t{0};
}
inline ::int64_t PositionsFutures::blocked() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsFutures.blocked)
return _internal_blocked();
}
inline void PositionsFutures::set_blocked(::int64_t value) {
_internal_set_blocked(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsFutures.blocked)
}
inline ::int64_t PositionsFutures::_internal_blocked() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.blocked_;
}
inline void PositionsFutures::_internal_set_blocked(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = value;
}

// int64 balance = 3;
inline void PositionsFutures::clear_balance() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.balance_ = ::int64_t{0};
}
inline ::int64_t PositionsFutures::balance() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsFutures.balance)
return _internal_balance();
}
inline void PositionsFutures::set_balance(::int64_t value) {
_internal_set_balance(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsFutures.balance)
}
inline ::int64_t PositionsFutures::_internal_balance() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.balance_;
}
inline void PositionsFutures::_internal_set_balance(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.balance_ = value;
}

// string position_uid = 4;
inline void PositionsFutures::clear_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PositionsFutures::position_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsFutures.position_uid)
return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsFutures::set_position_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsFutures.position_uid)
}
inline std::string* PositionsFutures::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_position_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsFutures.position_uid)
return _s;
}
inline const std::string& PositionsFutures::_internal_position_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Get();
}
inline void PositionsFutures::_internal_set_position_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(value, GetArena());
}
inline std::string* PositionsFutures::_internal_mutable_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* PositionsFutures::release_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsFutures.position_uid)
return _impl_.position_uid_.Release();
}
inline void PositionsFutures::set_allocated_position_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.position_uid_.IsDefault()) {
_impl_.position_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsFutures.position_uid)
}

// string instrument_uid = 5;
inline void PositionsFutures::clear_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PositionsFutures::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsFutures.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsFutures::set_instrument_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsFutures.instrument_uid)
}
inline std::string* PositionsFutures::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsFutures.instrument_uid)
return _s;
}
inline const std::string& PositionsFutures::_internal_instrument_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Get();
}
inline void PositionsFutures::_internal_set_instrument_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* PositionsFutures::_internal_mutable_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* PositionsFutures::release_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsFutures.instrument_uid)
return _impl_.instrument_uid_.Release();
}
inline void PositionsFutures::set_allocated_instrument_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_uid_.IsDefault()) {
_impl_.instrument_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsFutures.instrument_uid)
}

// -------------------------------------------------------------------

// PositionsOptions

// string position_uid = 1;
inline void PositionsOptions::clear_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.ClearToEmpty();
}
inline const std::string& PositionsOptions::position_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsOptions.position_uid)
return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsOptions::set_position_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsOptions.position_uid)
}
inline std::string* PositionsOptions::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_position_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsOptions.position_uid)
return _s;
}
inline const std::string& PositionsOptions::_internal_position_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Get();
}
inline void PositionsOptions::_internal_set_position_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(value, GetArena());
}
inline std::string* PositionsOptions::_internal_mutable_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* PositionsOptions::release_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsOptions.position_uid)
return _impl_.position_uid_.Release();
}
inline void PositionsOptions::set_allocated_position_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.position_uid_.IsDefault()) {
_impl_.position_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsOptions.position_uid)
}

// string instrument_uid = 2;
inline void PositionsOptions::clear_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& PositionsOptions::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsOptions.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsOptions::set_instrument_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsOptions.instrument_uid)
}
inline std::string* PositionsOptions::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsOptions.instrument_uid)
return _s;
}
inline const std::string& PositionsOptions::_internal_instrument_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Get();
}
inline void PositionsOptions::_internal_set_instrument_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* PositionsOptions::_internal_mutable_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* PositionsOptions::release_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsOptions.instrument_uid)
return _impl_.instrument_uid_.Release();
}
inline void PositionsOptions::set_allocated_instrument_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_uid_.IsDefault()) {
_impl_.instrument_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsOptions.instrument_uid)
}

// int64 blocked = 11;
inline void PositionsOptions::clear_blocked() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = ::int64_t{0};
}
inline ::int64_t PositionsOptions::blocked() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsOptions.blocked)
return _internal_blocked();
}
inline void PositionsOptions::set_blocked(::int64_t value) {
_internal_set_blocked(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsOptions.blocked)
}
inline ::int64_t PositionsOptions::_internal_blocked() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.blocked_;
}
inline void PositionsOptions::_internal_set_blocked(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.blocked_ = value;
}

// int64 balance = 21;
inline void PositionsOptions::clear_balance() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.balance_ = ::int64_t{0};
}
inline ::int64_t PositionsOptions::balance() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsOptions.balance)
return _internal_balance();
}
inline void PositionsOptions::set_balance(::int64_t value) {
_internal_set_balance(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsOptions.balance)
}
inline ::int64_t PositionsOptions::_internal_balance() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.balance_;
}
inline void PositionsOptions::_internal_set_balance(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.balance_ = value;
}

// -------------------------------------------------------------------

// BrokerReportRequest

// .tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest generate_broker_report_request = 1;
inline bool BrokerReportRequest::has_generate_broker_report_request() const {
return payload_case() == kGenerateBrokerReportRequest;
}
inline bool BrokerReportRequest::_internal_has_generate_broker_report_request() const {
return payload_case() == kGenerateBrokerReportRequest;
}
inline void BrokerReportRequest::set_has_generate_broker_report_request() {
_impl_._oneof_case_[0] = kGenerateBrokerReportRequest;
}
inline void BrokerReportRequest::clear_generate_broker_report_request() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kGenerateBrokerReportRequest) {
if (GetArena() == nullptr) {
delete _impl_.payload_.generate_broker_report_request_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::release_generate_broker_report_request() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
if (payload_case() == kGenerateBrokerReportRequest) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_broker_report_request_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.generate_broker_report_request_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& BrokerReportRequest::_internal_generate_broker_report_request() const {
return payload_case() == kGenerateBrokerReportRequest ? *_impl_.payload_.generate_broker_report_request_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GenerateBrokerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest& BrokerReportRequest::generate_broker_report_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
return _internal_generate_broker_report_request();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::unsafe_arena_release_generate_broker_report_request() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
if (payload_case() == kGenerateBrokerReportRequest) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_broker_report_request_;
_impl_.payload_.generate_broker_report_request_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void BrokerReportRequest::unsafe_arena_set_allocated_generate_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_generate_broker_report_request();
_impl_.payload_.generate_broker_report_request_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::_internal_mutable_generate_broker_report_request() {
if (payload_case() != kGenerateBrokerReportRequest) {
clear_payload();
set_has_generate_broker_report_request();
_impl_.payload_.generate_broker_report_request_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest>(GetArena());
}
return _impl_.payload_.generate_broker_report_request_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* BrokerReportRequest::mutable_generate_broker_report_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportRequest* _msg = _internal_mutable_generate_broker_report_request();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest get_broker_report_request = 2;
inline bool BrokerReportRequest::has_get_broker_report_request() const {
return payload_case() == kGetBrokerReportRequest;
}
inline bool BrokerReportRequest::_internal_has_get_broker_report_request() const {
return payload_case() == kGetBrokerReportRequest;
}
inline void BrokerReportRequest::set_has_get_broker_report_request() {
_impl_._oneof_case_[0] = kGetBrokerReportRequest;
}
inline void BrokerReportRequest::clear_get_broker_report_request() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kGetBrokerReportRequest) {
if (GetArena() == nullptr) {
delete _impl_.payload_.get_broker_report_request_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::release_get_broker_report_request() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
if (payload_case() == kGetBrokerReportRequest) {
clear_has_payload();
auto* temp = _impl_.payload_.get_broker_report_request_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.get_broker_report_request_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& BrokerReportRequest::_internal_get_broker_report_request() const {
return payload_case() == kGetBrokerReportRequest ? *_impl_.payload_.get_broker_report_request_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GetBrokerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest& BrokerReportRequest::get_broker_report_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
return _internal_get_broker_report_request();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::unsafe_arena_release_get_broker_report_request() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
if (payload_case() == kGetBrokerReportRequest) {
clear_has_payload();
auto* temp = _impl_.payload_.get_broker_report_request_;
_impl_.payload_.get_broker_report_request_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void BrokerReportRequest::unsafe_arena_set_allocated_get_broker_report_request(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_get_broker_report_request();
_impl_.payload_.get_broker_report_request_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::_internal_mutable_get_broker_report_request() {
if (payload_case() != kGetBrokerReportRequest) {
clear_payload();
set_has_get_broker_report_request();
_impl_.payload_.get_broker_report_request_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest>(GetArena());
}
return _impl_.payload_.get_broker_report_request_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* BrokerReportRequest::mutable_get_broker_report_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportRequest* _msg = _internal_mutable_get_broker_report_request();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request)
return _msg;
}

inline bool BrokerReportRequest::has_payload() const {
return payload_case() != PAYLOAD_NOT_SET;
}
inline void BrokerReportRequest::clear_has_payload() {
_impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline BrokerReportRequest::PayloadCase BrokerReportRequest::payload_case() const {
return BrokerReportRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BrokerReportResponse

// .tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse generate_broker_report_response = 1;
inline bool BrokerReportResponse::has_generate_broker_report_response() const {
return payload_case() == kGenerateBrokerReportResponse;
}
inline bool BrokerReportResponse::_internal_has_generate_broker_report_response() const {
return payload_case() == kGenerateBrokerReportResponse;
}
inline void BrokerReportResponse::set_has_generate_broker_report_response() {
_impl_._oneof_case_[0] = kGenerateBrokerReportResponse;
}
inline void BrokerReportResponse::clear_generate_broker_report_response() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kGenerateBrokerReportResponse) {
if (GetArena() == nullptr) {
delete _impl_.payload_.generate_broker_report_response_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::release_generate_broker_report_response() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
if (payload_case() == kGenerateBrokerReportResponse) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_broker_report_response_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.generate_broker_report_response_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& BrokerReportResponse::_internal_generate_broker_report_response() const {
return payload_case() == kGenerateBrokerReportResponse ? *_impl_.payload_.generate_broker_report_response_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GenerateBrokerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse& BrokerReportResponse::generate_broker_report_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
return _internal_generate_broker_report_response();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::unsafe_arena_release_generate_broker_report_response() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
if (payload_case() == kGenerateBrokerReportResponse) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_broker_report_response_;
_impl_.payload_.generate_broker_report_response_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void BrokerReportResponse::unsafe_arena_set_allocated_generate_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_generate_broker_report_response();
_impl_.payload_.generate_broker_report_response_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::_internal_mutable_generate_broker_report_response() {
if (payload_case() != kGenerateBrokerReportResponse) {
clear_payload();
set_has_generate_broker_report_response();
_impl_.payload_.generate_broker_report_response_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse>(GetArena());
}
return _impl_.payload_.generate_broker_report_response_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* BrokerReportResponse::mutable_generate_broker_report_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GenerateBrokerReportResponse* _msg = _internal_mutable_generate_broker_report_response();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse get_broker_report_response = 2;
inline bool BrokerReportResponse::has_get_broker_report_response() const {
return payload_case() == kGetBrokerReportResponse;
}
inline bool BrokerReportResponse::_internal_has_get_broker_report_response() const {
return payload_case() == kGetBrokerReportResponse;
}
inline void BrokerReportResponse::set_has_get_broker_report_response() {
_impl_._oneof_case_[0] = kGetBrokerReportResponse;
}
inline void BrokerReportResponse::clear_get_broker_report_response() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kGetBrokerReportResponse) {
if (GetArena() == nullptr) {
delete _impl_.payload_.get_broker_report_response_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::release_get_broker_report_response() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
if (payload_case() == kGetBrokerReportResponse) {
clear_has_payload();
auto* temp = _impl_.payload_.get_broker_report_response_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.get_broker_report_response_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& BrokerReportResponse::_internal_get_broker_report_response() const {
return payload_case() == kGetBrokerReportResponse ? *_impl_.payload_.get_broker_report_response_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GetBrokerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse& BrokerReportResponse::get_broker_report_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
return _internal_get_broker_report_response();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::unsafe_arena_release_get_broker_report_response() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
if (payload_case() == kGetBrokerReportResponse) {
clear_has_payload();
auto* temp = _impl_.payload_.get_broker_report_response_;
_impl_.payload_.get_broker_report_response_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void BrokerReportResponse::unsafe_arena_set_allocated_get_broker_report_response(::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_get_broker_report_response();
_impl_.payload_.get_broker_report_response_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::_internal_mutable_get_broker_report_response() {
if (payload_case() != kGetBrokerReportResponse) {
clear_payload();
set_has_get_broker_report_response();
_impl_.payload_.get_broker_report_response_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse>(GetArena());
}
return _impl_.payload_.get_broker_report_response_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* BrokerReportResponse::mutable_get_broker_report_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GetBrokerReportResponse* _msg = _internal_mutable_get_broker_report_response();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response)
return _msg;
}

inline bool BrokerReportResponse::has_payload() const {
return payload_case() != PAYLOAD_NOT_SET;
}
inline void BrokerReportResponse::clear_has_payload() {
_impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline BrokerReportResponse::PayloadCase BrokerReportResponse::payload_case() const {
return BrokerReportResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GenerateBrokerReportRequest

// string account_id = 1;
inline void GenerateBrokerReportRequest::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& GenerateBrokerReportRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateBrokerReportRequest::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
}
inline std::string* GenerateBrokerReportRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
return _s;
}
inline const std::string& GenerateBrokerReportRequest::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void GenerateBrokerReportRequest::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* GenerateBrokerReportRequest::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* GenerateBrokerReportRequest::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
return _impl_.account_id_.Release();
}
inline void GenerateBrokerReportRequest::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.account_id)
}

// .google.protobuf.Timestamp from = 2;
inline bool GenerateBrokerReportRequest::has_from() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& GenerateBrokerReportRequest::_internal_from() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.from_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GenerateBrokerReportRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.from)
return _internal_from();
}
inline void GenerateBrokerReportRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.from)
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.from_;
_impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::unsafe_arena_release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.from)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.from_;
_impl_.from_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::_internal_mutable_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.from_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_from();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.from)
return _msg;
}
inline void GenerateBrokerReportRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.from)
}

// .google.protobuf.Timestamp to = 3;
inline bool GenerateBrokerReportRequest::has_to() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& GenerateBrokerReportRequest::_internal_to() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.to_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GenerateBrokerReportRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.to)
return _internal_to();
}
inline void GenerateBrokerReportRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.to)
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* released = _impl_.to_;
_impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::unsafe_arena_release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.to)

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* temp = _impl_.to_;
_impl_.to_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::_internal_mutable_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.to_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GenerateBrokerReportRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::google::protobuf::Timestamp* _msg = _internal_mutable_to();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.to)
return _msg;
}
inline void GenerateBrokerReportRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.to)
}

// -------------------------------------------------------------------

// GenerateBrokerReportResponse

// string task_id = 1;
inline void GenerateBrokerReportResponse::clear_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.ClearToEmpty();
}
inline const std::string& GenerateBrokerReportResponse::task_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateBrokerReportResponse::set_task_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
}
inline std::string* GenerateBrokerReportResponse::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_task_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
return _s;
}
inline const std::string& GenerateBrokerReportResponse::_internal_task_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.task_id_.Get();
}
inline void GenerateBrokerReportResponse::_internal_set_task_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(value, GetArena());
}
inline std::string* GenerateBrokerReportResponse::_internal_mutable_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* GenerateBrokerReportResponse::release_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
return _impl_.task_id_.Release();
}
inline void GenerateBrokerReportResponse::set_allocated_task_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.task_id_.IsDefault()) {
_impl_.task_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse.task_id)
}

// -------------------------------------------------------------------

// GetBrokerReportRequest

// string task_id = 1;
inline void GetBrokerReportRequest::clear_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.ClearToEmpty();
}
inline const std::string& GetBrokerReportRequest::task_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest.task_id)
return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBrokerReportRequest::set_task_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest.task_id)
}
inline std::string* GetBrokerReportRequest::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_task_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest.task_id)
return _s;
}
inline const std::string& GetBrokerReportRequest::_internal_task_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.task_id_.Get();
}
inline void GetBrokerReportRequest::_internal_set_task_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(value, GetArena());
}
inline std::string* GetBrokerReportRequest::_internal_mutable_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* GetBrokerReportRequest::release_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest.task_id)
return _impl_.task_id_.Release();
}
inline void GetBrokerReportRequest::set_allocated_task_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.task_id_.IsDefault()) {
_impl_.task_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest.task_id)
}

// int32 page = 2;
inline void GetBrokerReportRequest::clear_page() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = 0;
}
inline ::int32_t GetBrokerReportRequest::page() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest.page)
return _internal_page();
}
inline void GetBrokerReportRequest::set_page(::int32_t value) {
_internal_set_page(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest.page)
}
inline ::int32_t GetBrokerReportRequest::_internal_page() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.page_;
}
inline void GetBrokerReportRequest::_internal_set_page(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = value;
}

// -------------------------------------------------------------------

// GetBrokerReportResponse

// repeated .tinkoff.public.invest.api.contract.v1.BrokerReport broker_report = 1;
inline int GetBrokerReportResponse::_internal_broker_report_size() const {
return _internal_broker_report().size();
}
inline int GetBrokerReportResponse::broker_report_size() const {
return _internal_broker_report_size();
}
inline void GetBrokerReportResponse::clear_broker_report() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_report_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::BrokerReport* GetBrokerReportResponse::mutable_broker_report(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
return _internal_mutable_broker_report()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>* GetBrokerReportResponse::mutable_broker_report()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_broker_report();
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrokerReport& GetBrokerReportResponse::broker_report(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
return _internal_broker_report().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::BrokerReport* GetBrokerReportResponse::add_broker_report() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::BrokerReport* _add = _internal_mutable_broker_report()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>& GetBrokerReportResponse::broker_report() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.broker_report)
return _internal_broker_report();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>&
GetBrokerReportResponse::_internal_broker_report() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.broker_report_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::BrokerReport>*
GetBrokerReportResponse::_internal_mutable_broker_report() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.broker_report_;
}

// int32 itemsCount = 2;
inline void GetBrokerReportResponse::clear_itemscount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.itemscount_ = 0;
}
inline ::int32_t GetBrokerReportResponse::itemscount() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.itemsCount)
return _internal_itemscount();
}
inline void GetBrokerReportResponse::set_itemscount(::int32_t value) {
_internal_set_itemscount(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.itemsCount)
}
inline ::int32_t GetBrokerReportResponse::_internal_itemscount() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.itemscount_;
}
inline void GetBrokerReportResponse::_internal_set_itemscount(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.itemscount_ = value;
}

// int32 pagesCount = 3;
inline void GetBrokerReportResponse::clear_pagescount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.pagescount_ = 0;
}
inline ::int32_t GetBrokerReportResponse::pagescount() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.pagesCount)
return _internal_pagescount();
}
inline void GetBrokerReportResponse::set_pagescount(::int32_t value) {
_internal_set_pagescount(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.pagesCount)
}
inline ::int32_t GetBrokerReportResponse::_internal_pagescount() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.pagescount_;
}
inline void GetBrokerReportResponse::_internal_set_pagescount(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.pagescount_ = value;
}

// int32 page = 4;
inline void GetBrokerReportResponse::clear_page() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = 0;
}
inline ::int32_t GetBrokerReportResponse::page() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.page)
return _internal_page();
}
inline void GetBrokerReportResponse::set_page(::int32_t value) {
_internal_set_page(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.page)
}
inline ::int32_t GetBrokerReportResponse::_internal_page() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.page_;
}
inline void GetBrokerReportResponse::_internal_set_page(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = value;
}

// -------------------------------------------------------------------

// BrokerReport

// string trade_id = 1;
inline void BrokerReport::clear_trade_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.ClearToEmpty();
}
inline const std::string& BrokerReport::trade_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_id)
return _internal_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_trade_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_id)
}
inline std::string* BrokerReport::mutable_trade_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_trade_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_id)
return _s;
}
inline const std::string& BrokerReport::_internal_trade_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.trade_id_.Get();
}
inline void BrokerReport::_internal_set_trade_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_trade_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.trade_id_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_trade_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_id)
return _impl_.trade_id_.Release();
}
inline void BrokerReport::set_allocated_trade_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trade_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.trade_id_.IsDefault()) {
_impl_.trade_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_id)
}

// string order_id = 2;
inline void BrokerReport::clear_order_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.order_id_.ClearToEmpty();
}
inline const std::string& BrokerReport::order_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.order_id)
return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_order_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.order_id)
}
inline std::string* BrokerReport::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_order_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.order_id)
return _s;
}
inline const std::string& BrokerReport::_internal_order_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.order_id_.Get();
}
inline void BrokerReport::_internal_set_order_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.order_id_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_order_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_order_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.order_id)
return _impl_.order_id_.Release();
}
inline void BrokerReport::set_allocated_order_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.order_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.order_id_.IsDefault()) {
_impl_.order_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.order_id)
}

// string figi = 3;
inline void BrokerReport::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& BrokerReport::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.figi)
}
inline std::string* BrokerReport::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.figi)
return _s;
}
inline const std::string& BrokerReport::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void BrokerReport::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.figi)
return _impl_.figi_.Release();
}
inline void BrokerReport::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.figi)
}

// string execute_sign = 4;
inline void BrokerReport::clear_execute_sign() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.execute_sign_.ClearToEmpty();
}
inline const std::string& BrokerReport::execute_sign() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.execute_sign)
return _internal_execute_sign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_execute_sign(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.execute_sign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.execute_sign)
}
inline std::string* BrokerReport::mutable_execute_sign() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_execute_sign();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.execute_sign)
return _s;
}
inline const std::string& BrokerReport::_internal_execute_sign() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.execute_sign_.Get();
}
inline void BrokerReport::_internal_set_execute_sign(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.execute_sign_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_execute_sign() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.execute_sign_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_execute_sign() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.execute_sign)
return _impl_.execute_sign_.Release();
}
inline void BrokerReport::set_allocated_execute_sign(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.execute_sign_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.execute_sign_.IsDefault()) {
_impl_.execute_sign_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.execute_sign)
}

// .google.protobuf.Timestamp trade_datetime = 5;
inline bool BrokerReport::has_trade_datetime() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.trade_datetime_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& BrokerReport::_internal_trade_datetime() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.trade_datetime_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& BrokerReport::trade_datetime() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_datetime)
return _internal_trade_datetime();
}
inline void BrokerReport::unsafe_arena_set_allocated_trade_datetime(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trade_datetime_);
}
_impl_.trade_datetime_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_datetime)
}
inline ::google::protobuf::Timestamp* BrokerReport::release_trade_datetime() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.trade_datetime_;
_impl_.trade_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* BrokerReport::unsafe_arena_release_trade_datetime() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_datetime)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.trade_datetime_;
_impl_.trade_datetime_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* BrokerReport::_internal_mutable_trade_datetime() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.trade_datetime_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.trade_datetime_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.trade_datetime_;
}
inline ::google::protobuf::Timestamp* BrokerReport::mutable_trade_datetime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_trade_datetime();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_datetime)
return _msg;
}
inline void BrokerReport::set_allocated_trade_datetime(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trade_datetime_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.trade_datetime_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.trade_datetime)
}

// string exchange = 6;
inline void BrokerReport::clear_exchange() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.exchange_.ClearToEmpty();
}
inline const std::string& BrokerReport::exchange() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange)
return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_exchange(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange)
}
inline std::string* BrokerReport::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_exchange();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange)
return _s;
}
inline const std::string& BrokerReport::_internal_exchange() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.exchange_.Get();
}
inline void BrokerReport::_internal_set_exchange(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.exchange_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_exchange() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_exchange() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange)
return _impl_.exchange_.Release();
}
inline void BrokerReport::set_allocated_exchange(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.exchange_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.exchange_.IsDefault()) {
_impl_.exchange_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange)
}

// string class_code = 7;
inline void BrokerReport::clear_class_code() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.class_code_.ClearToEmpty();
}
inline const std::string& BrokerReport::class_code() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.class_code)
return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_class_code(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.class_code)
}
inline std::string* BrokerReport::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_class_code();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.class_code)
return _s;
}
inline const std::string& BrokerReport::_internal_class_code() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.class_code_.Get();
}
inline void BrokerReport::_internal_set_class_code(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.class_code_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_class_code() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_class_code() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.class_code)
return _impl_.class_code_.Release();
}
inline void BrokerReport::set_allocated_class_code(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.class_code_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.class_code_.IsDefault()) {
_impl_.class_code_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.class_code)
}

// string direction = 8;
inline void BrokerReport::clear_direction() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.direction_.ClearToEmpty();
}
inline const std::string& BrokerReport::direction() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.direction)
return _internal_direction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_direction(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.direction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.direction)
}
inline std::string* BrokerReport::mutable_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_direction();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.direction)
return _s;
}
inline const std::string& BrokerReport::_internal_direction() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.direction_.Get();
}
inline void BrokerReport::_internal_set_direction(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.direction_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_direction() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.direction_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_direction() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.direction)
return _impl_.direction_.Release();
}
inline void BrokerReport::set_allocated_direction(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.direction_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.direction_.IsDefault()) {
_impl_.direction_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.direction)
}

// string name = 9;
inline void BrokerReport::clear_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.ClearToEmpty();
}
inline const std::string& BrokerReport::name() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.name)
return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_name(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.name)
}
inline std::string* BrokerReport::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_name();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.name)
return _s;
}
inline const std::string& BrokerReport::_internal_name() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.name_.Get();
}
inline void BrokerReport::_internal_set_name(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.name_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.name)
return _impl_.name_.Release();
}
inline void BrokerReport::set_allocated_name(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.name_.IsDefault()) {
_impl_.name_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.name)
}

// string ticker = 10;
inline void BrokerReport::clear_ticker() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.ticker_.ClearToEmpty();
}
inline const std::string& BrokerReport::ticker() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.ticker)
return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_ticker(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.ticker)
}
inline std::string* BrokerReport::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_ticker();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.ticker)
return _s;
}
inline const std::string& BrokerReport::_internal_ticker() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.ticker_.Get();
}
inline void BrokerReport::_internal_set_ticker(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.ticker_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_ticker() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_ticker() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.ticker)
return _impl_.ticker_.Release();
}
inline void BrokerReport::set_allocated_ticker(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.ticker_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.ticker_.IsDefault()) {
_impl_.ticker_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.ticker)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 11;
inline bool BrokerReport::has_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.price)
return _internal_price();
}
inline void BrokerReport::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.price_;
_impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.price)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
_impl_.price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.price)
return _msg;
}
inline void BrokerReport::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.price)
}

// int64 quantity = 12;
inline void BrokerReport::clear_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t BrokerReport::quantity() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.quantity)
return _internal_quantity();
}
inline void BrokerReport::set_quantity(::int64_t value) {
_internal_set_quantity(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.quantity)
}
inline ::int64_t BrokerReport::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_;
}
inline void BrokerReport::_internal_set_quantity(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = value;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue order_amount = 13;
inline bool BrokerReport::has_order_amount() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.order_amount_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_order_amount() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.order_amount_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::order_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.order_amount)
return _internal_order_amount();
}
inline void BrokerReport::unsafe_arena_set_allocated_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.order_amount_);
}
_impl_.order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_order_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.order_amount_;
_impl_.order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_order_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.order_amount)

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.order_amount_;
_impl_.order_amount_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_order_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.order_amount_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_order_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_order_amount();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.order_amount)
return _msg;
}
inline void BrokerReport::set_allocated_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.order_amount_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.order_amount)
}

// .tinkoff.public.invest.api.contract.v1.Quotation aci_value = 14;
inline bool BrokerReport::has_aci_value() const {
bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
PROTOBUF_ASSUME(!value || _impl_.aci_value_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::_internal_aci_value() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.aci_value_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::aci_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.aci_value)
return _internal_aci_value();
}
inline void BrokerReport::unsafe_arena_set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aci_value_);
}
_impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.aci_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::release_aci_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.aci_value_;
_impl_.aci_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::unsafe_arena_release_aci_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.aci_value)

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.aci_value_;
_impl_.aci_value_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::_internal_mutable_aci_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.aci_value_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.aci_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::mutable_aci_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_aci_value();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.aci_value)
return _msg;
}
inline void BrokerReport::set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aci_value_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}

_impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.aci_value)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue total_order_amount = 15;
inline bool BrokerReport::has_total_order_amount() const {
bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
PROTOBUF_ASSUME(!value || _impl_.total_order_amount_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_total_order_amount() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.total_order_amount_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::total_order_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.total_order_amount)
return _internal_total_order_amount();
}
inline void BrokerReport::unsafe_arena_set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_order_amount_);
}
_impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.total_order_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_total_order_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.total_order_amount_;
_impl_.total_order_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_total_order_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.total_order_amount)

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.total_order_amount_;
_impl_.total_order_amount_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_total_order_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.total_order_amount_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.total_order_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_total_order_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_total_order_amount();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.total_order_amount)
return _msg;
}
inline void BrokerReport::set_allocated_total_order_amount(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_order_amount_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}

_impl_.total_order_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.total_order_amount)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue broker_commission = 16;
inline bool BrokerReport::has_broker_commission() const {
bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
PROTOBUF_ASSUME(!value || _impl_.broker_commission_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_broker_commission() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.broker_commission_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::broker_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_commission)
return _internal_broker_commission();
}
inline void BrokerReport::unsafe_arena_set_allocated_broker_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.broker_commission_);
}
_impl_.broker_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_broker_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.broker_commission_;
_impl_.broker_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_broker_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_commission)

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.broker_commission_;
_impl_.broker_commission_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_broker_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.broker_commission_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.broker_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.broker_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_broker_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_broker_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_commission)
return _msg;
}
inline void BrokerReport::set_allocated_broker_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.broker_commission_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}

_impl_.broker_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_commission)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue exchange_commission = 17;
inline bool BrokerReport::has_exchange_commission() const {
bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
PROTOBUF_ASSUME(!value || _impl_.exchange_commission_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_exchange_commission() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.exchange_commission_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::exchange_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_commission)
return _internal_exchange_commission();
}
inline void BrokerReport::unsafe_arena_set_allocated_exchange_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exchange_commission_);
}
_impl_.exchange_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_exchange_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.exchange_commission_;
_impl_.exchange_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_exchange_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_commission)

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.exchange_commission_;
_impl_.exchange_commission_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_exchange_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.exchange_commission_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.exchange_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.exchange_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_exchange_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_exchange_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_commission)
return _msg;
}
inline void BrokerReport::set_allocated_exchange_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exchange_commission_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}

_impl_.exchange_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_commission)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue exchange_clearing_commission = 18;
inline bool BrokerReport::has_exchange_clearing_commission() const {
bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
PROTOBUF_ASSUME(!value || _impl_.exchange_clearing_commission_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::_internal_exchange_clearing_commission() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.exchange_clearing_commission_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& BrokerReport::exchange_clearing_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
return _internal_exchange_clearing_commission();
}
inline void BrokerReport::unsafe_arena_set_allocated_exchange_clearing_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exchange_clearing_commission_);
}
_impl_.exchange_clearing_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::release_exchange_clearing_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000080u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.exchange_clearing_commission_;
_impl_.exchange_clearing_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::unsafe_arena_release_exchange_clearing_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)

_impl_._has_bits_[0] &= ~0x00000080u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.exchange_clearing_commission_;
_impl_.exchange_clearing_commission_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::_internal_mutable_exchange_clearing_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.exchange_clearing_commission_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.exchange_clearing_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.exchange_clearing_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* BrokerReport::mutable_exchange_clearing_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000080u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_exchange_clearing_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
return _msg;
}
inline void BrokerReport::set_allocated_exchange_clearing_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exchange_clearing_commission_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}

_impl_.exchange_clearing_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_clearing_commission)
}

// .tinkoff.public.invest.api.contract.v1.Quotation repo_rate = 19;
inline bool BrokerReport::has_repo_rate() const {
bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
PROTOBUF_ASSUME(!value || _impl_.repo_rate_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::_internal_repo_rate() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.repo_rate_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& BrokerReport::repo_rate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.repo_rate)
return _internal_repo_rate();
}
inline void BrokerReport::unsafe_arena_set_allocated_repo_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.repo_rate_);
}
_impl_.repo_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.repo_rate)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::release_repo_rate() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.repo_rate_;
_impl_.repo_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::unsafe_arena_release_repo_rate() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.repo_rate)

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.repo_rate_;
_impl_.repo_rate_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::_internal_mutable_repo_rate() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.repo_rate_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.repo_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.repo_rate_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* BrokerReport::mutable_repo_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000100u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_repo_rate();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.repo_rate)
return _msg;
}
inline void BrokerReport::set_allocated_repo_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.repo_rate_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}

_impl_.repo_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.repo_rate)
}

// string party = 20;
inline void BrokerReport::clear_party() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.party_.ClearToEmpty();
}
inline const std::string& BrokerReport::party() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.party)
return _internal_party();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_party(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.party_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.party)
}
inline std::string* BrokerReport::mutable_party() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_party();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.party)
return _s;
}
inline const std::string& BrokerReport::_internal_party() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.party_.Get();
}
inline void BrokerReport::_internal_set_party(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.party_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_party() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.party_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_party() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.party)
return _impl_.party_.Release();
}
inline void BrokerReport::set_allocated_party(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.party_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.party_.IsDefault()) {
_impl_.party_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.party)
}

// .google.protobuf.Timestamp clear_value_date = 21;
inline bool BrokerReport::has_clear_value_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
PROTOBUF_ASSUME(!value || _impl_.clear_value_date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& BrokerReport::_internal_clear_value_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.clear_value_date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& BrokerReport::clear_value_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.clear_value_date)
return _internal_clear_value_date();
}
inline void BrokerReport::unsafe_arena_set_allocated_clear_value_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clear_value_date_);
}
_impl_.clear_value_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000200u;
} else {
_impl_._has_bits_[0] &= ~0x00000200u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.clear_value_date)
}
inline ::google::protobuf::Timestamp* BrokerReport::release_clear_value_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000200u;
::google::protobuf::Timestamp* released = _impl_.clear_value_date_;
_impl_.clear_value_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* BrokerReport::unsafe_arena_release_clear_value_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.clear_value_date)

_impl_._has_bits_[0] &= ~0x00000200u;
::google::protobuf::Timestamp* temp = _impl_.clear_value_date_;
_impl_.clear_value_date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* BrokerReport::_internal_mutable_clear_value_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.clear_value_date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.clear_value_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.clear_value_date_;
}
inline ::google::protobuf::Timestamp* BrokerReport::mutable_clear_value_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000200u;
::google::protobuf::Timestamp* _msg = _internal_mutable_clear_value_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.clear_value_date)
return _msg;
}
inline void BrokerReport::set_allocated_clear_value_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clear_value_date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000200u;
} else {
_impl_._has_bits_[0] &= ~0x00000200u;
}

_impl_.clear_value_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.clear_value_date)
}

// .google.protobuf.Timestamp sec_value_date = 22;
inline bool BrokerReport::has_sec_value_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
PROTOBUF_ASSUME(!value || _impl_.sec_value_date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& BrokerReport::_internal_sec_value_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.sec_value_date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& BrokerReport::sec_value_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.sec_value_date)
return _internal_sec_value_date();
}
inline void BrokerReport::unsafe_arena_set_allocated_sec_value_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sec_value_date_);
}
_impl_.sec_value_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000400u;
} else {
_impl_._has_bits_[0] &= ~0x00000400u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.sec_value_date)
}
inline ::google::protobuf::Timestamp* BrokerReport::release_sec_value_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000400u;
::google::protobuf::Timestamp* released = _impl_.sec_value_date_;
_impl_.sec_value_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* BrokerReport::unsafe_arena_release_sec_value_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.sec_value_date)

_impl_._has_bits_[0] &= ~0x00000400u;
::google::protobuf::Timestamp* temp = _impl_.sec_value_date_;
_impl_.sec_value_date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* BrokerReport::_internal_mutable_sec_value_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.sec_value_date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.sec_value_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.sec_value_date_;
}
inline ::google::protobuf::Timestamp* BrokerReport::mutable_sec_value_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000400u;
::google::protobuf::Timestamp* _msg = _internal_mutable_sec_value_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.sec_value_date)
return _msg;
}
inline void BrokerReport::set_allocated_sec_value_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sec_value_date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000400u;
} else {
_impl_._has_bits_[0] &= ~0x00000400u;
}

_impl_.sec_value_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.sec_value_date)
}

// string broker_status = 23;
inline void BrokerReport::clear_broker_status() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_status_.ClearToEmpty();
}
inline const std::string& BrokerReport::broker_status() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_status)
return _internal_broker_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_broker_status(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_status)
}
inline std::string* BrokerReport::mutable_broker_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_broker_status();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_status)
return _s;
}
inline const std::string& BrokerReport::_internal_broker_status() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.broker_status_.Get();
}
inline void BrokerReport::_internal_set_broker_status(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_status_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_broker_status() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.broker_status_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_broker_status() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_status)
return _impl_.broker_status_.Release();
}
inline void BrokerReport::set_allocated_broker_status(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_status_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.broker_status_.IsDefault()) {
_impl_.broker_status_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.broker_status)
}

// string separate_agreement_type = 24;
inline void BrokerReport::clear_separate_agreement_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_type_.ClearToEmpty();
}
inline const std::string& BrokerReport::separate_agreement_type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_type)
return _internal_separate_agreement_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_separate_agreement_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_type)
}
inline std::string* BrokerReport::mutable_separate_agreement_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_separate_agreement_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_type)
return _s;
}
inline const std::string& BrokerReport::_internal_separate_agreement_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.separate_agreement_type_.Get();
}
inline void BrokerReport::_internal_set_separate_agreement_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_type_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_separate_agreement_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.separate_agreement_type_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_separate_agreement_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_type)
return _impl_.separate_agreement_type_.Release();
}
inline void BrokerReport::set_allocated_separate_agreement_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.separate_agreement_type_.IsDefault()) {
_impl_.separate_agreement_type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_type)
}

// string separate_agreement_number = 25;
inline void BrokerReport::clear_separate_agreement_number() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_number_.ClearToEmpty();
}
inline const std::string& BrokerReport::separate_agreement_number() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_number)
return _internal_separate_agreement_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_separate_agreement_number(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_number)
}
inline std::string* BrokerReport::mutable_separate_agreement_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_separate_agreement_number();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_number)
return _s;
}
inline const std::string& BrokerReport::_internal_separate_agreement_number() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.separate_agreement_number_.Get();
}
inline void BrokerReport::_internal_set_separate_agreement_number(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_number_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_separate_agreement_number() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.separate_agreement_number_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_separate_agreement_number() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_number)
return _impl_.separate_agreement_number_.Release();
}
inline void BrokerReport::set_allocated_separate_agreement_number(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_number_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.separate_agreement_number_.IsDefault()) {
_impl_.separate_agreement_number_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_number)
}

// string separate_agreement_date = 26;
inline void BrokerReport::clear_separate_agreement_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_date_.ClearToEmpty();
}
inline const std::string& BrokerReport::separate_agreement_date() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_date)
return _internal_separate_agreement_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_separate_agreement_date(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_date)
}
inline std::string* BrokerReport::mutable_separate_agreement_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_separate_agreement_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_date)
return _s;
}
inline const std::string& BrokerReport::_internal_separate_agreement_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.separate_agreement_date_.Get();
}
inline void BrokerReport::_internal_set_separate_agreement_date(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_date_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_separate_agreement_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.separate_agreement_date_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_separate_agreement_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_date)
return _impl_.separate_agreement_date_.Release();
}
inline void BrokerReport::set_allocated_separate_agreement_date(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.separate_agreement_date_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.separate_agreement_date_.IsDefault()) {
_impl_.separate_agreement_date_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.separate_agreement_date)
}

// string delivery_type = 27;
inline void BrokerReport::clear_delivery_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.delivery_type_.ClearToEmpty();
}
inline const std::string& BrokerReport::delivery_type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.BrokerReport.delivery_type)
return _internal_delivery_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokerReport::set_delivery_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.delivery_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.BrokerReport.delivery_type)
}
inline std::string* BrokerReport::mutable_delivery_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_delivery_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.BrokerReport.delivery_type)
return _s;
}
inline const std::string& BrokerReport::_internal_delivery_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.delivery_type_.Get();
}
inline void BrokerReport::_internal_set_delivery_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.delivery_type_.Set(value, GetArena());
}
inline std::string* BrokerReport::_internal_mutable_delivery_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.delivery_type_.Mutable( GetArena());
}
inline std::string* BrokerReport::release_delivery_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.BrokerReport.delivery_type)
return _impl_.delivery_type_.Release();
}
inline void BrokerReport::set_allocated_delivery_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.delivery_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.delivery_type_.IsDefault()) {
_impl_.delivery_type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.BrokerReport.delivery_type)
}

// -------------------------------------------------------------------

// GetDividendsForeignIssuerRequest

// .tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest generate_div_foreign_issuer_report = 1;
inline bool GetDividendsForeignIssuerRequest::has_generate_div_foreign_issuer_report() const {
return payload_case() == kGenerateDivForeignIssuerReport;
}
inline bool GetDividendsForeignIssuerRequest::_internal_has_generate_div_foreign_issuer_report() const {
return payload_case() == kGenerateDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerRequest::set_has_generate_div_foreign_issuer_report() {
_impl_._oneof_case_[0] = kGenerateDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerRequest::clear_generate_div_foreign_issuer_report() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kGenerateDivForeignIssuerReport) {
if (GetArena() == nullptr) {
delete _impl_.payload_.generate_div_foreign_issuer_report_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::release_generate_div_foreign_issuer_report() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
if (payload_case() == kGenerateDivForeignIssuerReport) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_div_foreign_issuer_report_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.generate_div_foreign_issuer_report_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::_internal_generate_div_foreign_issuer_report() const {
return payload_case() == kGenerateDivForeignIssuerReport ? *_impl_.payload_.generate_div_foreign_issuer_report_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GenerateDividendsForeignIssuerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::generate_div_foreign_issuer_report() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
return _internal_generate_div_foreign_issuer_report();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::unsafe_arena_release_generate_div_foreign_issuer_report() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
if (payload_case() == kGenerateDivForeignIssuerReport) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_div_foreign_issuer_report_;
_impl_.payload_.generate_div_foreign_issuer_report_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void GetDividendsForeignIssuerRequest::unsafe_arena_set_allocated_generate_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_generate_div_foreign_issuer_report();
_impl_.payload_.generate_div_foreign_issuer_report_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::_internal_mutable_generate_div_foreign_issuer_report() {
if (payload_case() != kGenerateDivForeignIssuerReport) {
clear_payload();
set_has_generate_div_foreign_issuer_report();
_impl_.payload_.generate_div_foreign_issuer_report_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest>(GetArena());
}
return _impl_.payload_.generate_div_foreign_issuer_report_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::mutable_generate_div_foreign_issuer_report() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportRequest* _msg = _internal_mutable_generate_div_foreign_issuer_report();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest get_div_foreign_issuer_report = 2;
inline bool GetDividendsForeignIssuerRequest::has_get_div_foreign_issuer_report() const {
return payload_case() == kGetDivForeignIssuerReport;
}
inline bool GetDividendsForeignIssuerRequest::_internal_has_get_div_foreign_issuer_report() const {
return payload_case() == kGetDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerRequest::set_has_get_div_foreign_issuer_report() {
_impl_._oneof_case_[0] = kGetDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerRequest::clear_get_div_foreign_issuer_report() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kGetDivForeignIssuerReport) {
if (GetArena() == nullptr) {
delete _impl_.payload_.get_div_foreign_issuer_report_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::release_get_div_foreign_issuer_report() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
if (payload_case() == kGetDivForeignIssuerReport) {
clear_has_payload();
auto* temp = _impl_.payload_.get_div_foreign_issuer_report_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.get_div_foreign_issuer_report_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::_internal_get_div_foreign_issuer_report() const {
return payload_case() == kGetDivForeignIssuerReport ? *_impl_.payload_.get_div_foreign_issuer_report_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest&>(::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerReportRequest_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest& GetDividendsForeignIssuerRequest::get_div_foreign_issuer_report() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
return _internal_get_div_foreign_issuer_report();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::unsafe_arena_release_get_div_foreign_issuer_report() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
if (payload_case() == kGetDivForeignIssuerReport) {
clear_has_payload();
auto* temp = _impl_.payload_.get_div_foreign_issuer_report_;
_impl_.payload_.get_div_foreign_issuer_report_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void GetDividendsForeignIssuerRequest::unsafe_arena_set_allocated_get_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_get_div_foreign_issuer_report();
_impl_.payload_.get_div_foreign_issuer_report_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::_internal_mutable_get_div_foreign_issuer_report() {
if (payload_case() != kGetDivForeignIssuerReport) {
clear_payload();
set_has_get_div_foreign_issuer_report();
_impl_.payload_.get_div_foreign_issuer_report_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest>(GetArena());
}
return _impl_.payload_.get_div_foreign_issuer_report_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* GetDividendsForeignIssuerRequest::mutable_get_div_foreign_issuer_report() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportRequest* _msg = _internal_mutable_get_div_foreign_issuer_report();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report)
return _msg;
}

inline bool GetDividendsForeignIssuerRequest::has_payload() const {
return payload_case() != PAYLOAD_NOT_SET;
}
inline void GetDividendsForeignIssuerRequest::clear_has_payload() {
_impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline GetDividendsForeignIssuerRequest::PayloadCase GetDividendsForeignIssuerRequest::payload_case() const {
return GetDividendsForeignIssuerRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetDividendsForeignIssuerResponse

// .tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse generate_div_foreign_issuer_report_response = 1;
inline bool GetDividendsForeignIssuerResponse::has_generate_div_foreign_issuer_report_response() const {
return payload_case() == kGenerateDivForeignIssuerReportResponse;
}
inline bool GetDividendsForeignIssuerResponse::_internal_has_generate_div_foreign_issuer_report_response() const {
return payload_case() == kGenerateDivForeignIssuerReportResponse;
}
inline void GetDividendsForeignIssuerResponse::set_has_generate_div_foreign_issuer_report_response() {
_impl_._oneof_case_[0] = kGenerateDivForeignIssuerReportResponse;
}
inline void GetDividendsForeignIssuerResponse::clear_generate_div_foreign_issuer_report_response() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kGenerateDivForeignIssuerReportResponse) {
if (GetArena() == nullptr) {
delete _impl_.payload_.generate_div_foreign_issuer_report_response_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::release_generate_div_foreign_issuer_report_response() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
if (payload_case() == kGenerateDivForeignIssuerReportResponse) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_div_foreign_issuer_report_response_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.generate_div_foreign_issuer_report_response_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::_internal_generate_div_foreign_issuer_report_response() const {
return payload_case() == kGenerateDivForeignIssuerReportResponse ? *_impl_.payload_.generate_div_foreign_issuer_report_response_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GenerateDividendsForeignIssuerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::generate_div_foreign_issuer_report_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
return _internal_generate_div_foreign_issuer_report_response();
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::unsafe_arena_release_generate_div_foreign_issuer_report_response() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
if (payload_case() == kGenerateDivForeignIssuerReportResponse) {
clear_has_payload();
auto* temp = _impl_.payload_.generate_div_foreign_issuer_report_response_;
_impl_.payload_.generate_div_foreign_issuer_report_response_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void GetDividendsForeignIssuerResponse::unsafe_arena_set_allocated_generate_div_foreign_issuer_report_response(::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_generate_div_foreign_issuer_report_response();
_impl_.payload_.generate_div_foreign_issuer_report_response_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::_internal_mutable_generate_div_foreign_issuer_report_response() {
if (payload_case() != kGenerateDivForeignIssuerReportResponse) {
clear_payload();
set_has_generate_div_foreign_issuer_report_response();
_impl_.payload_.generate_div_foreign_issuer_report_response_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse>(GetArena());
}
return _impl_.payload_.generate_div_foreign_issuer_report_response_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::mutable_generate_div_foreign_issuer_report_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GenerateDividendsForeignIssuerReportResponse* _msg = _internal_mutable_generate_div_foreign_issuer_report_response();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse div_foreign_issuer_report = 2;
inline bool GetDividendsForeignIssuerResponse::has_div_foreign_issuer_report() const {
return payload_case() == kDivForeignIssuerReport;
}
inline bool GetDividendsForeignIssuerResponse::_internal_has_div_foreign_issuer_report() const {
return payload_case() == kDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerResponse::set_has_div_foreign_issuer_report() {
_impl_._oneof_case_[0] = kDivForeignIssuerReport;
}
inline void GetDividendsForeignIssuerResponse::clear_div_foreign_issuer_report() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kDivForeignIssuerReport) {
if (GetArena() == nullptr) {
delete _impl_.payload_.div_foreign_issuer_report_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::release_div_foreign_issuer_report() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
if (payload_case() == kDivForeignIssuerReport) {
clear_has_payload();
auto* temp = _impl_.payload_.div_foreign_issuer_report_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.div_foreign_issuer_report_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::_internal_div_foreign_issuer_report() const {
return payload_case() == kDivForeignIssuerReport ? *_impl_.payload_.div_foreign_issuer_report_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse&>(::tinkoff::public_::invest::api::contract::v1::_GetDividendsForeignIssuerReportResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse& GetDividendsForeignIssuerResponse::div_foreign_issuer_report() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
return _internal_div_foreign_issuer_report();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::unsafe_arena_release_div_foreign_issuer_report() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
if (payload_case() == kDivForeignIssuerReport) {
clear_has_payload();
auto* temp = _impl_.payload_.div_foreign_issuer_report_;
_impl_.payload_.div_foreign_issuer_report_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void GetDividendsForeignIssuerResponse::unsafe_arena_set_allocated_div_foreign_issuer_report(::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_div_foreign_issuer_report();
_impl_.payload_.div_foreign_issuer_report_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::_internal_mutable_div_foreign_issuer_report() {
if (payload_case() != kDivForeignIssuerReport) {
clear_payload();
set_has_div_foreign_issuer_report();
_impl_.payload_.div_foreign_issuer_report_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse>(GetArena());
}
return _impl_.payload_.div_foreign_issuer_report_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* GetDividendsForeignIssuerResponse::mutable_div_foreign_issuer_report() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::GetDividendsForeignIssuerReportResponse* _msg = _internal_mutable_div_foreign_issuer_report();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report)
return _msg;
}

inline bool GetDividendsForeignIssuerResponse::has_payload() const {
return payload_case() != PAYLOAD_NOT_SET;
}
inline void GetDividendsForeignIssuerResponse::clear_has_payload() {
_impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline GetDividendsForeignIssuerResponse::PayloadCase GetDividendsForeignIssuerResponse::payload_case() const {
return GetDividendsForeignIssuerResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GenerateDividendsForeignIssuerReportRequest

// string account_id = 1;
inline void GenerateDividendsForeignIssuerReportRequest::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& GenerateDividendsForeignIssuerReportRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateDividendsForeignIssuerReportRequest::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
}
inline std::string* GenerateDividendsForeignIssuerReportRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
return _s;
}
inline const std::string& GenerateDividendsForeignIssuerReportRequest::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void GenerateDividendsForeignIssuerReportRequest::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* GenerateDividendsForeignIssuerReportRequest::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* GenerateDividendsForeignIssuerReportRequest::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
return _impl_.account_id_.Release();
}
inline void GenerateDividendsForeignIssuerReportRequest::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.account_id)
}

// .google.protobuf.Timestamp from = 2;
inline bool GenerateDividendsForeignIssuerReportRequest::has_from() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& GenerateDividendsForeignIssuerReportRequest::_internal_from() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.from_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GenerateDividendsForeignIssuerReportRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
return _internal_from();
}
inline void GenerateDividendsForeignIssuerReportRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.from_;
_impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::unsafe_arena_release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.from_;
_impl_.from_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::_internal_mutable_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.from_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_from();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
return _msg;
}
inline void GenerateDividendsForeignIssuerReportRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from)
}

// .google.protobuf.Timestamp to = 3;
inline bool GenerateDividendsForeignIssuerReportRequest::has_to() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& GenerateDividendsForeignIssuerReportRequest::_internal_to() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.to_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GenerateDividendsForeignIssuerReportRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
return _internal_to();
}
inline void GenerateDividendsForeignIssuerReportRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* released = _impl_.to_;
_impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::unsafe_arena_release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* temp = _impl_.to_;
_impl_.to_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::_internal_mutable_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.to_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GenerateDividendsForeignIssuerReportRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::google::protobuf::Timestamp* _msg = _internal_mutable_to();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
return _msg;
}
inline void GenerateDividendsForeignIssuerReportRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to)
}

// -------------------------------------------------------------------

// GetDividendsForeignIssuerReportRequest

// string task_id = 1;
inline void GetDividendsForeignIssuerReportRequest::clear_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.ClearToEmpty();
}
inline const std::string& GetDividendsForeignIssuerReportRequest::task_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetDividendsForeignIssuerReportRequest::set_task_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
}
inline std::string* GetDividendsForeignIssuerReportRequest::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_task_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
return _s;
}
inline const std::string& GetDividendsForeignIssuerReportRequest::_internal_task_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.task_id_.Get();
}
inline void GetDividendsForeignIssuerReportRequest::_internal_set_task_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(value, GetArena());
}
inline std::string* GetDividendsForeignIssuerReportRequest::_internal_mutable_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* GetDividendsForeignIssuerReportRequest::release_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
return _impl_.task_id_.Release();
}
inline void GetDividendsForeignIssuerReportRequest::set_allocated_task_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.task_id_.IsDefault()) {
_impl_.task_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.task_id)
}

// int32 page = 2;
inline void GetDividendsForeignIssuerReportRequest::clear_page() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = 0;
}
inline ::int32_t GetDividendsForeignIssuerReportRequest::page() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.page)
return _internal_page();
}
inline void GetDividendsForeignIssuerReportRequest::set_page(::int32_t value) {
_internal_set_page(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest.page)
}
inline ::int32_t GetDividendsForeignIssuerReportRequest::_internal_page() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.page_;
}
inline void GetDividendsForeignIssuerReportRequest::_internal_set_page(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = value;
}

// -------------------------------------------------------------------

// GenerateDividendsForeignIssuerReportResponse

// string task_id = 1;
inline void GenerateDividendsForeignIssuerReportResponse::clear_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.ClearToEmpty();
}
inline const std::string& GenerateDividendsForeignIssuerReportResponse::task_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateDividendsForeignIssuerReportResponse::set_task_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
}
inline std::string* GenerateDividendsForeignIssuerReportResponse::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_task_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
return _s;
}
inline const std::string& GenerateDividendsForeignIssuerReportResponse::_internal_task_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.task_id_.Get();
}
inline void GenerateDividendsForeignIssuerReportResponse::_internal_set_task_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.Set(value, GetArena());
}
inline std::string* GenerateDividendsForeignIssuerReportResponse::_internal_mutable_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* GenerateDividendsForeignIssuerReportResponse::release_task_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
return _impl_.task_id_.Release();
}
inline void GenerateDividendsForeignIssuerReportResponse::set_allocated_task_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.task_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.task_id_.IsDefault()) {
_impl_.task_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse.task_id)
}

// -------------------------------------------------------------------

// GetDividendsForeignIssuerReportResponse

// repeated .tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport dividends_foreign_issuer_report = 1;
inline int GetDividendsForeignIssuerReportResponse::_internal_dividends_foreign_issuer_report_size() const {
return _internal_dividends_foreign_issuer_report().size();
}
inline int GetDividendsForeignIssuerReportResponse::dividends_foreign_issuer_report_size() const {
return _internal_dividends_foreign_issuer_report_size();
}
inline void GetDividendsForeignIssuerReportResponse::clear_dividends_foreign_issuer_report() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.dividends_foreign_issuer_report_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* GetDividendsForeignIssuerReportResponse::mutable_dividends_foreign_issuer_report(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
return _internal_mutable_dividends_foreign_issuer_report()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>* GetDividendsForeignIssuerReportResponse::mutable_dividends_foreign_issuer_report()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_dividends_foreign_issuer_report();
}
inline const ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport& GetDividendsForeignIssuerReportResponse::dividends_foreign_issuer_report(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
return _internal_dividends_foreign_issuer_report().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* GetDividendsForeignIssuerReportResponse::add_dividends_foreign_issuer_report() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport* _add = _internal_mutable_dividends_foreign_issuer_report()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>& GetDividendsForeignIssuerReportResponse::dividends_foreign_issuer_report() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report)
return _internal_dividends_foreign_issuer_report();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>&
GetDividendsForeignIssuerReportResponse::_internal_dividends_foreign_issuer_report() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.dividends_foreign_issuer_report_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::DividendsForeignIssuerReport>*
GetDividendsForeignIssuerReportResponse::_internal_mutable_dividends_foreign_issuer_report() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.dividends_foreign_issuer_report_;
}

// int32 itemsCount = 2;
inline void GetDividendsForeignIssuerReportResponse::clear_itemscount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.itemscount_ = 0;
}
inline ::int32_t GetDividendsForeignIssuerReportResponse::itemscount() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.itemsCount)
return _internal_itemscount();
}
inline void GetDividendsForeignIssuerReportResponse::set_itemscount(::int32_t value) {
_internal_set_itemscount(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.itemsCount)
}
inline ::int32_t GetDividendsForeignIssuerReportResponse::_internal_itemscount() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.itemscount_;
}
inline void GetDividendsForeignIssuerReportResponse::_internal_set_itemscount(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.itemscount_ = value;
}

// int32 pagesCount = 3;
inline void GetDividendsForeignIssuerReportResponse::clear_pagescount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.pagescount_ = 0;
}
inline ::int32_t GetDividendsForeignIssuerReportResponse::pagescount() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.pagesCount)
return _internal_pagescount();
}
inline void GetDividendsForeignIssuerReportResponse::set_pagescount(::int32_t value) {
_internal_set_pagescount(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.pagesCount)
}
inline ::int32_t GetDividendsForeignIssuerReportResponse::_internal_pagescount() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.pagescount_;
}
inline void GetDividendsForeignIssuerReportResponse::_internal_set_pagescount(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.pagescount_ = value;
}

// int32 page = 4;
inline void GetDividendsForeignIssuerReportResponse::clear_page() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = 0;
}
inline ::int32_t GetDividendsForeignIssuerReportResponse::page() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.page)
return _internal_page();
}
inline void GetDividendsForeignIssuerReportResponse::set_page(::int32_t value) {
_internal_set_page(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.page)
}
inline ::int32_t GetDividendsForeignIssuerReportResponse::_internal_page() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.page_;
}
inline void GetDividendsForeignIssuerReportResponse::_internal_set_page(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.page_ = value;
}

// -------------------------------------------------------------------

// DividendsForeignIssuerReport

// .google.protobuf.Timestamp record_date = 1;
inline bool DividendsForeignIssuerReport::has_record_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.record_date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& DividendsForeignIssuerReport::_internal_record_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.record_date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DividendsForeignIssuerReport::record_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
return _internal_record_date();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_record_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.record_date_);
}
_impl_.record_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::release_record_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.record_date_;
_impl_.record_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::unsafe_arena_release_record_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.record_date_;
_impl_.record_date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::_internal_mutable_record_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.record_date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.record_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.record_date_;
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::mutable_record_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_record_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_record_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.record_date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.record_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.record_date)
}

// .google.protobuf.Timestamp payment_date = 2;
inline bool DividendsForeignIssuerReport::has_payment_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.payment_date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& DividendsForeignIssuerReport::_internal_payment_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.payment_date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DividendsForeignIssuerReport::payment_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
return _internal_payment_date();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_payment_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_date_);
}
_impl_.payment_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::release_payment_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* released = _impl_.payment_date_;
_impl_.payment_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::unsafe_arena_release_payment_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* temp = _impl_.payment_date_;
_impl_.payment_date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::_internal_mutable_payment_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.payment_date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.payment_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.payment_date_;
}
inline ::google::protobuf::Timestamp* DividendsForeignIssuerReport::mutable_payment_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::google::protobuf::Timestamp* _msg = _internal_mutable_payment_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_payment_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.payment_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date)
}

// string security_name = 3;
inline void DividendsForeignIssuerReport::clear_security_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.security_name_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::security_name() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
return _internal_security_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DividendsForeignIssuerReport::set_security_name(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.security_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
}
inline std::string* DividendsForeignIssuerReport::mutable_security_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_security_name();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_security_name() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.security_name_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_security_name(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.security_name_.Set(value, GetArena());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_security_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.security_name_.Mutable( GetArena());
}
inline std::string* DividendsForeignIssuerReport::release_security_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
return _impl_.security_name_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_security_name(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.security_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.security_name_.IsDefault()) {
_impl_.security_name_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.security_name)
}

// string isin = 4;
inline void DividendsForeignIssuerReport::clear_isin() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.isin_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::isin() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DividendsForeignIssuerReport::set_isin(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
}
inline std::string* DividendsForeignIssuerReport::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_isin();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_isin() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.isin_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_isin(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.isin_.Set(value, GetArena());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_isin() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.isin_.Mutable( GetArena());
}
inline std::string* DividendsForeignIssuerReport::release_isin() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
return _impl_.isin_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_isin(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.isin_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.isin_.IsDefault()) {
_impl_.isin_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.isin)
}

// string issuer_country = 5;
inline void DividendsForeignIssuerReport::clear_issuer_country() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.issuer_country_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::issuer_country() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
return _internal_issuer_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DividendsForeignIssuerReport::set_issuer_country(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.issuer_country_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
}
inline std::string* DividendsForeignIssuerReport::mutable_issuer_country() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_issuer_country();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_issuer_country() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.issuer_country_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_issuer_country(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.issuer_country_.Set(value, GetArena());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_issuer_country() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.issuer_country_.Mutable( GetArena());
}
inline std::string* DividendsForeignIssuerReport::release_issuer_country() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
return _impl_.issuer_country_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_issuer_country(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.issuer_country_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.issuer_country_.IsDefault()) {
_impl_.issuer_country_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.issuer_country)
}

// int64 quantity = 6;
inline void DividendsForeignIssuerReport::clear_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t DividendsForeignIssuerReport::quantity() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.quantity)
return _internal_quantity();
}
inline void DividendsForeignIssuerReport::set_quantity(::int64_t value) {
_internal_set_quantity(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.quantity)
}
inline ::int64_t DividendsForeignIssuerReport::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_;
}
inline void DividendsForeignIssuerReport::_internal_set_quantity(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = value;
}

// .tinkoff.public.invest.api.contract.v1.Quotation dividend = 7;
inline bool DividendsForeignIssuerReport::has_dividend() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.dividend_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_dividend() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dividend_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::dividend() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
return _internal_dividend();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_dividend(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_);
}
_impl_.dividend_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_dividend() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dividend_;
_impl_.dividend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_dividend() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_;
_impl_.dividend_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_dividend() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.dividend_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.dividend_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.dividend_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_dividend() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dividend();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_dividend(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.dividend_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend)
}

// .tinkoff.public.invest.api.contract.v1.Quotation external_commission = 8;
inline bool DividendsForeignIssuerReport::has_external_commission() const {
bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
PROTOBUF_ASSUME(!value || _impl_.external_commission_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_external_commission() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.external_commission_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::external_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
return _internal_external_commission();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_external_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.external_commission_);
}
_impl_.external_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_external_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.external_commission_;
_impl_.external_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_external_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.external_commission_;
_impl_.external_commission_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_external_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.external_commission_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.external_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.external_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_external_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_external_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_external_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.external_commission_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}

_impl_.external_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission)
}

// .tinkoff.public.invest.api.contract.v1.Quotation dividend_gross = 9;
inline bool DividendsForeignIssuerReport::has_dividend_gross() const {
bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
PROTOBUF_ASSUME(!value || _impl_.dividend_gross_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_dividend_gross() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dividend_gross_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::dividend_gross() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
return _internal_dividend_gross();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_dividend_gross(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_gross_);
}
_impl_.dividend_gross_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_dividend_gross() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dividend_gross_;
_impl_.dividend_gross_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_dividend_gross() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_gross_;
_impl_.dividend_gross_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_dividend_gross() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.dividend_gross_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.dividend_gross_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.dividend_gross_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_dividend_gross() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dividend_gross();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_dividend_gross(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_gross_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}

_impl_.dividend_gross_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross)
}

// .tinkoff.public.invest.api.contract.v1.Quotation tax = 10;
inline bool DividendsForeignIssuerReport::has_tax() const {
bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
PROTOBUF_ASSUME(!value || _impl_.tax_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_tax() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.tax_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::tax() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
return _internal_tax();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_tax(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tax_);
}
_impl_.tax_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_tax() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.tax_;
_impl_.tax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_tax() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.tax)

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.tax_;
_impl_.tax_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_tax() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.tax_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.tax_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.tax_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_tax() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_tax();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_tax(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tax_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}

_impl_.tax_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.tax)
}

// .tinkoff.public.invest.api.contract.v1.Quotation dividend_amount = 11;
inline bool DividendsForeignIssuerReport::has_dividend_amount() const {
bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
PROTOBUF_ASSUME(!value || _impl_.dividend_amount_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::_internal_dividend_amount() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dividend_amount_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& DividendsForeignIssuerReport::dividend_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
return _internal_dividend_amount();
}
inline void DividendsForeignIssuerReport::unsafe_arena_set_allocated_dividend_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_amount_);
}
_impl_.dividend_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::release_dividend_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dividend_amount_;
_impl_.dividend_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::unsafe_arena_release_dividend_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_amount_;
_impl_.dividend_amount_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::_internal_mutable_dividend_amount() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.dividend_amount_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.dividend_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.dividend_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* DividendsForeignIssuerReport::mutable_dividend_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dividend_amount();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
return _msg;
}
inline void DividendsForeignIssuerReport::set_allocated_dividend_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_amount_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}

_impl_.dividend_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount)
}

// string currency = 12;
inline void DividendsForeignIssuerReport::clear_currency() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.ClearToEmpty();
}
inline const std::string& DividendsForeignIssuerReport::currency() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DividendsForeignIssuerReport::set_currency(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
}
inline std::string* DividendsForeignIssuerReport::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_currency();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
return _s;
}
inline const std::string& DividendsForeignIssuerReport::_internal_currency() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.currency_.Get();
}
inline void DividendsForeignIssuerReport::_internal_set_currency(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.Set(value, GetArena());
}
inline std::string* DividendsForeignIssuerReport::_internal_mutable_currency() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.currency_.Mutable( GetArena());
}
inline std::string* DividendsForeignIssuerReport::release_currency() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
return _impl_.currency_.Release();
}
inline void DividendsForeignIssuerReport::set_allocated_currency(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.currency_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.currency_.IsDefault()) {
_impl_.currency_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.currency)
}

// -------------------------------------------------------------------

// PortfolioStreamRequest

// repeated string accounts = 1;
inline int PortfolioStreamRequest::_internal_accounts_size() const {
return _internal_accounts().size();
}
inline int PortfolioStreamRequest::accounts_size() const {
return _internal_accounts_size();
}
inline void PortfolioStreamRequest::clear_accounts() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.accounts_.Clear();
}
inline std::string* PortfolioStreamRequest::add_accounts()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
std::string* _s = _internal_mutable_accounts()->Add();
// @@protoc_insertion_point(field_add_mutable:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
return _s;
}
inline const std::string& PortfolioStreamRequest::accounts(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
return _internal_accounts().Get(index);
}
inline std::string* PortfolioStreamRequest::mutable_accounts(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
return _internal_mutable_accounts()->Mutable(index);
}
inline void PortfolioStreamRequest::set_accounts(int index, const std::string& value) {
_internal_mutable_accounts()->Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::set_accounts(int index, std::string&& value) {
_internal_mutable_accounts()->Mutable(index)->assign(std::move(value));
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::set_accounts(int index, const char* value) {
ABSL_DCHECK(value != nullptr);
_internal_mutable_accounts()->Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::set_accounts(int index, const char* value,
std::size_t size) {
_internal_mutable_accounts()->Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::set_accounts(int index, absl::string_view value) {
_internal_mutable_accounts()->Mutable(index)->assign(
value.data(), value.size());
// @@protoc_insertion_point(field_set_string_piece:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(value);
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(std::string&& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add(std::move(value));
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(const char* value) {
ABSL_DCHECK(value != nullptr);
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(value);
// @@protoc_insertion_point(field_add_char:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(const char* value, std::size_t size) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline void PortfolioStreamRequest::add_accounts(absl::string_view value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(value.data(),
value.size());
// @@protoc_insertion_point(field_add_string_piece:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PortfolioStreamRequest::accounts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
return _internal_accounts();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PortfolioStreamRequest::mutable_accounts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest.accounts)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_accounts();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PortfolioStreamRequest::_internal_accounts() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.accounts_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PortfolioStreamRequest::_internal_mutable_accounts() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// PortfolioStreamResponse

// .tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult subscriptions = 1;
inline bool PortfolioStreamResponse::has_subscriptions() const {
return payload_case() == kSubscriptions;
}
inline bool PortfolioStreamResponse::_internal_has_subscriptions() const {
return payload_case() == kSubscriptions;
}
inline void PortfolioStreamResponse::set_has_subscriptions() {
_impl_._oneof_case_[0] = kSubscriptions;
}
inline void PortfolioStreamResponse::clear_subscriptions() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kSubscriptions) {
if (GetArena() == nullptr) {
delete _impl_.payload_.subscriptions_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::release_subscriptions() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
if (payload_case() == kSubscriptions) {
clear_has_payload();
auto* temp = _impl_.payload_.subscriptions_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.subscriptions_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& PortfolioStreamResponse::_internal_subscriptions() const {
return payload_case() == kSubscriptions ? *_impl_.payload_.subscriptions_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult&>(::tinkoff::public_::invest::api::contract::v1::_PortfolioSubscriptionResult_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult& PortfolioStreamResponse::subscriptions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
return _internal_subscriptions();
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::unsafe_arena_release_subscriptions() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
if (payload_case() == kSubscriptions) {
clear_has_payload();
auto* temp = _impl_.payload_.subscriptions_;
_impl_.payload_.subscriptions_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void PortfolioStreamResponse::unsafe_arena_set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_subscriptions();
_impl_.payload_.subscriptions_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::_internal_mutable_subscriptions() {
if (payload_case() != kSubscriptions) {
clear_payload();
set_has_subscriptions();
_impl_.payload_.subscriptions_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult>(GetArena());
}
return _impl_.payload_.subscriptions_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* PortfolioStreamResponse::mutable_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionResult* _msg = _internal_mutable_subscriptions();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.subscriptions)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.PortfolioResponse portfolio = 2;
inline bool PortfolioStreamResponse::has_portfolio() const {
return payload_case() == kPortfolio;
}
inline bool PortfolioStreamResponse::_internal_has_portfolio() const {
return payload_case() == kPortfolio;
}
inline void PortfolioStreamResponse::set_has_portfolio() {
_impl_._oneof_case_[0] = kPortfolio;
}
inline void PortfolioStreamResponse::clear_portfolio() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kPortfolio) {
if (GetArena() == nullptr) {
delete _impl_.payload_.portfolio_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::release_portfolio() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
if (payload_case() == kPortfolio) {
clear_has_payload();
auto* temp = _impl_.payload_.portfolio_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.portfolio_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& PortfolioStreamResponse::_internal_portfolio() const {
return payload_case() == kPortfolio ? *_impl_.payload_.portfolio_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PortfolioResponse&>(::tinkoff::public_::invest::api::contract::v1::_PortfolioResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse& PortfolioStreamResponse::portfolio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
return _internal_portfolio();
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::unsafe_arena_release_portfolio() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
if (payload_case() == kPortfolio) {
clear_has_payload();
auto* temp = _impl_.payload_.portfolio_;
_impl_.payload_.portfolio_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void PortfolioStreamResponse::unsafe_arena_set_allocated_portfolio(::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_portfolio();
_impl_.payload_.portfolio_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::_internal_mutable_portfolio() {
if (payload_case() != kPortfolio) {
clear_payload();
set_has_portfolio();
_impl_.payload_.portfolio_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::PortfolioResponse>(GetArena());
}
return _impl_.payload_.portfolio_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* PortfolioStreamResponse::mutable_portfolio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::PortfolioResponse* _msg = _internal_mutable_portfolio();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.portfolio)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.Ping ping = 3;
inline bool PortfolioStreamResponse::has_ping() const {
return payload_case() == kPing;
}
inline bool PortfolioStreamResponse::_internal_has_ping() const {
return payload_case() == kPing;
}
inline void PortfolioStreamResponse::set_has_ping() {
_impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::release_ping() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.ping)
if (payload_case() == kPing) {
clear_has_payload();
auto* temp = _impl_.payload_.ping_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.ping_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PortfolioStreamResponse::_internal_ping() const {
return payload_case() == kPing ? *_impl_.payload_.ping_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Ping&>(::tinkoff::public_::invest::api::contract::v1::_Ping_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PortfolioStreamResponse::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.ping)
return _internal_ping();
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::unsafe_arena_release_ping() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.ping)
if (payload_case() == kPing) {
clear_has_payload();
auto* temp = _impl_.payload_.ping_;
_impl_.payload_.ping_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void PortfolioStreamResponse::unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_ping();
_impl_.payload_.ping_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.ping)
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::_internal_mutable_ping() {
if (payload_case() != kPing) {
clear_payload();
set_has_ping();
_impl_.payload_.ping_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Ping>(GetArena());
}
return _impl_.payload_.ping_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PortfolioStreamResponse::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::Ping* _msg = _internal_mutable_ping();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.ping)
return _msg;
}

inline bool PortfolioStreamResponse::has_payload() const {
return payload_case() != PAYLOAD_NOT_SET;
}
inline void PortfolioStreamResponse::clear_has_payload() {
_impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline PortfolioStreamResponse::PayloadCase PortfolioStreamResponse::payload_case() const {
return PortfolioStreamResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PortfolioSubscriptionResult

// repeated .tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus accounts = 1;
inline int PortfolioSubscriptionResult::_internal_accounts_size() const {
return _internal_accounts().size();
}
inline int PortfolioSubscriptionResult::accounts_size() const {
return _internal_accounts_size();
}
inline void PortfolioSubscriptionResult::clear_accounts() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.accounts_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* PortfolioSubscriptionResult::mutable_accounts(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
return _internal_mutable_accounts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>* PortfolioSubscriptionResult::mutable_accounts()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_accounts();
}
inline const ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus& PortfolioSubscriptionResult::accounts(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
return _internal_accounts().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* PortfolioSubscriptionResult::add_accounts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus* _add = _internal_mutable_accounts()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>& PortfolioSubscriptionResult::accounts() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult.accounts)
return _internal_accounts();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>&
PortfolioSubscriptionResult::_internal_accounts() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.accounts_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccountSubscriptionStatus>*
PortfolioSubscriptionResult::_internal_mutable_accounts() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// AccountSubscriptionStatus

// string account_id = 1;
inline void AccountSubscriptionStatus::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountSubscriptionStatus::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountSubscriptionStatus::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
}
inline std::string* AccountSubscriptionStatus::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
return _s;
}
inline const std::string& AccountSubscriptionStatus::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void AccountSubscriptionStatus::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* AccountSubscriptionStatus::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* AccountSubscriptionStatus::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
return _impl_.account_id_.Release();
}
inline void AccountSubscriptionStatus::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.account_id)
}

// .tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionStatus subscription_status = 6;
inline void AccountSubscriptionStatus::clear_subscription_status() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.subscription_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus AccountSubscriptionStatus::subscription_status() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.subscription_status)
return _internal_subscription_status();
}
inline void AccountSubscriptionStatus::set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value) {
_internal_set_subscription_status(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.subscription_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus AccountSubscriptionStatus::_internal_subscription_status() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus>(_impl_.subscription_status_);
}
inline void AccountSubscriptionStatus::_internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.subscription_status_ = value;
}

// -------------------------------------------------------------------

// GetOperationsByCursorRequest

// string account_id = 1;
inline void GetOperationsByCursorRequest::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& GetOperationsByCursorRequest::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOperationsByCursorRequest::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
}
inline std::string* GetOperationsByCursorRequest::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
return _s;
}
inline const std::string& GetOperationsByCursorRequest::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void GetOperationsByCursorRequest::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* GetOperationsByCursorRequest::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* GetOperationsByCursorRequest::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
return _impl_.account_id_.Release();
}
inline void GetOperationsByCursorRequest::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.account_id)
}

// string instrument_id = 2;
inline void GetOperationsByCursorRequest::clear_instrument_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetOperationsByCursorRequest::instrument_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOperationsByCursorRequest::set_instrument_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
}
inline std::string* GetOperationsByCursorRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
return _s;
}
inline const std::string& GetOperationsByCursorRequest::_internal_instrument_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_id_.Get();
}
inline void GetOperationsByCursorRequest::_internal_set_instrument_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetOperationsByCursorRequest::_internal_mutable_instrument_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetOperationsByCursorRequest::release_instrument_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
return _impl_.instrument_id_.Release();
}
inline void GetOperationsByCursorRequest::set_allocated_instrument_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_id_.IsDefault()) {
_impl_.instrument_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.instrument_id)
}

// .google.protobuf.Timestamp from = 6;
inline bool GetOperationsByCursorRequest::has_from() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& GetOperationsByCursorRequest::_internal_from() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.from_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetOperationsByCursorRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.from)
return _internal_from();
}
inline void GetOperationsByCursorRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.from)
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.from_;
_impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::unsafe_arena_release_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.from)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.from_;
_impl_.from_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::_internal_mutable_from() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.from_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_from();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.from)
return _msg;
}
inline void GetOperationsByCursorRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.from)
}

// .google.protobuf.Timestamp to = 7;
inline bool GetOperationsByCursorRequest::has_to() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& GetOperationsByCursorRequest::_internal_to() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.to_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetOperationsByCursorRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.to)
return _internal_to();
}
inline void GetOperationsByCursorRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.to)
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* released = _impl_.to_;
_impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::unsafe_arena_release_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.to)

_impl_._has_bits_[0] &= ~0x00000002u;
::google::protobuf::Timestamp* temp = _impl_.to_;
_impl_.to_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::_internal_mutable_to() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.to_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetOperationsByCursorRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::google::protobuf::Timestamp* _msg = _internal_mutable_to();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.to)
return _msg;
}
inline void GetOperationsByCursorRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.to)
}

// string cursor = 11;
inline void GetOperationsByCursorRequest::clear_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.ClearToEmpty();
}
inline const std::string& GetOperationsByCursorRequest::cursor() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
return _internal_cursor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOperationsByCursorRequest::set_cursor(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
}
inline std::string* GetOperationsByCursorRequest::mutable_cursor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_cursor();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
return _s;
}
inline const std::string& GetOperationsByCursorRequest::_internal_cursor() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.cursor_.Get();
}
inline void GetOperationsByCursorRequest::_internal_set_cursor(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.Set(value, GetArena());
}
inline std::string* GetOperationsByCursorRequest::_internal_mutable_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.cursor_.Mutable( GetArena());
}
inline std::string* GetOperationsByCursorRequest::release_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
return _impl_.cursor_.Release();
}
inline void GetOperationsByCursorRequest::set_allocated_cursor(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.cursor_.IsDefault()) {
_impl_.cursor_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.cursor)
}

// int32 limit = 12;
inline void GetOperationsByCursorRequest::clear_limit() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.limit_ = 0;
}
inline ::int32_t GetOperationsByCursorRequest::limit() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.limit)
return _internal_limit();
}
inline void GetOperationsByCursorRequest::set_limit(::int32_t value) {
_internal_set_limit(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.limit)
}
inline ::int32_t GetOperationsByCursorRequest::_internal_limit() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.limit_;
}
inline void GetOperationsByCursorRequest::_internal_set_limit(::int32_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.limit_ = value;
}

// repeated .tinkoff.public.invest.api.contract.v1.OperationType operation_types = 13;
inline int GetOperationsByCursorRequest::_internal_operation_types_size() const {
return _internal_operation_types().size();
}
inline int GetOperationsByCursorRequest::operation_types_size() const {
return _internal_operation_types_size();
}
inline void GetOperationsByCursorRequest::clear_operation_types() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.operation_types_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType GetOperationsByCursorRequest::operation_types(int index) const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
return static_cast<::tinkoff::public_::invest::api::contract::v1::OperationType>(_internal_operation_types().Get(index));
}
inline void GetOperationsByCursorRequest::set_operation_types(int index, ::tinkoff::public_::invest::api::contract::v1::OperationType value) {
_internal_mutable_operation_types()->Set(index, value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
}
inline void GetOperationsByCursorRequest::add_operation_types(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_operation_types()->Add(value);
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
}
inline const ::google::protobuf::RepeatedField<int>& GetOperationsByCursorRequest::operation_types() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
return _internal_operation_types();
}
inline ::google::protobuf::RepeatedField<int>* GetOperationsByCursorRequest::mutable_operation_types()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_operation_types();
}
inline const ::google::protobuf::RepeatedField<int>& GetOperationsByCursorRequest::_internal_operation_types()
const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.operation_types_;
}
inline ::google::protobuf::RepeatedField<int>* GetOperationsByCursorRequest::_internal_mutable_operation_types() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.operation_types_;
}

// .tinkoff.public.invest.api.contract.v1.OperationState state = 14;
inline void GetOperationsByCursorRequest::clear_state() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState GetOperationsByCursorRequest::state() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.state)
return _internal_state();
}
inline void GetOperationsByCursorRequest::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
_internal_set_state(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.state)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState GetOperationsByCursorRequest::_internal_state() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(_impl_.state_);
}
inline void GetOperationsByCursorRequest::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = value;
}

// bool without_commissions = 15;
inline void GetOperationsByCursorRequest::clear_without_commissions() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.without_commissions_ = false;
}
inline bool GetOperationsByCursorRequest::without_commissions() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.without_commissions)
return _internal_without_commissions();
}
inline void GetOperationsByCursorRequest::set_without_commissions(bool value) {
_internal_set_without_commissions(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.without_commissions)
}
inline bool GetOperationsByCursorRequest::_internal_without_commissions() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.without_commissions_;
}
inline void GetOperationsByCursorRequest::_internal_set_without_commissions(bool value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.without_commissions_ = value;
}

// bool without_trades = 16;
inline void GetOperationsByCursorRequest::clear_without_trades() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.without_trades_ = false;
}
inline bool GetOperationsByCursorRequest::without_trades() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.without_trades)
return _internal_without_trades();
}
inline void GetOperationsByCursorRequest::set_without_trades(bool value) {
_internal_set_without_trades(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.without_trades)
}
inline bool GetOperationsByCursorRequest::_internal_without_trades() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.without_trades_;
}
inline void GetOperationsByCursorRequest::_internal_set_without_trades(bool value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.without_trades_ = value;
}

// bool without_overnights = 17;
inline void GetOperationsByCursorRequest::clear_without_overnights() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.without_overnights_ = false;
}
inline bool GetOperationsByCursorRequest::without_overnights() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.without_overnights)
return _internal_without_overnights();
}
inline void GetOperationsByCursorRequest::set_without_overnights(bool value) {
_internal_set_without_overnights(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.without_overnights)
}
inline bool GetOperationsByCursorRequest::_internal_without_overnights() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.without_overnights_;
}
inline void GetOperationsByCursorRequest::_internal_set_without_overnights(bool value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.without_overnights_ = value;
}

// -------------------------------------------------------------------

// GetOperationsByCursorResponse

// bool has_next = 1;
inline void GetOperationsByCursorResponse::clear_has_next() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.has_next_ = false;
}
inline bool GetOperationsByCursorResponse::has_next() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.has_next)
return _internal_has_next();
}
inline void GetOperationsByCursorResponse::set_has_next(bool value) {
_internal_set_has_next(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.has_next)
}
inline bool GetOperationsByCursorResponse::_internal_has_next() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.has_next_;
}
inline void GetOperationsByCursorResponse::_internal_set_has_next(bool value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.has_next_ = value;
}

// string next_cursor = 2;
inline void GetOperationsByCursorResponse::clear_next_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& GetOperationsByCursorResponse::next_cursor() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
return _internal_next_cursor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOperationsByCursorResponse::set_next_cursor(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.next_cursor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
}
inline std::string* GetOperationsByCursorResponse::mutable_next_cursor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_next_cursor();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
return _s;
}
inline const std::string& GetOperationsByCursorResponse::_internal_next_cursor() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.next_cursor_.Get();
}
inline void GetOperationsByCursorResponse::_internal_set_next_cursor(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.next_cursor_.Set(value, GetArena());
}
inline std::string* GetOperationsByCursorResponse::_internal_mutable_next_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.next_cursor_.Mutable( GetArena());
}
inline std::string* GetOperationsByCursorResponse::release_next_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
return _impl_.next_cursor_.Release();
}
inline void GetOperationsByCursorResponse::set_allocated_next_cursor(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.next_cursor_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.next_cursor_.IsDefault()) {
_impl_.next_cursor_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.next_cursor)
}

// repeated .tinkoff.public.invest.api.contract.v1.OperationItem items = 6;
inline int GetOperationsByCursorResponse::_internal_items_size() const {
return _internal_items().size();
}
inline int GetOperationsByCursorResponse::items_size() const {
return _internal_items_size();
}
inline void GetOperationsByCursorResponse::clear_items() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.items_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItem* GetOperationsByCursorResponse::mutable_items(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.items)
return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>* GetOperationsByCursorResponse::mutable_items()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.items)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_items();
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItem& GetOperationsByCursorResponse::items(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.items)
return _internal_items().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItem* GetOperationsByCursorResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::OperationItem* _add = _internal_mutable_items()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.items)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>& GetOperationsByCursorResponse::items() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.items)
return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>&
GetOperationsByCursorResponse::_internal_items() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItem>*
GetOperationsByCursorResponse::_internal_mutable_items() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.items_;
}

// -------------------------------------------------------------------

// OperationItem

// string cursor = 1;
inline void OperationItem::clear_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.ClearToEmpty();
}
inline const std::string& OperationItem::cursor() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.cursor)
return _internal_cursor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_cursor(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.cursor)
}
inline std::string* OperationItem::mutable_cursor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_cursor();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.cursor)
return _s;
}
inline const std::string& OperationItem::_internal_cursor() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.cursor_.Get();
}
inline void OperationItem::_internal_set_cursor(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.cursor_.Mutable( GetArena());
}
inline std::string* OperationItem::release_cursor() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.cursor)
return _impl_.cursor_.Release();
}
inline void OperationItem::set_allocated_cursor(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cursor_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.cursor_.IsDefault()) {
_impl_.cursor_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.cursor)
}

// string broker_account_id = 6;
inline void OperationItem::clear_broker_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_account_id_.ClearToEmpty();
}
inline const std::string& OperationItem::broker_account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.broker_account_id)
return _internal_broker_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_broker_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.broker_account_id)
}
inline std::string* OperationItem::mutable_broker_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_broker_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.broker_account_id)
return _s;
}
inline const std::string& OperationItem::_internal_broker_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.broker_account_id_.Get();
}
inline void OperationItem::_internal_set_broker_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_account_id_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_broker_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.broker_account_id_.Mutable( GetArena());
}
inline std::string* OperationItem::release_broker_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.broker_account_id)
return _impl_.broker_account_id_.Release();
}
inline void OperationItem::set_allocated_broker_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.broker_account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.broker_account_id_.IsDefault()) {
_impl_.broker_account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.broker_account_id)
}

// string id = 16;
inline void OperationItem::clear_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.ClearToEmpty();
}
inline const std::string& OperationItem::id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.id)
return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.id)
}
inline std::string* OperationItem::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.id)
return _s;
}
inline const std::string& OperationItem::_internal_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.id_.Get();
}
inline void OperationItem::_internal_set_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.id_.Mutable( GetArena());
}
inline std::string* OperationItem::release_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.id)
return _impl_.id_.Release();
}
inline void OperationItem::set_allocated_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.id_.IsDefault()) {
_impl_.id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.id)
}

// string parent_operation_id = 17;
inline void OperationItem::clear_parent_operation_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.ClearToEmpty();
}
inline const std::string& OperationItem::parent_operation_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.parent_operation_id)
return _internal_parent_operation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_parent_operation_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.parent_operation_id)
}
inline std::string* OperationItem::mutable_parent_operation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_parent_operation_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.parent_operation_id)
return _s;
}
inline const std::string& OperationItem::_internal_parent_operation_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.parent_operation_id_.Get();
}
inline void OperationItem::_internal_set_parent_operation_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_parent_operation_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.parent_operation_id_.Mutable( GetArena());
}
inline std::string* OperationItem::release_parent_operation_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.parent_operation_id)
return _impl_.parent_operation_id_.Release();
}
inline void OperationItem::set_allocated_parent_operation_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.parent_operation_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.parent_operation_id_.IsDefault()) {
_impl_.parent_operation_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.parent_operation_id)
}

// string name = 18;
inline void OperationItem::clear_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.ClearToEmpty();
}
inline const std::string& OperationItem::name() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.name)
return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_name(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.name)
}
inline std::string* OperationItem::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_name();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.name)
return _s;
}
inline const std::string& OperationItem::_internal_name() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.name_.Get();
}
inline void OperationItem::_internal_set_name(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.name_.Mutable( GetArena());
}
inline std::string* OperationItem::release_name() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.name)
return _impl_.name_.Release();
}
inline void OperationItem::set_allocated_name(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.name_.IsDefault()) {
_impl_.name_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.name)
}

// .google.protobuf.Timestamp date = 21;
inline bool OperationItem::has_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& OperationItem::_internal_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OperationItem::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.date)
return _internal_date();
}
inline void OperationItem::unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.date)
}
inline ::google::protobuf::Timestamp* OperationItem::release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.date_;
_impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* OperationItem::unsafe_arena_release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.date)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.date_;
_impl_.date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* OperationItem::_internal_mutable_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.date_;
}
inline ::google::protobuf::Timestamp* OperationItem::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.date)
return _msg;
}
inline void OperationItem::set_allocated_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.date)
}

// .tinkoff.public.invest.api.contract.v1.OperationType type = 22;
inline void OperationItem::clear_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType OperationItem::type() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.type)
return _internal_type();
}
inline void OperationItem::set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
_internal_set_type(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.type)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationType OperationItem::_internal_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::OperationType>(_impl_.type_);
}
inline void OperationItem::_internal_set_type(::tinkoff::public_::invest::api::contract::v1::OperationType value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.type_ = value;
}

// string description = 23;
inline void OperationItem::clear_description() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.description_.ClearToEmpty();
}
inline const std::string& OperationItem::description() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.description)
return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_description(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.description)
}
inline std::string* OperationItem::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_description();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.description)
return _s;
}
inline const std::string& OperationItem::_internal_description() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.description_.Get();
}
inline void OperationItem::_internal_set_description(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.description_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_description() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.description_.Mutable( GetArena());
}
inline std::string* OperationItem::release_description() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.description)
return _impl_.description_.Release();
}
inline void OperationItem::set_allocated_description(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.description_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.description_.IsDefault()) {
_impl_.description_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.description)
}

// .tinkoff.public.invest.api.contract.v1.OperationState state = 24;
inline void OperationItem::clear_state() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationItem::state() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.state)
return _internal_state();
}
inline void OperationItem::set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
_internal_set_state(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.state)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationState OperationItem::_internal_state() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::OperationState>(_impl_.state_);
}
inline void OperationItem::_internal_set_state(::tinkoff::public_::invest::api::contract::v1::OperationState value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.state_ = value;
}

// string instrument_uid = 31;
inline void OperationItem::clear_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OperationItem::instrument_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_uid)
return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_instrument_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_uid)
}
inline std::string* OperationItem::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_uid)
return _s;
}
inline const std::string& OperationItem::_internal_instrument_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Get();
}
inline void OperationItem::_internal_set_instrument_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* OperationItem::release_instrument_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_uid)
return _impl_.instrument_uid_.Release();
}
inline void OperationItem::set_allocated_instrument_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_uid_.IsDefault()) {
_impl_.instrument_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_uid)
}

// string figi = 32;
inline void OperationItem::clear_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.ClearToEmpty();
}
inline const std::string& OperationItem::figi() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.figi)
return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_figi(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.figi)
}
inline std::string* OperationItem::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_figi();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.figi)
return _s;
}
inline const std::string& OperationItem::_internal_figi() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.figi_.Get();
}
inline void OperationItem::_internal_set_figi(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.figi_.Mutable( GetArena());
}
inline std::string* OperationItem::release_figi() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.figi)
return _impl_.figi_.Release();
}
inline void OperationItem::set_allocated_figi(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.figi_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.figi_.IsDefault()) {
_impl_.figi_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.figi)
}

// string instrument_type = 33;
inline void OperationItem::clear_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& OperationItem::instrument_type() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_type)
return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_instrument_type(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_type)
}
inline std::string* OperationItem::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_instrument_type();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_type)
return _s;
}
inline const std::string& OperationItem::_internal_instrument_type() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Get();
}
inline void OperationItem::_internal_set_instrument_type(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* OperationItem::release_instrument_type() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_type)
return _impl_.instrument_type_.Release();
}
inline void OperationItem::set_allocated_instrument_type(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.instrument_type_.IsDefault()) {
_impl_.instrument_type_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_type)
}

// .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 34;
inline void OperationItem::clear_instrument_kind() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType OperationItem::instrument_kind() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_kind)
return _internal_instrument_kind();
}
inline void OperationItem::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
_internal_set_instrument_kind(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType OperationItem::_internal_instrument_kind() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void OperationItem::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.instrument_kind_ = value;
}

// string position_uid = 35;
inline void OperationItem::clear_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.ClearToEmpty();
}
inline const std::string& OperationItem::position_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.position_uid)
return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_position_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.position_uid)
}
inline std::string* OperationItem::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_position_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.position_uid)
return _s;
}
inline const std::string& OperationItem::_internal_position_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Get();
}
inline void OperationItem::_internal_set_position_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* OperationItem::release_position_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.position_uid)
return _impl_.position_uid_.Release();
}
inline void OperationItem::set_allocated_position_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.position_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.position_uid_.IsDefault()) {
_impl_.position_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.position_uid)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue payment = 41;
inline bool OperationItem::has_payment() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.payment_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_payment() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.payment_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::payment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.payment)
return _internal_payment();
}
inline void OperationItem::unsafe_arena_set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_);
}
_impl_.payment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.payment)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_payment() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.payment_;
_impl_.payment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_payment() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.payment)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.payment_;
_impl_.payment_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_payment() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.payment_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.payment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.payment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_payment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_payment();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.payment)
return _msg;
}
inline void OperationItem::set_allocated_payment(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.payment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.payment)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 42;
inline bool OperationItem::has_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.price)
return _internal_price();
}
inline void OperationItem::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.price_;
_impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.price)

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
_impl_.price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.price)
return _msg;
}
inline void OperationItem::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue commission = 43;
inline bool OperationItem::has_commission() const {
bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
PROTOBUF_ASSUME(!value || _impl_.commission_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_commission() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.commission_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.commission)
return _internal_commission();
}
inline void OperationItem::unsafe_arena_set_allocated_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.commission_);
}
_impl_.commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.commission_;
_impl_.commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.commission)

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.commission_;
_impl_.commission_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_commission() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.commission_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_commission();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.commission)
return _msg;
}
inline void OperationItem::set_allocated_commission(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.commission_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}

_impl_.commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.commission)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue yield = 44;
inline bool OperationItem::has_yield() const {
bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
PROTOBUF_ASSUME(!value || _impl_.yield_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_yield() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.yield_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::yield() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.yield)
return _internal_yield();
}
inline void OperationItem::unsafe_arena_set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_);
}
_impl_.yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.yield_;
_impl_.yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.yield)

_impl_._has_bits_[0] &= ~0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.yield_;
_impl_.yield_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.yield_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000010u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_yield();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.yield)
return _msg;
}
inline void OperationItem::set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000010u;
} else {
_impl_._has_bits_[0] &= ~0x00000010u;
}

_impl_.yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.yield)
}

// .tinkoff.public.invest.api.contract.v1.Quotation yield_relative = 45;
inline bool OperationItem::has_yield_relative() const {
bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
PROTOBUF_ASSUME(!value || _impl_.yield_relative_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItem::_internal_yield_relative() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.yield_relative_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItem::yield_relative() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.yield_relative)
return _internal_yield_relative();
}
inline void OperationItem::unsafe_arena_set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_relative_);
}
_impl_.yield_relative_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.yield_relative)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::release_yield_relative() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.yield_relative_;
_impl_.yield_relative_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::unsafe_arena_release_yield_relative() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.yield_relative)

_impl_._has_bits_[0] &= ~0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.yield_relative_;
_impl_.yield_relative_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::_internal_mutable_yield_relative() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.yield_relative_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.yield_relative_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.yield_relative_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItem::mutable_yield_relative() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000020u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_yield_relative();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.yield_relative)
return _msg;
}
inline void OperationItem::set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_relative_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000020u;
} else {
_impl_._has_bits_[0] &= ~0x00000020u;
}

_impl_.yield_relative_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.yield_relative)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue accrued_int = 46;
inline bool OperationItem::has_accrued_int() const {
bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
PROTOBUF_ASSUME(!value || _impl_.accrued_int_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::_internal_accrued_int() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.accrued_int_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItem::accrued_int() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.accrued_int)
return _internal_accrued_int();
}
inline void OperationItem::unsafe_arena_set_allocated_accrued_int(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accrued_int_);
}
_impl_.accrued_int_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.accrued_int)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::release_accrued_int() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.accrued_int_;
_impl_.accrued_int_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::unsafe_arena_release_accrued_int() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.accrued_int)

_impl_._has_bits_[0] &= ~0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.accrued_int_;
_impl_.accrued_int_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::_internal_mutable_accrued_int() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.accrued_int_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.accrued_int_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.accrued_int_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItem::mutable_accrued_int() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000040u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_accrued_int();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.accrued_int)
return _msg;
}
inline void OperationItem::set_allocated_accrued_int(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accrued_int_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000040u;
} else {
_impl_._has_bits_[0] &= ~0x00000040u;
}

_impl_.accrued_int_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.accrued_int)
}

// int64 quantity = 51;
inline void OperationItem::clear_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t OperationItem::quantity() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.quantity)
return _internal_quantity();
}
inline void OperationItem::set_quantity(::int64_t value) {
_internal_set_quantity(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.quantity)
}
inline ::int64_t OperationItem::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_;
}
inline void OperationItem::_internal_set_quantity(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = value;
}

// int64 quantity_rest = 52;
inline void OperationItem::clear_quantity_rest() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_rest_ = ::int64_t{0};
}
inline ::int64_t OperationItem::quantity_rest() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.quantity_rest)
return _internal_quantity_rest();
}
inline void OperationItem::set_quantity_rest(::int64_t value) {
_internal_set_quantity_rest(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.quantity_rest)
}
inline ::int64_t OperationItem::_internal_quantity_rest() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_rest_;
}
inline void OperationItem::_internal_set_quantity_rest(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_rest_ = value;
}

// int64 quantity_done = 53;
inline void OperationItem::clear_quantity_done() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_done_ = ::int64_t{0};
}
inline ::int64_t OperationItem::quantity_done() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.quantity_done)
return _internal_quantity_done();
}
inline void OperationItem::set_quantity_done(::int64_t value) {
_internal_set_quantity_done(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.quantity_done)
}
inline ::int64_t OperationItem::_internal_quantity_done() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_done_;
}
inline void OperationItem::_internal_set_quantity_done(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_done_ = value;
}

// .google.protobuf.Timestamp cancel_date_time = 56;
inline bool OperationItem::has_cancel_date_time() const {
bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
PROTOBUF_ASSUME(!value || _impl_.cancel_date_time_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& OperationItem::_internal_cancel_date_time() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.cancel_date_time_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OperationItem::cancel_date_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_date_time)
return _internal_cancel_date_time();
}
inline void OperationItem::unsafe_arena_set_allocated_cancel_date_time(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cancel_date_time_);
}
_impl_.cancel_date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_date_time)
}
inline ::google::protobuf::Timestamp* OperationItem::release_cancel_date_time() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000080u;
::google::protobuf::Timestamp* released = _impl_.cancel_date_time_;
_impl_.cancel_date_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* OperationItem::unsafe_arena_release_cancel_date_time() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_date_time)

_impl_._has_bits_[0] &= ~0x00000080u;
::google::protobuf::Timestamp* temp = _impl_.cancel_date_time_;
_impl_.cancel_date_time_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* OperationItem::_internal_mutable_cancel_date_time() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.cancel_date_time_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.cancel_date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.cancel_date_time_;
}
inline ::google::protobuf::Timestamp* OperationItem::mutable_cancel_date_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000080u;
::google::protobuf::Timestamp* _msg = _internal_mutable_cancel_date_time();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_date_time)
return _msg;
}
inline void OperationItem::set_allocated_cancel_date_time(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cancel_date_time_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000080u;
} else {
_impl_._has_bits_[0] &= ~0x00000080u;
}

_impl_.cancel_date_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_date_time)
}

// string cancel_reason = 57;
inline void OperationItem::clear_cancel_reason() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cancel_reason_.ClearToEmpty();
}
inline const std::string& OperationItem::cancel_reason() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_reason)
return _internal_cancel_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_cancel_reason(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cancel_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_reason)
}
inline std::string* OperationItem::mutable_cancel_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_cancel_reason();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_reason)
return _s;
}
inline const std::string& OperationItem::_internal_cancel_reason() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.cancel_reason_.Get();
}
inline void OperationItem::_internal_set_cancel_reason(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cancel_reason_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_cancel_reason() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.cancel_reason_.Mutable( GetArena());
}
inline std::string* OperationItem::release_cancel_reason() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_reason)
return _impl_.cancel_reason_.Release();
}
inline void OperationItem::set_allocated_cancel_reason(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.cancel_reason_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.cancel_reason_.IsDefault()) {
_impl_.cancel_reason_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.cancel_reason)
}

// .tinkoff.public.invest.api.contract.v1.OperationItemTrades trades_info = 61;
inline bool OperationItem::has_trades_info() const {
bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
PROTOBUF_ASSUME(!value || _impl_.trades_info_ != nullptr);
return value;
}
inline void OperationItem::clear_trades_info() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.trades_info_ != nullptr) _impl_.trades_info_->Clear();
_impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& OperationItem::_internal_trades_info() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* p = _impl_.trades_info_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades&>(::tinkoff::public_::invest::api::contract::v1::_OperationItemTrades_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades& OperationItem::trades_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.trades_info)
return _internal_trades_info();
}
inline void OperationItem::unsafe_arena_set_allocated_trades_info(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trades_info_);
}
_impl_.trades_info_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::OperationItemTrades*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.trades_info)
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::release_trades_info() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* released = _impl_.trades_info_;
_impl_.trades_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::unsafe_arena_release_trades_info() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.trades_info)

_impl_._has_bits_[0] &= ~0x00000100u;
::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* temp = _impl_.trades_info_;
_impl_.trades_info_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::_internal_mutable_trades_info() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.trades_info_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::OperationItemTrades>(GetArena());
_impl_.trades_info_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::OperationItemTrades*>(p);
}
return _impl_.trades_info_;
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* OperationItem::mutable_trades_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000100u;
::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* _msg = _internal_mutable_trades_info();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.trades_info)
return _msg;
}
inline void OperationItem::set_allocated_trades_info(::tinkoff::public_::invest::api::contract::v1::OperationItemTrades* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete (_impl_.trades_info_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = (value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000100u;
} else {
_impl_._has_bits_[0] &= ~0x00000100u;
}

_impl_.trades_info_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::OperationItemTrades*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.trades_info)
}

// string asset_uid = 64;
inline void OperationItem::clear_asset_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& OperationItem::asset_uid() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItem.asset_uid)
return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItem::set_asset_uid(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItem.asset_uid)
}
inline std::string* OperationItem::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_asset_uid();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItem.asset_uid)
return _s;
}
inline const std::string& OperationItem::_internal_asset_uid() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.asset_uid_.Get();
}
inline void OperationItem::_internal_set_asset_uid(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* OperationItem::_internal_mutable_asset_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* OperationItem::release_asset_uid() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItem.asset_uid)
return _impl_.asset_uid_.Release();
}
inline void OperationItem::set_allocated_asset_uid(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.asset_uid_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.asset_uid_.IsDefault()) {
_impl_.asset_uid_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItem.asset_uid)
}

// -------------------------------------------------------------------

// OperationItemTrades

// repeated .tinkoff.public.invest.api.contract.v1.OperationItemTrade trades = 6;
inline int OperationItemTrades::_internal_trades_size() const {
return _internal_trades().size();
}
inline int OperationItemTrades::trades_size() const {
return _internal_trades_size();
}
inline void OperationItemTrades::clear_trades() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.trades_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* OperationItemTrades::mutable_trades(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItemTrades.trades)
return _internal_mutable_trades()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>* OperationItemTrades::mutable_trades()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.OperationItemTrades.trades)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_trades();
}
inline const ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade& OperationItemTrades::trades(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItemTrades.trades)
return _internal_trades().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* OperationItemTrades::add_trades() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::OperationItemTrade* _add = _internal_mutable_trades()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.OperationItemTrades.trades)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>& OperationItemTrades::trades() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.OperationItemTrades.trades)
return _internal_trades();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>&
OperationItemTrades::_internal_trades() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.trades_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::OperationItemTrade>*
OperationItemTrades::_internal_mutable_trades() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.trades_;
}

// -------------------------------------------------------------------

// OperationItemTrade

// string num = 1;
inline void OperationItemTrade::clear_num() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.num_.ClearToEmpty();
}
inline const std::string& OperationItemTrade::num() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItemTrade.num)
return _internal_num();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationItemTrade::set_num(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.num_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItemTrade.num)
}
inline std::string* OperationItemTrade::mutable_num() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_num();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItemTrade.num)
return _s;
}
inline const std::string& OperationItemTrade::_internal_num() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.num_.Get();
}
inline void OperationItemTrade::_internal_set_num(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.num_.Set(value, GetArena());
}
inline std::string* OperationItemTrade::_internal_mutable_num() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.num_.Mutable( GetArena());
}
inline std::string* OperationItemTrade::release_num() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItemTrade.num)
return _impl_.num_.Release();
}
inline void OperationItemTrade::set_allocated_num(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.num_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.num_.IsDefault()) {
_impl_.num_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.num)
}

// .google.protobuf.Timestamp date = 6;
inline bool OperationItemTrade::has_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& OperationItemTrade::_internal_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OperationItemTrade::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItemTrade.date)
return _internal_date();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.date)
}
inline ::google::protobuf::Timestamp* OperationItemTrade::release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.date_;
_impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* OperationItemTrade::unsafe_arena_release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItemTrade.date)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.date_;
_impl_.date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* OperationItemTrade::_internal_mutable_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.date_;
}
inline ::google::protobuf::Timestamp* OperationItemTrade::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItemTrade.date)
return _msg;
}
inline void OperationItemTrade::set_allocated_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.date)
}

// int64 quantity = 11;
inline void OperationItemTrade::clear_quantity() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t OperationItemTrade::quantity() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItemTrade.quantity)
return _internal_quantity();
}
inline void OperationItemTrade::set_quantity(::int64_t value) {
_internal_set_quantity(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.OperationItemTrade.quantity)
}
inline ::int64_t OperationItemTrade::_internal_quantity() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.quantity_;
}
inline void OperationItemTrade::_internal_set_quantity(::int64_t value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.quantity_ = value;
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue price = 16;
inline bool OperationItemTrade::has_price() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::_internal_price() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.price_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItemTrade.price)
return _internal_price();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.price_;
_impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::unsafe_arena_release_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItemTrade.price)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.price_;
_impl_.price_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::_internal_mutable_price() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.price_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_price();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItemTrade.price)
return _msg;
}
inline void OperationItemTrade::set_allocated_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.price)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue yield = 21;
inline bool OperationItemTrade::has_yield() const {
bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
PROTOBUF_ASSUME(!value || _impl_.yield_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::_internal_yield() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.yield_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& OperationItemTrade::yield() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield)
return _internal_yield();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_);
}
_impl_.yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::release_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.yield_;
_impl_.yield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::unsafe_arena_release_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield)

_impl_._has_bits_[0] &= ~0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.yield_;
_impl_.yield_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::_internal_mutable_yield() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.yield_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.yield_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* OperationItemTrade::mutable_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000004u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_yield();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield)
return _msg;
}
inline void OperationItemTrade::set_allocated_yield(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000004u;
} else {
_impl_._has_bits_[0] &= ~0x00000004u;
}

_impl_.yield_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield)
}

// .tinkoff.public.invest.api.contract.v1.Quotation yield_relative = 22;
inline bool OperationItemTrade::has_yield_relative() const {
bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
PROTOBUF_ASSUME(!value || _impl_.yield_relative_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItemTrade::_internal_yield_relative() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.yield_relative_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& OperationItemTrade::yield_relative() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield_relative)
return _internal_yield_relative();
}
inline void OperationItemTrade::unsafe_arena_set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_relative_);
}
_impl_.yield_relative_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield_relative)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::release_yield_relative() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.yield_relative_;
_impl_.yield_relative_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::unsafe_arena_release_yield_relative() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield_relative)

_impl_._has_bits_[0] &= ~0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.yield_relative_;
_impl_.yield_relative_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::_internal_mutable_yield_relative() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.yield_relative_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
_impl_.yield_relative_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
}
return _impl_.yield_relative_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* OperationItemTrade::mutable_yield_relative() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000008u;
::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_yield_relative();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield_relative)
return _msg;
}
inline void OperationItemTrade::set_allocated_yield_relative(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_relative_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000008u;
} else {
_impl_._has_bits_[0] &= ~0x00000008u;
}

_impl_.yield_relative_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield_relative)
}

// -------------------------------------------------------------------

// PositionsStreamRequest

// repeated string accounts = 1;
inline int PositionsStreamRequest::_internal_accounts_size() const {
return _internal_accounts().size();
}
inline int PositionsStreamRequest::accounts_size() const {
return _internal_accounts_size();
}
inline void PositionsStreamRequest::clear_accounts() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.accounts_.Clear();
}
inline std::string* PositionsStreamRequest::add_accounts()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
std::string* _s = _internal_mutable_accounts()->Add();
// @@protoc_insertion_point(field_add_mutable:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
return _s;
}
inline const std::string& PositionsStreamRequest::accounts(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
return _internal_accounts().Get(index);
}
inline std::string* PositionsStreamRequest::mutable_accounts(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
return _internal_mutable_accounts()->Mutable(index);
}
inline void PositionsStreamRequest::set_accounts(int index, const std::string& value) {
_internal_mutable_accounts()->Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::set_accounts(int index, std::string&& value) {
_internal_mutable_accounts()->Mutable(index)->assign(std::move(value));
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::set_accounts(int index, const char* value) {
ABSL_DCHECK(value != nullptr);
_internal_mutable_accounts()->Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::set_accounts(int index, const char* value,
std::size_t size) {
_internal_mutable_accounts()->Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::set_accounts(int index, absl::string_view value) {
_internal_mutable_accounts()->Mutable(index)->assign(
value.data(), value.size());
// @@protoc_insertion_point(field_set_string_piece:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(value);
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(std::string&& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add(std::move(value));
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(const char* value) {
ABSL_DCHECK(value != nullptr);
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(value);
// @@protoc_insertion_point(field_add_char:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(const char* value, std::size_t size) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline void PositionsStreamRequest::add_accounts(absl::string_view value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_internal_mutable_accounts()->Add()->assign(value.data(),
value.size());
// @@protoc_insertion_point(field_add_string_piece:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PositionsStreamRequest::accounts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
return _internal_accounts();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PositionsStreamRequest::mutable_accounts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionsStreamRequest.accounts)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_accounts();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PositionsStreamRequest::_internal_accounts() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.accounts_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PositionsStreamRequest::_internal_mutable_accounts() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// PositionsStreamResponse

// .tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult subscriptions = 1;
inline bool PositionsStreamResponse::has_subscriptions() const {
return payload_case() == kSubscriptions;
}
inline bool PositionsStreamResponse::_internal_has_subscriptions() const {
return payload_case() == kSubscriptions;
}
inline void PositionsStreamResponse::set_has_subscriptions() {
_impl_._oneof_case_[0] = kSubscriptions;
}
inline void PositionsStreamResponse::clear_subscriptions() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kSubscriptions) {
if (GetArena() == nullptr) {
delete _impl_.payload_.subscriptions_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::release_subscriptions() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
if (payload_case() == kSubscriptions) {
clear_has_payload();
auto* temp = _impl_.payload_.subscriptions_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.subscriptions_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& PositionsStreamResponse::_internal_subscriptions() const {
return payload_case() == kSubscriptions ? *_impl_.payload_.subscriptions_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult&>(::tinkoff::public_::invest::api::contract::v1::_PositionsSubscriptionResult_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult& PositionsStreamResponse::subscriptions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
return _internal_subscriptions();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::unsafe_arena_release_subscriptions() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
if (payload_case() == kSubscriptions) {
clear_has_payload();
auto* temp = _impl_.payload_.subscriptions_;
_impl_.payload_.subscriptions_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void PositionsStreamResponse::unsafe_arena_set_allocated_subscriptions(::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_subscriptions();
_impl_.payload_.subscriptions_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::_internal_mutable_subscriptions() {
if (payload_case() != kSubscriptions) {
clear_payload();
set_has_subscriptions();
_impl_.payload_.subscriptions_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult>(GetArena());
}
return _impl_.payload_.subscriptions_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* PositionsStreamResponse::mutable_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionResult* _msg = _internal_mutable_subscriptions();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.subscriptions)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.PositionData position = 2;
inline bool PositionsStreamResponse::has_position() const {
return payload_case() == kPosition;
}
inline bool PositionsStreamResponse::_internal_has_position() const {
return payload_case() == kPosition;
}
inline void PositionsStreamResponse::set_has_position() {
_impl_._oneof_case_[0] = kPosition;
}
inline void PositionsStreamResponse::clear_position() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (payload_case() == kPosition) {
if (GetArena() == nullptr) {
delete _impl_.payload_.position_;
}
clear_has_payload();
}
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::release_position() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.position)
if (payload_case() == kPosition) {
clear_has_payload();
auto* temp = _impl_.payload_.position_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.position_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionData& PositionsStreamResponse::_internal_position() const {
return payload_case() == kPosition ? *_impl_.payload_.position_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PositionData&>(::tinkoff::public_::invest::api::contract::v1::_PositionData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionData& PositionsStreamResponse::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.position)
return _internal_position();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::unsafe_arena_release_position() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.position)
if (payload_case() == kPosition) {
clear_has_payload();
auto* temp = _impl_.payload_.position_;
_impl_.payload_.position_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void PositionsStreamResponse::unsafe_arena_set_allocated_position(::tinkoff::public_::invest::api::contract::v1::PositionData* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_position();
_impl_.payload_.position_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.position)
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::_internal_mutable_position() {
if (payload_case() != kPosition) {
clear_payload();
set_has_position();
_impl_.payload_.position_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::PositionData>(GetArena());
}
return _impl_.payload_.position_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionData* PositionsStreamResponse::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::PositionData* _msg = _internal_mutable_position();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.position)
return _msg;
}

// .tinkoff.public.invest.api.contract.v1.Ping ping = 3;
inline bool PositionsStreamResponse::has_ping() const {
return payload_case() == kPing;
}
inline bool PositionsStreamResponse::_internal_has_ping() const {
return payload_case() == kPing;
}
inline void PositionsStreamResponse::set_has_ping() {
_impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::release_ping() {
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.ping)
if (payload_case() == kPing) {
clear_has_payload();
auto* temp = _impl_.payload_.ping_;
if (GetArena() != nullptr) {
temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
}
_impl_.payload_.ping_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PositionsStreamResponse::_internal_ping() const {
return payload_case() == kPing ? *_impl_.payload_.ping_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Ping&>(::tinkoff::public_::invest::api::contract::v1::_Ping_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Ping& PositionsStreamResponse::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.ping)
return _internal_ping();
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::unsafe_arena_release_ping() {
// @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.ping)
if (payload_case() == kPing) {
clear_has_payload();
auto* temp = _impl_.payload_.ping_;
_impl_.payload_.ping_ = nullptr;
return temp;
} else {
return nullptr;
}
}
inline void PositionsStreamResponse::unsafe_arena_set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* value) {
// We rely on the oneof clear method to free the earlier contents
// of this oneof. We can directly use the pointer we're given to
// set the new value.
clear_payload();
if (value) {
set_has_ping();
_impl_.payload_.ping_ = value;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.ping)
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::_internal_mutable_ping() {
if (payload_case() != kPing) {
clear_payload();
set_has_ping();
_impl_.payload_.ping_ =
::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::Ping>(GetArena());
}
return _impl_.payload_.ping_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Ping* PositionsStreamResponse::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
::tinkoff::public_::invest::api::contract::v1::Ping* _msg = _internal_mutable_ping();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.ping)
return _msg;
}

inline bool PositionsStreamResponse::has_payload() const {
return payload_case() != PAYLOAD_NOT_SET;
}
inline void PositionsStreamResponse::clear_has_payload() {
_impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline PositionsStreamResponse::PayloadCase PositionsStreamResponse::payload_case() const {
return PositionsStreamResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PositionsSubscriptionResult

// repeated .tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus accounts = 1;
inline int PositionsSubscriptionResult::_internal_accounts_size() const {
return _internal_accounts().size();
}
inline int PositionsSubscriptionResult::accounts_size() const {
return _internal_accounts_size();
}
inline void PositionsSubscriptionResult::clear_accounts() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.accounts_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* PositionsSubscriptionResult::mutable_accounts(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
return _internal_mutable_accounts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>* PositionsSubscriptionResult::mutable_accounts()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_accounts();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus& PositionsSubscriptionResult::accounts(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
return _internal_accounts().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* PositionsSubscriptionResult::add_accounts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus* _add = _internal_mutable_accounts()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>& PositionsSubscriptionResult::accounts() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult.accounts)
return _internal_accounts();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>&
PositionsSubscriptionResult::_internal_accounts() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.accounts_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSubscriptionStatus>*
PositionsSubscriptionResult::_internal_mutable_accounts() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// PositionsSubscriptionStatus

// string account_id = 1;
inline void PositionsSubscriptionStatus::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& PositionsSubscriptionStatus::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionsSubscriptionStatus::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
}
inline std::string* PositionsSubscriptionStatus::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
return _s;
}
inline const std::string& PositionsSubscriptionStatus::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void PositionsSubscriptionStatus::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* PositionsSubscriptionStatus::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* PositionsSubscriptionStatus::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
return _impl_.account_id_.Release();
}
inline void PositionsSubscriptionStatus::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.account_id)
}

// .tinkoff.public.invest.api.contract.v1.PositionsAccountSubscriptionStatus subscription_status = 6;
inline void PositionsSubscriptionStatus::clear_subscription_status() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.subscription_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus PositionsSubscriptionStatus::subscription_status() const {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.subscription_status)
return _internal_subscription_status();
}
inline void PositionsSubscriptionStatus::set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value) {
_internal_set_subscription_status(value);
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.subscription_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus PositionsSubscriptionStatus::_internal_subscription_status() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return static_cast<::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus>(_impl_.subscription_status_);
}
inline void PositionsSubscriptionStatus::_internal_set_subscription_status(::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.subscription_status_ = value;
}

// -------------------------------------------------------------------

// PositionData

// string account_id = 1;
inline void PositionData::clear_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.ClearToEmpty();
}
inline const std::string& PositionData::account_id() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionData.account_id)
return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionData::set_account_id(Arg_&& arg,
Args_... args) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
// @@protoc_insertion_point(field_set:tinkoff.public.invest.api.contract.v1.PositionData.account_id)
}
inline std::string* PositionData::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string* _s = _internal_mutable_account_id();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionData.account_id)
return _s;
}
inline const std::string& PositionData::_internal_account_id() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.account_id_.Get();
}
inline void PositionData::_internal_set_account_id(const std::string& value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.Set(value, GetArena());
}
inline std::string* PositionData::_internal_mutable_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* PositionData::release_account_id() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionData.account_id)
return _impl_.account_id_.Release();
}
inline void PositionData::set_allocated_account_id(std::string* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.account_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (_impl_.account_id_.IsDefault()) {
_impl_.account_id_.Set("", GetArena());
}
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionData.account_id)
}

// repeated .tinkoff.public.invest.api.contract.v1.PositionsMoney money = 2;
inline int PositionData::_internal_money_size() const {
return _internal_money().size();
}
inline int PositionData::money_size() const {
return _internal_money_size();
}
inline void PositionData::clear_money() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.money_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* PositionData::mutable_money(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionData.money)
return _internal_mutable_money()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>* PositionData::mutable_money()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionData.money)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_money();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsMoney& PositionData::money(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionData.money)
return _internal_money().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsMoney* PositionData::add_money() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsMoney* _add = _internal_mutable_money()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionData.money)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>& PositionData::money() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionData.money)
return _internal_money();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>&
PositionData::_internal_money() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.money_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsMoney>*
PositionData::_internal_mutable_money() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.money_;
}

// repeated .tinkoff.public.invest.api.contract.v1.PositionsSecurities securities = 3;
inline int PositionData::_internal_securities_size() const {
return _internal_securities().size();
}
inline int PositionData::securities_size() const {
return _internal_securities_size();
}
inline void PositionData::clear_securities() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.securities_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionData::mutable_securities(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionData.securities)
return _internal_mutable_securities()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>* PositionData::mutable_securities()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionData.securities)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_securities();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities& PositionData::securities(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionData.securities)
return _internal_securities().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* PositionData::add_securities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsSecurities* _add = _internal_mutable_securities()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionData.securities)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>& PositionData::securities() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionData.securities)
return _internal_securities();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>&
PositionData::_internal_securities() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.securities_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsSecurities>*
PositionData::_internal_mutable_securities() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.securities_;
}

// repeated .tinkoff.public.invest.api.contract.v1.PositionsFutures futures = 4;
inline int PositionData::_internal_futures_size() const {
return _internal_futures().size();
}
inline int PositionData::futures_size() const {
return _internal_futures_size();
}
inline void PositionData::clear_futures() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.futures_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionData::mutable_futures(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionData.futures)
return _internal_mutable_futures()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>* PositionData::mutable_futures()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionData.futures)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_futures();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsFutures& PositionData::futures(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionData.futures)
return _internal_futures().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsFutures* PositionData::add_futures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsFutures* _add = _internal_mutable_futures()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionData.futures)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>& PositionData::futures() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionData.futures)
return _internal_futures();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>&
PositionData::_internal_futures() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.futures_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsFutures>*
PositionData::_internal_mutable_futures() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.futures_;
}

// repeated .tinkoff.public.invest.api.contract.v1.PositionsOptions options = 5;
inline int PositionData::_internal_options_size() const {
return _internal_options().size();
}
inline int PositionData::options_size() const {
return _internal_options_size();
}
inline void PositionData::clear_options() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
_impl_.options_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionData::mutable_options(int index)
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionData.options)
return _internal_mutable_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>* PositionData::mutable_options()
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_mutable_list:tinkoff.public.invest.api.contract.v1.PositionData.options)
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
return _internal_mutable_options();
}
inline const ::tinkoff::public_::invest::api::contract::v1::PositionsOptions& PositionData::options(int index) const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionData.options)
return _internal_options().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::PositionsOptions* PositionData::add_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
::tinkoff::public_::invest::api::contract::v1::PositionsOptions* _add = _internal_mutable_options()->Add();
// @@protoc_insertion_point(field_add:tinkoff.public.invest.api.contract.v1.PositionData.options)
return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>& PositionData::options() const
ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_list:tinkoff.public.invest.api.contract.v1.PositionData.options)
return _internal_options();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>&
PositionData::_internal_options() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return _impl_.options_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::PositionsOptions>*
PositionData::_internal_mutable_options() {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
return &_impl_.options_;
}

// .google.protobuf.Timestamp date = 6;
inline bool PositionData::has_date() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.date_ != nullptr);
return value;
}
inline const ::google::protobuf::Timestamp& PositionData::_internal_date() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::google::protobuf::Timestamp* p = _impl_.date_;
return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PositionData::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionData.date)
return _internal_date();
}
inline void PositionData::unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PositionData.date)
}
inline ::google::protobuf::Timestamp* PositionData::release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* released = _impl_.date_;
_impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::google::protobuf::Timestamp* PositionData::unsafe_arena_release_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionData.date)

_impl_._has_bits_[0] &= ~0x00000001u;
::google::protobuf::Timestamp* temp = _impl_.date_;
_impl_.date_ = nullptr;
return temp;
}
inline ::google::protobuf::Timestamp* PositionData::_internal_mutable_date() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.date_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
}
return _impl_.date_;
}
inline ::google::protobuf::Timestamp* PositionData::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::google::protobuf::Timestamp* _msg = _internal_mutable_date();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionData.date)
return _msg;
}
inline void PositionData::set_allocated_date(::google::protobuf::Timestamp* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionData.date)
}

// -------------------------------------------------------------------

// PositionsMoney

// .tinkoff.public.invest.api.contract.v1.MoneyValue available_value = 1;
inline bool PositionsMoney::has_available_value() const {
bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
PROTOBUF_ASSUME(!value || _impl_.available_value_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::_internal_available_value() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.available_value_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::available_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsMoney.available_value)
return _internal_available_value();
}
inline void PositionsMoney::unsafe_arena_set_allocated_available_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.available_value_);
}
_impl_.available_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsMoney.available_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::release_available_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.available_value_;
_impl_.available_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::unsafe_arena_release_available_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsMoney.available_value)

_impl_._has_bits_[0] &= ~0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.available_value_;
_impl_.available_value_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::_internal_mutable_available_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.available_value_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.available_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.available_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::mutable_available_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000001u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_available_value();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsMoney.available_value)
return _msg;
}
inline void PositionsMoney::set_allocated_available_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.available_value_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000001u;
} else {
_impl_._has_bits_[0] &= ~0x00000001u;
}

_impl_.available_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsMoney.available_value)
}

// .tinkoff.public.invest.api.contract.v1.MoneyValue blocked_value = 2;
inline bool PositionsMoney::has_blocked_value() const {
bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
PROTOBUF_ASSUME(!value || _impl_.blocked_value_ != nullptr);
return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::_internal_blocked_value() const {
PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.blocked_value_;
return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& PositionsMoney::blocked_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:tinkoff.public.invest.api.contract.v1.PositionsMoney.blocked_value)
return _internal_blocked_value();
}
inline void PositionsMoney::unsafe_arena_set_allocated_blocked_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (GetArena() == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blocked_value_);
}
_impl_.blocked_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
if (value != nullptr) {
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsMoney.blocked_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::release_blocked_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.blocked_value_;
_impl_.blocked_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
if (GetArena() == nullptr) {
delete old;
}
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArena() != nullptr) {
released = ::google::protobuf::internal::DuplicateIfNonNull(released);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::unsafe_arena_release_blocked_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
// @@protoc_insertion_point(field_release:tinkoff.public.invest.api.contract.v1.PositionsMoney.blocked_value)

_impl_._has_bits_[0] &= ~0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.blocked_value_;
_impl_.blocked_value_ = nullptr;
return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::_internal_mutable_blocked_value() {
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (_impl_.blocked_value_ == nullptr) {
auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
_impl_.blocked_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
}
return _impl_.blocked_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* PositionsMoney::mutable_blocked_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
_impl_._has_bits_[0] |= 0x00000002u;
::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_blocked_value();
// @@protoc_insertion_point(field_mutable:tinkoff.public.invest.api.contract.v1.PositionsMoney.blocked_value)
return _msg;
}
inline void PositionsMoney::set_allocated_blocked_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
::google::protobuf::Arena* message_arena = GetArena();
PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
if (message_arena == nullptr) {
delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blocked_value_);
}

if (value != nullptr) {
::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
if (message_arena != submessage_arena) {
value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
}
_impl_._has_bits_[0] |= 0x00000002u;
} else {
_impl_._has_bits_[0] &= ~0x00000002u;
}

_impl_.blocked_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
// @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.PositionsMoney.blocked_value)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest>() {
return ::tinkoff::public_::invest::api::contract::v1::PortfolioRequest_CurrencyRequest_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OperationState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OperationState>() {
return ::tinkoff::public_::invest::api::contract::v1::OperationState_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OperationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OperationType>() {
return ::tinkoff::public_::invest::api::contract::v1::OperationType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus>() {
return ::tinkoff::public_::invest::api::contract::v1::PortfolioSubscriptionStatus_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus>() {
return ::tinkoff::public_::invest::api::contract::v1::PositionsAccountSubscriptionStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_operations_2eproto_2epb_2eh